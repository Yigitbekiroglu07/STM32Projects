
servoMotor1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a80  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009c08  08009c08  0000ac08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c24  08009c24  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c24  08009c24  0000ac24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c2c  08009c2c  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c30  08009c30  0000ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009c34  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a21  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de0  00000000  00000000  00024acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  000288b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001171  00000000  00000000  00029f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024357  00000000  00000000  0002b0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd04  00000000  00000000  0004f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ef7  00000000  00000000  0006d10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141003  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006318  00000000  00000000  00141048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00147360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009bf0 	.word	0x08009bf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009bf0 	.word	0x08009bf0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fce0 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f81a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f98c 	bl	80007e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f880 	bl	80005cc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f8ac 	bl	8000628 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8da 	bl	8000688 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f008 ff36 	bl	8009344 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004d8:	f000 f90c 	bl	80006f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004dc:	2104      	movs	r1, #4
 80004de:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <main+0x3c>)
 80004e0:	f004 fe22 	bl	8005128 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,100);
 80004e4:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <main+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2264      	movs	r2, #100	@ 0x64
 80004ea:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004ec:	f008 ff50 	bl	8009390 <MX_USB_HOST_Process>
 80004f0:	e7fc      	b.n	80004ec <main+0x34>
 80004f2:	bf00      	nop
 80004f4:	2000018c 	.word	0x2000018c

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	@ 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f009 fae4 	bl	8009ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	@ (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	@ (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800055c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000568:	2308      	movs	r3, #8
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	4618      	mov	r0, r3
 8000580:	f003 feda 	bl	8004338 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058a:	f000 fa27 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2105      	movs	r1, #5
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 f93b 	bl	8004828 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 fa10 	bl	80009dc <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	@ 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <MX_I2C1_Init+0x50>)
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <MX_I2C1_Init+0x54>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_I2C1_Init+0x50>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <MX_I2C1_Init+0x58>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_I2C1_Init+0x50>)
 80005ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_I2C1_Init+0x50>)
 800060a:	f003 f8b1 	bl	8003770 <HAL_I2C_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f9e2 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000098 	.word	0x20000098
 8000620:	40005400 	.word	0x40005400
 8000624:	000186a0 	.word	0x000186a0

08000628 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_I2S3_Init+0x54>)
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <MX_I2S3_Init+0x58>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2S3_Init+0x54>)
 8000634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000638:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_I2S3_Init+0x54>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_I2S3_Init+0x54>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800064c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_I2S3_Init+0x54>)
 8000650:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <MX_I2S3_Init+0x5c>)
 8000652:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_I2S3_Init+0x54>)
 8000668:	f003 f9c6 	bl	80039f8 <HAL_I2S_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000672:	f000 f9b3 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000ec 	.word	0x200000ec
 8000680:	40003c00 	.word	0x40003c00
 8000684:	00017700 	.word	0x00017700

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_SPI1_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <MX_SPI1_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_SPI1_Init+0x64>)
 8000694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_SPI1_Init+0x64>)
 80006da:	f004 fbf3 	bl	8004ec4 <HAL_SPI_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 f97a 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000134 	.word	0x20000134
 80006f0:	40013000 	.word	0x40013000

080006f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <MX_TIM2_Init+0xe8>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800072c:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <MX_TIM2_Init+0xe8>)
 800072e:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_TIM2_Init+0xe8>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_TIM2_Init+0xe8>)
 800073c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_TIM2_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <MX_TIM2_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074e:	4823      	ldr	r0, [pc, #140]	@ (80007dc <MX_TIM2_Init+0xe8>)
 8000750:	f004 fc41 	bl	8004fd6 <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800075a:	f000 f93f 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000764:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000768:	4619      	mov	r1, r3
 800076a:	481c      	ldr	r0, [pc, #112]	@ (80007dc <MX_TIM2_Init+0xe8>)
 800076c:	f004 ff56 	bl	800561c <HAL_TIM_ConfigClockSource>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000776:	f000 f931 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800077a:	4818      	ldr	r0, [pc, #96]	@ (80007dc <MX_TIM2_Init+0xe8>)
 800077c:	f004 fc7a 	bl	8005074 <HAL_TIM_PWM_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000786:	f000 f929 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	4619      	mov	r1, r3
 8000798:	4810      	ldr	r0, [pc, #64]	@ (80007dc <MX_TIM2_Init+0xe8>)
 800079a:	f005 fb55 	bl	8005e48 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007a4:	f000 f91a 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a8:	2360      	movs	r3, #96	@ 0x60
 80007aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2204      	movs	r2, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	@ (80007dc <MX_TIM2_Init+0xe8>)
 80007c0:	f004 fe6a 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007ca:	f000 f907 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_TIM2_Init+0xe8>)
 80007d0:	f000 fa68 	bl	8000ca4 <HAL_TIM_MspPostInit>

}
 80007d4:	bf00      	nop
 80007d6:	3738      	adds	r7, #56	@ 0x38
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000018c 	.word	0x2000018c

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	@ 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	4b72      	ldr	r3, [pc, #456]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a71      	ldr	r2, [pc, #452]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b6f      	ldr	r3, [pc, #444]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	4b6b      	ldr	r3, [pc, #428]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a6a      	ldr	r2, [pc, #424]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b68      	ldr	r3, [pc, #416]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b64      	ldr	r3, [pc, #400]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a63      	ldr	r2, [pc, #396]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b61      	ldr	r3, [pc, #388]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b5d      	ldr	r3, [pc, #372]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a5c      	ldr	r2, [pc, #368]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b5a      	ldr	r3, [pc, #360]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b56      	ldr	r3, [pc, #344]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a55      	ldr	r2, [pc, #340]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b53      	ldr	r3, [pc, #332]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b4f      	ldr	r3, [pc, #316]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a4e      	ldr	r2, [pc, #312]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b4c      	ldr	r3, [pc, #304]	@ (80009c4 <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	4849      	ldr	r0, [pc, #292]	@ (80009c8 <MX_GPIO_Init+0x1e8>)
 80008a4:	f000 fe30 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4847      	ldr	r0, [pc, #284]	@ (80009cc <MX_GPIO_Init+0x1ec>)
 80008ae:	f000 fe2b 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	2200      	movs	r2, #0
 80008b4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008b8:	4845      	ldr	r0, [pc, #276]	@ (80009d0 <MX_GPIO_Init+0x1f0>)
 80008ba:	f000 fe25 	bl	8001508 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	483c      	ldr	r0, [pc, #240]	@ (80009c8 <MX_GPIO_Init+0x1e8>)
 80008d6:	f000 fc7b 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4836      	ldr	r0, [pc, #216]	@ (80009cc <MX_GPIO_Init+0x1ec>)
 80008f2:	f000 fc6d 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f6:	2308      	movs	r3, #8
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	482e      	ldr	r0, [pc, #184]	@ (80009cc <MX_GPIO_Init+0x1ec>)
 8000912:	f000 fc5d 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	482a      	ldr	r0, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0x1f4>)
 800092c:	f000 fc50 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000930:	2304      	movs	r3, #4
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	@ (80009d8 <MX_GPIO_Init+0x1f8>)
 8000944:	f000 fc44 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095a:	2305      	movs	r3, #5
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	@ (80009d8 <MX_GPIO_Init+0x1f8>)
 8000966:	f000 fc33 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800096a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800096e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4813      	ldr	r0, [pc, #76]	@ (80009d0 <MX_GPIO_Init+0x1f0>)
 8000984:	f000 fc24 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000988:	2320      	movs	r3, #32
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_GPIO_Init+0x1f0>)
 800099c:	f000 fc18 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_GPIO_Init+0x1e8>)
 80009b6:	f000 fc0b 	bl	80011d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	@ 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 fb90 	bl	800114c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <HAL_I2C_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a76:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <HAL_I2C_MspInit+0x8c>)
 8000a94:	f000 fb9c 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	@ 0x38
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a31      	ldr	r2, [pc, #196]	@ (8000bb8 <HAL_I2S_MspInit+0xf0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d15a      	bne.n	8000bae <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000afc:	23c0      	movs	r3, #192	@ 0xc0
 8000afe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 f899 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b14:	f7ff ff62 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a26      	ldr	r2, [pc, #152]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <HAL_I2S_MspInit+0xf4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <HAL_I2S_MspInit+0xf8>)
 8000b88:	f000 fb22 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b8c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <HAL_I2S_MspInit+0xfc>)
 8000baa:	f000 fb11 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	@ 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40003c00 	.word	0x40003c00
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_SPI_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12b      	bne.n	8000c42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a10      	ldr	r2, [pc, #64]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c22:	23e0      	movs	r3, #224	@ 0xe0
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c32:	2305      	movs	r3, #5
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000c3e:	f000 fac7 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013000 	.word	0x40013000
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c68:	d115      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	201c      	movs	r0, #28
 8000c8c:	f000 fa69 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c90:	201c      	movs	r0, #28
 8000c92:	f000 fa82 	bl	800119a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cc4:	d11d      	bne.n	8000d02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_TIM_MspPostInit+0x68>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a0f      	ldr	r2, [pc, #60]	@ (8000d0c <HAL_TIM_MspPostInit+0x68>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <HAL_TIM_MspPostInit+0x68>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <HAL_TIM_MspPostInit+0x6c>)
 8000cfe:	f000 fa67 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6a:	f000 f8db 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <TIM2_IRQHandler+0x10>)
 8000d7a:	f004 fa9d 	bl	80052b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000018c 	.word	0x2000018c

08000d88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <OTG_FS_IRQHandler+0x10>)
 8000d8e:	f000 feb5 	bl	8001afc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200005b8 	.word	0x200005b8

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f008 fe9a 	bl	8009b04 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200001d4 	.word	0x200001d4
 8000e04:	20000ae0 	.word	0x20000ae0

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f008 fe59 	bl	8009b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fb2b 	bl	80004b8 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e70:	08009c34 	.word	0x08009c34
  ldr r2, =_sbss
 8000e74:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e78:	20000ae0 	.word	0x20000ae0

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f94f 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fd98 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f967 	bl	80011b6 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f92f 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	200001d8 	.word	0x200001d8

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200001d8 	.word	0x200001d8

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e16b      	b.n	80014c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 815a 	bne.w	80014be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80b4 	beq.w	80014be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b60      	ldr	r3, [pc, #384]	@ (80014dc <HAL_GPIO_Init+0x30c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a5f      	ldr	r2, [pc, #380]	@ (80014dc <HAL_GPIO_Init+0x30c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b5d      	ldr	r3, [pc, #372]	@ (80014dc <HAL_GPIO_Init+0x30c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a5b      	ldr	r2, [pc, #364]	@ (80014e0 <HAL_GPIO_Init+0x310>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	@ (80014e4 <HAL_GPIO_Init+0x314>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d02b      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a51      	ldr	r2, [pc, #324]	@ (80014e8 <HAL_GPIO_Init+0x318>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a50      	ldr	r2, [pc, #320]	@ (80014ec <HAL_GPIO_Init+0x31c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	@ (80014f0 <HAL_GPIO_Init+0x320>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	@ (80014f8 <HAL_GPIO_Init+0x328>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <HAL_GPIO_Init+0x32c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <HAL_GPIO_Init+0x330>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x20a>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00e      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013da:	2308      	movs	r3, #8
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x228>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	@ (80014e0 <HAL_GPIO_Init+0x310>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b3b      	ldr	r3, [pc, #236]	@ (8001504 <HAL_GPIO_Init+0x334>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a32      	ldr	r2, [pc, #200]	@ (8001504 <HAL_GPIO_Init+0x334>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <HAL_GPIO_Init+0x334>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a27      	ldr	r2, [pc, #156]	@ (8001504 <HAL_GPIO_Init+0x334>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <HAL_GPIO_Init+0x334>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <HAL_GPIO_Init+0x334>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <HAL_GPIO_Init+0x334>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <HAL_GPIO_Init+0x334>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f ae90 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40021400 	.word	0x40021400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40021c00 	.word	0x40021c00
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af02      	add	r7, sp, #8
 8001540:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e059      	b.n	8001600 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f007 ff4a 	bl	8009400 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800157a:	d102      	bne.n	8001582 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fd63 	bl	8006052 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7c1a      	ldrb	r2, [r3, #16]
 8001594:	f88d 2000 	strb.w	r2, [sp]
 8001598:	3304      	adds	r3, #4
 800159a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159c:	f004 fce4 	bl	8005f68 <USB_CoreInit>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e026      	b.n	8001600 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fd5b 	bl	8006074 <USB_SetCurrentMode>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e017      	b.n	8001600 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7c1a      	ldrb	r2, [r3, #16]
 80015d8:	f88d 2000 	strb.w	r2, [sp]
 80015dc:	3304      	adds	r3, #4
 80015de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e0:	f004 fefe 	bl	80063e0 <USB_HostInit>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2202      	movs	r2, #2
 80015ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e004      	b.n	8001600 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b08b      	sub	sp, #44	@ 0x2c
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	70fb      	strb	r3, [r7, #3]
 800161a:	460b      	mov	r3, r1
 800161c:	70bb      	strb	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001622:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001624:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_HCD_HC_Init+0x2c>
 8001630:	2302      	movs	r3, #2
 8001632:	e09d      	b.n	8001770 <HAL_HCD_HC_Init+0x168>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3319      	adds	r3, #25
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3314      	adds	r3, #20
 8001660:	787a      	ldrb	r2, [r7, #1]
 8001662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3315      	adds	r3, #21
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3326      	adds	r3, #38	@ 0x26
 8001688:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800168c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001696:	b2d8      	uxtb	r0, r3
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3316      	adds	r3, #22
 80016a6:	4602      	mov	r2, r0
 80016a8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fbc8 	bl	8001e44 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da0a      	bge.n	80016d2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3317      	adds	r3, #23
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e009      	b.n	80016e6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	3317      	adds	r3, #23
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 ffdc 	bl	80066a8 <USB_GetHostSpeed>
 80016f0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d10b      	bne.n	8001712 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d107      	bne.n	8001712 <HAL_HCD_HC_Init+0x10a>
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d104      	bne.n	8001712 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2bbc      	cmp	r3, #188	@ 0xbc
 800170c:	d901      	bls.n	8001712 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800170e:	23bc      	movs	r3, #188	@ 0xbc
 8001710:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	3318      	adds	r3, #24
 8001722:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	b298      	uxth	r0, r3
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3328      	adds	r3, #40	@ 0x28
 800173c:	4602      	mov	r2, r0
 800173e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	b29b      	uxth	r3, r3
 8001748:	787c      	ldrb	r4, [r7, #1]
 800174a:	78ba      	ldrb	r2, [r7, #2]
 800174c:	78f9      	ldrb	r1, [r7, #3]
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4623      	mov	r3, r4
 800175e:	f004 ffcb 	bl	80066f8 <USB_HC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}

08001778 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_HCD_HC_Halt+0x1e>
 8001792:	2302      	movs	r3, #2
 8001794:	e00f      	b.n	80017b6 <HAL_HCD_HC_Halt+0x3e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 fb5d 	bl	8006e66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	70fb      	strb	r3, [r7, #3]
 80017d2:	460b      	mov	r3, r1
 80017d4:	70bb      	strb	r3, [r7, #2]
 80017d6:	4613      	mov	r3, r2
 80017d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3317      	adds	r3, #23
 80017ea:	78ba      	ldrb	r2, [r7, #2]
 80017ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3326      	adds	r3, #38	@ 0x26
 80017fe:	787a      	ldrb	r2, [r7, #1]
 8001800:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001802:	7c3b      	ldrb	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d114      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	332a      	adds	r3, #42	@ 0x2a
 8001818:	2203      	movs	r2, #3
 800181a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	3319      	adds	r3, #25
 800182c:	7f3a      	ldrb	r2, [r7, #28]
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e009      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	332a      	adds	r3, #42	@ 0x2a
 8001842:	2202      	movs	r2, #2
 8001844:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001846:	787b      	ldrb	r3, [r7, #1]
 8001848:	2b03      	cmp	r3, #3
 800184a:	f200 8102 	bhi.w	8001a52 <HAL_HCD_HC_SubmitRequest+0x292>
 800184e:	a201      	add	r2, pc, #4	@ (adr r2, 8001854 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001865 	.word	0x08001865
 8001858:	08001a3d 	.word	0x08001a3d
 800185c:	08001929 	.word	0x08001929
 8001860:	080019b3 	.word	0x080019b3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001864:	7c3b      	ldrb	r3, [r7, #16]
 8001866:	2b01      	cmp	r3, #1
 8001868:	f040 80f5 	bne.w	8001a56 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d12d      	bne.n	80018ce <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001872:	8b3b      	ldrh	r3, [r7, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	333d      	adds	r3, #61	@ 0x3d
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	333d      	adds	r3, #61	@ 0x3d
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10a      	bne.n	80018b8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	332a      	adds	r3, #42	@ 0x2a
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018b6:	e0ce      	b.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	332a      	adds	r3, #42	@ 0x2a
 80018c8:	2202      	movs	r2, #2
 80018ca:	701a      	strb	r2, [r3, #0]
      break;
 80018cc:	e0c3      	b.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	331a      	adds	r3, #26
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	f040 80b8 	bne.w	8001a56 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	333c      	adds	r3, #60	@ 0x3c
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10a      	bne.n	8001912 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	332a      	adds	r3, #42	@ 0x2a
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
      break;
 8001910:	e0a1      	b.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	332a      	adds	r3, #42	@ 0x2a
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	e096      	b.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001928:	78bb      	ldrb	r3, [r7, #2]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d120      	bne.n	8001970 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	333d      	adds	r3, #61	@ 0x3d
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10a      	bne.n	800195a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	332a      	adds	r3, #42	@ 0x2a
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001958:	e07e      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	332a      	adds	r3, #42	@ 0x2a
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]
      break;
 800196e:	e073      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	333c      	adds	r3, #60	@ 0x3c
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10a      	bne.n	800199c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	332a      	adds	r3, #42	@ 0x2a
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e05d      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	332a      	adds	r3, #42	@ 0x2a
 80019ac:	2202      	movs	r2, #2
 80019ae:	701a      	strb	r2, [r3, #0]
      break;
 80019b0:	e052      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019b2:	78bb      	ldrb	r3, [r7, #2]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d120      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	333d      	adds	r3, #61	@ 0x3d
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10a      	bne.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	332a      	adds	r3, #42	@ 0x2a
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019e2:	e039      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332a      	adds	r3, #42	@ 0x2a
 80019f4:	2202      	movs	r2, #2
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e02e      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	333c      	adds	r3, #60	@ 0x3c
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	332a      	adds	r3, #42	@ 0x2a
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
      break;
 8001a24:	e018      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	332a      	adds	r3, #42	@ 0x2a
 8001a36:	2202      	movs	r2, #2
 8001a38:	701a      	strb	r2, [r3, #0]
      break;
 8001a3a:	e00d      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	332a      	adds	r3, #42	@ 0x2a
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
      break;
 8001a50:	e002      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a56:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	332c      	adds	r3, #44	@ 0x2c
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	8b39      	ldrh	r1, [r7, #24]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4403      	add	r3, r0
 8001a7c:	3334      	adds	r3, #52	@ 0x34
 8001a7e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	334c      	adds	r3, #76	@ 0x4c
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3338      	adds	r3, #56	@ 0x38
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3315      	adds	r3, #21
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	334d      	adds	r3, #77	@ 0x4d
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3310      	adds	r3, #16
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	1d19      	adds	r1, r3, #4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	799b      	ldrb	r3, [r3, #6]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f004 ff30 	bl	8006950 <USB_HC_StartXfer>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop

08001afc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fc24 	bl	8006360 <USB_GetMode>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	f040 80fb 	bne.w	8001d16 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 fbe7 	bl	80062f8 <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80f1 	beq.w	8001d14 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fbde 	bl	80062f8 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b46:	d104      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fbce 	bl	80062f8 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b66:	d104      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fbbe 	bl	80062f8 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b86:	d104      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 fbae 	bl	80062f8 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d103      	bne.n	8001bae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2202      	movs	r2, #2
 8001bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fba0 	bl	80062f8 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bc2:	d120      	bne.n	8001c06 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bcc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d113      	bne.n	8001c06 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bde:	2110      	movs	r1, #16
 8001be0:	6938      	ldr	r0, [r7, #16]
 8001be2:	f004 fa93 	bl	800610c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001be6:	6938      	ldr	r0, [r7, #16]
 8001be8:	f004 fac2 	bl	8006170 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7a5b      	ldrb	r3, [r3, #9]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d105      	bne.n	8001c00 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fcb4 	bl	8006568 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f007 fc7b 	bl	80094fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 fb74 	bl	80062f8 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c1a:	d102      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f001 fd33 	bl	8003688 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 fb66 	bl	80062f8 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d106      	bne.n	8001c44 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f007 fc44 	bl	80094c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2208      	movs	r2, #8
 8001c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fb55 	bl	80062f8 <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c58:	d139      	bne.n	8001cce <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f005 f8f0 	bl	8006e44 <USB_HC_ReadInterrupt>
 8001c64:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e025      	b.n	8001cb8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d018      	beq.n	8001cb2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c96:	d106      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f905 	bl	8001eae <HCD_HC_IN_IRQHandler>
 8001ca4:	e005      	b.n	8001cb2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 ff67 	bl	8002b80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	795b      	ldrb	r3, [r3, #5]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d3d3      	bcc.n	8001c6c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fb10 	bl	80062f8 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d101      	bne.n	8001ce6 <HAL_HCD_IRQHandler+0x1ea>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_HCD_IRQHandler+0x1ec>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d014      	beq.n	8001d16 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0210 	bic.w	r2, r2, #16
 8001cfa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f001 fbe4 	bl	80034ca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0210 	orr.w	r2, r2, #16
 8001d10:	619a      	str	r2, [r3, #24]
 8001d12:	e000      	b.n	8001d16 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d14:	bf00      	nop
    }
  }
}
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_HCD_Start+0x16>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e013      	b.n	8001d5a <HAL_HCD_Start+0x3e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 fc78 	bl	8006636 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 f970 	bl	8006030 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_HCD_Stop+0x16>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e00d      	b.n	8001d94 <HAL_HCD_Stop+0x32>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f005 f9cb 	bl	8007120 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 fc1a 	bl	80065e2 <USB_ResetPort>
 8001dae:	4603      	mov	r3, r0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	334c      	adds	r3, #76	@ 0x4c
 8001dd4:	781b      	ldrb	r3, [r3, #0]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3338      	adds	r3, #56	@ 0x38
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 fc5c 	bl	80066d6 <USB_GetCurrentFrame>
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 fc37 	bl	80066a8 <USB_GetHostSpeed>
 8001e3a:	4603      	mov	r3, r0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	331a      	adds	r3, #26
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	331b      	adds	r3, #27
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3325      	adds	r3, #37	@ 0x25
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3324      	adds	r3, #36	@ 0x24
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 fa26 	bl	800631e <USB_ReadChInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d11a      	bne.n	8001f12 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2304      	movs	r3, #4
 8001eec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	334d      	adds	r3, #77	@ 0x4d
 8001efe:	2207      	movs	r2, #7
 8001f00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f004 ffab 	bl	8006e66 <USB_HC_Halt>
 8001f10:	e09e      	b.n	8002050 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f9ff 	bl	800631e <USB_ReadChInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2a:	d11b      	bne.n	8001f64 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	334d      	adds	r3, #77	@ 0x4d
 8001f50:	2208      	movs	r2, #8
 8001f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 ff82 	bl	8006e66 <USB_HC_Halt>
 8001f62:	e075      	b.n	8002050 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 f9d6 	bl	800631e <USB_ReadChInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d11a      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	334d      	adds	r3, #77	@ 0x4d
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 ff5b 	bl	8006e66 <USB_HC_Halt>
 8001fb0:	e04e      	b.n	8002050 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 f9af 	bl	800631e <USB_ReadChInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fca:	d11b      	bne.n	8002004 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	334d      	adds	r3, #77	@ 0x4d
 8001ff0:	2209      	movs	r2, #9
 8001ff2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 ff32 	bl	8006e66 <USB_HC_Halt>
 8002002:	e025      	b.n	8002050 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f004 f986 	bl	800631e <USB_ReadChInterrupts>
 8002012:	4603      	mov	r3, r0
 8002014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002018:	2b80      	cmp	r3, #128	@ 0x80
 800201a:	d119      	bne.n	8002050 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002028:	461a      	mov	r2, r3
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	334d      	adds	r3, #77	@ 0x4d
 800203e:	2207      	movs	r2, #7
 8002040:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f004 ff0b 	bl	8006e66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f004 f960 	bl	800631e <USB_ReadChInterrupts>
 800205e:	4603      	mov	r3, r0
 8002060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002068:	d112      	bne.n	8002090 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f004 fef7 	bl	8006e66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002084:	461a      	mov	r2, r3
 8002086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800208a:	6093      	str	r3, [r2, #8]
 800208c:	f000 bd75 	b.w	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f004 f940 	bl	800631e <USB_ReadChInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f040 8128 	bne.w	80022fa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	2320      	movs	r3, #32
 80020ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	331b      	adds	r3, #27
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d119      	bne.n	8002106 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	331b      	adds	r3, #27
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	0151      	lsls	r1, r2, #5
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	440a      	add	r2, r1
 80020fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002104:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	799b      	ldrb	r3, [r3, #6]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01b      	beq.n	8002146 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3330      	adds	r3, #48	@ 0x30
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	1ac9      	subs	r1, r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4403      	add	r3, r0
 8002142:	3338      	adds	r3, #56	@ 0x38
 8002144:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	334d      	adds	r3, #77	@ 0x4d
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3344      	adds	r3, #68	@ 0x44
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217a:	461a      	mov	r2, r3
 800217c:	2301      	movs	r3, #1
 800217e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	3326      	adds	r3, #38	@ 0x26
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3326      	adds	r3, #38	@ 0x26
 80021a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d110      	bne.n	80021ce <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f004 fe56 	bl	8006e66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	2310      	movs	r3, #16
 80021ca:	6093      	str	r3, [r2, #8]
 80021cc:	e03d      	b.n	800224a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3326      	adds	r3, #38	@ 0x26
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d00a      	beq.n	80021fa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3326      	adds	r3, #38	@ 0x26
 80021f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d127      	bne.n	800224a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	440a      	add	r2, r1
 8002210:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002214:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002218:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	334c      	adds	r3, #76	@ 0x4c
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	334c      	adds	r3, #76	@ 0x4c
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f007 f967 	bl	8009518 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	799b      	ldrb	r3, [r3, #6]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d13b      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3338      	adds	r3, #56	@ 0x38
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4403      	add	r3, r0
 8002272:	3328      	adds	r3, #40	@ 0x28
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	440b      	add	r3, r1
 8002278:	1e59      	subs	r1, r3, #1
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4403      	add	r3, r0
 8002288:	3328      	adds	r3, #40	@ 0x28
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8470 	beq.w	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	333c      	adds	r3, #60	@ 0x3c
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2d8      	uxtb	r0, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	@ 0x3c
 80022c2:	4602      	mov	r2, r0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	f000 bc58 	b.w	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	333c      	adds	r3, #60	@ 0x3c
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2d8      	uxtb	r0, r3
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	333c      	adds	r3, #60	@ 0x3c
 80022f2:	4602      	mov	r2, r0
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	f000 bc40 	b.w	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f004 f80b 	bl	800631e <USB_ReadChInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b20      	cmp	r3, #32
 8002310:	d131      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231e:	461a      	mov	r2, r3
 8002320:	2320      	movs	r3, #32
 8002322:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	331a      	adds	r3, #26
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	f040 841f 	bne.w	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	331b      	adds	r3, #27
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334d      	adds	r3, #77	@ 0x4d
 8002360:	2203      	movs	r2, #3
 8002362:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f004 fd7a 	bl	8006e66 <USB_HC_Halt>
 8002372:	f000 bc02 	b.w	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f003 ffcd 	bl	800631e <USB_ReadChInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	f040 8305 	bne.w	800299a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800239c:	461a      	mov	r2, r3
 800239e:	2302      	movs	r3, #2
 80023a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	334d      	adds	r3, #77	@ 0x4d
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d114      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	334d      	adds	r3, #77	@ 0x4d
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	334c      	adds	r3, #76	@ 0x4c
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e2cc      	b.n	800297c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	334d      	adds	r3, #77	@ 0x4d
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	d114      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334d      	adds	r3, #77	@ 0x4d
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	334c      	adds	r3, #76	@ 0x4c
 800241c:	2205      	movs	r2, #5
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e2ac      	b.n	800297c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	334d      	adds	r3, #77	@ 0x4d
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b07      	cmp	r3, #7
 8002436:	d00b      	beq.n	8002450 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	334d      	adds	r3, #77	@ 0x4d
 8002448:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800244a:	2b09      	cmp	r3, #9
 800244c:	f040 80a6 	bne.w	800259c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	334d      	adds	r3, #77	@ 0x4d
 8002460:	2202      	movs	r2, #2
 8002462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3344      	adds	r3, #68	@ 0x44
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4403      	add	r3, r0
 8002484:	3344      	adds	r3, #68	@ 0x44
 8002486:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3344      	adds	r3, #68	@ 0x44
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d943      	bls.n	8002526 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3344      	adds	r3, #68	@ 0x44
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	331a      	adds	r3, #26
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d123      	bne.n	8002510 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	331b      	adds	r3, #27
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	331c      	adds	r3, #28
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	440a      	add	r2, r1
 8002506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800250a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	334c      	adds	r3, #76	@ 0x4c
 8002520:	2204      	movs	r2, #4
 8002522:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002524:	e229      	b.n	800297a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	334c      	adds	r3, #76	@ 0x4c
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3326      	adds	r3, #38	@ 0x26
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3326      	adds	r3, #38	@ 0x26
 8002560:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002562:	2b02      	cmp	r3, #2
 8002564:	f040 8209 	bne.w	800297a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800257e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002586:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002594:	461a      	mov	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800259a:	e1ee      	b.n	800297a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	334d      	adds	r3, #77	@ 0x4d
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	f040 80c8 	bne.w	8002744 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	334d      	adds	r3, #77	@ 0x4d
 80025c4:	2202      	movs	r2, #2
 80025c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	331b      	adds	r3, #27
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	f040 81ce 	bne.w	800297c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3326      	adds	r3, #38	@ 0x26
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d16b      	bne.n	80026ce <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3348      	adds	r3, #72	@ 0x48
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1c59      	adds	r1, r3, #1
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4403      	add	r3, r0
 8002616:	3348      	adds	r3, #72	@ 0x48
 8002618:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3348      	adds	r3, #72	@ 0x48
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d943      	bls.n	80026b8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3348      	adds	r3, #72	@ 0x48
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	331b      	adds	r3, #27
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3344      	adds	r3, #68	@ 0x44
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d809      	bhi.n	8002682 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	331c      	adds	r3, #28
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	0151      	lsls	r1, r2, #5
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	440a      	add	r2, r1
 8002698:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800269c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	334c      	adds	r3, #76	@ 0x4c
 80026b2:	2204      	movs	r2, #4
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e014      	b.n	80026e2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334c      	adds	r3, #76	@ 0x4c
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e009      	b.n	80026e2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	334c      	adds	r3, #76	@ 0x4c
 80026de:	2202      	movs	r2, #2
 80026e0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3326      	adds	r3, #38	@ 0x26
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3326      	adds	r3, #38	@ 0x26
 8002708:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270a:	2b02      	cmp	r3, #2
 800270c:	f040 8136 	bne.w	800297c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002726:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800272e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273c:	461a      	mov	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e11b      	b.n	800297c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334d      	adds	r3, #77	@ 0x4d
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b03      	cmp	r3, #3
 8002758:	f040 8081 	bne.w	800285e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	334d      	adds	r3, #77	@ 0x4d
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	331b      	adds	r3, #27
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	f040 80fa 	bne.w	800297c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	@ 0x4c
 8002798:	2202      	movs	r2, #2
 800279a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	0151      	lsls	r1, r2, #5
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	440a      	add	r2, r1
 80027b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ba:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	0151      	lsls	r1, r2, #5
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	440a      	add	r2, r1
 80027d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027da:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	0151      	lsls	r1, r2, #5
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	440a      	add	r2, r1
 80027f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027f6:	f023 0320 	bic.w	r3, r3, #32
 80027fa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3326      	adds	r3, #38	@ 0x26
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3326      	adds	r3, #38	@ 0x26
 8002822:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002824:	2b02      	cmp	r3, #2
 8002826:	f040 80a9 	bne.w	800297c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002840:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002848:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e08e      	b.n	800297c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	334d      	adds	r3, #77	@ 0x4d
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d143      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334c      	adds	r3, #76	@ 0x4c
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3326      	adds	r3, #38	@ 0x26
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3326      	adds	r3, #38	@ 0x26
 80028c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d159      	bne.n	800297c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e03f      	b.n	800297c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	334d      	adds	r3, #77	@ 0x4d
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b08      	cmp	r3, #8
 8002910:	d126      	bne.n	8002960 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	334d      	adds	r3, #77	@ 0x4d
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3344      	adds	r3, #68	@ 0x44
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1c59      	adds	r1, r3, #1
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4403      	add	r3, r0
 8002946:	3344      	adds	r3, #68	@ 0x44
 8002948:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	334c      	adds	r3, #76	@ 0x4c
 800295a:	2204      	movs	r2, #4
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e00d      	b.n	800297c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	334d      	adds	r3, #77	@ 0x4d
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b02      	cmp	r3, #2
 8002974:	f000 8100 	beq.w	8002b78 <HCD_HC_IN_IRQHandler+0xcca>
 8002978:	e000      	b.n	800297c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800297a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334c      	adds	r3, #76	@ 0x4c
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f006 fdc0 	bl	8009518 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002998:	e0ef      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fcbb 	bl	800631e <USB_ReadChInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ae:	2b40      	cmp	r3, #64	@ 0x40
 80029b0:	d12f      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	2340      	movs	r3, #64	@ 0x40
 80029c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334d      	adds	r3, #77	@ 0x4d
 80029d4:	2205      	movs	r2, #5
 80029d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	331a      	adds	r3, #26
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3344      	adds	r3, #68	@ 0x44
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 fa2b 	bl	8006e66 <USB_HC_Halt>
 8002a10:	e0b3      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fc7f 	bl	800631e <USB_ReadChInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	f040 80a7 	bne.w	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3326      	adds	r3, #38	@ 0x26
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d11b      	bne.n	8002a7a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3344      	adds	r3, #68	@ 0x44
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334d      	adds	r3, #77	@ 0x4d
 8002a66:	2204      	movs	r2, #4
 8002a68:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 f9f7 	bl	8006e66 <USB_HC_Halt>
 8002a78:	e03f      	b.n	8002afa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3326      	adds	r3, #38	@ 0x26
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3326      	adds	r3, #38	@ 0x26
 8002aa0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d129      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3344      	adds	r3, #68	@ 0x44
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	799b      	ldrb	r3, [r3, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	331b      	adds	r3, #27
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d110      	bne.n	8002afa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	@ 0x4d
 8002ae8:	2204      	movs	r2, #4
 8002aea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 f9b6 	bl	8006e66 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	331b      	adds	r3, #27
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d129      	bne.n	8002b64 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	331b      	adds	r3, #27
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	0151      	lsls	r1, r2, #5
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	440a      	add	r2, r1
 8002b3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b42:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	2310      	movs	r3, #16
 8002b74:	6093      	str	r3, [r2, #8]
 8002b76:	e000      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b78:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 fbbd 	bl	800631e <USB_ReadChInterrupts>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d11b      	bne.n	8002be6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	334d      	adds	r3, #77	@ 0x4d
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 f942 	bl	8006e66 <USB_HC_Halt>
 8002be2:	f000 bc6f 	b.w	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fb95 	bl	800631e <USB_ReadChInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	f040 8082 	bne.w	8002d04 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2320      	movs	r3, #32
 8002c10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3319      	adds	r3, #25
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d124      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3319      	adds	r3, #25
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334c      	adds	r3, #76	@ 0x4c
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334d      	adds	r3, #77	@ 0x4d
 8002c60:	2203      	movs	r2, #3
 8002c62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 f8fa 	bl	8006e66 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	331a      	adds	r3, #26
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	f040 841d 	bne.w	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	331b      	adds	r3, #27
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 8411 	bne.w	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3326      	adds	r3, #38	@ 0x26
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d009      	beq.n	8002ccc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	331b      	adds	r3, #27
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	334d      	adds	r3, #77	@ 0x4d
 8002cdc:	2203      	movs	r2, #3
 8002cde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 f8bc 	bl	8006e66 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3344      	adds	r3, #68	@ 0x44
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e3df      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fb06 	bl	800631e <USB_ReadChInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d1c:	d111      	bne.n	8002d42 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d30:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 f893 	bl	8006e66 <USB_HC_Halt>
 8002d40:	e3c0      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fae7 	bl	800631e <USB_ReadChInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d168      	bne.n	8002e2c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3344      	adds	r3, #68	@ 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fad1 	bl	800631e <USB_ReadChInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d82:	2b40      	cmp	r3, #64	@ 0x40
 8002d84:	d112      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3319      	adds	r3, #25
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da6:	461a      	mov	r2, r3
 8002da8:	2340      	movs	r3, #64	@ 0x40
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	331b      	adds	r3, #27
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	331b      	adds	r3, #27
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e02:	461a      	mov	r2, r3
 8002e04:	2301      	movs	r3, #1
 8002e06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334d      	adds	r3, #77	@ 0x4d
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 f81e 	bl	8006e66 <USB_HC_Halt>
 8002e2a:	e34b      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 fa72 	bl	800631e <USB_ReadChInterrupts>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e40:	2b40      	cmp	r3, #64	@ 0x40
 8002e42:	d139      	bne.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334d      	adds	r3, #77	@ 0x4d
 8002e54:	2205      	movs	r2, #5
 8002e56:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	331a      	adds	r3, #26
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3319      	adds	r3, #25
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3344      	adds	r3, #68	@ 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 ffe1 	bl	8006e66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2340      	movs	r3, #64	@ 0x40
 8002eb4:	6093      	str	r3, [r2, #8]
 8002eb6:	e305      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fa2c 	bl	800631e <USB_ReadChInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d11a      	bne.n	8002f06 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	2308      	movs	r3, #8
 8002ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	334d      	adds	r3, #77	@ 0x4d
 8002ef2:	2206      	movs	r2, #6
 8002ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 ffb1 	bl	8006e66 <USB_HC_Halt>
 8002f04:	e2de      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fa05 	bl	800631e <USB_ReadChInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d144      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3344      	adds	r3, #68	@ 0x44
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	334d      	adds	r3, #77	@ 0x4d
 8002f42:	2204      	movs	r2, #4
 8002f44:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3319      	adds	r3, #25
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d114      	bne.n	8002f86 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3319      	adds	r3, #25
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 ff69 	bl	8006e66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	6093      	str	r3, [r2, #8]
 8002fa6:	e28d      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f003 f9b4 	bl	800631e <USB_ReadChInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbc:	2b80      	cmp	r3, #128	@ 0x80
 8002fbe:	d169      	bne.n	8003094 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	799b      	ldrb	r3, [r3, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d111      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	334d      	adds	r3, #77	@ 0x4d
 8002fd8:	2207      	movs	r2, #7
 8002fda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 ff3e 	bl	8006e66 <USB_HC_Halt>
 8002fea:	e049      	b.n	8003080 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3344      	adds	r3, #68	@ 0x44
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	1c59      	adds	r1, r3, #1
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4403      	add	r3, r0
 800300c:	3344      	adds	r3, #68	@ 0x44
 800300e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3344      	adds	r3, #68	@ 0x44
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d922      	bls.n	800306c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3344      	adds	r3, #68	@ 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	334c      	adds	r3, #76	@ 0x4c
 800304a:	2204      	movs	r2, #4
 800304c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	334c      	adds	r3, #76	@ 0x4c
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f006 fa57 	bl	8009518 <HAL_HCD_HC_NotifyURBChange_Callback>
 800306a:	e009      	b.n	8003080 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	334c      	adds	r3, #76	@ 0x4c
 800307c:	2202      	movs	r2, #2
 800307e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800308c:	461a      	mov	r2, r3
 800308e:	2380      	movs	r3, #128	@ 0x80
 8003090:	6093      	str	r3, [r2, #8]
 8003092:	e217      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f003 f93e 	bl	800631e <USB_ReadChInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ac:	d11b      	bne.n	80030e6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334d      	adds	r3, #77	@ 0x4d
 80030be:	2209      	movs	r2, #9
 80030c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 fecb 	bl	8006e66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030e2:	6093      	str	r3, [r2, #8]
 80030e4:	e1ee      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 f915 	bl	800631e <USB_ReadChInterrupts>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	f040 81df 	bne.w	80034be <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	2302      	movs	r3, #2
 8003110:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	334d      	adds	r3, #77	@ 0x4d
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 8093 	bne.w	8003250 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	@ 0x4d
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334c      	adds	r3, #76	@ 0x4c
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3326      	adds	r3, #38	@ 0x26
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d00b      	beq.n	8003180 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3326      	adds	r3, #38	@ 0x26
 8003178:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800317a:	2b03      	cmp	r3, #3
 800317c:	f040 8190 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	799b      	ldrb	r3, [r3, #6]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d115      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	333d      	adds	r3, #61	@ 0x3d
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	f083 0301 	eor.w	r3, r3, #1
 80031a0:	b2d8      	uxtb	r0, r3
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	333d      	adds	r3, #61	@ 0x3d
 80031b0:	4602      	mov	r2, r0
 80031b2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	799b      	ldrb	r3, [r3, #6]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 8171 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3334      	adds	r3, #52	@ 0x34
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8165 	beq.w	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	3334      	adds	r3, #52	@ 0x34
 80031e6:	6819      	ldr	r1, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4403      	add	r3, r0
 80031f6:	3328      	adds	r3, #40	@ 0x28
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	440b      	add	r3, r1
 80031fc:	1e59      	subs	r1, r3, #1
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4403      	add	r3, r0
 800320c:	3328      	adds	r3, #40	@ 0x28
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	fbb1 f3f3 	udiv	r3, r1, r3
 8003214:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 813f 	beq.w	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	333d      	adds	r3, #61	@ 0x3d
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	f083 0301 	eor.w	r3, r3, #1
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	333d      	adds	r3, #61	@ 0x3d
 800324a:	4602      	mov	r2, r0
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e127      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334d      	adds	r3, #77	@ 0x4d
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d120      	bne.n	80032a8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	331b      	adds	r3, #27
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	f040 8107 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	334c      	adds	r3, #76	@ 0x4c
 80032a2:	2202      	movs	r2, #2
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e0fb      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	334d      	adds	r3, #77	@ 0x4d
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d13a      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	334d      	adds	r3, #77	@ 0x4d
 80032ce:	2202      	movs	r2, #2
 80032d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334c      	adds	r3, #76	@ 0x4c
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	331b      	adds	r3, #27
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 80d1 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	331b      	adds	r3, #27
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	0151      	lsls	r1, r2, #5
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	440a      	add	r2, r1
 8003328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800332c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003330:	6053      	str	r3, [r2, #4]
 8003332:	e0b5      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	334d      	adds	r3, #77	@ 0x4d
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b05      	cmp	r3, #5
 8003348:	d114      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	334d      	adds	r3, #77	@ 0x4d
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	334c      	adds	r3, #76	@ 0x4c
 800336e:	2202      	movs	r2, #2
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e095      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334d      	adds	r3, #77	@ 0x4d
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b06      	cmp	r3, #6
 8003388:	d114      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334d      	adds	r3, #77	@ 0x4d
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334c      	adds	r3, #76	@ 0x4c
 80033ae:	2205      	movs	r2, #5
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e075      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334d      	adds	r3, #77	@ 0x4d
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b07      	cmp	r3, #7
 80033c8:	d00a      	beq.n	80033e0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334d      	adds	r3, #77	@ 0x4d
 80033da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033dc:	2b09      	cmp	r3, #9
 80033de:	d170      	bne.n	80034c2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334d      	adds	r3, #77	@ 0x4d
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3344      	adds	r3, #68	@ 0x44
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1c59      	adds	r1, r3, #1
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4403      	add	r3, r0
 8003414:	3344      	adds	r3, #68	@ 0x44
 8003416:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3344      	adds	r3, #68	@ 0x44
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d914      	bls.n	8003458 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3344      	adds	r3, #68	@ 0x44
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	334c      	adds	r3, #76	@ 0x4c
 8003452:	2204      	movs	r2, #4
 8003454:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003456:	e022      	b.n	800349e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	334c      	adds	r3, #76	@ 0x4c
 8003468:	2202      	movs	r2, #2
 800346a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003482:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800348a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003498:	461a      	mov	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800349e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334c      	adds	r3, #76	@ 0x4c
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f006 f82e 	bl	8009518 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034bc:	e002      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80034c2:	bf00      	nop
  }
}
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b08a      	sub	sp, #40	@ 0x28
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	0c5b      	lsrs	r3, r3, #17
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d004      	beq.n	8003510 <HCD_RXQLVL_IRQHandler+0x46>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b05      	cmp	r3, #5
 800350a:	f000 80b6 	beq.w	800367a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800350e:	e0b7      	b.n	8003680 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80b3 	beq.w	800367e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	332c      	adds	r3, #44	@ 0x2c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80a7 	beq.w	800367e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3338      	adds	r3, #56	@ 0x38
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	18d1      	adds	r1, r2, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4403      	add	r3, r0
 8003554:	3334      	adds	r3, #52	@ 0x34
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4299      	cmp	r1, r3
 800355a:	f200 8083 	bhi.w	8003664 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	332c      	adds	r3, #44	@ 0x2c
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	b292      	uxth	r2, r2
 8003578:	4619      	mov	r1, r3
 800357a:	f002 fe65 	bl	8006248 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	332c      	adds	r3, #44	@ 0x2c
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	18d1      	adds	r1, r2, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4403      	add	r3, r0
 80035a2:	332c      	adds	r3, #44	@ 0x2c
 80035a4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3338      	adds	r3, #56	@ 0x38
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	18d1      	adds	r1, r2, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4403      	add	r3, r0
 80035ca:	3338      	adds	r3, #56	@ 0x38
 80035cc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	0cdb      	lsrs	r3, r3, #19
 80035de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3328      	adds	r3, #40	@ 0x28
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d13f      	bne.n	800367e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03c      	beq.n	800367e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800361a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003622:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	333c      	adds	r3, #60	@ 0x3c
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f083 0301 	eor.w	r3, r3, #1
 800364c:	b2d8      	uxtb	r0, r3
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	333c      	adds	r3, #60	@ 0x3c
 800365e:	4602      	mov	r2, r0
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	e00c      	b.n	800367e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334c      	adds	r3, #76	@ 0x4c
 8003674:	2204      	movs	r2, #4
 8003676:	701a      	strb	r2, [r3, #0]
      break;
 8003678:	e001      	b.n	800367e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800367e:	bf00      	nop
  }
}
 8003680:	bf00      	nop
 8003682:	3728      	adds	r7, #40	@ 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d10b      	bne.n	80036d8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f005 ff08 	bl	80094e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d132      	bne.n	8003748 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d126      	bne.n	8003742 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7a5b      	ldrb	r3, [r3, #9]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d113      	bne.n	8003724 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003706:	d106      	bne.n	8003716 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f002 ff2a 	bl	8006568 <USB_InitFSLSPClkSel>
 8003714:	e011      	b.n	800373a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f002 ff23 	bl	8006568 <USB_InitFSLSPClkSel>
 8003722:	e00a      	b.n	800373a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	79db      	ldrb	r3, [r3, #7]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003732:	461a      	mov	r2, r3
 8003734:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003738:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f005 fefa 	bl	8009534 <HAL_HCD_PortEnabled_Callback>
 8003740:	e002      	b.n	8003748 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f005 ff04 	bl	8009550 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b20      	cmp	r3, #32
 8003750:	d103      	bne.n	800375a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f043 0320 	orr.w	r3, r3, #32
 8003758:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003760:	461a      	mov	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6013      	str	r3, [r2, #0]
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e12b      	b.n	80039da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd f94e 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	@ 0x24
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d4:	f001 fa20 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 80037d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a81      	ldr	r2, [pc, #516]	@ (80039e4 <HAL_I2C_Init+0x274>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d807      	bhi.n	80037f4 <HAL_I2C_Init+0x84>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a80      	ldr	r2, [pc, #512]	@ (80039e8 <HAL_I2C_Init+0x278>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bf94      	ite	ls
 80037ec:	2301      	movls	r3, #1
 80037ee:	2300      	movhi	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e006      	b.n	8003802 <HAL_I2C_Init+0x92>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a7d      	ldr	r2, [pc, #500]	@ (80039ec <HAL_I2C_Init+0x27c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bf94      	ite	ls
 80037fc:	2301      	movls	r3, #1
 80037fe:	2300      	movhi	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0e7      	b.n	80039da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a78      	ldr	r2, [pc, #480]	@ (80039f0 <HAL_I2C_Init+0x280>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0c9b      	lsrs	r3, r3, #18
 8003814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a6a      	ldr	r2, [pc, #424]	@ (80039e4 <HAL_I2C_Init+0x274>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d802      	bhi.n	8003844 <HAL_I2C_Init+0xd4>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	e009      	b.n	8003858 <HAL_I2C_Init+0xe8>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	4a69      	ldr	r2, [pc, #420]	@ (80039f4 <HAL_I2C_Init+0x284>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	3301      	adds	r3, #1
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	430b      	orrs	r3, r1
 800385e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800386a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	495c      	ldr	r1, [pc, #368]	@ (80039e4 <HAL_I2C_Init+0x274>)
 8003874:	428b      	cmp	r3, r1
 8003876:	d819      	bhi.n	80038ac <HAL_I2C_Init+0x13c>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e59      	subs	r1, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fbb1 f3f3 	udiv	r3, r1, r3
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800388c:	400b      	ands	r3, r1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_I2C_Init+0x138>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e59      	subs	r1, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a0:	3301      	adds	r3, #1
 80038a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a6:	e051      	b.n	800394c <HAL_I2C_Init+0x1dc>
 80038a8:	2304      	movs	r3, #4
 80038aa:	e04f      	b.n	800394c <HAL_I2C_Init+0x1dc>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <HAL_I2C_Init+0x168>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e012      	b.n	80038fe <HAL_I2C_Init+0x18e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	0099      	lsls	r1, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Init+0x196>
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_I2C_Init+0x1dc>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10e      	bne.n	800392c <HAL_I2C_Init+0x1bc>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e58      	subs	r0, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	440b      	add	r3, r1
 800391c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003920:	3301      	adds	r3, #1
 8003922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392a:	e00f      	b.n	800394c <HAL_I2C_Init+0x1dc>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e58      	subs	r0, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	0099      	lsls	r1, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003942:	3301      	adds	r3, #1
 8003944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	6809      	ldr	r1, [r1, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800397a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6911      	ldr	r1, [r2, #16]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	430b      	orrs	r3, r1
 800398e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	000186a0 	.word	0x000186a0
 80039e8:	001e847f 	.word	0x001e847f
 80039ec:	003d08ff 	.word	0x003d08ff
 80039f0:	431bde83 	.word	0x431bde83
 80039f4:	10624dd3 	.word	0x10624dd3

080039f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e128      	b.n	8003c5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a90      	ldr	r2, [pc, #576]	@ (8003c64 <HAL_I2S_Init+0x26c>)
 8003a22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fd f84f 	bl	8000ac8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a40:	f023 030f 	bic.w	r3, r3, #15
 8003a44:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d060      	beq.n	8003b18 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a5e:	2310      	movs	r3, #16
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e001      	b.n	8003a68 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d802      	bhi.n	8003a76 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f001 f9c4 	bl	8004e04 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a7c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a86:	d125      	bne.n	8003ad4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	3305      	adds	r3, #5
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e01f      	b.n	8003af2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	3305      	adds	r3, #5
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e00e      	b.n	8003af2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	3305      	adds	r3, #5
 8003af0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c68 <HAL_I2S_Init+0x270>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	08db      	lsrs	r3, r3, #3
 8003afc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e003      	b.n	8003b20 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d902      	bls.n	8003b2c <HAL_I2S_Init+0x134>
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2bff      	cmp	r3, #255	@ 0xff
 8003b2a:	d907      	bls.n	8003b3c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b30:	f043 0210 	orr.w	r2, r3, #16
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e08f      	b.n	8003c5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	ea42 0103 	orr.w	r1, r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b5a:	f023 030f 	bic.w	r3, r3, #15
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6851      	ldr	r1, [r2, #4]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6892      	ldr	r2, [r2, #8]
 8003b66:	4311      	orrs	r1, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68d2      	ldr	r2, [r2, #12]
 8003b6c:	4311      	orrs	r1, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6992      	ldr	r2, [r2, #24]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b7e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d161      	bne.n	8003c4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a38      	ldr	r2, [pc, #224]	@ (8003c6c <HAL_I2S_Init+0x274>)
 8003b8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a37      	ldr	r2, [pc, #220]	@ (8003c70 <HAL_I2S_Init+0x278>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_I2S_Init+0x1a4>
 8003b98:	4b36      	ldr	r3, [pc, #216]	@ (8003c74 <HAL_I2S_Init+0x27c>)
 8003b9a:	e001      	b.n	8003ba0 <HAL_I2S_Init+0x1a8>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	4932      	ldr	r1, [pc, #200]	@ (8003c70 <HAL_I2S_Init+0x278>)
 8003ba8:	428a      	cmp	r2, r1
 8003baa:	d101      	bne.n	8003bb0 <HAL_I2S_Init+0x1b8>
 8003bac:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <HAL_I2S_Init+0x27c>)
 8003bae:	e001      	b.n	8003bb4 <HAL_I2S_Init+0x1bc>
 8003bb0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bb4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bb8:	f023 030f 	bic.w	r3, r3, #15
 8003bbc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c70 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x1d4>
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x1d8>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	@ (8003c70 <HAL_I2S_Init+0x278>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_I2S_Init+0x1ea>
 8003bde:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_I2S_Init+0x27c>)
 8003be0:	e001      	b.n	8003be6 <HAL_I2S_Init+0x1ee>
 8003be2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf2:	d003      	beq.n	8003bfc <HAL_I2S_Init+0x204>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e001      	b.n	8003c08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c70 <HAL_I2S_Init+0x278>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2S_Init+0x24c>
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <HAL_I2S_Init+0x27c>)
 8003c42:	e001      	b.n	8003c48 <HAL_I2S_Init+0x250>
 8003c44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c48:	897a      	ldrh	r2, [r7, #10]
 8003c4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	08003d6f 	.word	0x08003d6f
 8003c68:	cccccccd 	.word	0xcccccccd
 8003c6c:	08003e85 	.word	0x08003e85
 8003c70:	40003800 	.word	0x40003800
 8003c74:	40003400 	.word	0x40003400

08003c78 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10e      	bne.n	8003d08 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cf8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ffb8 	bl	8003c78 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	b292      	uxth	r2, r2
 8003d24:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	1c9a      	adds	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10e      	bne.n	8003d66 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff93 	bl	8003c8c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d13a      	bne.n	8003e00 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d109      	bne.n	8003da8 <I2S_IRQHandler+0x3a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9e:	2b40      	cmp	r3, #64	@ 0x40
 8003da0:	d102      	bne.n	8003da8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ffb4 	bl	8003d10 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	d126      	bne.n	8003e00 <I2S_IRQHandler+0x92>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d11f      	bne.n	8003e00 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f043 0202 	orr.w	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff50 	bl	8003ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d136      	bne.n	8003e7a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d109      	bne.n	8003e2a <I2S_IRQHandler+0xbc>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e20:	2b80      	cmp	r3, #128	@ 0x80
 8003e22:	d102      	bne.n	8003e2a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff45 	bl	8003cb4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d122      	bne.n	8003e7a <I2S_IRQHandler+0x10c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d11b      	bne.n	8003e7a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e50:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff13 	bl	8003ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a92      	ldr	r2, [pc, #584]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e9e:	4b92      	ldr	r3, [pc, #584]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea0:	e001      	b.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a8b      	ldr	r2, [pc, #556]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebe:	e001      	b.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ec0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed0:	d004      	beq.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 8099 	bne.w	800400e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d107      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f925 	bl	8004140 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f9c8 	bl	80042a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b40      	cmp	r3, #64	@ 0x40
 8003f18:	d13a      	bne.n	8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d035      	beq.n	8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6e      	ldr	r2, [pc, #440]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f30:	e001      	b.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4969      	ldr	r1, [pc, #420]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f3e:	428b      	cmp	r3, r1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f42:	4b69      	ldr	r3, [pc, #420]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f44:	e001      	b.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f4e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0202 	orr.w	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fe88 	bl	8003ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	f040 80c3 	bne.w	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80bd 	beq.w	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fb6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a49      	ldr	r2, [pc, #292]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fc2:	4b49      	ldr	r3, [pc, #292]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc4:	e001      	b.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4944      	ldr	r1, [pc, #272]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd2:	428b      	cmp	r3, r1
 8003fd4:	d101      	bne.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fd6:	4b44      	ldr	r3, [pc, #272]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fd8:	e001      	b.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fe2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe4a 	bl	8003ca0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800400c:	e089      	b.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b02      	cmp	r3, #2
 8004016:	d107      	bne.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8be 	bl	80041a4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f8fd 	bl	800423c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b40      	cmp	r3, #64	@ 0x40
 800404a:	d12f      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d02a      	beq.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004064:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004070:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004072:	e001      	b.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004074:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4919      	ldr	r1, [pc, #100]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004080:	428b      	cmp	r3, r1
 8004082:	d101      	bne.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004084:	4b18      	ldr	r3, [pc, #96]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004086:	e001      	b.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800408c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004090:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f043 0202 	orr.w	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fdfa 	bl	8003ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d136      	bne.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d031      	beq.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040ca:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040cc:	e001      	b.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4902      	ldr	r1, [pc, #8]	@ (80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040da:	428b      	cmp	r3, r1
 80040dc:	d106      	bne.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040de:	4b02      	ldr	r3, [pc, #8]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e0:	e006      	b.n	80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040e2:	bf00      	nop
 80040e4:	40003800 	.word	0x40003800
 80040e8:	40003400 	.word	0x40003400
 80040ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004104:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f043 0204 	orr.w	r2, r3, #4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff fdc0 	bl	8003ca0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004120:	e000      	b.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004122:	bf00      	nop
}
 8004124:	bf00      	nop
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	1c99      	adds	r1, r3, #2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6251      	str	r1, [r2, #36]	@ 0x24
 8004152:	881a      	ldrh	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d113      	bne.n	800419a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004180:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ffc9 	bl	800412c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	1c99      	adds	r1, r3, #2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6251      	str	r1, [r2, #36]	@ 0x24
 80041b6:	8819      	ldrh	r1, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <I2SEx_TxISR_I2SExt+0x90>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <I2SEx_TxISR_I2SExt+0x22>
 80041c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <I2SEx_TxISR_I2SExt+0x94>)
 80041c4:	e001      	b.n	80041ca <I2SEx_TxISR_I2SExt+0x26>
 80041c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ca:	460a      	mov	r2, r1
 80041cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d121      	bne.n	800422a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <I2SEx_TxISR_I2SExt+0x90>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <I2SEx_TxISR_I2SExt+0x50>
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <I2SEx_TxISR_I2SExt+0x94>)
 80041f2:	e001      	b.n	80041f8 <I2SEx_TxISR_I2SExt+0x54>
 80041f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	490d      	ldr	r1, [pc, #52]	@ (8004234 <I2SEx_TxISR_I2SExt+0x90>)
 8004200:	428b      	cmp	r3, r1
 8004202:	d101      	bne.n	8004208 <I2SEx_TxISR_I2SExt+0x64>
 8004204:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <I2SEx_TxISR_I2SExt+0x94>)
 8004206:	e001      	b.n	800420c <I2SEx_TxISR_I2SExt+0x68>
 8004208:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800420c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004210:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff81 	bl	800412c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40003800 	.word	0x40003800
 8004238:	40003400 	.word	0x40003400

0800423c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68d8      	ldr	r0, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	1c99      	adds	r1, r3, #2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004254:	b282      	uxth	r2, r0
 8004256:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800427e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ff4a 	bl	800412c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a20      	ldr	r2, [pc, #128]	@ (8004330 <I2SEx_RxISR_I2SExt+0x90>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <I2SEx_RxISR_I2SExt+0x16>
 80042b2:	4b20      	ldr	r3, [pc, #128]	@ (8004334 <I2SEx_RxISR_I2SExt+0x94>)
 80042b4:	e001      	b.n	80042ba <I2SEx_RxISR_I2SExt+0x1a>
 80042b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ba:	68d8      	ldr	r0, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	1c99      	adds	r1, r3, #2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042c6:	b282      	uxth	r2, r0
 80042c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d121      	bne.n	8004326 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <I2SEx_RxISR_I2SExt+0x90>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d101      	bne.n	80042f0 <I2SEx_RxISR_I2SExt+0x50>
 80042ec:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <I2SEx_RxISR_I2SExt+0x94>)
 80042ee:	e001      	b.n	80042f4 <I2SEx_RxISR_I2SExt+0x54>
 80042f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	490d      	ldr	r1, [pc, #52]	@ (8004330 <I2SEx_RxISR_I2SExt+0x90>)
 80042fc:	428b      	cmp	r3, r1
 80042fe:	d101      	bne.n	8004304 <I2SEx_RxISR_I2SExt+0x64>
 8004300:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <I2SEx_RxISR_I2SExt+0x94>)
 8004302:	e001      	b.n	8004308 <I2SEx_RxISR_I2SExt+0x68>
 8004304:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004308:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800430c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff03 	bl	800412c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40003800 	.word	0x40003800
 8004334:	40003400 	.word	0x40003400

08004338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e267      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d075      	beq.n	8004442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004356:	4b88      	ldr	r3, [pc, #544]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b04      	cmp	r3, #4
 8004360:	d00c      	beq.n	800437c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4b85      	ldr	r3, [pc, #532]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436a:	2b08      	cmp	r3, #8
 800436c:	d112      	bne.n	8004394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436e:	4b82      	ldr	r3, [pc, #520]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800437a:	d10b      	bne.n	8004394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	4b7e      	ldr	r3, [pc, #504]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d05b      	beq.n	8004440 <HAL_RCC_OscConfig+0x108>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d157      	bne.n	8004440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e242      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439c:	d106      	bne.n	80043ac <HAL_RCC_OscConfig+0x74>
 800439e:	4b76      	ldr	r3, [pc, #472]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a75      	ldr	r2, [pc, #468]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e01d      	b.n	80043e8 <HAL_RCC_OscConfig+0xb0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x98>
 80043b6:	4b70      	ldr	r3, [pc, #448]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6f      	ldr	r2, [pc, #444]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6c      	ldr	r2, [pc, #432]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0xb0>
 80043d0:	4b69      	ldr	r3, [pc, #420]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a68      	ldr	r2, [pc, #416]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b66      	ldr	r3, [pc, #408]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a65      	ldr	r2, [pc, #404]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fc fdac 	bl	8000f4c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fc fda8 	bl	8000f4c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	@ 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e207      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b5b      	ldr	r3, [pc, #364]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0xc0>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fc fd98 	bl	8000f4c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004420:	f7fc fd94 	bl	8000f4c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	@ 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e1f3      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	4b51      	ldr	r3, [pc, #324]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0xe8>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d063      	beq.n	8004516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444e:	4b4a      	ldr	r3, [pc, #296]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004462:	2b08      	cmp	r3, #8
 8004464:	d11c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004466:	4b44      	ldr	r3, [pc, #272]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d116      	bne.n	80044a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004472:	4b41      	ldr	r3, [pc, #260]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_RCC_OscConfig+0x152>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d001      	beq.n	800448a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e1c7      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b3b      	ldr	r3, [pc, #236]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4937      	ldr	r1, [pc, #220]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	e03a      	b.n	8004516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a8:	4b34      	ldr	r3, [pc, #208]	@ (800457c <HAL_RCC_OscConfig+0x244>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fc fd4d 	bl	8000f4c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b6:	f7fc fd49 	bl	8000f4c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e1a8      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d4:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4925      	ldr	r1, [pc, #148]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]
 80044e8:	e015      	b.n	8004516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ea:	4b24      	ldr	r3, [pc, #144]	@ (800457c <HAL_RCC_OscConfig+0x244>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fc fd2c 	bl	8000f4c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f8:	f7fc fd28 	bl	8000f4c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e187      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d036      	beq.n	8004590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <HAL_RCC_OscConfig+0x248>)
 800452c:	2201      	movs	r2, #1
 800452e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fc fd0c 	bl	8000f4c <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004538:	f7fc fd08 	bl	8000f4c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e167      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <HAL_RCC_OscConfig+0x240>)
 800454c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x200>
 8004556:	e01b      	b.n	8004590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004558:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <HAL_RCC_OscConfig+0x248>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455e:	f7fc fcf5 	bl	8000f4c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004564:	e00e      	b.n	8004584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004566:	f7fc fcf1 	bl	8000f4c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d907      	bls.n	8004584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e150      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
 8004578:	40023800 	.word	0x40023800
 800457c:	42470000 	.word	0x42470000
 8004580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	4b88      	ldr	r3, [pc, #544]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ea      	bne.n	8004566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8097 	beq.w	80046cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a2:	4b81      	ldr	r3, [pc, #516]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	4b7d      	ldr	r3, [pc, #500]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	4a7c      	ldr	r2, [pc, #496]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045be:	4b7a      	ldr	r3, [pc, #488]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ce:	4b77      	ldr	r3, [pc, #476]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045da:	4b74      	ldr	r3, [pc, #464]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a73      	ldr	r2, [pc, #460]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e6:	f7fc fcb1 	bl	8000f4c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ee:	f7fc fcad 	bl	8000f4c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e10c      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <HAL_RCC_OscConfig+0x474>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x2ea>
 8004614:	4b64      	ldr	r3, [pc, #400]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a63      	ldr	r2, [pc, #396]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004620:	e01c      	b.n	800465c <HAL_RCC_OscConfig+0x324>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x30c>
 800462a:	4b5f      	ldr	r3, [pc, #380]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a5e      	ldr	r2, [pc, #376]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
 8004636:	4b5c      	ldr	r3, [pc, #368]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	4a5b      	ldr	r2, [pc, #364]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6713      	str	r3, [r2, #112]	@ 0x70
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0x324>
 8004644:	4b58      	ldr	r3, [pc, #352]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a57      	ldr	r2, [pc, #348]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004650:	4b55      	ldr	r3, [pc, #340]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	4a54      	ldr	r2, [pc, #336]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004656:	f023 0304 	bic.w	r3, r3, #4
 800465a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d015      	beq.n	8004690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fc fc72 	bl	8000f4c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fc fc6e 	bl	8000f4c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e0cb      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	4b49      	ldr	r3, [pc, #292]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0ee      	beq.n	800466c <HAL_RCC_OscConfig+0x334>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004690:	f7fc fc5c 	bl	8000f4c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fc fc58 	bl	8000f4c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0b5      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ae:	4b3e      	ldr	r3, [pc, #248]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ee      	bne.n	8004698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d105      	bne.n	80046cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c0:	4b39      	ldr	r3, [pc, #228]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	4a38      	ldr	r2, [pc, #224]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a1 	beq.w	8004818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d6:	4b34      	ldr	r3, [pc, #208]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d05c      	beq.n	800479c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d141      	bne.n	800476e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ea:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <HAL_RCC_OscConfig+0x478>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fc fc2c 	bl	8000f4c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fc fc28 	bl	8000f4c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e087      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	019b      	lsls	r3, r3, #6
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	3b01      	subs	r3, #1
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	491b      	ldr	r1, [pc, #108]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004740:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <HAL_RCC_OscConfig+0x478>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fc fc01 	bl	8000f4c <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474e:	f7fc fbfd 	bl	8000f4c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e05c      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004760:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x416>
 800476c:	e054      	b.n	8004818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476e:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <HAL_RCC_OscConfig+0x478>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fc fbea 	bl	8000f4c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477c:	f7fc fbe6 	bl	8000f4c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e045      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_RCC_OscConfig+0x470>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x444>
 800479a:	e03d      	b.n	8004818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e038      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40007000 	.word	0x40007000
 80047b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_RCC_OscConfig+0x4ec>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d028      	beq.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d121      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d11a      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d111      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800

08004828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0cc      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800483c:	4b68      	ldr	r3, [pc, #416]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d90c      	bls.n	8004864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b63      	ldr	r3, [pc, #396]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0b8      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800487c:	4b59      	ldr	r3, [pc, #356]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a58      	ldr	r2, [pc, #352]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004894:	4b53      	ldr	r3, [pc, #332]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a52      	ldr	r2, [pc, #328]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800489e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b50      	ldr	r3, [pc, #320]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	494d      	ldr	r1, [pc, #308]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d044      	beq.n	8004948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b47      	ldr	r3, [pc, #284]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d119      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e07f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e6:	4b3f      	ldr	r3, [pc, #252]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e06f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f6:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e067      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004906:	4b37      	ldr	r3, [pc, #220]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 0203 	bic.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4934      	ldr	r1, [pc, #208]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004918:	f7fc fb18 	bl	8000f4c <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	e00a      	b.n	8004936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004920:	f7fc fb14 	bl	8000f4c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e04f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	4b2b      	ldr	r3, [pc, #172]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 020c 	and.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	429a      	cmp	r2, r3
 8004946:	d1eb      	bne.n	8004920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004948:	4b25      	ldr	r3, [pc, #148]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d20c      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e032      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497c:	4b19      	ldr	r3, [pc, #100]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4916      	ldr	r1, [pc, #88]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499a:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	490e      	ldr	r1, [pc, #56]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ae:	f000 f821 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	490a      	ldr	r1, [pc, #40]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	5ccb      	ldrb	r3, [r1, r3]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	4a09      	ldr	r2, [pc, #36]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ca:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fc fa78 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40023c00 	.word	0x40023c00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08009c0c 	.word	0x08009c0c
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000004 	.word	0x20000004

080049f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f8:	b094      	sub	sp, #80	@ 0x50
 80049fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a00:	2300      	movs	r3, #0
 8004a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a04:	2300      	movs	r3, #0
 8004a06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0c:	4b79      	ldr	r3, [pc, #484]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d00d      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x40>
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	f200 80e1 	bhi.w	8004be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x34>
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a26:	e0db      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a28:	4b73      	ldr	r3, [pc, #460]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a2c:	e0db      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2e:	4b73      	ldr	r3, [pc, #460]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8004a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a32:	e0d8      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a34:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d063      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	099b      	lsrs	r3, r3, #6
 8004a50:	2200      	movs	r2, #0
 8004a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a5e:	2300      	movs	r3, #0
 8004a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a66:	4622      	mov	r2, r4
 8004a68:	462b      	mov	r3, r5
 8004a6a:	f04f 0000 	mov.w	r0, #0
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	0159      	lsls	r1, r3, #5
 8004a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a78:	0150      	lsls	r0, r2, #5
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4621      	mov	r1, r4
 8004a80:	1a51      	subs	r1, r2, r1
 8004a82:	6139      	str	r1, [r7, #16]
 8004a84:	4629      	mov	r1, r5
 8004a86:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a98:	4659      	mov	r1, fp
 8004a9a:	018b      	lsls	r3, r1, #6
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	018a      	lsls	r2, r1, #6
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8004aac:	4659      	mov	r1, fp
 8004aae:	eb63 0901 	sbc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	462b      	mov	r3, r5
 8004ad4:	eb49 0303 	adc.w	r3, r9, r3
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	024b      	lsls	r3, r1, #9
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af0:	4621      	mov	r1, r4
 8004af2:	024a      	lsls	r2, r1, #9
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afa:	2200      	movs	r2, #0
 8004afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b04:	f7fb fb60 	bl	80001c8 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b10:	e058      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b12:	4b38      	ldr	r3, [pc, #224]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	0159      	lsls	r1, r3, #5
 8004b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b3e:	0150      	lsls	r0, r2, #5
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4641      	mov	r1, r8
 8004b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b64:	ebb2 040a 	subs.w	r4, r2, sl
 8004b68:	eb63 050b 	sbc.w	r5, r3, fp
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	00eb      	lsls	r3, r5, #3
 8004b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7a:	00e2      	lsls	r2, r4, #3
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	4643      	mov	r3, r8
 8004b82:	18e3      	adds	r3, r4, r3
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	464b      	mov	r3, r9
 8004b88:	eb45 0303 	adc.w	r3, r5, r3
 8004b8c:	607b      	str	r3, [r7, #4]
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	028b      	lsls	r3, r1, #10
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	028a      	lsls	r2, r1, #10
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	61fa      	str	r2, [r7, #28]
 8004bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb8:	f7fb fb06 	bl	80001c8 <__aeabi_uldivmod>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	3301      	adds	r3, #1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bde:	e002      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be0:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3750      	adds	r7, #80	@ 0x50
 8004bec:	46bd      	mov	sp, r7
 8004bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	007a1200 	.word	0x007a1200

08004c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b03      	ldr	r3, [pc, #12]	@ (8004c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c1c:	f7ff fff0 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0a9b      	lsrs	r3, r3, #10
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	08009c1c 	.word	0x08009c1c

08004c40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d035      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c68:	4b62      	ldr	r3, [pc, #392]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c6e:	f7fc f96d 	bl	8000f4c <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c76:	f7fc f969 	bl	8000f4c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0b0      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c88:	4b5b      	ldr	r3, [pc, #364]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	019a      	lsls	r2, r3, #6
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	071b      	lsls	r3, r3, #28
 8004ca0:	4955      	ldr	r1, [pc, #340]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ca8:	4b52      	ldr	r3, [pc, #328]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cae:	f7fc f94d 	bl	8000f4c <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cb6:	f7fc f949 	bl	8000f4c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e090      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8083 	beq.w	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	4b44      	ldr	r3, [pc, #272]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	4a43      	ldr	r2, [pc, #268]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf2:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3e      	ldr	r2, [pc, #248]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0a:	f7fc f91f 	bl	8000f4c <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d12:	f7fc f91b 	bl	8000f4c <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e062      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d24:	4b35      	ldr	r3, [pc, #212]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d30:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d02f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d028      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d58:	4b29      	ldr	r3, [pc, #164]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5e:	4b28      	ldr	r3, [pc, #160]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d64:	4a24      	ldr	r2, [pc, #144]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d6a:	4b23      	ldr	r3, [pc, #140]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d114      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d76:	f7fc f8e9 	bl	8000f4c <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fc f8e5 	bl	8000f4c <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e02a      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ee      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dac:	d10d      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dae:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc2:	490d      	ldr	r1, [pc, #52]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	608b      	str	r3, [r1, #8]
 8004dc8:	e005      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dca:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dd4:	6093      	str	r3, [r2, #8]
 8004dd6:	4b08      	ldr	r3, [pc, #32]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de2:	4905      	ldr	r1, [pc, #20]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	42470068 	.word	0x42470068
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40007000 	.word	0x40007000
 8004e00:	42470e40 	.word	0x42470e40

08004e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d13f      	bne.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e22:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e38:	d12f      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e3c:	617b      	str	r3, [r7, #20]
          break;
 8004e3e:	e02f      	b.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e40:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e4c:	d108      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e4e:	4b19      	ldr	r3, [pc, #100]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e56:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e007      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e60:	4b14      	ldr	r3, [pc, #80]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e68:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e70:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8a:	0f1b      	lsrs	r3, r3, #28
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]
          break;
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
          break;
 8004e9e:	bf00      	nop
        }
      }
      break;
 8004ea0:	e000      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004ea2:	bf00      	nop
    }
  }
  return frequency;
 8004ea4:	697b      	ldr	r3, [r7, #20]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00bb8000 	.word	0x00bb8000
 8004ebc:	007a1200 	.word	0x007a1200
 8004ec0:	00f42400 	.word	0x00f42400

08004ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e07b      	b.n	8004fce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ee6:	d009      	beq.n	8004efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
 8004eee:	e005      	b.n	8004efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fb fe56 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f80:	ea42 0103 	orr.w	r1, r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	f003 0104 	and.w	r1, r3, #4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	f003 0210 	and.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e041      	b.n	800506c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fb fe2b 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f000 fbfb 	bl	8005810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e041      	b.n	800510a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f839 	bl	8005112 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 fbac 	bl	8005810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_TIM_PWM_Start+0x24>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e022      	b.n	8005192 <HAL_TIM_PWM_Start+0x6a>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b04      	cmp	r3, #4
 8005150:	d109      	bne.n	8005166 <HAL_TIM_PWM_Start+0x3e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	bf14      	ite	ne
 800515e:	2301      	movne	r3, #1
 8005160:	2300      	moveq	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	e015      	b.n	8005192 <HAL_TIM_PWM_Start+0x6a>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d109      	bne.n	8005180 <HAL_TIM_PWM_Start+0x58>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e008      	b.n	8005192 <HAL_TIM_PWM_Start+0x6a>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e07c      	b.n	8005294 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0x82>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a8:	e013      	b.n	80051d2 <HAL_TIM_PWM_Start+0xaa>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0x92>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b8:	e00b      	b.n	80051d2 <HAL_TIM_PWM_Start+0xaa>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xa2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c8:	e003      	b.n	80051d2 <HAL_TIM_PWM_Start+0xaa>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2201      	movs	r2, #1
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fe0e 	bl	8005dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2d      	ldr	r2, [pc, #180]	@ (800529c <HAL_TIM_PWM_Start+0x174>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_TIM_PWM_Start+0xcc>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a2c      	ldr	r2, [pc, #176]	@ (80052a0 <HAL_TIM_PWM_Start+0x178>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_PWM_Start+0xd0>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <HAL_TIM_PWM_Start+0xd2>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a22      	ldr	r2, [pc, #136]	@ (800529c <HAL_TIM_PWM_Start+0x174>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <HAL_TIM_PWM_Start+0x136>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d01d      	beq.n	800525e <HAL_TIM_PWM_Start+0x136>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1f      	ldr	r2, [pc, #124]	@ (80052a4 <HAL_TIM_PWM_Start+0x17c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <HAL_TIM_PWM_Start+0x136>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1d      	ldr	r2, [pc, #116]	@ (80052a8 <HAL_TIM_PWM_Start+0x180>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIM_PWM_Start+0x136>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1c      	ldr	r2, [pc, #112]	@ (80052ac <HAL_TIM_PWM_Start+0x184>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIM_PWM_Start+0x136>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a16      	ldr	r2, [pc, #88]	@ (80052a0 <HAL_TIM_PWM_Start+0x178>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start+0x136>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a18      	ldr	r2, [pc, #96]	@ (80052b0 <HAL_TIM_PWM_Start+0x188>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start+0x136>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a16      	ldr	r2, [pc, #88]	@ (80052b4 <HAL_TIM_PWM_Start+0x18c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d111      	bne.n	8005282 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d010      	beq.n	8005292 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	e007      	b.n	8005292 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40010000 	.word	0x40010000
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40001800 	.word	0x40001800

080052b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d020      	beq.n	800531c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01b      	beq.n	800531c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0202 	mvn.w	r2, #2
 80052ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa65 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa57 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa68 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d020      	beq.n	8005368 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01b      	beq.n	8005368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0204 	mvn.w	r2, #4
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa3f 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa31 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa42 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d020      	beq.n	80053b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01b      	beq.n	80053b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0208 	mvn.w	r2, #8
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2204      	movs	r2, #4
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa19 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa0b 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fa1c 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d020      	beq.n	8005400 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01b      	beq.n	8005400 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0210 	mvn.w	r2, #16
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2208      	movs	r2, #8
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9f3 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9e5 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f9f6 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0201 	mvn.w	r2, #1
 800541c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9c3 	bl	80057aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00c      	beq.n	8005448 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fd86 	bl	8005f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9c7 	bl	80057fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0220 	mvn.w	r2, #32
 8005488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fd58 	bl	8005f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e0ae      	b.n	8005614 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	f200 809f 	bhi.w	8005604 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	08005501 	.word	0x08005501
 80054d0:	08005605 	.word	0x08005605
 80054d4:	08005605 	.word	0x08005605
 80054d8:	08005605 	.word	0x08005605
 80054dc:	08005541 	.word	0x08005541
 80054e0:	08005605 	.word	0x08005605
 80054e4:	08005605 	.word	0x08005605
 80054e8:	08005605 	.word	0x08005605
 80054ec:	08005583 	.word	0x08005583
 80054f0:	08005605 	.word	0x08005605
 80054f4:	08005605 	.word	0x08005605
 80054f8:	08005605 	.word	0x08005605
 80054fc:	080055c3 	.word	0x080055c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fa2e 	bl	8005968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0204 	bic.w	r2, r2, #4
 800552a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6999      	ldr	r1, [r3, #24]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	619a      	str	r2, [r3, #24]
      break;
 800553e:	e064      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fa7e 	bl	8005a48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800555a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6999      	ldr	r1, [r3, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	021a      	lsls	r2, r3, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	619a      	str	r2, [r3, #24]
      break;
 8005580:	e043      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fad3 	bl	8005b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0208 	orr.w	r2, r2, #8
 800559c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0204 	bic.w	r2, r2, #4
 80055ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	61da      	str	r2, [r3, #28]
      break;
 80055c0:	e023      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fb27 	bl	8005c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	021a      	lsls	r2, r3, #8
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	61da      	str	r2, [r3, #28]
      break;
 8005602:	e002      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
      break;
 8005608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005612:	7dfb      	ldrb	r3, [r7, #23]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0x1c>
 8005634:	2302      	movs	r3, #2
 8005636:	e0b4      	b.n	80057a2 <HAL_TIM_ConfigClockSource+0x186>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800565e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005670:	d03e      	beq.n	80056f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005676:	f200 8087 	bhi.w	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567e:	f000 8086 	beq.w	800578e <HAL_TIM_ConfigClockSource+0x172>
 8005682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005686:	d87f      	bhi.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b70      	cmp	r3, #112	@ 0x70
 800568a:	d01a      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0xa6>
 800568c:	2b70      	cmp	r3, #112	@ 0x70
 800568e:	d87b      	bhi.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b60      	cmp	r3, #96	@ 0x60
 8005692:	d050      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x11a>
 8005694:	2b60      	cmp	r3, #96	@ 0x60
 8005696:	d877      	bhi.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 8005698:	2b50      	cmp	r3, #80	@ 0x50
 800569a:	d03c      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0xfa>
 800569c:	2b50      	cmp	r3, #80	@ 0x50
 800569e:	d873      	bhi.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b40      	cmp	r3, #64	@ 0x40
 80056a2:	d058      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x13a>
 80056a4:	2b40      	cmp	r3, #64	@ 0x40
 80056a6:	d86f      	bhi.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 80056a8:	2b30      	cmp	r3, #48	@ 0x30
 80056aa:	d064      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x15a>
 80056ac:	2b30      	cmp	r3, #48	@ 0x30
 80056ae:	d86b      	bhi.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d060      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x15a>
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d867      	bhi.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d05c      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x15a>
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d05a      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x15a>
 80056c0:	e062      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056d2:	f000 fb73 	bl	8005dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	609a      	str	r2, [r3, #8]
      break;
 80056ee:	e04f      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005700:	f000 fb5c 	bl	8005dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005712:	609a      	str	r2, [r3, #8]
      break;
 8005714:	e03c      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	461a      	mov	r2, r3
 8005724:	f000 fad0 	bl	8005cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2150      	movs	r1, #80	@ 0x50
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fb29 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005734:	e02c      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005742:	461a      	mov	r2, r3
 8005744:	f000 faef 	bl	8005d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2160      	movs	r1, #96	@ 0x60
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fb19 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005754:	e01c      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005762:	461a      	mov	r2, r3
 8005764:	f000 fab0 	bl	8005cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2140      	movs	r1, #64	@ 0x40
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fb09 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005774:	e00c      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f000 fb00 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005786:	e003      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
      break;
 800578c:	e000      	b.n	8005790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800578e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a46      	ldr	r2, [pc, #280]	@ (800593c <TIM_Base_SetConfig+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582e:	d00f      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a43      	ldr	r2, [pc, #268]	@ (8005940 <TIM_Base_SetConfig+0x130>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a42      	ldr	r2, [pc, #264]	@ (8005944 <TIM_Base_SetConfig+0x134>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a41      	ldr	r2, [pc, #260]	@ (8005948 <TIM_Base_SetConfig+0x138>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a40      	ldr	r2, [pc, #256]	@ (800594c <TIM_Base_SetConfig+0x13c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d108      	bne.n	8005862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a35      	ldr	r2, [pc, #212]	@ (800593c <TIM_Base_SetConfig+0x12c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d02b      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005870:	d027      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a32      	ldr	r2, [pc, #200]	@ (8005940 <TIM_Base_SetConfig+0x130>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d023      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a31      	ldr	r2, [pc, #196]	@ (8005944 <TIM_Base_SetConfig+0x134>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01f      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a30      	ldr	r2, [pc, #192]	@ (8005948 <TIM_Base_SetConfig+0x138>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01b      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2f      	ldr	r2, [pc, #188]	@ (800594c <TIM_Base_SetConfig+0x13c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d017      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2e      	ldr	r2, [pc, #184]	@ (8005950 <TIM_Base_SetConfig+0x140>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2d      	ldr	r2, [pc, #180]	@ (8005954 <TIM_Base_SetConfig+0x144>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00f      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005958 <TIM_Base_SetConfig+0x148>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2b      	ldr	r2, [pc, #172]	@ (800595c <TIM_Base_SetConfig+0x14c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005960 <TIM_Base_SetConfig+0x150>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a29      	ldr	r2, [pc, #164]	@ (8005964 <TIM_Base_SetConfig+0x154>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d108      	bne.n	80058d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a10      	ldr	r2, [pc, #64]	@ (800593c <TIM_Base_SetConfig+0x12c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_Base_SetConfig+0xf8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a12      	ldr	r2, [pc, #72]	@ (800594c <TIM_Base_SetConfig+0x13c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d103      	bne.n	8005910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d105      	bne.n	800592e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	611a      	str	r2, [r3, #16]
  }
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40010400 	.word	0x40010400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800
 800595c:	40001800 	.word	0x40001800
 8005960:	40001c00 	.word	0x40001c00
 8005964:	40002000 	.word	0x40002000

08005968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f023 0201 	bic.w	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0302 	bic.w	r3, r3, #2
 80059b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a20      	ldr	r2, [pc, #128]	@ (8005a40 <TIM_OC1_SetConfig+0xd8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC1_SetConfig+0x64>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a15      	ldr	r2, [pc, #84]	@ (8005a40 <TIM_OC1_SetConfig+0xd8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC1_SetConfig+0x8e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a14      	ldr	r2, [pc, #80]	@ (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d111      	bne.n	8005a1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400

08005a48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f023 0210 	bic.w	r2, r3, #16
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0320 	bic.w	r3, r3, #32
 8005a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a22      	ldr	r2, [pc, #136]	@ (8005b2c <TIM_OC2_SetConfig+0xe4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC2_SetConfig+0x68>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <TIM_OC2_SetConfig+0xe8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10d      	bne.n	8005acc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a17      	ldr	r2, [pc, #92]	@ (8005b2c <TIM_OC2_SetConfig+0xe4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_OC2_SetConfig+0x94>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a16      	ldr	r2, [pc, #88]	@ (8005b30 <TIM_OC2_SetConfig+0xe8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d113      	bne.n	8005b04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40010400 	.word	0x40010400

08005b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0303 	bic.w	r3, r3, #3
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a21      	ldr	r2, [pc, #132]	@ (8005c14 <TIM_OC3_SetConfig+0xe0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_OC3_SetConfig+0x66>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a20      	ldr	r2, [pc, #128]	@ (8005c18 <TIM_OC3_SetConfig+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10d      	bne.n	8005bb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a16      	ldr	r2, [pc, #88]	@ (8005c14 <TIM_OC3_SetConfig+0xe0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x92>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a15      	ldr	r2, [pc, #84]	@ (8005c18 <TIM_OC3_SetConfig+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d113      	bne.n	8005bee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40010400 	.word	0x40010400

08005c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	031b      	lsls	r3, r3, #12
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a12      	ldr	r2, [pc, #72]	@ (8005cc0 <TIM_OC4_SetConfig+0xa4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC4_SetConfig+0x68>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a11      	ldr	r2, [pc, #68]	@ (8005cc4 <TIM_OC4_SetConfig+0xa8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d109      	bne.n	8005c98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	019b      	lsls	r3, r3, #6
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40010400 	.word	0x40010400

08005cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 030a 	bic.w	r3, r3, #10
 8005d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b087      	sub	sp, #28
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f023 0210 	bic.w	r2, r3, #16
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	031b      	lsls	r3, r3, #12
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f043 0307 	orr.w	r3, r3, #7
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2201      	movs	r2, #1
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1a      	ldr	r2, [r3, #32]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	401a      	ands	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e05a      	b.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eac:	d01d      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a17      	ldr	r2, [pc, #92]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a15      	ldr	r2, [pc, #84]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d10c      	bne.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40000800 	.word	0x40000800
 8005f30:	40000c00 	.word	0x40000c00
 8005f34:	40010400 	.word	0x40010400
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40001800 	.word	0x40001800

08005f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f68:	b084      	sub	sp, #16
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	f107 001c 	add.w	r0, r7, #28
 8005f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d123      	bne.n	8005fca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005faa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9dc 	bl	800637c <USB_CoreReset>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e01b      	b.n	8006002 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9d0 	bl	800637c <USB_CoreReset>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ff4:	e005      	b.n	8006002 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006002:	7fbb      	ldrb	r3, [r7, #30]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d10b      	bne.n	8006020 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f043 0206 	orr.w	r2, r3, #6
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800602c:	b004      	add	sp, #16
 800602e:	4770      	bx	lr

08006030 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f043 0201 	orr.w	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f023 0201 	bic.w	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d115      	bne.n	80060c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060a2:	200a      	movs	r0, #10
 80060a4:	f7fa ff5e 	bl	8000f64 <HAL_Delay>
      ms += 10U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	330a      	adds	r3, #10
 80060ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f956 	bl	8006360 <USB_GetMode>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d01e      	beq.n	80060f8 <USB_SetCurrentMode+0x84>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80060be:	d9f0      	bls.n	80060a2 <USB_SetCurrentMode+0x2e>
 80060c0:	e01a      	b.n	80060f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d115      	bne.n	80060f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060d4:	200a      	movs	r0, #10
 80060d6:	f7fa ff45 	bl	8000f64 <HAL_Delay>
      ms += 10U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	330a      	adds	r3, #10
 80060de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f93d 	bl	8006360 <USB_GetMode>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <USB_SetCurrentMode+0x84>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80060f0:	d9f0      	bls.n	80060d4 <USB_SetCurrentMode+0x60>
 80060f2:	e001      	b.n	80060f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e005      	b.n	8006104 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80060fc:	d101      	bne.n	8006102 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3301      	adds	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006126:	d901      	bls.n	800612c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e01b      	b.n	8006164 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	daf2      	bge.n	800611a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	019b      	lsls	r3, r3, #6
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006150:	d901      	bls.n	8006156 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e006      	b.n	8006164 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b20      	cmp	r3, #32
 8006160:	d0f0      	beq.n	8006144 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006188:	d901      	bls.n	800618e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e018      	b.n	80061c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	daf2      	bge.n	800617c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2210      	movs	r2, #16
 800619e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ac:	d901      	bls.n	80061b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e006      	b.n	80061c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b10      	cmp	r3, #16
 80061bc:	d0f0      	beq.n	80061a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	@ 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4611      	mov	r1, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	460b      	mov	r3, r1
 80061dc:	71fb      	strb	r3, [r7, #7]
 80061de:	4613      	mov	r3, r2
 80061e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d123      	bne.n	800623a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061f2:	88bb      	ldrh	r3, [r7, #4]
 80061f4:	3303      	adds	r3, #3
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	e018      	b.n	8006232 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	031a      	lsls	r2, r3, #12
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620c:	461a      	mov	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3301      	adds	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	3301      	adds	r3, #1
 800621e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3301      	adds	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	3301      	adds	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3e2      	bcc.n	8006200 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3724      	adds	r7, #36	@ 0x24
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006248:	b480      	push	{r7}
 800624a:	b08b      	sub	sp, #44	@ 0x2c
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	089b      	lsrs	r3, r3, #2
 8006262:	b29b      	uxth	r3, r3
 8006264:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	623b      	str	r3, [r7, #32]
 8006272:	e014      	b.n	800629e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	3301      	adds	r3, #1
 8006284:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	3301      	adds	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	3301      	adds	r3, #1
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	3301      	adds	r3, #1
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	3301      	adds	r3, #1
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d3e6      	bcc.n	8006274 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062a6:	8bfb      	ldrh	r3, [r7, #30]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01e      	beq.n	80062ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b6:	461a      	mov	r2, r3
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	701a      	strb	r2, [r3, #0]
      i++;
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	3301      	adds	r3, #1
 80062d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	3301      	adds	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80062de:	8bfb      	ldrh	r3, [r7, #30]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062e4:	8bfb      	ldrh	r3, [r7, #30]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ea      	bne.n	80062c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	372c      	adds	r7, #44	@ 0x2c
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4013      	ands	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006310:	68fb      	ldr	r3, [r7, #12]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	4013      	ands	r3, r2
 8006350:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006352:	68bb      	ldr	r3, [r7, #8]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0301 	and.w	r3, r3, #1
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006394:	d901      	bls.n	800639a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e01b      	b.n	80063d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	daf2      	bge.n	8006388 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f043 0201 	orr.w	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063be:	d901      	bls.n	80063c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e006      	b.n	80063d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d0f0      	beq.n	80063b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063e0:	b084      	sub	sp, #16
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006400:	461a      	mov	r2, r3
 8006402:	2300      	movs	r3, #0
 8006404:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d119      	bne.n	800646a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10a      	bne.n	8006454 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800644c:	f043 0304 	orr.w	r3, r3, #4
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e014      	b.n	800647e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006462:	f023 0304 	bic.w	r3, r3, #4
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	e009      	b.n	800647e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006478:	f023 0304 	bic.w	r3, r3, #4
 800647c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800647e:	2110      	movs	r1, #16
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff fe43 	bl	800610c <USB_FlushTxFifo>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff fe6d 	bl	8006170 <USB_FlushRxFifo>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	e015      	b.n	80064d2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b2:	461a      	mov	r2, r3
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c6:	461a      	mov	r2, r3
 80064c8:	2300      	movs	r3, #0
 80064ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3301      	adds	r3, #1
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064d6:	461a      	mov	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4293      	cmp	r3, r2
 80064dc:	d3e3      	bcc.n	80064a6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <USB_HostInit+0x170>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d10b      	bne.n	800650c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064fa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <USB_HostInit+0x174>)
 8006500:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a14      	ldr	r2, [pc, #80]	@ (8006558 <USB_HostInit+0x178>)
 8006506:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800650a:	e009      	b.n	8006520 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2280      	movs	r2, #128	@ 0x80
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a11      	ldr	r2, [pc, #68]	@ (800655c <USB_HostInit+0x17c>)
 8006516:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a11      	ldr	r2, [pc, #68]	@ (8006560 <USB_HostInit+0x180>)
 800651c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f043 0210 	orr.w	r2, r3, #16
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699a      	ldr	r2, [r3, #24]
 8006538:	4b0a      	ldr	r3, [pc, #40]	@ (8006564 <USB_HostInit+0x184>)
 800653a:	4313      	orrs	r3, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006540:	7dfb      	ldrb	r3, [r7, #23]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800654c:	b004      	add	sp, #16
 800654e:	4770      	bx	lr
 8006550:	40040000 	.word	0x40040000
 8006554:	01000200 	.word	0x01000200
 8006558:	00e00300 	.word	0x00e00300
 800655c:	00600080 	.word	0x00600080
 8006560:	004000e0 	.word	0x004000e0
 8006564:	a3200008 	.word	0xa3200008

08006568 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065a0:	4313      	orrs	r3, r2
 80065a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d107      	bne.n	80065ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065b0:	461a      	mov	r2, r3
 80065b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065b6:	6053      	str	r3, [r2, #4]
 80065b8:	e00c      	b.n	80065d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d107      	bne.n	80065d0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065c6:	461a      	mov	r2, r3
 80065c8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80065cc:	6053      	str	r3, [r2, #4]
 80065ce:	e001      	b.n	80065d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006602:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800660c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006610:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006612:	2064      	movs	r0, #100	@ 0x64
 8006614:	f7fa fca6 	bl	8000f64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006624:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006626:	200a      	movs	r0, #10
 8006628:	f7fa fc9c 	bl	8000f64 <HAL_Delay>

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800665a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <USB_DriveVbus+0x44>
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d106      	bne.n	800667a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006674:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006678:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006684:	d109      	bne.n	800669a <USB_DriveVbus+0x64>
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006698:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	0c5b      	lsrs	r3, r3, #17
 80066c6:	f003 0303 	and.w	r3, r3, #3
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	b29b      	uxth	r3, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	4608      	mov	r0, r1
 8006702:	4611      	mov	r1, r2
 8006704:	461a      	mov	r2, r3
 8006706:	4603      	mov	r3, r0
 8006708:	70fb      	strb	r3, [r7, #3]
 800670a:	460b      	mov	r3, r1
 800670c:	70bb      	strb	r3, [r7, #2]
 800670e:	4613      	mov	r3, r2
 8006710:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006726:	461a      	mov	r2, r3
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
 800672c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800672e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006732:	2b03      	cmp	r3, #3
 8006734:	d87c      	bhi.n	8006830 <USB_HC_Init+0x138>
 8006736:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <USB_HC_Init+0x44>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	0800674d 	.word	0x0800674d
 8006740:	080067f3 	.word	0x080067f3
 8006744:	0800674d 	.word	0x0800674d
 8006748:	080067b5 	.word	0x080067b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006758:	461a      	mov	r2, r3
 800675a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800675e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006760:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006764:	2b00      	cmp	r3, #0
 8006766:	da10      	bge.n	800678a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	440a      	add	r2, r1
 800677e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006786:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006788:	e055      	b.n	8006836 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a6f      	ldr	r2, [pc, #444]	@ (800694c <USB_HC_Init+0x254>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d151      	bne.n	8006836 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067b0:	60d3      	str	r3, [r2, #12]
      break;
 80067b2:	e040      	b.n	8006836 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c0:	461a      	mov	r2, r3
 80067c2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80067c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da34      	bge.n	800683a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80067f0:	e023      	b.n	800683a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fe:	461a      	mov	r2, r3
 8006800:	f240 2325 	movw	r3, #549	@ 0x225
 8006804:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006806:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da17      	bge.n	800683e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	440a      	add	r2, r1
 8006824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006828:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800682c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800682e:	e006      	b.n	800683e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	77fb      	strb	r3, [r7, #31]
      break;
 8006834:	e004      	b.n	8006840 <USB_HC_Init+0x148>
      break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <USB_HC_Init+0x148>
      break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <USB_HC_Init+0x148>
      break;
 800683e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684c:	461a      	mov	r2, r3
 800684e:	2300      	movs	r3, #0
 8006850:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	440a      	add	r2, r1
 8006868:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800686c:	f043 0302 	orr.w	r3, r3, #2
 8006870:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	2101      	movs	r1, #1
 8006882:	fa01 f303 	lsl.w	r3, r1, r3
 8006886:	6939      	ldr	r1, [r7, #16]
 8006888:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800688c:	4313      	orrs	r3, r2
 800688e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800689c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	da03      	bge.n	80068ac <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	e001      	b.n	80068b0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fef9 	bl	80066a8 <USB_GetHostSpeed>
 80068b6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d106      	bne.n	80068ce <USB_HC_Init+0x1d6>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d003      	beq.n	80068ce <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e001      	b.n	80068d2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068d2:	787b      	ldrb	r3, [r7, #1]
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068da:	78bb      	ldrb	r3, [r7, #2]
 80068dc:	02db      	lsls	r3, r3, #11
 80068de:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068e8:	049b      	lsls	r3, r3, #18
 80068ea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80068f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80068f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068f6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	440a      	add	r2, r1
 8006908:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800690c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006910:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006912:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006916:	2b03      	cmp	r3, #3
 8006918:	d003      	beq.n	8006922 <USB_HC_Init+0x22a>
 800691a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d10f      	bne.n	8006942 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4413      	add	r3, r2
 800692a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	78fa      	ldrb	r2, [r7, #3]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	440a      	add	r2, r1
 8006938:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800693c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006940:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006942:	7ffb      	ldrb	r3, [r7, #31]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40040000 	.word	0x40040000

08006950 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	@ 0x30
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800696c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a5d      	ldr	r2, [pc, #372]	@ (8006ae8 <USB_HC_StartXfer+0x198>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d12f      	bne.n	80069d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d11c      	bne.n	80069b6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	7c9b      	ldrb	r3, [r3, #18]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <USB_HC_StartXfer+0x3c>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	7c9b      	ldrb	r3, [r3, #18]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d124      	bne.n	80069d6 <USB_HC_StartXfer+0x86>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	799b      	ldrb	r3, [r3, #6]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d120      	bne.n	80069d6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	4413      	add	r3, r2
 800699c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	6a3a      	ldr	r2, [r7, #32]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b2:	60d3      	str	r3, [r2, #12]
 80069b4:	e00f      	b.n	80069d6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	791b      	ldrb	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <USB_HC_StartXfer+0x86>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	795b      	ldrb	r3, [r3, #5]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d107      	bne.n	80069d6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	4619      	mov	r1, r3
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fb6b 	bl	80070a8 <USB_DoPing>
        return HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e232      	b.n	8006e3c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	799b      	ldrb	r3, [r3, #6]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d158      	bne.n	8006a90 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80069de:	2301      	movs	r3, #1
 80069e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	78db      	ldrb	r3, [r3, #3]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	8a92      	ldrh	r2, [r2, #20]
 80069f0:	fb03 f202 	mul.w	r2, r3, r2
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	61da      	str	r2, [r3, #28]
 80069f8:	e07c      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	7c9b      	ldrb	r3, [r3, #18]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d130      	bne.n	8006a64 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	2bbc      	cmp	r3, #188	@ 0xbc
 8006a08:	d918      	bls.n	8006a3c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	8a9b      	ldrh	r3, [r3, #20]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d003      	beq.n	8006a2c <USB_HC_StartXfer+0xdc>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d103      	bne.n	8006a34 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	60da      	str	r2, [r3, #12]
 8006a32:	e05f      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2201      	movs	r2, #1
 8006a38:	60da      	str	r2, [r3, #12]
 8006a3a:	e05b      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d007      	beq.n	8006a5c <USB_HC_StartXfer+0x10c>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d003      	beq.n	8006a5c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2204      	movs	r2, #4
 8006a58:	60da      	str	r2, [r3, #12]
 8006a5a:	e04b      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	e047      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10d      	bne.n	8006a86 <USB_HC_StartXfer+0x136>
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	8a92      	ldrh	r2, [r2, #20]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d907      	bls.n	8006a86 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	8a92      	ldrh	r2, [r2, #20]
 8006a7c:	fb03 f202 	mul.w	r2, r3, r2
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	61da      	str	r2, [r3, #28]
 8006a84:	e036      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	61da      	str	r2, [r3, #28]
 8006a8e:	e031      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d018      	beq.n	8006aca <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	8a92      	ldrh	r2, [r2, #20]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	8a92      	ldrh	r2, [r2, #20]
 8006aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aac:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006aae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006ab0:	8b7b      	ldrh	r3, [r7, #26]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d90b      	bls.n	8006ace <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006ab6:	8b7b      	ldrh	r3, [r7, #26]
 8006ab8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006aba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	8a92      	ldrh	r2, [r2, #20]
 8006ac0:	fb03 f202 	mul.w	r2, r3, r2
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	61da      	str	r2, [r3, #28]
 8006ac8:	e001      	b.n	8006ace <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006aca:	2301      	movs	r3, #1
 8006acc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	78db      	ldrb	r3, [r3, #3]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ad6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	8a92      	ldrh	r2, [r2, #20]
 8006adc:	fb03 f202 	mul.w	r2, r3, r2
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	61da      	str	r2, [r3, #28]
 8006ae4:	e006      	b.n	8006af4 <USB_HC_StartXfer+0x1a4>
 8006ae6:	bf00      	nop
 8006ae8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006afc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006afe:	04d9      	lsls	r1, r3, #19
 8006b00:	4ba3      	ldr	r3, [pc, #652]	@ (8006d90 <USB_HC_StartXfer+0x440>)
 8006b02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	7d9b      	ldrb	r3, [r3, #22]
 8006b0a:	075b      	lsls	r3, r3, #29
 8006b0c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b10:	69f9      	ldr	r1, [r7, #28]
 8006b12:	0148      	lsls	r0, r1, #5
 8006b14:	6a39      	ldr	r1, [r7, #32]
 8006b16:	4401      	add	r1, r0
 8006b18:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6999      	ldr	r1, [r3, #24]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b36:	460a      	mov	r2, r1
 8006b38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bf0c      	ite	eq
 8006b4a:	2301      	moveq	r3, #1
 8006b4c:	2300      	movne	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	7e7b      	ldrb	r3, [r7, #25]
 8006b82:	075b      	lsls	r3, r3, #29
 8006b84:	69f9      	ldr	r1, [r7, #28]
 8006b86:	0148      	lsls	r0, r1, #5
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	4401      	add	r1, r0
 8006b8c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006b90:	4313      	orrs	r3, r2
 8006b92:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	799b      	ldrb	r3, [r3, #6]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	f040 80c3 	bne.w	8006d24 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	7c5b      	ldrb	r3, [r3, #17]
 8006ba2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	6a3a      	ldr	r2, [r7, #32]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bba:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bd6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006bda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	79db      	ldrb	r3, [r3, #7]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d123      	bne.n	8006c2c <USB_HC_StartXfer+0x2dc>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	78db      	ldrb	r3, [r3, #3]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d11f      	bne.n	8006c2c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c0a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	7c9b      	ldrb	r3, [r3, #18]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d003      	beq.n	8006c3c <USB_HC_StartXfer+0x2ec>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	7c9b      	ldrb	r3, [r3, #18]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d117      	bne.n	8006c6c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d113      	bne.n	8006c6c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	78db      	ldrb	r3, [r3, #3]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d10f      	bne.n	8006c6c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c6a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	7c9b      	ldrb	r3, [r3, #18]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d162      	bne.n	8006d3a <USB_HC_StartXfer+0x3ea>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	78db      	ldrb	r3, [r3, #3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d15e      	bne.n	8006d3a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d858      	bhi.n	8006d38 <USB_HC_StartXfer+0x3e8>
 8006c86:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <USB_HC_StartXfer+0x33c>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006cbf 	.word	0x08006cbf
 8006c94:	08006ce1 	.word	0x08006ce1
 8006c98:	08006d03 	.word	0x08006d03
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	6a3a      	ldr	r2, [r7, #32]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cba:	6053      	str	r3, [r2, #4]
          break;
 8006cbc:	e03d      	b.n	8006d3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cd8:	f043 030e 	orr.w	r3, r3, #14
 8006cdc:	6053      	str	r3, [r2, #4]
          break;
 8006cde:	e02c      	b.n	8006d3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cfe:	6053      	str	r3, [r2, #4]
          break;
 8006d00:	e01b      	b.n	8006d3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d20:	6053      	str	r3, [r2, #4]
          break;
 8006d22:	e00a      	b.n	8006d3a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d30:	461a      	mov	r2, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	6053      	str	r3, [r2, #4]
 8006d36:	e000      	b.n	8006d3a <USB_HC_StartXfer+0x3ea>
          break;
 8006d38:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d50:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	78db      	ldrb	r3, [r3, #3]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e003      	b.n	8006d6c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d6a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d72:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d80:	461a      	mov	r2, r3
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e055      	b.n	8006e3c <USB_HC_StartXfer+0x4ec>
 8006d90:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	78db      	ldrb	r3, [r3, #3]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d14e      	bne.n	8006e3a <USB_HC_StartXfer+0x4ea>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d04a      	beq.n	8006e3a <USB_HC_StartXfer+0x4ea>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	79db      	ldrb	r3, [r3, #7]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d146      	bne.n	8006e3a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	7c9b      	ldrb	r3, [r3, #18]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d831      	bhi.n	8006e18 <USB_HC_StartXfer+0x4c8>
 8006db4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <USB_HC_StartXfer+0x46c>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006dcd 	.word	0x08006dcd
 8006dc0:	08006df1 	.word	0x08006df1
 8006dc4:	08006dcd 	.word	0x08006dcd
 8006dc8:	08006df1 	.word	0x08006df1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	3303      	adds	r3, #3
 8006dd2:	089b      	lsrs	r3, r3, #2
 8006dd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006dd6:	8afa      	ldrh	r2, [r7, #22]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d91c      	bls.n	8006e1c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dee:	e015      	b.n	8006e1c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	3303      	adds	r3, #3
 8006df6:	089b      	lsrs	r3, r3, #2
 8006df8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006dfa:	8afa      	ldrh	r2, [r7, #22]
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d90a      	bls.n	8006e20 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e16:	e003      	b.n	8006e20 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <USB_HC_StartXfer+0x4d2>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <USB_HC_StartXfer+0x4d2>
        break;
 8006e20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6999      	ldr	r1, [r3, #24]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	785a      	ldrb	r2, [r3, #1]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2000      	movs	r0, #0
 8006e32:	9000      	str	r0, [sp, #0]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff f9c9 	bl	80061cc <USB_WritePacket>
  }

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3728      	adds	r7, #40	@ 0x28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	b29b      	uxth	r3, r3
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b089      	sub	sp, #36	@ 0x24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	0c9b      	lsrs	r3, r3, #18
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	0fdb      	lsrs	r3, r3, #31
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	0fdb      	lsrs	r3, r3, #31
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d10d      	bne.n	8006ee8 <USB_HC_Halt+0x82>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <USB_HC_Halt+0x82>
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d002      	beq.n	8006ee4 <USB_HC_Halt+0x7e>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d101      	bne.n	8006ee8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e0d8      	b.n	800709a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <USB_HC_Halt+0x8e>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d173      	bne.n	8006fdc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d14a      	bne.n	8006fb6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d133      	bne.n	8006f94 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f4a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f6a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f78:	d82e      	bhi.n	8006fd8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f90:	d0ec      	beq.n	8006f6c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f92:	e081      	b.n	8007098 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	0151      	lsls	r1, r2, #5
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	440a      	add	r2, r1
 8006faa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fb2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fb4:	e070      	b.n	8007098 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fd4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fd6:	e05f      	b.n	8007098 <USB_HC_Halt+0x232>
            break;
 8006fd8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fda:	e05d      	b.n	8007098 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ff6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ffa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d133      	bne.n	8007074 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	440a      	add	r2, r1
 8007022:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007026:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800702a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	440a      	add	r2, r1
 8007042:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007046:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800704a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3301      	adds	r3, #1
 8007050:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007058:	d81d      	bhi.n	8007096 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800706c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007070:	d0ec      	beq.n	800704c <USB_HC_Halt+0x1e6>
 8007072:	e011      	b.n	8007098 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	440a      	add	r2, r1
 800708a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800708e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	e000      	b.n	8007098 <USB_HC_Halt+0x232>
          break;
 8007096:	bf00      	nop
    }
  }

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3724      	adds	r7, #36	@ 0x24
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070bc:	2301      	movs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	04da      	lsls	r2, r3, #19
 80070c4:	4b15      	ldr	r3, [pc, #84]	@ (800711c <USB_DoPing+0x74>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	4413      	add	r3, r2
 8007102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007106:	461a      	mov	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	1ff80000 	.word	0x1ff80000

08007120 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fe ff8c 	bl	8006052 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800713a:	2110      	movs	r1, #16
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fe ffe5 	bl	800610c <USB_FlushTxFifo>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff f80f 	bl	8006170 <USB_FlushRxFifo>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800715c:	2300      	movs	r3, #0
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	e01f      	b.n	80071a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007178:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007180:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007188:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007196:	461a      	mov	r2, r3
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	3301      	adds	r3, #1
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b0f      	cmp	r3, #15
 80071a6:	d9dc      	bls.n	8007162 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e034      	b.n	8007218 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e2:	461a      	mov	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071f4:	d80c      	bhi.n	8007210 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800720c:	d0ec      	beq.n	80071e8 <USB_StopHost+0xc8>
 800720e:	e000      	b.n	8007212 <USB_StopHost+0xf2>
        break;
 8007210:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3301      	adds	r3, #1
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b0f      	cmp	r3, #15
 800721c:	d9c7      	bls.n	80071ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007224:	461a      	mov	r2, r3
 8007226:	f04f 33ff 	mov.w	r3, #4294967295
 800722a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f04f 32ff 	mov.w	r2, #4294967295
 8007232:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fe fefb 	bl	8006030 <USB_EnableGlobalInt>

  return ret;
 800723a:	7ffb      	ldrb	r3, [r7, #31]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007244:	b590      	push	{r4, r7, lr}
 8007246:	b089      	sub	sp, #36	@ 0x24
 8007248:	af04      	add	r7, sp, #16
 800724a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800724c:	2301      	movs	r3, #1
 800724e:	2202      	movs	r2, #2
 8007250:	2102      	movs	r1, #2
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fc85 	bl	8007b62 <USBH_FindInterface>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	2bff      	cmp	r3, #255	@ 0xff
 8007260:	d002      	beq.n	8007268 <USBH_CDC_InterfaceInit+0x24>
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d901      	bls.n	800726c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007268:	2302      	movs	r3, #2
 800726a:	e13d      	b.n	80074e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc5a 	bl	8007b2a <USBH_SelectInterface>
 8007276:	4603      	mov	r3, r0
 8007278:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007280:	2302      	movs	r3, #2
 8007282:	e131      	b.n	80074e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800728a:	2050      	movs	r0, #80	@ 0x50
 800728c:	f002 fb64 	bl	8009958 <malloc>
 8007290:	4603      	mov	r3, r0
 8007292:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80072a4:	2302      	movs	r3, #2
 80072a6:	e11f      	b.n	80074e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80072a8:	2250      	movs	r2, #80	@ 0x50
 80072aa:	2100      	movs	r1, #0
 80072ac:	68b8      	ldr	r0, [r7, #8]
 80072ae:	f002 fc11 	bl	8009ad4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	211a      	movs	r1, #26
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	4413      	add	r3, r2
 80072be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	b25b      	sxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da15      	bge.n	80072f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	211a      	movs	r1, #26
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072da:	781a      	ldrb	r2, [r3, #0]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	211a      	movs	r1, #26
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 ffbe 	bl	800927e <USBH_AllocPipe>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7819      	ldrb	r1, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	7858      	ldrb	r0, [r3, #1]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	8952      	ldrh	r2, [r2, #10]
 8007322:	9202      	str	r2, [sp, #8]
 8007324:	2203      	movs	r2, #3
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4623      	mov	r3, r4
 800732c:	4602      	mov	r2, r0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 ff76 	bl	8009220 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2200      	movs	r2, #0
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f002 fa85 	bl	800984c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007342:	2300      	movs	r3, #0
 8007344:	2200      	movs	r2, #0
 8007346:	210a      	movs	r1, #10
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc0a 	bl	8007b62 <USBH_FindInterface>
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2bff      	cmp	r3, #255	@ 0xff
 8007356:	d002      	beq.n	800735e <USBH_CDC_InterfaceInit+0x11a>
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d901      	bls.n	8007362 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800735e:	2302      	movs	r3, #2
 8007360:	e0c2      	b.n	80074e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	211a      	movs	r1, #26
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	4413      	add	r3, r2
 800736e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b25b      	sxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	da16      	bge.n	80073a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	211a      	movs	r1, #26
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	4413      	add	r3, r2
 8007386:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800738a:	781a      	ldrb	r2, [r3, #0]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	211a      	movs	r1, #26
 8007396:	fb01 f303 	mul.w	r3, r1, r3
 800739a:	4413      	add	r3, r2
 800739c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073a0:	881a      	ldrh	r2, [r3, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	835a      	strh	r2, [r3, #26]
 80073a6:	e015      	b.n	80073d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	211a      	movs	r1, #26
 80073ae:	fb01 f303 	mul.w	r3, r1, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	211a      	movs	r1, #26
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073ce:	881a      	ldrh	r2, [r3, #0]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	211a      	movs	r1, #26
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	4413      	add	r3, r2
 80073e0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b25b      	sxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	da16      	bge.n	800741a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	211a      	movs	r1, #26
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	211a      	movs	r1, #26
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	4413      	add	r3, r2
 800740e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007412:	881a      	ldrh	r2, [r3, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	835a      	strh	r2, [r3, #26]
 8007418:	e015      	b.n	8007446 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	211a      	movs	r1, #26
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	4413      	add	r3, r2
 8007426:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	211a      	movs	r1, #26
 8007436:	fb01 f303 	mul.w	r3, r1, r3
 800743a:	4413      	add	r3, r2
 800743c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007440:	881a      	ldrh	r2, [r3, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	7b9b      	ldrb	r3, [r3, #14]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 ff16 	bl	800927e <USBH_AllocPipe>
 8007452:	4603      	mov	r3, r0
 8007454:	461a      	mov	r2, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	7bdb      	ldrb	r3, [r3, #15]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 ff0c 	bl	800927e <USBH_AllocPipe>
 8007466:	4603      	mov	r3, r0
 8007468:	461a      	mov	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	7b59      	ldrb	r1, [r3, #13]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	7b98      	ldrb	r0, [r3, #14]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	8b12      	ldrh	r2, [r2, #24]
 8007486:	9202      	str	r2, [sp, #8]
 8007488:	2202      	movs	r2, #2
 800748a:	9201      	str	r2, [sp, #4]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4623      	mov	r3, r4
 8007490:	4602      	mov	r2, r0
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 fec4 	bl	8009220 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	7b19      	ldrb	r1, [r3, #12]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	7bd8      	ldrb	r0, [r3, #15]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	8b52      	ldrh	r2, [r2, #26]
 80074b0:	9202      	str	r2, [sp, #8]
 80074b2:	2202      	movs	r2, #2
 80074b4:	9201      	str	r2, [sp, #4]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4623      	mov	r3, r4
 80074ba:	4602      	mov	r2, r0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 feaf 	bl	8009220 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	7b5b      	ldrb	r3, [r3, #13]
 80074ce:	2200      	movs	r2, #0
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f002 f9ba 	bl	800984c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	7b1b      	ldrb	r3, [r3, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 f9b3 	bl	800984c <USBH_LL_SetToggle>

  return USBH_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd90      	pop	{r4, r7, pc}

080074f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 fea4 	bl	800925e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fecf 	bl	80092c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	7b1b      	ldrb	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00e      	beq.n	800754e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	7b1b      	ldrb	r3, [r3, #12]
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fe91 	bl	800925e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	7b1b      	ldrb	r3, [r3, #12]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 febc 	bl	80092c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	7b5b      	ldrb	r3, [r3, #13]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00e      	beq.n	8007574 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	7b5b      	ldrb	r3, [r3, #13]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fe7e 	bl	800925e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	7b5b      	ldrb	r3, [r3, #13]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 fea9 	bl	80092c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	4618      	mov	r0, r3
 800758a:	f002 f9ed 	bl	8009968 <free>
    phost->pActiveClass->pData = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007594:	2200      	movs	r2, #0
 8007596:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3340      	adds	r3, #64	@ 0x40
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f8b1 	bl	8007722 <GetLineCoding>
 80075c0:	4603      	mov	r3, r0
 80075c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075d0:	2102      	movs	r1, #2
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075d6:	7afb      	ldrb	r3, [r7, #11]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007600:	2b04      	cmp	r3, #4
 8007602:	d877      	bhi.n	80076f4 <USBH_CDC_Process+0x114>
 8007604:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <USBH_CDC_Process+0x2c>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	08007621 	.word	0x08007621
 8007610:	08007627 	.word	0x08007627
 8007614:	08007657 	.word	0x08007657
 8007618:	080076cb 	.word	0x080076cb
 800761c:	080076d9 	.word	0x080076d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	e06d      	b.n	8007702 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f897 	bl	8007760 <SetLineCoding>
 8007632:	4603      	mov	r3, r0
 8007634:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007644:	e058      	b.n	80076f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d055      	beq.n	80076f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2204      	movs	r2, #4
 8007650:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007654:	e050      	b.n	80076f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	3340      	adds	r3, #64	@ 0x40
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f860 	bl	8007722 <GetLineCoding>
 8007662:	4603      	mov	r3, r0
 8007664:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d126      	bne.n	80076ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767e:	791b      	ldrb	r3, [r3, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d13b      	bne.n	80076fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007690:	429a      	cmp	r2, r3
 8007692:	d133      	bne.n	80076fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800769e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d12b      	bne.n	80076fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d124      	bne.n	80076fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f958 	bl	8007968 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076b8:	e020      	b.n	80076fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d01d      	beq.n	80076fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2204      	movs	r2, #4
 80076c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80076c8:	e018      	b.n	80076fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f867 	bl	800779e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f8da 	bl	800788a <CDC_ProcessReception>
      break;
 80076d6:	e014      	b.n	8007702 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 f81a 	bl	8008714 <USBH_ClrFeature>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80076f2:	e005      	b.n	8007700 <USBH_CDC_Process+0x120>

    default:
      break;
 80076f4:	bf00      	nop
 80076f6:	e004      	b.n	8007702 <USBH_CDC_Process+0x122>
      break;
 80076f8:	bf00      	nop
 80076fa:	e002      	b.n	8007702 <USBH_CDC_Process+0x122>
      break;
 80076fc:	bf00      	nop
 80076fe:	e000      	b.n	8007702 <USBH_CDC_Process+0x122>
      break;
 8007700:	bf00      	nop

  }

  return status;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	22a1      	movs	r2, #161	@ 0xa1
 8007730:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2221      	movs	r2, #33	@ 0x21
 8007736:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2207      	movs	r2, #7
 8007748:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2207      	movs	r2, #7
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fb14 	bl	8008d7e <USBH_CtlReq>
 8007756:	4603      	mov	r3, r0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2221      	movs	r2, #33	@ 0x21
 800776e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2207      	movs	r2, #7
 8007786:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2207      	movs	r2, #7
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 faf5 	bl	8008d7e <USBH_CtlReq>
 8007794:	4603      	mov	r3, r0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af02      	add	r7, sp, #8
 80077a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d002      	beq.n	80077c4 <CDC_ProcessTransmission+0x26>
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d023      	beq.n	800780a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80077c2:	e05e      	b.n	8007882 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	8b12      	ldrh	r2, [r2, #24]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d90b      	bls.n	80077e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	69d9      	ldr	r1, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8b1a      	ldrh	r2, [r3, #24]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	7b5b      	ldrb	r3, [r3, #13]
 80077dc:	2001      	movs	r0, #1
 80077de:	9000      	str	r0, [sp, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 fcda 	bl	800919a <USBH_BulkSendData>
 80077e6:	e00b      	b.n	8007800 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	7b5b      	ldrb	r3, [r3, #13]
 80077f6:	2001      	movs	r0, #1
 80077f8:	9000      	str	r0, [sp, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fccd 	bl	800919a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007808:	e03b      	b.n	8007882 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	7b5b      	ldrb	r3, [r3, #13]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fff1 	bl	80097f8 <USBH_LL_GetURBState>
 8007816:	4603      	mov	r3, r0
 8007818:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d128      	bne.n	8007872 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	8b12      	ldrh	r2, [r2, #24]
 8007828:	4293      	cmp	r3, r2
 800782a:	d90e      	bls.n	800784a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	8b12      	ldrh	r2, [r2, #24]
 8007834:	1a9a      	subs	r2, r3, r2
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	8b12      	ldrh	r2, [r2, #24]
 8007842:	441a      	add	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	61da      	str	r2, [r3, #28]
 8007848:	e002      	b.n	8007850 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007860:	e00e      	b.n	8007880 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f868 	bl	8007940 <USBH_CDC_TransmitCallback>
      break;
 8007870:	e006      	b.n	8007880 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007872:	7afb      	ldrb	r3, [r7, #11]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d103      	bne.n	8007880 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007880:	bf00      	nop
  }
}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b086      	sub	sp, #24
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800789c:	2300      	movs	r3, #0
 800789e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d002      	beq.n	80078b0 <CDC_ProcessReception+0x26>
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d00e      	beq.n	80078cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80078ae:	e043      	b.n	8007938 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	6a19      	ldr	r1, [r3, #32]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	8b5a      	ldrh	r2, [r3, #26]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	7b1b      	ldrb	r3, [r3, #12]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fc91 	bl	80091e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2204      	movs	r2, #4
 80078c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80078ca:	e035      	b.n	8007938 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	7b1b      	ldrb	r3, [r3, #12]
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 ff90 	bl	80097f8 <USBH_LL_GetURBState>
 80078d8:	4603      	mov	r3, r0
 80078da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078dc:	7cfb      	ldrb	r3, [r7, #19]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d129      	bne.n	8007936 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	7b1b      	ldrb	r3, [r3, #12]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fef3 	bl	80096d4 <USBH_LL_GetLastXferSize>
 80078ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d016      	beq.n	8007928 <CDC_ProcessReception+0x9e>
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	8b5b      	ldrh	r3, [r3, #26]
 80078fe:	461a      	mov	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4293      	cmp	r3, r2
 8007904:	d910      	bls.n	8007928 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad2      	subs	r2, r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	6a1a      	ldr	r2, [r3, #32]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	441a      	add	r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2203      	movs	r2, #3
 8007922:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007926:	e006      	b.n	8007936 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f80f 	bl	8007954 <USBH_CDC_ReceiveCallback>
      break;
 8007936:	bf00      	nop
  }
}
 8007938:	bf00      	nop
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007990:	2302      	movs	r3, #2
 8007992:	e029      	b.n	80079e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	79fa      	ldrb	r2, [r7, #7]
 8007998:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f81f 	bl	80079f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f001 fdc3 	bl	800956c <USBH_LL_Init>

  return USBH_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e009      	b.n	8007a16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	33e0      	adds	r3, #224	@ 0xe0
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b0f      	cmp	r3, #15
 8007a1a:	d9f2      	bls.n	8007a02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e009      	b.n	8007a36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a3c:	d3f1      	bcc.n	8007a22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2240      	movs	r2, #64	@ 0x40
 8007a62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	331c      	adds	r3, #28
 8007a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a92:	2100      	movs	r1, #0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f002 f81d 	bl	8009ad4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f002 f814 	bl	8009ad4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007ab2:	2212      	movs	r2, #18
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f002 f80c 	bl	8009ad4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ac2:	223e      	movs	r2, #62	@ 0x3e
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 f804 	bl	8009ad4 <memset>

  return USBH_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d016      	beq.n	8007b18 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10e      	bne.n	8007b12 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007afa:	1c59      	adds	r1, r3, #1
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	33de      	adds	r3, #222	@ 0xde
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
 8007b10:	e004      	b.n	8007b1c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b12:	2302      	movs	r3, #2
 8007b14:	73fb      	strb	r3, [r7, #15]
 8007b16:	e001      	b.n	8007b1c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d204      	bcs.n	8007b50 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007b4e:	e001      	b.n	8007b54 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b50:	2302      	movs	r3, #2
 8007b52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b087      	sub	sp, #28
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4603      	mov	r3, r0
 8007b72:	70fb      	strb	r3, [r7, #3]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70bb      	strb	r3, [r7, #2]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b8a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b8c:	e025      	b.n	8007bda <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	221a      	movs	r2, #26
 8007b92:	fb02 f303 	mul.w	r3, r2, r3
 8007b96:	3308      	adds	r3, #8
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	795b      	ldrb	r3, [r3, #5]
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d002      	beq.n	8007bb0 <USBH_FindInterface+0x4e>
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	2bff      	cmp	r3, #255	@ 0xff
 8007bae:	d111      	bne.n	8007bd4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bb4:	78ba      	ldrb	r2, [r7, #2]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d002      	beq.n	8007bc0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bba:	78bb      	ldrb	r3, [r7, #2]
 8007bbc:	2bff      	cmp	r3, #255	@ 0xff
 8007bbe:	d109      	bne.n	8007bd4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bc4:	787a      	ldrb	r2, [r7, #1]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d002      	beq.n	8007bd0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bca:	787b      	ldrb	r3, [r7, #1]
 8007bcc:	2bff      	cmp	r3, #255	@ 0xff
 8007bce:	d101      	bne.n	8007bd4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	e006      	b.n	8007be2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d9d6      	bls.n	8007b8e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007be0:	23ff      	movs	r3, #255	@ 0xff
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 fcf4 	bl	80095e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fe0d 	bl	800981e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af04      	add	r7, sp, #16
 8007c16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d102      	bne.n	8007c32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2203      	movs	r2, #3
 8007c30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b0b      	cmp	r3, #11
 8007c3a:	f200 81bb 	bhi.w	8007fb4 <USBH_Process+0x3a4>
 8007c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c44 <USBH_Process+0x34>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c75 	.word	0x08007c75
 8007c48:	08007ca7 	.word	0x08007ca7
 8007c4c:	08007d0f 	.word	0x08007d0f
 8007c50:	08007f4f 	.word	0x08007f4f
 8007c54:	08007fb5 	.word	0x08007fb5
 8007c58:	08007daf 	.word	0x08007daf
 8007c5c:	08007ef5 	.word	0x08007ef5
 8007c60:	08007de5 	.word	0x08007de5
 8007c64:	08007e05 	.word	0x08007e05
 8007c68:	08007e23 	.word	0x08007e23
 8007c6c:	08007e67 	.word	0x08007e67
 8007c70:	08007f37 	.word	0x08007f37
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 819b 	beq.w	8007fb8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c88:	20c8      	movs	r0, #200	@ 0xc8
 8007c8a:	f001 fe12 	bl	80098b2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 fd05 	bl	800969e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ca4:	e188      	b.n	8007fb8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d107      	bne.n	8007cc0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cbe:	e18a      	b.n	8007fd6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007cc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cca:	d914      	bls.n	8007cf6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d903      	bls.n	8007cee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	220d      	movs	r2, #13
 8007cea:	701a      	strb	r2, [r3, #0]
      break;
 8007cec:	e173      	b.n	8007fd6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
      break;
 8007cf4:	e16f      	b.n	8007fd6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007cfc:	f103 020a 	add.w	r2, r3, #10
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007d06:	200a      	movs	r0, #10
 8007d08:	f001 fdd3 	bl	80098b2 <USBH_Delay>
      break;
 8007d0c:	e163      	b.n	8007fd6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d1e:	2104      	movs	r1, #4
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d24:	2064      	movs	r0, #100	@ 0x64
 8007d26:	f001 fdc4 	bl	80098b2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fc90 	bl	8009650 <USBH_LL_GetSpeed>
 8007d30:	4603      	mov	r3, r0
 8007d32:	461a      	mov	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2205      	movs	r2, #5
 8007d3e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d40:	2100      	movs	r1, #0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fa9b 	bl	800927e <USBH_AllocPipe>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d50:	2180      	movs	r1, #128	@ 0x80
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 fa93 	bl	800927e <USBH_AllocPipe>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7919      	ldrb	r1, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d74:	9202      	str	r2, [sp, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	9201      	str	r2, [sp, #4]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2280      	movs	r2, #128	@ 0x80
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fa4d 	bl	8009220 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	7959      	ldrb	r1, [r3, #5]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d9a:	9202      	str	r2, [sp, #8]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	9201      	str	r2, [sp, #4]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4603      	mov	r3, r0
 8007da4:	2200      	movs	r2, #0
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fa3a 	bl	8009220 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dac:	e113      	b.n	8007fd6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f916 	bl	8007fe0 <USBH_HandleEnum>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 80fd 	bne.w	8007fbc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d103      	bne.n	8007ddc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2208      	movs	r2, #8
 8007dd8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007dda:	e0ef      	b.n	8007fbc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2207      	movs	r2, #7
 8007de0:	701a      	strb	r2, [r3, #0]
      break;
 8007de2:	e0eb      	b.n	8007fbc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 80e8 	beq.w	8007fc0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007df6:	2101      	movs	r1, #1
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2208      	movs	r2, #8
 8007e00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007e02:	e0dd      	b.n	8007fc0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc3a 	bl	8008686 <USBH_SetCfg>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f040 80d5 	bne.w	8007fc4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2209      	movs	r2, #9
 8007e1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e20:	e0d0      	b.n	8007fc4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d016      	beq.n	8007e5e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e30:	2101      	movs	r1, #1
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fc4a 	bl	80086cc <USBH_SetFeature>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	220a      	movs	r2, #10
 8007e48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e4a:	e0bd      	b.n	8007fc8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	f040 80b9 	bne.w	8007fc8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	220a      	movs	r2, #10
 8007e5a:	701a      	strb	r2, [r3, #0]
      break;
 8007e5c:	e0b4      	b.n	8007fc8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	220a      	movs	r2, #10
 8007e62:	701a      	strb	r2, [r3, #0]
      break;
 8007e64:	e0b0      	b.n	8007fc8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80ad 	beq.w	8007fcc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
 8007e7e:	e016      	b.n	8007eae <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e80:	7bfa      	ldrb	r2, [r7, #15]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	32de      	adds	r2, #222	@ 0xde
 8007e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8a:	791a      	ldrb	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d108      	bne.n	8007ea8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e96:	7bfa      	ldrb	r2, [r7, #15]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	32de      	adds	r2, #222	@ 0xde
 8007e9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007ea6:	e005      	b.n	8007eb4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	73fb      	strb	r3, [r7, #15]
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0e5      	beq.n	8007e80 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2206      	movs	r2, #6
 8007ed4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007edc:	2103      	movs	r1, #3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ee2:	e073      	b.n	8007fcc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	220d      	movs	r2, #13
 8007ee8:	701a      	strb	r2, [r3, #0]
      break;
 8007eea:	e06f      	b.n	8007fcc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	220d      	movs	r2, #13
 8007ef0:	701a      	strb	r2, [r3, #0]
      break;
 8007ef2:	e06b      	b.n	8007fcc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d017      	beq.n	8007f2e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	220b      	movs	r2, #11
 8007f1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f1c:	e058      	b.n	8007fd0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d154      	bne.n	8007fd0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	220d      	movs	r2, #13
 8007f2a:	701a      	strb	r2, [r3, #0]
      break;
 8007f2c:	e050      	b.n	8007fd0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220d      	movs	r2, #13
 8007f32:	701a      	strb	r2, [r3, #0]
      break;
 8007f34:	e04c      	b.n	8007fd0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d049      	beq.n	8007fd4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4798      	blx	r3
      }
      break;
 8007f4c:	e042      	b.n	8007fd4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fd4a 	bl	80079f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f8a:	2105      	movs	r1, #5
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d107      	bne.n	8007fac <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fe22 	bl	8007bee <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007faa:	e014      	b.n	8007fd6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fb19 	bl	80095e4 <USBH_LL_Start>
      break;
 8007fb2:	e010      	b.n	8007fd6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007fb4:	bf00      	nop
 8007fb6:	e00e      	b.n	8007fd6 <USBH_Process+0x3c6>
      break;
 8007fb8:	bf00      	nop
 8007fba:	e00c      	b.n	8007fd6 <USBH_Process+0x3c6>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e00a      	b.n	8007fd6 <USBH_Process+0x3c6>
    break;
 8007fc0:	bf00      	nop
 8007fc2:	e008      	b.n	8007fd6 <USBH_Process+0x3c6>
      break;
 8007fc4:	bf00      	nop
 8007fc6:	e006      	b.n	8007fd6 <USBH_Process+0x3c6>
      break;
 8007fc8:	bf00      	nop
 8007fca:	e004      	b.n	8007fd6 <USBH_Process+0x3c6>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e002      	b.n	8007fd6 <USBH_Process+0x3c6>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e000      	b.n	8007fd6 <USBH_Process+0x3c6>
      break;
 8007fd4:	bf00      	nop
  }
  return USBH_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af04      	add	r7, sp, #16
 8007fe6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b07      	cmp	r3, #7
 8007ff6:	f200 81bd 	bhi.w	8008374 <USBH_HandleEnum+0x394>
 8007ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8008000 <USBH_HandleEnum+0x20>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008021 	.word	0x08008021
 8008004:	080080db 	.word	0x080080db
 8008008:	08008145 	.word	0x08008145
 800800c:	080081cf 	.word	0x080081cf
 8008010:	08008239 	.word	0x08008239
 8008014:	080082a9 	.word	0x080082a9
 8008018:	080082ef 	.word	0x080082ef
 800801c:	08008335 	.word	0x08008335
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008020:	2108      	movs	r1, #8
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa4c 	bl	80084c0 <USBH_Get_DevDesc>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d12e      	bne.n	8008090 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7919      	ldrb	r1, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008056:	9202      	str	r2, [sp, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	9201      	str	r2, [sp, #4]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	4603      	mov	r3, r0
 8008060:	2280      	movs	r2, #128	@ 0x80
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 f8dc 	bl	8009220 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	7959      	ldrb	r1, [r3, #5]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800807c:	9202      	str	r2, [sp, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	9201      	str	r2, [sp, #4]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4603      	mov	r3, r0
 8008086:	2200      	movs	r2, #0
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 f8c9 	bl	8009220 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800808e:	e173      	b.n	8008378 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	2b03      	cmp	r3, #3
 8008094:	f040 8170 	bne.w	8008378 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800809e:	3301      	adds	r3, #1
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d903      	bls.n	80080ba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	220d      	movs	r2, #13
 80080b6:	701a      	strb	r2, [r3, #0]
      break;
 80080b8:	e15e      	b.n	8008378 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f8fd 	bl	80092c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	791b      	ldrb	r3, [r3, #4]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f8f7 	bl	80092c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
      break;
 80080d8:	e14e      	b.n	8008378 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080da:	2112      	movs	r1, #18
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f9ef 	bl	80084c0 <USBH_Get_DevDesc>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d103      	bne.n	80080f4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080f2:	e143      	b.n	800837c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	f040 8140 	bne.w	800837c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008102:	3301      	adds	r3, #1
 8008104:	b2da      	uxtb	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008112:	2b03      	cmp	r3, #3
 8008114:	d903      	bls.n	800811e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	220d      	movs	r2, #13
 800811a:	701a      	strb	r2, [r3, #0]
      break;
 800811c:	e12e      	b.n	800837c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	795b      	ldrb	r3, [r3, #5]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 f8cb 	bl	80092c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	791b      	ldrb	r3, [r3, #4]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 f8c5 	bl	80092c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
      break;
 8008142:	e11b      	b.n	800837c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008144:	2101      	movs	r1, #1
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa79 	bl	800863e <USBH_SetAddress>
 800814c:	4603      	mov	r3, r0
 800814e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d130      	bne.n	80081b8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008156:	2002      	movs	r0, #2
 8008158:	f001 fbab 	bl	80098b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2203      	movs	r2, #3
 8008168:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	7919      	ldrb	r1, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800817e:	9202      	str	r2, [sp, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	9201      	str	r2, [sp, #4]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4603      	mov	r3, r0
 8008188:	2280      	movs	r2, #128	@ 0x80
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 f848 	bl	8009220 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	7959      	ldrb	r1, [r3, #5]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081a4:	9202      	str	r2, [sp, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	9201      	str	r2, [sp, #4]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4603      	mov	r3, r0
 80081ae:	2200      	movs	r2, #0
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f835 	bl	8009220 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081b6:	e0e3      	b.n	8008380 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	f040 80e0 	bne.w	8008380 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	220d      	movs	r2, #13
 80081c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	705a      	strb	r2, [r3, #1]
      break;
 80081cc:	e0d8      	b.n	8008380 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081ce:	2109      	movs	r1, #9
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9a1 	bl	8008518 <USBH_Get_CfgDesc>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2204      	movs	r2, #4
 80081e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081e6:	e0cd      	b.n	8008384 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	f040 80ca 	bne.w	8008384 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081f6:	3301      	adds	r3, #1
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008206:	2b03      	cmp	r3, #3
 8008208:	d903      	bls.n	8008212 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220d      	movs	r2, #13
 800820e:	701a      	strb	r2, [r3, #0]
      break;
 8008210:	e0b8      	b.n	8008384 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	795b      	ldrb	r3, [r3, #5]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 f851 	bl	80092c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	791b      	ldrb	r3, [r3, #4]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f84b 	bl	80092c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
      break;
 8008236:	e0a5      	b.n	8008384 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f969 	bl	8008518 <USBH_Get_CfgDesc>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2205      	movs	r2, #5
 8008254:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008256:	e097      	b.n	8008388 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	2b03      	cmp	r3, #3
 800825c:	f040 8094 	bne.w	8008388 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008266:	3301      	adds	r3, #1
 8008268:	b2da      	uxtb	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008276:	2b03      	cmp	r3, #3
 8008278:	d903      	bls.n	8008282 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220d      	movs	r2, #13
 800827e:	701a      	strb	r2, [r3, #0]
      break;
 8008280:	e082      	b.n	8008388 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	795b      	ldrb	r3, [r3, #5]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 f819 	bl	80092c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	791b      	ldrb	r3, [r3, #4]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f813 	bl	80092c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]
      break;
 80082a6:	e06f      	b.n	8008388 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d019      	beq.n	80082e6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082be:	23ff      	movs	r3, #255	@ 0xff
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f953 	bl	800856c <USBH_Get_StringDesc>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2206      	movs	r2, #6
 80082d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082d6:	e059      	b.n	800838c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d156      	bne.n	800838c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2206      	movs	r2, #6
 80082e2:	705a      	strb	r2, [r3, #1]
      break;
 80082e4:	e052      	b.n	800838c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2206      	movs	r2, #6
 80082ea:	705a      	strb	r2, [r3, #1]
      break;
 80082ec:	e04e      	b.n	800838c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d019      	beq.n	800832c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008304:	23ff      	movs	r3, #255	@ 0xff
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f930 	bl	800856c <USBH_Get_StringDesc>
 800830c:	4603      	mov	r3, r0
 800830e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2207      	movs	r2, #7
 800831a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800831c:	e038      	b.n	8008390 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d135      	bne.n	8008390 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2207      	movs	r2, #7
 8008328:	705a      	strb	r2, [r3, #1]
      break;
 800832a:	e031      	b.n	8008390 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2207      	movs	r2, #7
 8008330:	705a      	strb	r2, [r3, #1]
      break;
 8008332:	e02d      	b.n	8008390 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800833a:	2b00      	cmp	r3, #0
 800833c:	d017      	beq.n	800836e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800834a:	23ff      	movs	r3, #255	@ 0xff
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f90d 	bl	800856c <USBH_Get_StringDesc>
 8008352:	4603      	mov	r3, r0
 8008354:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008360:	e018      	b.n	8008394 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b03      	cmp	r3, #3
 8008366:	d115      	bne.n	8008394 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
      break;
 800836c:	e012      	b.n	8008394 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
      break;
 8008372:	e00f      	b.n	8008394 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008374:	bf00      	nop
 8008376:	e00e      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 8008378:	bf00      	nop
 800837a:	e00c      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 800837c:	bf00      	nop
 800837e:	e00a      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 8008380:	bf00      	nop
 8008382:	e008      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 8008384:	bf00      	nop
 8008386:	e006      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 8008388:	bf00      	nop
 800838a:	e004      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 800838c:	bf00      	nop
 800838e:	e002      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 8008390:	bf00      	nop
 8008392:	e000      	b.n	8008396 <USBH_HandleEnum+0x3b6>
      break;
 8008394:	bf00      	nop
  }
  return Status;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f804 	bl	80083e2 <USBH_HandleSof>
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b0b      	cmp	r3, #11
 80083f2:	d10a      	bne.n	800840a <USBH_HandleSof+0x28>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
  }
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008422:	bf00      	nop
}
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800843e:	bf00      	nop
}
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f8be 	bl	800961a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 ff0b 	bl	80092c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	795b      	ldrb	r3, [r3, #5]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 ff05 	bl	80092c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80084cc:	887b      	ldrh	r3, [r7, #2]
 80084ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d2:	d901      	bls.n	80084d8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e01b      	b.n	8008510 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80084de:	887b      	ldrh	r3, [r7, #2]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	4613      	mov	r3, r2
 80084e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084e8:	2100      	movs	r1, #0
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f872 	bl	80085d4 <USBH_GetDescriptor>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008500:	887a      	ldrh	r2, [r7, #2]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f929 	bl	800875c <USBH_ParseDevDesc>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af02      	add	r7, sp, #8
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	331c      	adds	r3, #28
 8008528:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800852a:	887b      	ldrh	r3, [r7, #2]
 800852c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008530:	d901      	bls.n	8008536 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008532:	2303      	movs	r3, #3
 8008534:	e016      	b.n	8008564 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008536:	887b      	ldrh	r3, [r7, #2]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008540:	2100      	movs	r1, #0
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f846 	bl	80085d4 <USBH_GetDescriptor>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d107      	bne.n	8008562 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008552:	887b      	ldrh	r3, [r7, #2]
 8008554:	461a      	mov	r2, r3
 8008556:	68b9      	ldr	r1, [r7, #8]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f9af 	bl	80088bc <USBH_ParseCfgDesc>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	607a      	str	r2, [r7, #4]
 8008576:	461a      	mov	r2, r3
 8008578:	460b      	mov	r3, r1
 800857a:	72fb      	strb	r3, [r7, #11]
 800857c:	4613      	mov	r3, r2
 800857e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008580:	893b      	ldrh	r3, [r7, #8]
 8008582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008586:	d802      	bhi.n	800858e <USBH_Get_StringDesc+0x22>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800858e:	2303      	movs	r3, #3
 8008590:	e01c      	b.n	80085cc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	b29b      	uxth	r3, r3
 8008596:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800859a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085a2:	893b      	ldrh	r3, [r7, #8]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	460b      	mov	r3, r1
 80085a8:	2100      	movs	r1, #0
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 f812 	bl	80085d4 <USBH_GetDescriptor>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d107      	bne.n	80085ca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085c0:	893a      	ldrh	r2, [r7, #8]
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fb8d 	bl	8008ce4 <USBH_ParseStringDesc>
  }

  return status;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	72fb      	strb	r3, [r7, #11]
 80085e2:	4613      	mov	r3, r2
 80085e4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	789b      	ldrb	r3, [r3, #2]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d11c      	bne.n	8008628 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80085ee:	7afb      	ldrb	r3, [r7, #11]
 80085f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2206      	movs	r2, #6
 80085fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	893a      	ldrh	r2, [r7, #8]
 8008604:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008606:	893b      	ldrh	r3, [r7, #8]
 8008608:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800860c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008610:	d104      	bne.n	800861c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f240 4209 	movw	r2, #1033	@ 0x409
 8008618:	829a      	strh	r2, [r3, #20]
 800861a:	e002      	b.n	8008622 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8b3a      	ldrh	r2, [r7, #24]
 8008626:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008628:	8b3b      	ldrh	r3, [r7, #24]
 800862a:	461a      	mov	r2, r3
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 fba5 	bl	8008d7e <USBH_CtlReq>
 8008634:	4603      	mov	r3, r0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	789b      	ldrb	r3, [r3, #2]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d10f      	bne.n	8008672 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2205      	movs	r2, #5
 800865c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	b29a      	uxth	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008672:	2200      	movs	r2, #0
 8008674:	2100      	movs	r1, #0
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fb81 	bl	8008d7e <USBH_CtlReq>
 800867c:	4603      	mov	r3, r0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	789b      	ldrb	r3, [r3, #2]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d10e      	bne.n	80086b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2209      	movs	r2, #9
 80086a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	887a      	ldrh	r2, [r7, #2]
 80086aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fb5e 	bl	8008d7e <USBH_CtlReq>
 80086c2:	4603      	mov	r3, r0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	789b      	ldrb	r3, [r3, #2]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d10f      	bne.n	8008700 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2203      	movs	r2, #3
 80086ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008700:	2200      	movs	r2, #0
 8008702:	2100      	movs	r1, #0
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fb3a 	bl	8008d7e <USBH_CtlReq>
 800870a:	4603      	mov	r3, r0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	789b      	ldrb	r3, [r3, #2]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d10f      	bne.n	8008748 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	b29a      	uxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008748:	2200      	movs	r2, #0
 800874a:	2100      	movs	r1, #0
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fb16 	bl	8008d7e <USBH_CtlReq>
 8008752:	4603      	mov	r3, r0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008770:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800877c:	2302      	movs	r3, #2
 800877e:	e094      	b.n	80088aa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	781a      	ldrb	r2, [r3, #0]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	785a      	ldrb	r2, [r3, #1]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3302      	adds	r3, #2
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	3303      	adds	r3, #3
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4313      	orrs	r3, r2
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	791a      	ldrb	r2, [r3, #4]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	795a      	ldrb	r2, [r3, #5]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	799a      	ldrb	r2, [r3, #6]
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	79da      	ldrb	r2, [r3, #7]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d004      	beq.n	80087de <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d11b      	bne.n	8008816 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	79db      	ldrb	r3, [r3, #7]
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	dc0f      	bgt.n	8008806 <USBH_ParseDevDesc+0xaa>
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	db0f      	blt.n	800880a <USBH_ParseDevDesc+0xae>
 80087ea:	3b08      	subs	r3, #8
 80087ec:	4a32      	ldr	r2, [pc, #200]	@ (80088b8 <USBH_ParseDevDesc+0x15c>)
 80087ee:	fa22 f303 	lsr.w	r3, r2, r3
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bf14      	ite	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	2300      	moveq	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <USBH_ParseDevDesc+0xb6>
 8008804:	e001      	b.n	800880a <USBH_ParseDevDesc+0xae>
 8008806:	2b40      	cmp	r3, #64	@ 0x40
 8008808:	d003      	beq.n	8008812 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2208      	movs	r2, #8
 800880e:	71da      	strb	r2, [r3, #7]
        break;
 8008810:	e000      	b.n	8008814 <USBH_ParseDevDesc+0xb8>
        break;
 8008812:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008814:	e00e      	b.n	8008834 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800881c:	2b02      	cmp	r3, #2
 800881e:	d107      	bne.n	8008830 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	79db      	ldrb	r3, [r3, #7]
 8008824:	2b08      	cmp	r3, #8
 8008826:	d005      	beq.n	8008834 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2208      	movs	r2, #8
 800882c:	71da      	strb	r2, [r3, #7]
 800882e:	e001      	b.n	8008834 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008830:	2303      	movs	r3, #3
 8008832:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	2b08      	cmp	r3, #8
 8008838:	d936      	bls.n	80088a8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	3308      	adds	r3, #8
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	3309      	adds	r3, #9
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	021b      	lsls	r3, r3, #8
 800884a:	b29b      	uxth	r3, r3
 800884c:	4313      	orrs	r3, r2
 800884e:	b29a      	uxth	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	330a      	adds	r3, #10
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	330b      	adds	r3, #11
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	b29b      	uxth	r3, r3
 8008866:	4313      	orrs	r3, r2
 8008868:	b29a      	uxth	r2, r3
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	330c      	adds	r3, #12
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	461a      	mov	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	330d      	adds	r3, #13
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	b29b      	uxth	r3, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	7b9a      	ldrb	r2, [r3, #14]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	7bda      	ldrb	r2, [r3, #15]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	7c1a      	ldrb	r2, [r3, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	7c5a      	ldrb	r2, [r3, #17]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	01000101 	.word	0x01000101

080088bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08c      	sub	sp, #48	@ 0x30
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80088ea:	2302      	movs	r3, #2
 80088ec:	e0da      	b.n	8008aa4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	785a      	ldrb	r2, [r3, #1]
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3302      	adds	r3, #2
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	3303      	adds	r3, #3
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	b29b      	uxth	r3, r3
 8008914:	4313      	orrs	r3, r2
 8008916:	b29b      	uxth	r3, r3
 8008918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800891c:	bf28      	it	cs
 800891e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008922:	b29a      	uxth	r2, r3
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	791a      	ldrb	r2, [r3, #4]
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	795a      	ldrb	r2, [r3, #5]
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	799a      	ldrb	r2, [r3, #6]
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	79da      	ldrb	r2, [r3, #7]
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	7a1a      	ldrb	r2, [r3, #8]
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b09      	cmp	r3, #9
 8008956:	d002      	beq.n	800895e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	2209      	movs	r2, #9
 800895c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	2b09      	cmp	r3, #9
 8008962:	f240 809d 	bls.w	8008aa0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008966:	2309      	movs	r3, #9
 8008968:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800896a:	2300      	movs	r3, #0
 800896c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800896e:	e081      	b.n	8008a74 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008970:	f107 0316 	add.w	r3, r7, #22
 8008974:	4619      	mov	r1, r3
 8008976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008978:	f000 f9e7 	bl	8008d4a <USBH_GetNextDesc>
 800897c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800897e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008980:	785b      	ldrb	r3, [r3, #1]
 8008982:	2b04      	cmp	r3, #4
 8008984:	d176      	bne.n	8008a74 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b09      	cmp	r3, #9
 800898c:	d002      	beq.n	8008994 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008990:	2209      	movs	r2, #9
 8008992:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008998:	221a      	movs	r2, #26
 800899a:	fb02 f303 	mul.w	r3, r2, r3
 800899e:	3308      	adds	r3, #8
 80089a0:	6a3a      	ldr	r2, [r7, #32]
 80089a2:	4413      	add	r3, r2
 80089a4:	3302      	adds	r3, #2
 80089a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80089a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089aa:	69f8      	ldr	r0, [r7, #28]
 80089ac:	f000 f87e 	bl	8008aac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089ba:	e043      	b.n	8008a44 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089bc:	f107 0316 	add.w	r3, r7, #22
 80089c0:	4619      	mov	r1, r3
 80089c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c4:	f000 f9c1 	bl	8008d4a <USBH_GetNextDesc>
 80089c8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	785b      	ldrb	r3, [r3, #1]
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d138      	bne.n	8008a44 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	795b      	ldrb	r3, [r3, #5]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d113      	bne.n	8008a02 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d003      	beq.n	80089ea <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	799b      	ldrb	r3, [r3, #6]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d10b      	bne.n	8008a02 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	79db      	ldrb	r3, [r3, #7]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <USBH_ParseCfgDesc+0x14e>
 80089f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d007      	beq.n	8008a0a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	2209      	movs	r2, #9
 80089fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a00:	e003      	b.n	8008a0a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a04:	2207      	movs	r2, #7
 8008a06:	701a      	strb	r2, [r3, #0]
 8008a08:	e000      	b.n	8008a0c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a0a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a10:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a14:	3201      	adds	r2, #1
 8008a16:	00d2      	lsls	r2, r2, #3
 8008a18:	211a      	movs	r1, #26
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	4413      	add	r3, r2
 8008a20:	3308      	adds	r3, #8
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	4413      	add	r3, r2
 8008a26:	3304      	adds	r3, #4
 8008a28:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a2c:	69b9      	ldr	r1, [r7, #24]
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f870 	bl	8008b14 <USBH_ParseEPDesc>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008a3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a3e:	3301      	adds	r3, #1
 8008a40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	791b      	ldrb	r3, [r3, #4]
 8008a48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d204      	bcs.n	8008a5a <USBH_ParseCfgDesc+0x19e>
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	885a      	ldrh	r2, [r3, #2]
 8008a54:	8afb      	ldrh	r3, [r7, #22]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d8b0      	bhi.n	80089bc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	791b      	ldrb	r3, [r3, #4]
 8008a5e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d201      	bcs.n	8008a6a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e01c      	b.n	8008aa4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a6e:	3301      	adds	r3, #1
 8008a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d805      	bhi.n	8008a88 <USBH_ParseCfgDesc+0x1cc>
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	885a      	ldrh	r2, [r3, #2]
 8008a80:	8afb      	ldrh	r3, [r7, #22]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	f63f af74 	bhi.w	8008970 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	791b      	ldrb	r3, [r3, #4]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	bf28      	it	cs
 8008a90:	2302      	movcs	r3, #2
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d201      	bcs.n	8008aa0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e001      	b.n	8008aa4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3730      	adds	r7, #48	@ 0x30
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781a      	ldrb	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	785a      	ldrb	r2, [r3, #1]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	789a      	ldrb	r2, [r3, #2]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	78da      	ldrb	r2, [r3, #3]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	bf28      	it	cs
 8008ae0:	2302      	movcs	r3, #2
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	795a      	ldrb	r2, [r3, #5]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	799a      	ldrb	r2, [r3, #6]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	79da      	ldrb	r2, [r3, #7]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	7a1a      	ldrb	r2, [r3, #8]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	721a      	strb	r2, [r3, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	785a      	ldrb	r2, [r3, #1]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	789a      	ldrb	r2, [r3, #2]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	78da      	ldrb	r2, [r3, #3]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3304      	adds	r3, #4
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3305      	adds	r3, #5
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	021b      	lsls	r3, r3, #8
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	4313      	orrs	r3, r2
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	799a      	ldrb	r2, [r3, #6]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	889b      	ldrh	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b76:	d804      	bhi.n	8008b82 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b80:	d901      	bls.n	8008b86 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008b82:	2303      	movs	r3, #3
 8008b84:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d136      	bne.n	8008bfe <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	78db      	ldrb	r3, [r3, #3]
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d108      	bne.n	8008bae <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	889b      	ldrh	r3, [r3, #4]
 8008ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ba4:	f240 8097 	bls.w	8008cd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	75fb      	strb	r3, [r7, #23]
 8008bac:	e093      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	78db      	ldrb	r3, [r3, #3]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d107      	bne.n	8008bca <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	889b      	ldrh	r3, [r3, #4]
 8008bbe:	2b40      	cmp	r3, #64	@ 0x40
 8008bc0:	f240 8089 	bls.w	8008cd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	75fb      	strb	r3, [r7, #23]
 8008bc8:	e085      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d005      	beq.n	8008be2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	78db      	ldrb	r3, [r3, #3]
 8008bda:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d10a      	bne.n	8008bf8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	799b      	ldrb	r3, [r3, #6]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <USBH_ParseEPDesc+0xde>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	799b      	ldrb	r3, [r3, #6]
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	d970      	bls.n	8008cd4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bf6:	e06d      	b.n	8008cd4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	75fb      	strb	r3, [r7, #23]
 8008bfc:	e06b      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d13c      	bne.n	8008c82 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	78db      	ldrb	r3, [r3, #3]
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d005      	beq.n	8008c20 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	78db      	ldrb	r3, [r3, #3]
 8008c18:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d106      	bne.n	8008c2e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	889b      	ldrh	r3, [r3, #4]
 8008c24:	2b40      	cmp	r3, #64	@ 0x40
 8008c26:	d956      	bls.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c2c:	e053      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	78db      	ldrb	r3, [r3, #3]
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d10e      	bne.n	8008c58 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	799b      	ldrb	r3, [r3, #6]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008c46:	2b10      	cmp	r3, #16
 8008c48:	d803      	bhi.n	8008c52 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008c4e:	2b40      	cmp	r3, #64	@ 0x40
 8008c50:	d941      	bls.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c52:	2303      	movs	r3, #3
 8008c54:	75fb      	strb	r3, [r7, #23]
 8008c56:	e03e      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	78db      	ldrb	r3, [r3, #3]
 8008c5c:	f003 0303 	and.w	r3, r3, #3
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d10b      	bne.n	8008c7c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	799b      	ldrb	r3, [r3, #6]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <USBH_ParseEPDesc+0x162>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	889b      	ldrh	r3, [r3, #4]
 8008c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c74:	d32f      	bcc.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c76:	2303      	movs	r3, #3
 8008c78:	75fb      	strb	r3, [r7, #23]
 8008c7a:	e02c      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	75fb      	strb	r3, [r7, #23]
 8008c80:	e029      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d120      	bne.n	8008cce <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	78db      	ldrb	r3, [r3, #3]
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d106      	bne.n	8008ca6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	889b      	ldrh	r3, [r3, #4]
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d01a      	beq.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	75fb      	strb	r3, [r7, #23]
 8008ca4:	e017      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	78db      	ldrb	r3, [r3, #3]
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d10a      	bne.n	8008cc8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	799b      	ldrb	r3, [r3, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <USBH_ParseEPDesc+0x1ae>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	889b      	ldrh	r3, [r3, #4]
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d909      	bls.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	75fb      	strb	r3, [r7, #23]
 8008cc6:	e006      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	75fb      	strb	r3, [r7, #23]
 8008ccc:	e003      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	75fb      	strb	r3, [r7, #23]
 8008cd2:	e000      	b.n	8008cd6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cd4:	bf00      	nop
  }

  return status;
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d120      	bne.n	8008d3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	1e9a      	subs	r2, r3, #2
 8008d02:	88fb      	ldrh	r3, [r7, #6]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	bf28      	it	cs
 8008d08:	4613      	movcs	r3, r2
 8008d0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3302      	adds	r3, #2
 8008d10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d12:	2300      	movs	r3, #0
 8008d14:	82fb      	strh	r3, [r7, #22]
 8008d16:	e00b      	b.n	8008d30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d18:	8afb      	ldrh	r3, [r7, #22]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	781a      	ldrb	r2, [r3, #0]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3301      	adds	r3, #1
 8008d28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d2a:	8afb      	ldrh	r3, [r7, #22]
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	82fb      	strh	r3, [r7, #22]
 8008d30:	8afa      	ldrh	r2, [r7, #22]
 8008d32:	8abb      	ldrh	r3, [r7, #20]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d3ef      	bcc.n	8008d18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
  }
}
 8008d3e:	bf00      	nop
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7812      	ldrb	r2, [r2, #0]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d70:	68fb      	ldr	r3, [r7, #12]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	789b      	ldrb	r3, [r3, #2]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d002      	beq.n	8008d9e <USBH_CtlReq+0x20>
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d00f      	beq.n	8008dbc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008d9c:	e027      	b.n	8008dee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	88fa      	ldrh	r2, [r7, #6]
 8008da8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2202      	movs	r2, #2
 8008db4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dba:	e018      	b.n	8008dee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f81b 	bl	8008df8 <USBH_HandleControl>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <USBH_CtlReq+0x54>
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d106      	bne.n	8008de0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	761a      	strb	r2, [r3, #24]
      break;
 8008dde:	e005      	b.n	8008dec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d102      	bne.n	8008dec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	709a      	strb	r2, [r3, #2]
      break;
 8008dec:	bf00      	nop
  }
  return status;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af02      	add	r7, sp, #8
 8008dfe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	7e1b      	ldrb	r3, [r3, #24]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	2b0a      	cmp	r3, #10
 8008e10:	f200 8156 	bhi.w	80090c0 <USBH_HandleControl+0x2c8>
 8008e14:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <USBH_HandleControl+0x24>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e49 	.word	0x08008e49
 8008e20:	08008e63 	.word	0x08008e63
 8008e24:	08008ecd 	.word	0x08008ecd
 8008e28:	08008ef3 	.word	0x08008ef3
 8008e2c:	08008f2b 	.word	0x08008f2b
 8008e30:	08008f55 	.word	0x08008f55
 8008e34:	08008fa7 	.word	0x08008fa7
 8008e38:	08008fc9 	.word	0x08008fc9
 8008e3c:	08009005 	.word	0x08009005
 8008e40:	0800902b 	.word	0x0800902b
 8008e44:	08009069 	.word	0x08009069
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f103 0110 	add.w	r1, r3, #16
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	795b      	ldrb	r3, [r3, #5]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f943 	bl	80090e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	761a      	strb	r2, [r3, #24]
      break;
 8008e60:	e139      	b.n	80090d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	795b      	ldrb	r3, [r3, #5]
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fcc5 	bl	80097f8 <USBH_LL_GetURBState>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d11e      	bne.n	8008eb6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7c1b      	ldrb	r3, [r3, #16]
 8008e7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	8adb      	ldrh	r3, [r3, #22]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e8a:	7b7b      	ldrb	r3, [r7, #13]
 8008e8c:	2b80      	cmp	r3, #128	@ 0x80
 8008e8e:	d103      	bne.n	8008e98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2203      	movs	r2, #3
 8008e94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e96:	e115      	b.n	80090c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2205      	movs	r2, #5
 8008e9c:	761a      	strb	r2, [r3, #24]
      break;
 8008e9e:	e111      	b.n	80090c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008ea0:	7b7b      	ldrb	r3, [r7, #13]
 8008ea2:	2b80      	cmp	r3, #128	@ 0x80
 8008ea4:	d103      	bne.n	8008eae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2209      	movs	r2, #9
 8008eaa:	761a      	strb	r2, [r3, #24]
      break;
 8008eac:	e10a      	b.n	80090c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	761a      	strb	r2, [r3, #24]
      break;
 8008eb4:	e106      	b.n	80090c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d003      	beq.n	8008ec4 <USBH_HandleControl+0xcc>
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	f040 8100 	bne.w	80090c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	220b      	movs	r2, #11
 8008ec8:	761a      	strb	r2, [r3, #24]
      break;
 8008eca:	e0fb      	b.n	80090c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6899      	ldr	r1, [r3, #8]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	899a      	ldrh	r2, [r3, #12]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	791b      	ldrb	r3, [r3, #4]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f93a 	bl	800915e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2204      	movs	r2, #4
 8008eee:	761a      	strb	r2, [r3, #24]
      break;
 8008ef0:	e0f1      	b.n	80090d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	791b      	ldrb	r3, [r3, #4]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fc7d 	bl	80097f8 <USBH_LL_GetURBState>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d102      	bne.n	8008f0e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2209      	movs	r2, #9
 8008f0c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	2b05      	cmp	r3, #5
 8008f12:	d102      	bne.n	8008f1a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f14:	2303      	movs	r3, #3
 8008f16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f18:	e0d6      	b.n	80090c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	f040 80d3 	bne.w	80090c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	220b      	movs	r2, #11
 8008f26:	761a      	strb	r2, [r3, #24]
      break;
 8008f28:	e0ce      	b.n	80090c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6899      	ldr	r1, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	899a      	ldrh	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	795b      	ldrb	r3, [r3, #5]
 8008f36:	2001      	movs	r0, #1
 8008f38:	9000      	str	r0, [sp, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f8ea 	bl	8009114 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2206      	movs	r2, #6
 8008f50:	761a      	strb	r2, [r3, #24]
      break;
 8008f52:	e0c0      	b.n	80090d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	795b      	ldrb	r3, [r3, #5]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fc4c 	bl	80097f8 <USBH_LL_GetURBState>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d103      	bne.n	8008f72 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2207      	movs	r2, #7
 8008f6e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f70:	e0ac      	b.n	80090cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b05      	cmp	r3, #5
 8008f76:	d105      	bne.n	8008f84 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	220c      	movs	r2, #12
 8008f7c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	73fb      	strb	r3, [r7, #15]
      break;
 8008f82:	e0a3      	b.n	80090cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d103      	bne.n	8008f92 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	761a      	strb	r2, [r3, #24]
      break;
 8008f90:	e09c      	b.n	80090cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	f040 8099 	bne.w	80090cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	220b      	movs	r2, #11
 8008f9e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa4:	e092      	b.n	80090cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	791b      	ldrb	r3, [r3, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	2100      	movs	r1, #0
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f8d5 	bl	800915e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	761a      	strb	r2, [r3, #24]

      break;
 8008fc6:	e086      	b.n	80090d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	791b      	ldrb	r3, [r3, #4]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fc12 	bl	80097f8 <USBH_LL_GetURBState>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d105      	bne.n	8008fea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	220d      	movs	r2, #13
 8008fe2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fe8:	e072      	b.n	80090d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d103      	bne.n	8008ff8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	220b      	movs	r2, #11
 8008ff4:	761a      	strb	r2, [r3, #24]
      break;
 8008ff6:	e06b      	b.n	80090d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	d168      	bne.n	80090d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ffe:	2303      	movs	r3, #3
 8009000:	73fb      	strb	r3, [r7, #15]
      break;
 8009002:	e065      	b.n	80090d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	795b      	ldrb	r3, [r3, #5]
 8009008:	2201      	movs	r2, #1
 800900a:	9200      	str	r2, [sp, #0]
 800900c:	2200      	movs	r2, #0
 800900e:	2100      	movs	r1, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f87f 	bl	8009114 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800901c:	b29a      	uxth	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	220a      	movs	r2, #10
 8009026:	761a      	strb	r2, [r3, #24]
      break;
 8009028:	e055      	b.n	80090d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	795b      	ldrb	r3, [r3, #5]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fbe1 	bl	80097f8 <USBH_LL_GetURBState>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d105      	bne.n	800904c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	220d      	movs	r2, #13
 8009048:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800904a:	e043      	b.n	80090d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d103      	bne.n	800905a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2209      	movs	r2, #9
 8009056:	761a      	strb	r2, [r3, #24]
      break;
 8009058:	e03c      	b.n	80090d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b04      	cmp	r3, #4
 800905e:	d139      	bne.n	80090d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	220b      	movs	r2, #11
 8009064:	761a      	strb	r2, [r3, #24]
      break;
 8009066:	e035      	b.n	80090d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7e5b      	ldrb	r3, [r3, #25]
 800906c:	3301      	adds	r3, #1
 800906e:	b2da      	uxtb	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	765a      	strb	r2, [r3, #25]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	7e5b      	ldrb	r3, [r3, #25]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d806      	bhi.n	800908a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009088:	e025      	b.n	80090d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009090:	2106      	movs	r1, #6
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	795b      	ldrb	r3, [r3, #5]
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f90c 	bl	80092c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	791b      	ldrb	r3, [r3, #4]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f906 	bl	80092c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80090ba:	2302      	movs	r3, #2
 80090bc:	73fb      	strb	r3, [r7, #15]
      break;
 80090be:	e00a      	b.n	80090d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80090c0:	bf00      	nop
 80090c2:	e008      	b.n	80090d6 <USBH_HandleControl+0x2de>
      break;
 80090c4:	bf00      	nop
 80090c6:	e006      	b.n	80090d6 <USBH_HandleControl+0x2de>
      break;
 80090c8:	bf00      	nop
 80090ca:	e004      	b.n	80090d6 <USBH_HandleControl+0x2de>
      break;
 80090cc:	bf00      	nop
 80090ce:	e002      	b.n	80090d6 <USBH_HandleControl+0x2de>
      break;
 80090d0:	bf00      	nop
 80090d2:	e000      	b.n	80090d6 <USBH_HandleControl+0x2de>
      break;
 80090d4:	bf00      	nop
  }

  return status;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af04      	add	r7, sp, #16
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	4613      	mov	r3, r2
 80090ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090ee:	79f9      	ldrb	r1, [r7, #7]
 80090f0:	2300      	movs	r3, #0
 80090f2:	9303      	str	r3, [sp, #12]
 80090f4:	2308      	movs	r3, #8
 80090f6:	9302      	str	r3, [sp, #8]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	2300      	movs	r3, #0
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2300      	movs	r3, #0
 8009102:	2200      	movs	r2, #0
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 fb46 	bl	8009796 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af04      	add	r7, sp, #16
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	4611      	mov	r1, r2
 8009120:	461a      	mov	r2, r3
 8009122:	460b      	mov	r3, r1
 8009124:	80fb      	strh	r3, [r7, #6]
 8009126:	4613      	mov	r3, r2
 8009128:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009138:	7979      	ldrb	r1, [r7, #5]
 800913a:	7e3b      	ldrb	r3, [r7, #24]
 800913c:	9303      	str	r3, [sp, #12]
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	9302      	str	r3, [sp, #8]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	2301      	movs	r3, #1
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	2300      	movs	r3, #0
 800914c:	2200      	movs	r2, #0
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 fb21 	bl	8009796 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b088      	sub	sp, #32
 8009162:	af04      	add	r7, sp, #16
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	4611      	mov	r1, r2
 800916a:	461a      	mov	r2, r3
 800916c:	460b      	mov	r3, r1
 800916e:	80fb      	strh	r3, [r7, #6]
 8009170:	4613      	mov	r3, r2
 8009172:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009174:	7979      	ldrb	r1, [r7, #5]
 8009176:	2300      	movs	r3, #0
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	9302      	str	r3, [sp, #8]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	2301      	movs	r3, #1
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	2201      	movs	r2, #1
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fb03 	bl	8009796 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009190:	2300      	movs	r3, #0

}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b088      	sub	sp, #32
 800919e:	af04      	add	r7, sp, #16
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	4611      	mov	r1, r2
 80091a6:	461a      	mov	r2, r3
 80091a8:	460b      	mov	r3, r1
 80091aa:	80fb      	strh	r3, [r7, #6]
 80091ac:	4613      	mov	r3, r2
 80091ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091be:	7979      	ldrb	r1, [r7, #5]
 80091c0:	7e3b      	ldrb	r3, [r7, #24]
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	9302      	str	r3, [sp, #8]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	2301      	movs	r3, #1
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2302      	movs	r3, #2
 80091d2:	2200      	movs	r2, #0
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fade 	bl	8009796 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af04      	add	r7, sp, #16
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	4611      	mov	r1, r2
 80091f0:	461a      	mov	r2, r3
 80091f2:	460b      	mov	r3, r1
 80091f4:	80fb      	strh	r3, [r7, #6]
 80091f6:	4613      	mov	r3, r2
 80091f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091fa:	7979      	ldrb	r1, [r7, #5]
 80091fc:	2300      	movs	r3, #0
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	88fb      	ldrh	r3, [r7, #6]
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	2301      	movs	r3, #1
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	2302      	movs	r3, #2
 800920e:	2201      	movs	r2, #1
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fac0 	bl	8009796 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af04      	add	r7, sp, #16
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	4603      	mov	r3, r0
 8009230:	70fb      	strb	r3, [r7, #3]
 8009232:	460b      	mov	r3, r1
 8009234:	70bb      	strb	r3, [r7, #2]
 8009236:	4613      	mov	r3, r2
 8009238:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800923a:	7878      	ldrb	r0, [r7, #1]
 800923c:	78ba      	ldrb	r2, [r7, #2]
 800923e:	78f9      	ldrb	r1, [r7, #3]
 8009240:	8b3b      	ldrh	r3, [r7, #24]
 8009242:	9302      	str	r3, [sp, #8]
 8009244:	7d3b      	ldrb	r3, [r7, #20]
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	7c3b      	ldrb	r3, [r7, #16]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	4603      	mov	r3, r0
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fa53 	bl	80096fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fa72 	bl	8009758 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f836 	bl	80092fc <USBH_GetFreePipe>
 8009290:	4603      	mov	r3, r0
 8009292:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009294:	89fb      	ldrh	r3, [r7, #14]
 8009296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800929a:	4293      	cmp	r3, r2
 800929c:	d00a      	beq.n	80092b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800929e:	78fa      	ldrb	r2, [r7, #3]
 80092a0:	89fb      	ldrh	r3, [r7, #14]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	33e0      	adds	r3, #224	@ 0xe0
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	440b      	add	r3, r1
 80092b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80092b4:	89fb      	ldrh	r3, [r7, #14]
 80092b6:	b2db      	uxtb	r3, r3
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	2b0f      	cmp	r3, #15
 80092d0:	d80d      	bhi.n	80092ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	33e0      	adds	r3, #224	@ 0xe0
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80092e4:	6879      	ldr	r1, [r7, #4]
 80092e6:	33e0      	adds	r3, #224	@ 0xe0
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
 800930c:	e00f      	b.n	800932e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	33e0      	adds	r3, #224	@ 0xe0
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	b29b      	uxth	r3, r3
 8009326:	e007      	b.n	8009338 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	3301      	adds	r3, #1
 800932c:	73fb      	strb	r3, [r7, #15]
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	2b0f      	cmp	r3, #15
 8009332:	d9ec      	bls.n	800930e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009348:	2201      	movs	r2, #1
 800934a:	490e      	ldr	r1, [pc, #56]	@ (8009384 <MX_USB_HOST_Init+0x40>)
 800934c:	480e      	ldr	r0, [pc, #56]	@ (8009388 <MX_USB_HOST_Init+0x44>)
 800934e:	f7fe fb15 	bl	800797c <USBH_Init>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009358:	f7f7 fb40 	bl	80009dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800935c:	490b      	ldr	r1, [pc, #44]	@ (800938c <MX_USB_HOST_Init+0x48>)
 800935e:	480a      	ldr	r0, [pc, #40]	@ (8009388 <MX_USB_HOST_Init+0x44>)
 8009360:	f7fe fbb9 	bl	8007ad6 <USBH_RegisterClass>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800936a:	f7f7 fb37 	bl	80009dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800936e:	4806      	ldr	r0, [pc, #24]	@ (8009388 <MX_USB_HOST_Init+0x44>)
 8009370:	f7fe fc3d 	bl	8007bee <USBH_Start>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800937a:	f7f7 fb2f 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800937e:	bf00      	nop
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	080093a5 	.word	0x080093a5
 8009388:	200001dc 	.word	0x200001dc
 800938c:	2000000c 	.word	0x2000000c

08009390 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009394:	4802      	ldr	r0, [pc, #8]	@ (80093a0 <MX_USB_HOST_Process+0x10>)
 8009396:	f7fe fc3b 	bl	8007c10 <USBH_Process>
}
 800939a:	bf00      	nop
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	200001dc 	.word	0x200001dc

080093a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d819      	bhi.n	80093ec <USBH_UserProcess+0x48>
 80093b8:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <USBH_UserProcess+0x1c>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093ed 	.word	0x080093ed
 80093c4:	080093dd 	.word	0x080093dd
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	080093e5 	.word	0x080093e5
 80093d0:	080093d5 	.word	0x080093d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80093d4:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <USBH_UserProcess+0x58>)
 80093d6:	2203      	movs	r2, #3
 80093d8:	701a      	strb	r2, [r3, #0]
  break;
 80093da:	e008      	b.n	80093ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80093dc:	4b07      	ldr	r3, [pc, #28]	@ (80093fc <USBH_UserProcess+0x58>)
 80093de:	2202      	movs	r2, #2
 80093e0:	701a      	strb	r2, [r3, #0]
  break;
 80093e2:	e004      	b.n	80093ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <USBH_UserProcess+0x58>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	701a      	strb	r2, [r3, #0]
  break;
 80093ea:	e000      	b.n	80093ee <USBH_UserProcess+0x4a>

  default:
  break;
 80093ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	200005b4 	.word	0x200005b4

08009400 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	@ 0x28
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009408:	f107 0314 	add.w	r3, r7, #20
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	605a      	str	r2, [r3, #4]
 8009412:	609a      	str	r2, [r3, #8]
 8009414:	60da      	str	r2, [r3, #12]
 8009416:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009420:	d147      	bne.n	80094b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	4b25      	ldr	r3, [pc, #148]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 8009428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942a:	4a24      	ldr	r2, [pc, #144]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 800942c:	f043 0301 	orr.w	r3, r3, #1
 8009430:	6313      	str	r3, [r2, #48]	@ 0x30
 8009432:	4b22      	ldr	r3, [pc, #136]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 8009434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800943e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009444:	2300      	movs	r3, #0
 8009446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009448:	2300      	movs	r3, #0
 800944a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800944c:	f107 0314 	add.w	r3, r7, #20
 8009450:	4619      	mov	r1, r3
 8009452:	481b      	ldr	r0, [pc, #108]	@ (80094c0 <HAL_HCD_MspInit+0xc0>)
 8009454:	f7f7 febc 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009458:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800945c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800945e:	2302      	movs	r3, #2
 8009460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009462:	2300      	movs	r3, #0
 8009464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009466:	2300      	movs	r3, #0
 8009468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800946a:	230a      	movs	r3, #10
 800946c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800946e:	f107 0314 	add.w	r3, r7, #20
 8009472:	4619      	mov	r1, r3
 8009474:	4812      	ldr	r0, [pc, #72]	@ (80094c0 <HAL_HCD_MspInit+0xc0>)
 8009476:	f7f7 feab 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800947a:	4b10      	ldr	r3, [pc, #64]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 800947c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947e:	4a0f      	ldr	r2, [pc, #60]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 8009480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009484:	6353      	str	r3, [r2, #52]	@ 0x34
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	4b0c      	ldr	r3, [pc, #48]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 800948c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800948e:	4a0b      	ldr	r2, [pc, #44]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 8009490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009494:	6453      	str	r3, [r2, #68]	@ 0x44
 8009496:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <HAL_HCD_MspInit+0xbc>)
 8009498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800949a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094a2:	2200      	movs	r2, #0
 80094a4:	2100      	movs	r1, #0
 80094a6:	2043      	movs	r0, #67	@ 0x43
 80094a8:	f7f7 fe5b 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094ac:	2043      	movs	r0, #67	@ 0x43
 80094ae:	f7f7 fe74 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094b2:	bf00      	nop
 80094b4:	3728      	adds	r7, #40	@ 0x28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	40023800 	.word	0x40023800
 80094c0:	40020000 	.word	0x40020000

080094c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe ff73 	bl	80083be <USBH_LL_IncTimer>
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe ffab 	bl	800844a <USBH_LL_Connect>
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe ffb4 	bl	8008478 <USBH_LL_Disconnect>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
 8009524:	4613      	mov	r3, r2
 8009526:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe ff65 	bl	8008412 <USBH_LL_PortEnabled>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe ff65 	bl	800842e <USBH_LL_PortDisabled>
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800957a:	2b01      	cmp	r3, #1
 800957c:	d12a      	bne.n	80095d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800957e:	4a18      	ldr	r2, [pc, #96]	@ (80095e0 <USBH_LL_Init+0x74>)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a15      	ldr	r2, [pc, #84]	@ (80095e0 <USBH_LL_Init+0x74>)
 800958a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800958e:	4b14      	ldr	r3, [pc, #80]	@ (80095e0 <USBH_LL_Init+0x74>)
 8009590:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009594:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009596:	4b12      	ldr	r3, [pc, #72]	@ (80095e0 <USBH_LL_Init+0x74>)
 8009598:	2208      	movs	r2, #8
 800959a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800959c:	4b10      	ldr	r3, [pc, #64]	@ (80095e0 <USBH_LL_Init+0x74>)
 800959e:	2201      	movs	r2, #1
 80095a0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095a2:	4b0f      	ldr	r3, [pc, #60]	@ (80095e0 <USBH_LL_Init+0x74>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80095a8:	4b0d      	ldr	r3, [pc, #52]	@ (80095e0 <USBH_LL_Init+0x74>)
 80095aa:	2202      	movs	r2, #2
 80095ac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095ae:	4b0c      	ldr	r3, [pc, #48]	@ (80095e0 <USBH_LL_Init+0x74>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80095b4:	480a      	ldr	r0, [pc, #40]	@ (80095e0 <USBH_LL_Init+0x74>)
 80095b6:	f7f7 ffc0 	bl	800153a <HAL_HCD_Init>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80095c0:	f7f7 fa0c 	bl	80009dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80095c4:	4806      	ldr	r0, [pc, #24]	@ (80095e0 <USBH_LL_Init+0x74>)
 80095c6:	f7f8 fc21 	bl	8001e0c <HAL_HCD_GetCurrentFrame>
 80095ca:	4603      	mov	r3, r0
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7fe fee6 	bl	80083a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200005b8 	.word	0x200005b8

080095e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7f8 fb8e 	bl	8001d1c <HAL_HCD_Start>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f95e 	bl	80098c8 <USBH_Get_USB_Status>
 800960c:	4603      	mov	r3, r0
 800960e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009610:	7bbb      	ldrb	r3, [r7, #14]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009630:	4618      	mov	r0, r3
 8009632:	f7f8 fb96 	bl	8001d62 <HAL_HCD_Stop>
 8009636:	4603      	mov	r3, r0
 8009638:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f943 	bl	80098c8 <USBH_Get_USB_Status>
 8009642:	4603      	mov	r3, r0
 8009644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009646:	7bbb      	ldrb	r3, [r7, #14]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009658:	2301      	movs	r3, #1
 800965a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009662:	4618      	mov	r0, r3
 8009664:	f7f8 fbe0 	bl	8001e28 <HAL_HCD_GetCurrentSpeed>
 8009668:	4603      	mov	r3, r0
 800966a:	2b02      	cmp	r3, #2
 800966c:	d00c      	beq.n	8009688 <USBH_LL_GetSpeed+0x38>
 800966e:	2b02      	cmp	r3, #2
 8009670:	d80d      	bhi.n	800968e <USBH_LL_GetSpeed+0x3e>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <USBH_LL_GetSpeed+0x2c>
 8009676:	2b01      	cmp	r3, #1
 8009678:	d003      	beq.n	8009682 <USBH_LL_GetSpeed+0x32>
 800967a:	e008      	b.n	800968e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]
    break;
 8009680:	e008      	b.n	8009694 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009682:	2301      	movs	r3, #1
 8009684:	73fb      	strb	r3, [r7, #15]
    break;
 8009686:	e005      	b.n	8009694 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009688:	2302      	movs	r3, #2
 800968a:	73fb      	strb	r3, [r7, #15]
    break;
 800968c:	e002      	b.n	8009694 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800968e:	2301      	movs	r3, #1
 8009690:	73fb      	strb	r3, [r7, #15]
    break;
 8009692:	bf00      	nop
  }
  return  speed;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7f8 fb71 	bl	8001d9c <HAL_HCD_ResetPort>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f901 	bl	80098c8 <USBH_Get_USB_Status>
 80096c6:	4603      	mov	r3, r0
 80096c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096e6:	78fa      	ldrb	r2, [r7, #3]
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f8 fb79 	bl	8001de2 <HAL_HCD_HC_GetXferCount>
 80096f0:	4603      	mov	r3, r0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096fa:	b590      	push	{r4, r7, lr}
 80096fc:	b089      	sub	sp, #36	@ 0x24
 80096fe:	af04      	add	r7, sp, #16
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	4608      	mov	r0, r1
 8009704:	4611      	mov	r1, r2
 8009706:	461a      	mov	r2, r3
 8009708:	4603      	mov	r3, r0
 800970a:	70fb      	strb	r3, [r7, #3]
 800970c:	460b      	mov	r3, r1
 800970e:	70bb      	strb	r3, [r7, #2]
 8009710:	4613      	mov	r3, r2
 8009712:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009722:	787c      	ldrb	r4, [r7, #1]
 8009724:	78ba      	ldrb	r2, [r7, #2]
 8009726:	78f9      	ldrb	r1, [r7, #3]
 8009728:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800972a:	9302      	str	r3, [sp, #8]
 800972c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	4623      	mov	r3, r4
 800973a:	f7f7 ff65 	bl	8001608 <HAL_HCD_HC_Init>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f8bf 	bl	80098c8 <USBH_Get_USB_Status>
 800974a:	4603      	mov	r3, r0
 800974c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	bd90      	pop	{r4, r7, pc}

08009758 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7f7 fffe 	bl	8001778 <HAL_HCD_HC_Halt>
 800977c:	4603      	mov	r3, r0
 800977e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 f8a0 	bl	80098c8 <USBH_Get_USB_Status>
 8009788:	4603      	mov	r3, r0
 800978a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978c:	7bbb      	ldrb	r3, [r7, #14]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009796:	b590      	push	{r4, r7, lr}
 8009798:	b089      	sub	sp, #36	@ 0x24
 800979a:	af04      	add	r7, sp, #16
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	4608      	mov	r0, r1
 80097a0:	4611      	mov	r1, r2
 80097a2:	461a      	mov	r2, r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	70fb      	strb	r3, [r7, #3]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70bb      	strb	r3, [r7, #2]
 80097ac:	4613      	mov	r3, r2
 80097ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097be:	787c      	ldrb	r4, [r7, #1]
 80097c0:	78ba      	ldrb	r2, [r7, #2]
 80097c2:	78f9      	ldrb	r1, [r7, #3]
 80097c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80097c8:	9303      	str	r3, [sp, #12]
 80097ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097cc:	9302      	str	r3, [sp, #8]
 80097ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	4623      	mov	r3, r4
 80097da:	f7f7 fff1 	bl	80017c0 <HAL_HCD_HC_SubmitRequest>
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 f86f 	bl	80098c8 <USBH_Get_USB_Status>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd90      	pop	{r4, r7, pc}

080097f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f7f8 fad2 	bl	8001db8 <HAL_HCD_HC_GetURBState>
 8009814:	4603      	mov	r3, r0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009830:	2b01      	cmp	r3, #1
 8009832:	d103      	bne.n	800983c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	4618      	mov	r0, r3
 8009838:	f000 f872 	bl	8009920 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800983c:	20c8      	movs	r0, #200	@ 0xc8
 800983e:	f7f7 fb91 	bl	8000f64 <HAL_Delay>
  return USBH_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
 8009858:	4613      	mov	r3, r2
 800985a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009862:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009864:	78fa      	ldrb	r2, [r7, #3]
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	4613      	mov	r3, r2
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	3317      	adds	r3, #23
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	68f9      	ldr	r1, [r7, #12]
 800987e:	4613      	mov	r3, r2
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	333c      	adds	r3, #60	@ 0x3c
 800988a:	78ba      	ldrb	r2, [r7, #2]
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	e009      	b.n	80098a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	4613      	mov	r3, r2
 8009896:	011b      	lsls	r3, r3, #4
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	333d      	adds	r3, #61	@ 0x3d
 80098a0:	78ba      	ldrb	r2, [r7, #2]
 80098a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7f7 fb52 	bl	8000f64 <HAL_Delay>
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d817      	bhi.n	800990c <USBH_Get_USB_Status+0x44>
 80098dc:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <USBH_Get_USB_Status+0x1c>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	080098fb 	.word	0x080098fb
 80098ec:	08009901 	.word	0x08009901
 80098f0:	08009907 	.word	0x08009907
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
    break;
 80098f8:	e00b      	b.n	8009912 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80098fa:	2302      	movs	r3, #2
 80098fc:	73fb      	strb	r3, [r7, #15]
    break;
 80098fe:	e008      	b.n	8009912 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]
    break;
 8009904:	e005      	b.n	8009912 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009906:	2302      	movs	r3, #2
 8009908:	73fb      	strb	r3, [r7, #15]
    break;
 800990a:	e002      	b.n	8009912 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800990c:	2302      	movs	r3, #2
 800990e:	73fb      	strb	r3, [r7, #15]
    break;
 8009910:	bf00      	nop
  }
  return usb_status;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
 8009938:	e001      	b.n	800993e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800993a:	2301      	movs	r3, #1
 800993c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	461a      	mov	r2, r3
 8009942:	2101      	movs	r1, #1
 8009944:	4803      	ldr	r0, [pc, #12]	@ (8009954 <MX_DriverVbusFS+0x34>)
 8009946:	f7f7 fddf 	bl	8001508 <HAL_GPIO_WritePin>
}
 800994a:	bf00      	nop
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	40020800 	.word	0x40020800

08009958 <malloc>:
 8009958:	4b02      	ldr	r3, [pc, #8]	@ (8009964 <malloc+0xc>)
 800995a:	4601      	mov	r1, r0
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f000 b82d 	b.w	80099bc <_malloc_r>
 8009962:	bf00      	nop
 8009964:	2000002c 	.word	0x2000002c

08009968 <free>:
 8009968:	4b02      	ldr	r3, [pc, #8]	@ (8009974 <free+0xc>)
 800996a:	4601      	mov	r1, r0
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	f000 b8f5 	b.w	8009b5c <_free_r>
 8009972:	bf00      	nop
 8009974:	2000002c 	.word	0x2000002c

08009978 <sbrk_aligned>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	4e0f      	ldr	r6, [pc, #60]	@ (80099b8 <sbrk_aligned+0x40>)
 800997c:	460c      	mov	r4, r1
 800997e:	6831      	ldr	r1, [r6, #0]
 8009980:	4605      	mov	r5, r0
 8009982:	b911      	cbnz	r1, 800998a <sbrk_aligned+0x12>
 8009984:	f000 f8ae 	bl	8009ae4 <_sbrk_r>
 8009988:	6030      	str	r0, [r6, #0]
 800998a:	4621      	mov	r1, r4
 800998c:	4628      	mov	r0, r5
 800998e:	f000 f8a9 	bl	8009ae4 <_sbrk_r>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	d103      	bne.n	800999e <sbrk_aligned+0x26>
 8009996:	f04f 34ff 	mov.w	r4, #4294967295
 800999a:	4620      	mov	r0, r4
 800999c:	bd70      	pop	{r4, r5, r6, pc}
 800999e:	1cc4      	adds	r4, r0, #3
 80099a0:	f024 0403 	bic.w	r4, r4, #3
 80099a4:	42a0      	cmp	r0, r4
 80099a6:	d0f8      	beq.n	800999a <sbrk_aligned+0x22>
 80099a8:	1a21      	subs	r1, r4, r0
 80099aa:	4628      	mov	r0, r5
 80099ac:	f000 f89a 	bl	8009ae4 <_sbrk_r>
 80099b0:	3001      	adds	r0, #1
 80099b2:	d1f2      	bne.n	800999a <sbrk_aligned+0x22>
 80099b4:	e7ef      	b.n	8009996 <sbrk_aligned+0x1e>
 80099b6:	bf00      	nop
 80099b8:	20000998 	.word	0x20000998

080099bc <_malloc_r>:
 80099bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c0:	1ccd      	adds	r5, r1, #3
 80099c2:	f025 0503 	bic.w	r5, r5, #3
 80099c6:	3508      	adds	r5, #8
 80099c8:	2d0c      	cmp	r5, #12
 80099ca:	bf38      	it	cc
 80099cc:	250c      	movcc	r5, #12
 80099ce:	2d00      	cmp	r5, #0
 80099d0:	4606      	mov	r6, r0
 80099d2:	db01      	blt.n	80099d8 <_malloc_r+0x1c>
 80099d4:	42a9      	cmp	r1, r5
 80099d6:	d904      	bls.n	80099e2 <_malloc_r+0x26>
 80099d8:	230c      	movs	r3, #12
 80099da:	6033      	str	r3, [r6, #0]
 80099dc:	2000      	movs	r0, #0
 80099de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ab8 <_malloc_r+0xfc>
 80099e6:	f000 f869 	bl	8009abc <__malloc_lock>
 80099ea:	f8d8 3000 	ldr.w	r3, [r8]
 80099ee:	461c      	mov	r4, r3
 80099f0:	bb44      	cbnz	r4, 8009a44 <_malloc_r+0x88>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff ffbf 	bl	8009978 <sbrk_aligned>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	4604      	mov	r4, r0
 80099fe:	d158      	bne.n	8009ab2 <_malloc_r+0xf6>
 8009a00:	f8d8 4000 	ldr.w	r4, [r8]
 8009a04:	4627      	mov	r7, r4
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	d143      	bne.n	8009a92 <_malloc_r+0xd6>
 8009a0a:	2c00      	cmp	r4, #0
 8009a0c:	d04b      	beq.n	8009aa6 <_malloc_r+0xea>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	4639      	mov	r1, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	eb04 0903 	add.w	r9, r4, r3
 8009a18:	f000 f864 	bl	8009ae4 <_sbrk_r>
 8009a1c:	4581      	cmp	r9, r0
 8009a1e:	d142      	bne.n	8009aa6 <_malloc_r+0xea>
 8009a20:	6821      	ldr	r1, [r4, #0]
 8009a22:	1a6d      	subs	r5, r5, r1
 8009a24:	4629      	mov	r1, r5
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7ff ffa6 	bl	8009978 <sbrk_aligned>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d03a      	beq.n	8009aa6 <_malloc_r+0xea>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	442b      	add	r3, r5
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	f8d8 3000 	ldr.w	r3, [r8]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	bb62      	cbnz	r2, 8009a98 <_malloc_r+0xdc>
 8009a3e:	f8c8 7000 	str.w	r7, [r8]
 8009a42:	e00f      	b.n	8009a64 <_malloc_r+0xa8>
 8009a44:	6822      	ldr	r2, [r4, #0]
 8009a46:	1b52      	subs	r2, r2, r5
 8009a48:	d420      	bmi.n	8009a8c <_malloc_r+0xd0>
 8009a4a:	2a0b      	cmp	r2, #11
 8009a4c:	d917      	bls.n	8009a7e <_malloc_r+0xc2>
 8009a4e:	1961      	adds	r1, r4, r5
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	6025      	str	r5, [r4, #0]
 8009a54:	bf18      	it	ne
 8009a56:	6059      	strne	r1, [r3, #4]
 8009a58:	6863      	ldr	r3, [r4, #4]
 8009a5a:	bf08      	it	eq
 8009a5c:	f8c8 1000 	streq.w	r1, [r8]
 8009a60:	5162      	str	r2, [r4, r5]
 8009a62:	604b      	str	r3, [r1, #4]
 8009a64:	4630      	mov	r0, r6
 8009a66:	f000 f82f 	bl	8009ac8 <__malloc_unlock>
 8009a6a:	f104 000b 	add.w	r0, r4, #11
 8009a6e:	1d23      	adds	r3, r4, #4
 8009a70:	f020 0007 	bic.w	r0, r0, #7
 8009a74:	1ac2      	subs	r2, r0, r3
 8009a76:	bf1c      	itt	ne
 8009a78:	1a1b      	subne	r3, r3, r0
 8009a7a:	50a3      	strne	r3, [r4, r2]
 8009a7c:	e7af      	b.n	80099de <_malloc_r+0x22>
 8009a7e:	6862      	ldr	r2, [r4, #4]
 8009a80:	42a3      	cmp	r3, r4
 8009a82:	bf0c      	ite	eq
 8009a84:	f8c8 2000 	streq.w	r2, [r8]
 8009a88:	605a      	strne	r2, [r3, #4]
 8009a8a:	e7eb      	b.n	8009a64 <_malloc_r+0xa8>
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	6864      	ldr	r4, [r4, #4]
 8009a90:	e7ae      	b.n	80099f0 <_malloc_r+0x34>
 8009a92:	463c      	mov	r4, r7
 8009a94:	687f      	ldr	r7, [r7, #4]
 8009a96:	e7b6      	b.n	8009a06 <_malloc_r+0x4a>
 8009a98:	461a      	mov	r2, r3
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	d1fb      	bne.n	8009a98 <_malloc_r+0xdc>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	6053      	str	r3, [r2, #4]
 8009aa4:	e7de      	b.n	8009a64 <_malloc_r+0xa8>
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	6033      	str	r3, [r6, #0]
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f000 f80c 	bl	8009ac8 <__malloc_unlock>
 8009ab0:	e794      	b.n	80099dc <_malloc_r+0x20>
 8009ab2:	6005      	str	r5, [r0, #0]
 8009ab4:	e7d6      	b.n	8009a64 <_malloc_r+0xa8>
 8009ab6:	bf00      	nop
 8009ab8:	2000099c 	.word	0x2000099c

08009abc <__malloc_lock>:
 8009abc:	4801      	ldr	r0, [pc, #4]	@ (8009ac4 <__malloc_lock+0x8>)
 8009abe:	f000 b84b 	b.w	8009b58 <__retarget_lock_acquire_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	20000adc 	.word	0x20000adc

08009ac8 <__malloc_unlock>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	@ (8009ad0 <__malloc_unlock+0x8>)
 8009aca:	f000 b846 	b.w	8009b5a <__retarget_lock_release_recursive>
 8009ace:	bf00      	nop
 8009ad0:	20000adc 	.word	0x20000adc

08009ad4 <memset>:
 8009ad4:	4402      	add	r2, r0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d100      	bne.n	8009ade <memset+0xa>
 8009adc:	4770      	bx	lr
 8009ade:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae2:	e7f9      	b.n	8009ad8 <memset+0x4>

08009ae4 <_sbrk_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d06      	ldr	r5, [pc, #24]	@ (8009b00 <_sbrk_r+0x1c>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	602b      	str	r3, [r5, #0]
 8009af0:	f7f7 f954 	bl	8000d9c <_sbrk>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_sbrk_r+0x1a>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_sbrk_r+0x1a>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	20000ad8 	.word	0x20000ad8

08009b04 <__errno>:
 8009b04:	4b01      	ldr	r3, [pc, #4]	@ (8009b0c <__errno+0x8>)
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	2000002c 	.word	0x2000002c

08009b10 <__libc_init_array>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4d0d      	ldr	r5, [pc, #52]	@ (8009b48 <__libc_init_array+0x38>)
 8009b14:	4c0d      	ldr	r4, [pc, #52]	@ (8009b4c <__libc_init_array+0x3c>)
 8009b16:	1b64      	subs	r4, r4, r5
 8009b18:	10a4      	asrs	r4, r4, #2
 8009b1a:	2600      	movs	r6, #0
 8009b1c:	42a6      	cmp	r6, r4
 8009b1e:	d109      	bne.n	8009b34 <__libc_init_array+0x24>
 8009b20:	4d0b      	ldr	r5, [pc, #44]	@ (8009b50 <__libc_init_array+0x40>)
 8009b22:	4c0c      	ldr	r4, [pc, #48]	@ (8009b54 <__libc_init_array+0x44>)
 8009b24:	f000 f864 	bl	8009bf0 <_init>
 8009b28:	1b64      	subs	r4, r4, r5
 8009b2a:	10a4      	asrs	r4, r4, #2
 8009b2c:	2600      	movs	r6, #0
 8009b2e:	42a6      	cmp	r6, r4
 8009b30:	d105      	bne.n	8009b3e <__libc_init_array+0x2e>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b38:	4798      	blx	r3
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	e7ee      	b.n	8009b1c <__libc_init_array+0xc>
 8009b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b42:	4798      	blx	r3
 8009b44:	3601      	adds	r6, #1
 8009b46:	e7f2      	b.n	8009b2e <__libc_init_array+0x1e>
 8009b48:	08009c2c 	.word	0x08009c2c
 8009b4c:	08009c2c 	.word	0x08009c2c
 8009b50:	08009c2c 	.word	0x08009c2c
 8009b54:	08009c30 	.word	0x08009c30

08009b58 <__retarget_lock_acquire_recursive>:
 8009b58:	4770      	bx	lr

08009b5a <__retarget_lock_release_recursive>:
 8009b5a:	4770      	bx	lr

08009b5c <_free_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4605      	mov	r5, r0
 8009b60:	2900      	cmp	r1, #0
 8009b62:	d041      	beq.n	8009be8 <_free_r+0x8c>
 8009b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b68:	1f0c      	subs	r4, r1, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bfb8      	it	lt
 8009b6e:	18e4      	addlt	r4, r4, r3
 8009b70:	f7ff ffa4 	bl	8009abc <__malloc_lock>
 8009b74:	4a1d      	ldr	r2, [pc, #116]	@ (8009bec <_free_r+0x90>)
 8009b76:	6813      	ldr	r3, [r2, #0]
 8009b78:	b933      	cbnz	r3, 8009b88 <_free_r+0x2c>
 8009b7a:	6063      	str	r3, [r4, #4]
 8009b7c:	6014      	str	r4, [r2, #0]
 8009b7e:	4628      	mov	r0, r5
 8009b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b84:	f7ff bfa0 	b.w	8009ac8 <__malloc_unlock>
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	d908      	bls.n	8009b9e <_free_r+0x42>
 8009b8c:	6820      	ldr	r0, [r4, #0]
 8009b8e:	1821      	adds	r1, r4, r0
 8009b90:	428b      	cmp	r3, r1
 8009b92:	bf01      	itttt	eq
 8009b94:	6819      	ldreq	r1, [r3, #0]
 8009b96:	685b      	ldreq	r3, [r3, #4]
 8009b98:	1809      	addeq	r1, r1, r0
 8009b9a:	6021      	streq	r1, [r4, #0]
 8009b9c:	e7ed      	b.n	8009b7a <_free_r+0x1e>
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	b10b      	cbz	r3, 8009ba8 <_free_r+0x4c>
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	d9fa      	bls.n	8009b9e <_free_r+0x42>
 8009ba8:	6811      	ldr	r1, [r2, #0]
 8009baa:	1850      	adds	r0, r2, r1
 8009bac:	42a0      	cmp	r0, r4
 8009bae:	d10b      	bne.n	8009bc8 <_free_r+0x6c>
 8009bb0:	6820      	ldr	r0, [r4, #0]
 8009bb2:	4401      	add	r1, r0
 8009bb4:	1850      	adds	r0, r2, r1
 8009bb6:	4283      	cmp	r3, r0
 8009bb8:	6011      	str	r1, [r2, #0]
 8009bba:	d1e0      	bne.n	8009b7e <_free_r+0x22>
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	6053      	str	r3, [r2, #4]
 8009bc2:	4408      	add	r0, r1
 8009bc4:	6010      	str	r0, [r2, #0]
 8009bc6:	e7da      	b.n	8009b7e <_free_r+0x22>
 8009bc8:	d902      	bls.n	8009bd0 <_free_r+0x74>
 8009bca:	230c      	movs	r3, #12
 8009bcc:	602b      	str	r3, [r5, #0]
 8009bce:	e7d6      	b.n	8009b7e <_free_r+0x22>
 8009bd0:	6820      	ldr	r0, [r4, #0]
 8009bd2:	1821      	adds	r1, r4, r0
 8009bd4:	428b      	cmp	r3, r1
 8009bd6:	bf04      	itt	eq
 8009bd8:	6819      	ldreq	r1, [r3, #0]
 8009bda:	685b      	ldreq	r3, [r3, #4]
 8009bdc:	6063      	str	r3, [r4, #4]
 8009bde:	bf04      	itt	eq
 8009be0:	1809      	addeq	r1, r1, r0
 8009be2:	6021      	streq	r1, [r4, #0]
 8009be4:	6054      	str	r4, [r2, #4]
 8009be6:	e7ca      	b.n	8009b7e <_free_r+0x22>
 8009be8:	bd38      	pop	{r3, r4, r5, pc}
 8009bea:	bf00      	nop
 8009bec:	2000099c 	.word	0x2000099c

08009bf0 <_init>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	bf00      	nop
 8009bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf6:	bc08      	pop	{r3}
 8009bf8:	469e      	mov	lr, r3
 8009bfa:	4770      	bx	lr

08009bfc <_fini>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	bf00      	nop
 8009c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c02:	bc08      	pop	{r3}
 8009c04:	469e      	mov	lr, r3
 8009c06:	4770      	bx	lr

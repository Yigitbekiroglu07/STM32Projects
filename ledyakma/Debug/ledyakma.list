
ledyakma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008ab0  08008ab0  00009ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008acc  08008acc  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008acc  08008acc  00009acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ad4  08008ad4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad4  08008ad4  00009ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008adc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a47  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003864  00000000  00000000  0001eaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00022358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d13  00000000  00000000  00023488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023416  00000000  00000000  0002419b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018481  00000000  00000000  000475b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb7e3  00000000  00000000  0005fa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b215  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a74  00000000  00000000  0012b258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0012fccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a98 	.word	0x08008a98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008a98 	.word	0x08008a98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fbfe 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f816 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f912 	bl	80006ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f87c 	bl	80005c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f8a8 	bl	8000620 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8d6 	bl	8000680 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 fe8a 	bl	80081ec <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d8:	f007 feae 	bl	8008238 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // led4 on
    HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e2:	4802      	ldr	r0, [pc, #8]	@ (80004ec <main+0x34>)
 80004e4:	f000 ff2e 	bl	8001344 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80004e8:	bf00      	nop
 80004ea:	e7f5      	b.n	80004d8 <main+0x20>
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	@ 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	@ 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f008 fa3c 	bl	800897c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	@ (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	@ 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a21      	ldr	r2, [pc, #132]	@ (80005c0 <SystemClock_Config+0xd0>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000564:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000568:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fdfc 	bl	8004174 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000582:	f000 f9b1 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000592:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2105      	movs	r1, #5
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 f85d 	bl	8004664 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b0:	f000 f99a 	bl	80008e8 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	@ 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005ca:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <MX_I2C1_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005d0:	4a12      	ldr	r2, [pc, #72]	@ (800061c <MX_I2C1_Init+0x58>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <MX_I2C1_Init+0x50>)
 8000602:	f002 ffd3 	bl	80035ac <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f96c 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000098 	.word	0x20000098
 8000618:	40005400 	.word	0x40005400
 800061c:	000186a0 	.word	0x000186a0

08000620 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_I2S3_Init+0x54>)
 8000626:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <MX_I2S3_Init+0x58>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_I2S3_Init+0x54>)
 800062c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000630:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_I2S3_Init+0x54>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_I2S3_Init+0x54>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <MX_I2S3_Init+0x54>)
 8000640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000644:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_I2S3_Init+0x54>)
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <MX_I2S3_Init+0x5c>)
 800064a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_I2S3_Init+0x54>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_I2S3_Init+0x54>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_I2S3_Init+0x54>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_I2S3_Init+0x54>)
 8000660:	f003 f8e8 	bl	8003834 <HAL_I2S_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800066a:	f000 f93d 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000ec 	.word	0x200000ec
 8000678:	40003c00 	.word	0x40003c00
 800067c:	00017700 	.word	0x00017700

08000680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_SPI1_Init+0x64>)
 8000686:	4a18      	ldr	r2, [pc, #96]	@ (80006e8 <MX_SPI1_Init+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_SPI1_Init+0x64>)
 800068c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_SPI1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_SPI1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006cc:	220a      	movs	r2, #10
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_SPI1_Init+0x64>)
 80006d2:	f004 fb15 	bl	8004d00 <HAL_SPI_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006dc:	f000 f904 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000134 	.word	0x20000134
 80006e8:	40013000 	.word	0x40013000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4b72      	ldr	r3, [pc, #456]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a71      	ldr	r2, [pc, #452]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b6f      	ldr	r3, [pc, #444]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b6b      	ldr	r3, [pc, #428]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a6a      	ldr	r2, [pc, #424]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b68      	ldr	r3, [pc, #416]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b64      	ldr	r3, [pc, #400]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a63      	ldr	r2, [pc, #396]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b61      	ldr	r3, [pc, #388]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b5d      	ldr	r3, [pc, #372]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a5c      	ldr	r2, [pc, #368]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b5a      	ldr	r3, [pc, #360]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b56      	ldr	r3, [pc, #344]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a55      	ldr	r2, [pc, #340]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b53      	ldr	r3, [pc, #332]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b4f      	ldr	r3, [pc, #316]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a4e      	ldr	r2, [pc, #312]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b4c      	ldr	r3, [pc, #304]	@ (80008d0 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	4849      	ldr	r0, [pc, #292]	@ (80008d4 <MX_GPIO_Init+0x1e8>)
 80007b0:	f000 fdc8 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	4847      	ldr	r0, [pc, #284]	@ (80008d8 <MX_GPIO_Init+0x1ec>)
 80007ba:	f000 fdc3 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007be:	2200      	movs	r2, #0
 80007c0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007c4:	4845      	ldr	r0, [pc, #276]	@ (80008dc <MX_GPIO_Init+0x1f0>)
 80007c6:	f000 fdbd 	bl	8001344 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ca:	2308      	movs	r3, #8
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	483c      	ldr	r0, [pc, #240]	@ (80008d4 <MX_GPIO_Init+0x1e8>)
 80007e2:	f000 fc13 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4836      	ldr	r0, [pc, #216]	@ (80008d8 <MX_GPIO_Init+0x1ec>)
 80007fe:	f000 fc05 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000812:	2305      	movs	r3, #5
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	482e      	ldr	r0, [pc, #184]	@ (80008d8 <MX_GPIO_Init+0x1ec>)
 800081e:	f000 fbf5 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000826:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	482a      	ldr	r0, [pc, #168]	@ (80008e0 <MX_GPIO_Init+0x1f4>)
 8000838:	f000 fbe8 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800083c:	2304      	movs	r3, #4
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <MX_GPIO_Init+0x1f8>)
 8000850:	f000 fbdc 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000866:	2305      	movs	r3, #5
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	@ (80008e4 <MX_GPIO_Init+0x1f8>)
 8000872:	f000 fbcb 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : led4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000876:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800087a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4813      	ldr	r0, [pc, #76]	@ (80008dc <MX_GPIO_Init+0x1f0>)
 8000890:	f000 fbbc 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000894:	2320      	movs	r3, #32
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_GPIO_Init+0x1f0>)
 80008a8:	f000 fbb0 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_GPIO_Init+0x1e8>)
 80008c2:	f000 fba3 	bl	800100c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	@ 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020400 	.word	0x40020400

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000932:	2007      	movs	r0, #7
 8000934:	f000 fb28 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <HAL_I2C_MspInit+0x84>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12c      	bne.n	80009c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_I2C_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <HAL_I2C_MspInit+0x88>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_I2C_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <HAL_I2C_MspInit+0x8c>)
 80009a0:	f000 fb34 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_I2C_MspInit+0x88>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <HAL_I2C_MspInit+0x88>)
 80009ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_I2C_MspInit+0x88>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020400 	.word	0x40020400

080009d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a31      	ldr	r2, [pc, #196]	@ (8000ac4 <HAL_I2S_MspInit+0xf0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d15a      	bne.n	8000aba <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a08:	23c0      	movs	r3, #192	@ 0xc0
 8000a0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 f831 	bl	8004a7c <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a20:	f7ff ff62 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	4a26      	ldr	r2, [pc, #152]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	480e      	ldr	r0, [pc, #56]	@ (8000acc <HAL_I2S_MspInit+0xf8>)
 8000a94:	f000 faba 	bl	800100c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a98:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <HAL_I2S_MspInit+0xfc>)
 8000ab6:	f000 faa9 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3738      	adds	r7, #56	@ 0x38
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40003c00 	.word	0x40003c00
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_SPI_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12b      	bne.n	8000b4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_SPI_MspInit+0x88>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_SPI_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b2e:	23e0      	movs	r3, #224	@ 0xe0
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <HAL_SPI_MspInit+0x8c>)
 8000b4a:	f000 fa5f 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 f8d1 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <OTG_FS_IRQHandler+0x10>)
 8000bca:	f000 feb5 	bl	8001938 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000570 	.word	0x20000570

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f007 fed0 	bl	80089ac <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000018c 	.word	0x2000018c
 8000c40:	20000a98 	.word	0x20000a98

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f007 fe8f 	bl	80089b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc0d 	bl	80004b8 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cac:	08008adc 	.word	0x08008adc
  ldr r2, =_sbss
 8000cb0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cb4:	20000a98 	.word	0x20000a98

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f94f 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe00 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f967 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f92f 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000190 	.word	0x20000190

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000190 	.word	0x20000190

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	@ (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	@ (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	@ (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	@ 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	@ 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff3e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff31 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	e16b      	b.n	8001300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 815a 	bne.w	80012fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	2b02      	cmp	r3, #2
 800105c:	d130      	bne.n	80010c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d017      	beq.n	80010fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80b4 	beq.w	80012fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b60      	ldr	r3, [pc, #384]	@ (8001318 <HAL_GPIO_Init+0x30c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a5f      	ldr	r2, [pc, #380]	@ (8001318 <HAL_GPIO_Init+0x30c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001318 <HAL_GPIO_Init+0x30c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ae:	4a5b      	ldr	r2, [pc, #364]	@ (800131c <HAL_GPIO_Init+0x310>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a52      	ldr	r2, [pc, #328]	@ (8001320 <HAL_GPIO_Init+0x314>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_GPIO_Init+0x226>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	@ (8001324 <HAL_GPIO_Init+0x318>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x222>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	@ (8001328 <HAL_GPIO_Init+0x31c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x21e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	@ (800132c <HAL_GPIO_Init+0x320>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x21a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001330 <HAL_GPIO_Init+0x324>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x216>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001334 <HAL_GPIO_Init+0x328>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x212>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	@ (8001338 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x20e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	@ (800133c <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x20a>
 8001212:	2307      	movs	r3, #7
 8001214:	e00e      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001216:	2308      	movs	r3, #8
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121a:	2306      	movs	r3, #6
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	@ (800131c <HAL_GPIO_Init+0x310>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_GPIO_Init+0x334>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a32      	ldr	r2, [pc, #200]	@ (8001340 <HAL_GPIO_Init+0x334>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <HAL_GPIO_Init+0x334>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a27      	ldr	r2, [pc, #156]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <HAL_GPIO_Init+0x334>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f ae90 	bls.w	8001028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40021400 	.word	0x40021400
 8001338:	40021800 	.word	0x40021800
 800133c:	40021c00 	.word	0x40021c00
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af02      	add	r7, sp, #8
 800137c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e059      	b.n	800143c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f006 ff80 	bl	80082a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013b6:	d102      	bne.n	80013be <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fd9a 	bl	8004efc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7c1a      	ldrb	r2, [r3, #16]
 80013d0:	f88d 2000 	strb.w	r2, [sp]
 80013d4:	3304      	adds	r3, #4
 80013d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d8:	f003 fd1b 	bl	8004e12 <USB_CoreInit>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2202      	movs	r2, #2
 80013e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e026      	b.n	800143c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2101      	movs	r1, #1
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fd92 	bl	8004f1e <USB_SetCurrentMode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e017      	b.n	800143c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7c1a      	ldrb	r2, [r3, #16]
 8001414:	f88d 2000 	strb.w	r2, [sp]
 8001418:	3304      	adds	r3, #4
 800141a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141c:	f003 ff34 	bl	8005288 <USB_HostInit>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2202      	movs	r2, #2
 800142a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e004      	b.n	800143c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b08b      	sub	sp, #44	@ 0x2c
 8001448:	af04      	add	r7, sp, #16
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	70fb      	strb	r3, [r7, #3]
 8001456:	460b      	mov	r3, r1
 8001458:	70bb      	strb	r3, [r7, #2]
 800145a:	4613      	mov	r3, r2
 800145c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800145e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001460:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_HCD_HC_Init+0x2c>
 800146c:	2302      	movs	r3, #2
 800146e:	e09d      	b.n	80015ac <HAL_HCD_HC_Init+0x168>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	3319      	adds	r3, #25
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3314      	adds	r3, #20
 800149c:	787a      	ldrb	r2, [r7, #1]
 800149e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3315      	adds	r3, #21
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3326      	adds	r3, #38	@ 0x26
 80014c4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80014c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014d2:	b2d8      	uxtb	r0, r3
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	3316      	adds	r3, #22
 80014e2:	4602      	mov	r2, r0
 80014e4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	4619      	mov	r1, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fbc8 	bl	8001c80 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80014f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da0a      	bge.n	800150e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014f8:	78fa      	ldrb	r2, [r7, #3]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3317      	adds	r3, #23
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	e009      	b.n	8001522 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3317      	adds	r3, #23
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f004 f812 	bl	8005550 <USB_GetHostSpeed>
 800152c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800152e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10b      	bne.n	800154e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_HCD_HC_Init+0x10a>
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2bbc      	cmp	r3, #188	@ 0xbc
 8001548:	d901      	bls.n	800154e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800154a:	23bc      	movs	r3, #188	@ 0xbc
 800154c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3318      	adds	r3, #24
 800155e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001564:	78fa      	ldrb	r2, [r7, #3]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	b298      	uxth	r0, r3
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3328      	adds	r3, #40	@ 0x28
 8001578:	4602      	mov	r2, r0
 800157a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	b29b      	uxth	r3, r3
 8001584:	787c      	ldrb	r4, [r7, #1]
 8001586:	78ba      	ldrb	r2, [r7, #2]
 8001588:	78f9      	ldrb	r1, [r7, #3]
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4623      	mov	r3, r4
 800159a:	f004 f801 	bl	80055a0 <USB_HC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}

080015b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_HCD_HC_Halt+0x1e>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e00f      	b.n	80015f2 <HAL_HCD_HC_Halt+0x3e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fb93 	bl	8005d0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	4608      	mov	r0, r1
 8001606:	4611      	mov	r1, r2
 8001608:	461a      	mov	r2, r3
 800160a:	4603      	mov	r3, r0
 800160c:	70fb      	strb	r3, [r7, #3]
 800160e:	460b      	mov	r3, r1
 8001610:	70bb      	strb	r3, [r7, #2]
 8001612:	4613      	mov	r3, r2
 8001614:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	3317      	adds	r3, #23
 8001626:	78ba      	ldrb	r2, [r7, #2]
 8001628:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3326      	adds	r3, #38	@ 0x26
 800163a:	787a      	ldrb	r2, [r7, #1]
 800163c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800163e:	7c3b      	ldrb	r3, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d114      	bne.n	800166e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	332a      	adds	r3, #42	@ 0x2a
 8001654:	2203      	movs	r2, #3
 8001656:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3319      	adds	r3, #25
 8001668:	7f3a      	ldrb	r2, [r7, #28]
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e009      	b.n	8001682 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	332a      	adds	r3, #42	@ 0x2a
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001682:	787b      	ldrb	r3, [r7, #1]
 8001684:	2b03      	cmp	r3, #3
 8001686:	f200 8102 	bhi.w	800188e <HAL_HCD_HC_SubmitRequest+0x292>
 800168a:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <HAL_HCD_HC_SubmitRequest+0x94>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016a1 	.word	0x080016a1
 8001694:	08001879 	.word	0x08001879
 8001698:	08001765 	.word	0x08001765
 800169c:	080017ef 	.word	0x080017ef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80016a0:	7c3b      	ldrb	r3, [r7, #16]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f040 80f5 	bne.w	8001892 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d12d      	bne.n	800170a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80016ae:	8b3b      	ldrh	r3, [r7, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	333d      	adds	r3, #61	@ 0x3d
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	333d      	adds	r3, #61	@ 0x3d
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10a      	bne.n	80016f4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	332a      	adds	r3, #42	@ 0x2a
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80016f2:	e0ce      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	332a      	adds	r3, #42	@ 0x2a
 8001704:	2202      	movs	r2, #2
 8001706:	701a      	strb	r2, [r3, #0]
      break;
 8001708:	e0c3      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	331a      	adds	r3, #26
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 80b8 	bne.w	8001892 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	333c      	adds	r3, #60	@ 0x3c
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	332a      	adds	r3, #42	@ 0x2a
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
      break;
 800174c:	e0a1      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	1a9b      	subs	r3, r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	332a      	adds	r3, #42	@ 0x2a
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]
      break;
 8001762:	e096      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001764:	78bb      	ldrb	r3, [r7, #2]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d120      	bne.n	80017ac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	333d      	adds	r3, #61	@ 0x3d
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	332a      	adds	r3, #42	@ 0x2a
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001794:	e07e      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	332a      	adds	r3, #42	@ 0x2a
 80017a6:	2202      	movs	r2, #2
 80017a8:	701a      	strb	r2, [r3, #0]
      break;
 80017aa:	e073      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	333c      	adds	r3, #60	@ 0x3c
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10a      	bne.n	80017d8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	332a      	adds	r3, #42	@ 0x2a
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e05d      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	332a      	adds	r3, #42	@ 0x2a
 80017e8:	2202      	movs	r2, #2
 80017ea:	701a      	strb	r2, [r3, #0]
      break;
 80017ec:	e052      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ee:	78bb      	ldrb	r3, [r7, #2]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d120      	bne.n	8001836 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	333d      	adds	r3, #61	@ 0x3d
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	332a      	adds	r3, #42	@ 0x2a
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800181e:	e039      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	332a      	adds	r3, #42	@ 0x2a
 8001830:	2202      	movs	r2, #2
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e02e      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	333c      	adds	r3, #60	@ 0x3c
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	332a      	adds	r3, #42	@ 0x2a
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
      break;
 8001860:	e018      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	332a      	adds	r3, #42	@ 0x2a
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e00d      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	332a      	adds	r3, #42	@ 0x2a
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
      break;
 800188c:	e002      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800188e:	bf00      	nop
 8001890:	e000      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001892:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	332c      	adds	r3, #44	@ 0x2c
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	8b39      	ldrh	r1, [r7, #24]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4403      	add	r3, r0
 80018b8:	3334      	adds	r3, #52	@ 0x34
 80018ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	334c      	adds	r3, #76	@ 0x4c
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3338      	adds	r3, #56	@ 0x38
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3315      	adds	r3, #21
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	334d      	adds	r3, #77	@ 0x4d
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	3310      	adds	r3, #16
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	1d19      	adds	r1, r3, #4
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	799b      	ldrb	r3, [r3, #6]
 8001926:	461a      	mov	r2, r3
 8001928:	f003 ff66 	bl	80057f8 <USB_HC_StartXfer>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fc5b 	bl	800520a <USB_GetMode>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 80fb 	bne.w	8001b52 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fc1e 	bl	80051a2 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80f1 	beq.w	8001b50 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fc15 	bl	80051a2 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001982:	d104      	bne.n	800198e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800198c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fc05 	bl	80051a2 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019a2:	d104      	bne.n	80019ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80019ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fbf5 	bl	80051a2 <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80019c2:	d104      	bne.n	80019ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fbe5 	bl	80051a2 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d103      	bne.n	80019ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fbd7 	bl	80051a2 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019fe:	d120      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d113      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	6938      	ldr	r0, [r7, #16]
 8001a1e:	f003 faca 	bl	8004fb6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a22:	6938      	ldr	r0, [r7, #16]
 8001a24:	f003 faf9 	bl	800501a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7a5b      	ldrb	r3, [r3, #9]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d105      	bne.n	8001a3c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fcea 	bl	8005410 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f006 fcb1 	bl	80083a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fbab 	bl	80051a2 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a56:	d102      	bne.n	8001a5e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f001 fd33 	bl	80034c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fb9d 	bl	80051a2 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d106      	bne.n	8001a80 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f006 fc7a 	bl	800836c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fb8c 	bl	80051a2 <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a94:	d139      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 f926 	bl	8005cec <USB_HC_ReadInterrupt>
 8001aa0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e025      	b.n	8001af4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d018      	beq.n	8001aee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f905 	bl	8001cea <HCD_HC_IN_IRQHandler>
 8001ae0:	e005      	b.n	8001aee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 ff67 	bl	80029bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	795b      	ldrb	r3, [r3, #5]
 8001af8:	461a      	mov	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d3d3      	bcc.n	8001aa8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fb47 	bl	80051a2 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d101      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x1ea>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_HCD_IRQHandler+0x1ec>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d014      	beq.n	8001b52 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0210 	bic.w	r2, r2, #16
 8001b36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f001 fbe4 	bl	8003306 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0210 	orr.w	r2, r2, #16
 8001b4c:	619a      	str	r2, [r3, #24]
 8001b4e:	e000      	b.n	8001b52 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b50:	bf00      	nop
    }
  }
}
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_HCD_Start+0x16>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e013      	b.n	8001b96 <HAL_HCD_Start+0x3e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fcae 	bl	80054de <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 f9a7 	bl	8004eda <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_HCD_Stop+0x16>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e00d      	b.n	8001bd0 <HAL_HCD_Stop+0x32>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 fa01 	bl	8005fc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 fc50 	bl	800548a <USB_ResetPort>
 8001bea:	4603      	mov	r3, r0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	334c      	adds	r3, #76	@ 0x4c
 8001c10:	781b      	ldrb	r3, [r3, #0]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	3338      	adds	r3, #56	@ 0x38
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fc92 	bl	800557e <USB_GetCurrentFrame>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fc6d 	bl	8005550 <USB_GetHostSpeed>
 8001c76:	4603      	mov	r3, r0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	331a      	adds	r3, #26
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	331b      	adds	r3, #27
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3325      	adds	r3, #37	@ 0x25
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3324      	adds	r3, #36	@ 0x24
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fa5d 	bl	80051c8 <USB_ReadChInterrupts>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11a      	bne.n	8001d4e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d24:	461a      	mov	r2, r3
 8001d26:	2304      	movs	r3, #4
 8001d28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	334d      	adds	r3, #77	@ 0x4d
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 ffe1 	bl	8005d0e <USB_HC_Halt>
 8001d4c:	e09e      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fa36 	bl	80051c8 <USB_ReadChInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d66:	d11b      	bne.n	8001da0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d74:	461a      	mov	r2, r3
 8001d76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	334d      	adds	r3, #77	@ 0x4d
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 ffb8 	bl	8005d0e <USB_HC_Halt>
 8001d9e:	e075      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fa0d 	bl	80051c8 <USB_ReadChInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d11a      	bne.n	8001dee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	334d      	adds	r3, #77	@ 0x4d
 8001dda:	2206      	movs	r2, #6
 8001ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 ff91 	bl	8005d0e <USB_HC_Halt>
 8001dec:	e04e      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f9e6 	bl	80051c8 <USB_ReadChInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e06:	d11b      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	334d      	adds	r3, #77	@ 0x4d
 8001e2c:	2209      	movs	r2, #9
 8001e2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 ff68 	bl	8005d0e <USB_HC_Halt>
 8001e3e:	e025      	b.n	8001e8c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f9bd 	bl	80051c8 <USB_ReadChInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	2b80      	cmp	r3, #128	@ 0x80
 8001e56:	d119      	bne.n	8001e8c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e64:	461a      	mov	r2, r3
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	334d      	adds	r3, #77	@ 0x4d
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 ff41 	bl	8005d0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 f997 	bl	80051c8 <USB_ReadChInterrupts>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea4:	d112      	bne.n	8001ecc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 ff2d 	bl	8005d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec6:	6093      	str	r3, [r2, #8]
 8001ec8:	f000 bd75 	b.w	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 f977 	bl	80051c8 <USB_ReadChInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	f040 8128 	bne.w	8002136 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	331b      	adds	r3, #27
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d119      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	331b      	adds	r3, #27
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	0151      	lsls	r1, r2, #5
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	440a      	add	r2, r1
 8001f38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f40:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	799b      	ldrb	r3, [r3, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01b      	beq.n	8001f82 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	3330      	adds	r3, #48	@ 0x30
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	1ac9      	subs	r1, r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4403      	add	r3, r0
 8001f7e:	3338      	adds	r3, #56	@ 0x38
 8001f80:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	334d      	adds	r3, #77	@ 0x4d
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3344      	adds	r3, #68	@ 0x44
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2301      	movs	r3, #1
 8001fba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3326      	adds	r3, #38	@ 0x26
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3326      	adds	r3, #38	@ 0x26
 8001fe2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d110      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fe8c 	bl	8005d0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002002:	461a      	mov	r2, r3
 8002004:	2310      	movs	r3, #16
 8002006:	6093      	str	r3, [r2, #8]
 8002008:	e03d      	b.n	8002086 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3326      	adds	r3, #38	@ 0x26
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d00a      	beq.n	8002036 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3326      	adds	r3, #38	@ 0x26
 8002030:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002032:	2b01      	cmp	r3, #1
 8002034:	d127      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	0151      	lsls	r1, r2, #5
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	440a      	add	r2, r1
 800204c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002050:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002054:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	334c      	adds	r3, #76	@ 0x4c
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	334c      	adds	r3, #76	@ 0x4c
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	4619      	mov	r1, r3
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f006 f99d 	bl	80083c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	799b      	ldrb	r3, [r3, #6]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d13b      	bne.n	8002106 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3338      	adds	r3, #56	@ 0x38
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4403      	add	r3, r0
 80020ae:	3328      	adds	r3, #40	@ 0x28
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	440b      	add	r3, r1
 80020b4:	1e59      	subs	r1, r3, #1
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4403      	add	r3, r0
 80020c4:	3328      	adds	r3, #40	@ 0x28
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8470 	beq.w	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	333c      	adds	r3, #60	@ 0x3c
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2d8      	uxtb	r0, r3
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	333c      	adds	r3, #60	@ 0x3c
 80020fe:	4602      	mov	r2, r0
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	f000 bc58 	b.w	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	333c      	adds	r3, #60	@ 0x3c
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2d8      	uxtb	r0, r3
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	333c      	adds	r3, #60	@ 0x3c
 800212e:	4602      	mov	r2, r0
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	f000 bc40 	b.w	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f003 f842 	bl	80051c8 <USB_ReadChInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b20      	cmp	r3, #32
 800214c:	d131      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800215a:	461a      	mov	r2, r3
 800215c:	2320      	movs	r3, #32
 800215e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	331a      	adds	r3, #26
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	f040 841f 	bne.w	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	331b      	adds	r3, #27
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	334d      	adds	r3, #77	@ 0x4d
 800219c:	2203      	movs	r2, #3
 800219e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 fdb0 	bl	8005d0e <USB_HC_Halt>
 80021ae:	f000 bc02 	b.w	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 f804 	bl	80051c8 <USB_ReadChInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	f040 8305 	bne.w	80027d6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	2302      	movs	r3, #2
 80021dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	334d      	adds	r3, #77	@ 0x4d
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d114      	bne.n	800221e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	334d      	adds	r3, #77	@ 0x4d
 8002204:	2202      	movs	r2, #2
 8002206:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	334c      	adds	r3, #76	@ 0x4c
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e2cc      	b.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	334d      	adds	r3, #77	@ 0x4d
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b06      	cmp	r3, #6
 8002232:	d114      	bne.n	800225e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	334d      	adds	r3, #77	@ 0x4d
 8002244:	2202      	movs	r2, #2
 8002246:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	334c      	adds	r3, #76	@ 0x4c
 8002258:	2205      	movs	r2, #5
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e2ac      	b.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	334d      	adds	r3, #77	@ 0x4d
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b07      	cmp	r3, #7
 8002272:	d00b      	beq.n	800228c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	334d      	adds	r3, #77	@ 0x4d
 8002284:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002286:	2b09      	cmp	r3, #9
 8002288:	f040 80a6 	bne.w	80023d8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	334d      	adds	r3, #77	@ 0x4d
 800229c:	2202      	movs	r2, #2
 800229e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3344      	adds	r3, #68	@ 0x44
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	1c59      	adds	r1, r3, #1
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4403      	add	r3, r0
 80022c0:	3344      	adds	r3, #68	@ 0x44
 80022c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	3344      	adds	r3, #68	@ 0x44
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d943      	bls.n	8002362 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3344      	adds	r3, #68	@ 0x44
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	331a      	adds	r3, #26
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d123      	bne.n	800234c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	331b      	adds	r3, #27
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	331c      	adds	r3, #28
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	0151      	lsls	r1, r2, #5
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	440a      	add	r2, r1
 8002342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	334c      	adds	r3, #76	@ 0x4c
 800235c:	2204      	movs	r2, #4
 800235e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002360:	e229      	b.n	80027b6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	334c      	adds	r3, #76	@ 0x4c
 8002372:	2202      	movs	r2, #2
 8002374:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3326      	adds	r3, #38	@ 0x26
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3326      	adds	r3, #38	@ 0x26
 800239c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800239e:	2b02      	cmp	r3, #2
 80023a0:	f040 8209 	bne.w	80027b6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023d0:	461a      	mov	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023d6:	e1ee      	b.n	80027b6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334d      	adds	r3, #77	@ 0x4d
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	f040 80c8 	bne.w	8002580 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	334d      	adds	r3, #77	@ 0x4d
 8002400:	2202      	movs	r2, #2
 8002402:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	331b      	adds	r3, #27
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	f040 81ce 	bne.w	80027b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3326      	adds	r3, #38	@ 0x26
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d16b      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3348      	adds	r3, #72	@ 0x48
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1c59      	adds	r1, r3, #1
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4403      	add	r3, r0
 8002452:	3348      	adds	r3, #72	@ 0x48
 8002454:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3348      	adds	r3, #72	@ 0x48
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d943      	bls.n	80024f4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3348      	adds	r3, #72	@ 0x48
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	331b      	adds	r3, #27
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3344      	adds	r3, #68	@ 0x44
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d809      	bhi.n	80024be <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	331c      	adds	r3, #28
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	0151      	lsls	r1, r2, #5
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	440a      	add	r2, r1
 80024d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024dc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	334c      	adds	r3, #76	@ 0x4c
 80024ee:	2204      	movs	r2, #4
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e014      	b.n	800251e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334c      	adds	r3, #76	@ 0x4c
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e009      	b.n	800251e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	334c      	adds	r3, #76	@ 0x4c
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3326      	adds	r3, #38	@ 0x26
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00b      	beq.n	800254c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3326      	adds	r3, #38	@ 0x26
 8002544:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002546:	2b02      	cmp	r3, #2
 8002548:	f040 8136 	bne.w	80027b8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002562:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800256a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e11b      	b.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	334d      	adds	r3, #77	@ 0x4d
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b03      	cmp	r3, #3
 8002594:	f040 8081 	bne.w	800269a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334d      	adds	r3, #77	@ 0x4d
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	331b      	adds	r3, #27
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	f040 80fa 	bne.w	80027b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	334c      	adds	r3, #76	@ 0x4c
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	0151      	lsls	r1, r2, #5
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	440a      	add	r2, r1
 80025ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	0151      	lsls	r1, r2, #5
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	440a      	add	r2, r1
 800260e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002616:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	0151      	lsls	r1, r2, #5
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	440a      	add	r2, r1
 800262e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002632:	f023 0320 	bic.w	r3, r3, #32
 8002636:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3326      	adds	r3, #38	@ 0x26
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3326      	adds	r3, #38	@ 0x26
 800265e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002660:	2b02      	cmp	r3, #2
 8002662:	f040 80a9 	bne.w	80027b8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800267c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002684:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e08e      	b.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	334d      	adds	r3, #77	@ 0x4d
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d143      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334d      	adds	r3, #77	@ 0x4d
 80026c0:	2202      	movs	r2, #2
 80026c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	334c      	adds	r3, #76	@ 0x4c
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3326      	adds	r3, #38	@ 0x26
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3326      	adds	r3, #38	@ 0x26
 80026fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002700:	2b02      	cmp	r3, #2
 8002702:	d159      	bne.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800271a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002722:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e03f      	b.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	334d      	adds	r3, #77	@ 0x4d
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b08      	cmp	r3, #8
 800274c:	d126      	bne.n	800279c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	334d      	adds	r3, #77	@ 0x4d
 800275e:	2202      	movs	r2, #2
 8002760:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3344      	adds	r3, #68	@ 0x44
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1c59      	adds	r1, r3, #1
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4403      	add	r3, r0
 8002782:	3344      	adds	r3, #68	@ 0x44
 8002784:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	334c      	adds	r3, #76	@ 0x4c
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e00d      	b.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	334d      	adds	r3, #77	@ 0x4d
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f000 8100 	beq.w	80029b4 <HCD_HC_IN_IRQHandler+0xcca>
 80027b4:	e000      	b.n	80027b8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334c      	adds	r3, #76	@ 0x4c
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f005 fdf6 	bl	80083c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027d4:	e0ef      	b.n	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fcf2 	bl	80051c8 <USB_ReadChInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ea:	2b40      	cmp	r3, #64	@ 0x40
 80027ec:	d12f      	bne.n	800284e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fa:	461a      	mov	r2, r3
 80027fc:	2340      	movs	r3, #64	@ 0x40
 80027fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334d      	adds	r3, #77	@ 0x4d
 8002810:	2205      	movs	r2, #5
 8002812:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	331a      	adds	r3, #26
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3344      	adds	r3, #68	@ 0x44
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fa61 	bl	8005d0e <USB_HC_Halt>
 800284c:	e0b3      	b.n	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fcb6 	bl	80051c8 <USB_ReadChInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b10      	cmp	r3, #16
 8002864:	f040 80a7 	bne.w	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	3326      	adds	r3, #38	@ 0x26
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d11b      	bne.n	80028b6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3344      	adds	r3, #68	@ 0x44
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	334d      	adds	r3, #77	@ 0x4d
 80028a2:	2204      	movs	r2, #4
 80028a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fa2d 	bl	8005d0e <USB_HC_Halt>
 80028b4:	e03f      	b.n	8002936 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3326      	adds	r3, #38	@ 0x26
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3326      	adds	r3, #38	@ 0x26
 80028dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d129      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3344      	adds	r3, #68	@ 0x44
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	799b      	ldrb	r3, [r3, #6]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HCD_HC_IN_IRQHandler+0xc2a>
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	331b      	adds	r3, #27
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d110      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2204      	movs	r2, #4
 8002926:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f003 f9ec 	bl	8005d0e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	331b      	adds	r3, #27
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d129      	bne.n	80029a0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	331b      	adds	r3, #27
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	0151      	lsls	r1, r2, #5
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	440a      	add	r2, r1
 8002976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800297a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	0151      	lsls	r1, r2, #5
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	440a      	add	r2, r1
 8002996:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2310      	movs	r3, #16
 80029b0:	6093      	str	r3, [r2, #8]
 80029b2:	e000      	b.n	80029b6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029b4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 fbf4 	bl	80051c8 <USB_ReadChInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d11b      	bne.n	8002a22 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	2304      	movs	r3, #4
 80029fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	334d      	adds	r3, #77	@ 0x4d
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 f978 	bl	8005d0e <USB_HC_Halt>
 8002a1e:	f000 bc6f 	b.w	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fbcc 	bl	80051c8 <USB_ReadChInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	f040 8082 	bne.w	8002b40 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3319      	adds	r3, #25
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d124      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3319      	adds	r3, #25
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	334c      	adds	r3, #76	@ 0x4c
 8002a88:	2202      	movs	r2, #2
 8002a8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	334d      	adds	r3, #77	@ 0x4d
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 f930 	bl	8005d0e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	331a      	adds	r3, #26
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 841d 	bne.w	8003300 <HCD_HC_OUT_IRQHandler+0x944>
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f040 8411 	bne.w	8003300 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3326      	adds	r3, #38	@ 0x26
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d009      	beq.n	8002b08 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	331b      	adds	r3, #27
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	334d      	adds	r3, #77	@ 0x4d
 8002b18:	2203      	movs	r2, #3
 8002b1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 f8f2 	bl	8005d0e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3344      	adds	r3, #68	@ 0x44
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e3df      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 fb3d 	bl	80051c8 <USB_ReadChInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b58:	d111      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 f8c9 	bl	8005d0e <USB_HC_Halt>
 8002b7c:	e3c0      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fb1e 	bl	80051c8 <USB_ReadChInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d168      	bne.n	8002c68 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3344      	adds	r3, #68	@ 0x44
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fb08 	bl	80051c8 <USB_ReadChInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbe:	2b40      	cmp	r3, #64	@ 0x40
 8002bc0:	d112      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3319      	adds	r3, #25
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	2340      	movs	r3, #64	@ 0x40
 8002be6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	331b      	adds	r3, #27
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	331b      	adds	r3, #27
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	0151      	lsls	r1, r2, #5
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	440a      	add	r2, r1
 8002c28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c30:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2301      	movs	r3, #1
 8002c42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	334d      	adds	r3, #77	@ 0x4d
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 f854 	bl	8005d0e <USB_HC_Halt>
 8002c66:	e34b      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 faa9 	bl	80051c8 <USB_ReadChInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7c:	2b40      	cmp	r3, #64	@ 0x40
 8002c7e:	d139      	bne.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	334d      	adds	r3, #77	@ 0x4d
 8002c90:	2205      	movs	r2, #5
 8002c92:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	331a      	adds	r3, #26
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3319      	adds	r3, #25
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3344      	adds	r3, #68	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 f817 	bl	8005d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	2340      	movs	r3, #64	@ 0x40
 8002cf0:	6093      	str	r3, [r2, #8]
 8002cf2:	e305      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fa63 	bl	80051c8 <USB_ReadChInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d11a      	bne.n	8002d42 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	334d      	adds	r3, #77	@ 0x4d
 8002d2e:	2206      	movs	r2, #6
 8002d30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 ffe7 	bl	8005d0e <USB_HC_Halt>
 8002d40:	e2de      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fa3c 	bl	80051c8 <USB_ReadChInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d144      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3344      	adds	r3, #68	@ 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	334d      	adds	r3, #77	@ 0x4d
 8002d7e:	2204      	movs	r2, #4
 8002d80:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3319      	adds	r3, #25
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d114      	bne.n	8002dc2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3318      	adds	r3, #24
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3319      	adds	r3, #25
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 ff9f 	bl	8005d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2310      	movs	r3, #16
 8002de0:	6093      	str	r3, [r2, #8]
 8002de2:	e28d      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 f9eb 	bl	80051c8 <USB_ReadChInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df8:	2b80      	cmp	r3, #128	@ 0x80
 8002dfa:	d169      	bne.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	799b      	ldrb	r3, [r3, #6]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d111      	bne.n	8002e28 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334d      	adds	r3, #77	@ 0x4d
 8002e14:	2207      	movs	r2, #7
 8002e16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 ff74 	bl	8005d0e <USB_HC_Halt>
 8002e26:	e049      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3344      	adds	r3, #68	@ 0x44
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4403      	add	r3, r0
 8002e48:	3344      	adds	r3, #68	@ 0x44
 8002e4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3344      	adds	r3, #68	@ 0x44
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d922      	bls.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3344      	adds	r3, #68	@ 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	334c      	adds	r3, #76	@ 0x4c
 8002e86:	2204      	movs	r2, #4
 8002e88:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	334c      	adds	r3, #76	@ 0x4c
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f005 fa8d 	bl	80083c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ea6:	e009      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334c      	adds	r3, #76	@ 0x4c
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2380      	movs	r3, #128	@ 0x80
 8002ecc:	6093      	str	r3, [r2, #8]
 8002ece:	e217      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 f975 	bl	80051c8 <USB_ReadChInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee8:	d11b      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	334d      	adds	r3, #77	@ 0x4d
 8002efa:	2209      	movs	r2, #9
 8002efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 ff01 	bl	8005d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f1e:	6093      	str	r3, [r2, #8]
 8002f20:	e1ee      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 f94c 	bl	80051c8 <USB_ReadChInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	f040 81df 	bne.w	80032fa <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	334d      	adds	r3, #77	@ 0x4d
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 8093 	bne.w	800308c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334d      	adds	r3, #77	@ 0x4d
 8002f76:	2202      	movs	r2, #2
 8002f78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	334c      	adds	r3, #76	@ 0x4c
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3326      	adds	r3, #38	@ 0x26
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00b      	beq.n	8002fbc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3326      	adds	r3, #38	@ 0x26
 8002fb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	f040 8190 	bne.w	80032dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	799b      	ldrb	r3, [r3, #6]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d115      	bne.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	333d      	adds	r3, #61	@ 0x3d
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2d8      	uxtb	r0, r3
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	333d      	adds	r3, #61	@ 0x3d
 8002fec:	4602      	mov	r2, r0
 8002fee:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	799b      	ldrb	r3, [r3, #6]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 8171 	bne.w	80032dc <HCD_HC_OUT_IRQHandler+0x920>
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3334      	adds	r3, #52	@ 0x34
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8165 	beq.w	80032dc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3334      	adds	r3, #52	@ 0x34
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4403      	add	r3, r0
 8003032:	3328      	adds	r3, #40	@ 0x28
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	440b      	add	r3, r1
 8003038:	1e59      	subs	r1, r3, #1
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4403      	add	r3, r0
 8003048:	3328      	adds	r3, #40	@ 0x28
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003050:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 813f 	beq.w	80032dc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	333d      	adds	r3, #61	@ 0x3d
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	f083 0301 	eor.w	r3, r3, #1
 8003076:	b2d8      	uxtb	r0, r3
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	333d      	adds	r3, #61	@ 0x3d
 8003086:	4602      	mov	r2, r0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e127      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	334d      	adds	r3, #77	@ 0x4d
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d120      	bne.n	80030e4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	334d      	adds	r3, #77	@ 0x4d
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	331b      	adds	r3, #27
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f040 8107 	bne.w	80032dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	334c      	adds	r3, #76	@ 0x4c
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e0fb      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	334d      	adds	r3, #77	@ 0x4d
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d13a      	bne.n	8003170 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	@ 0x4d
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334c      	adds	r3, #76	@ 0x4c
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	331b      	adds	r3, #27
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 80d1 	bne.w	80032dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	331b      	adds	r3, #27
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	0151      	lsls	r1, r2, #5
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	440a      	add	r2, r1
 8003164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316c:	6053      	str	r3, [r2, #4]
 800316e:	e0b5      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334d      	adds	r3, #77	@ 0x4d
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d114      	bne.n	80031b0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334d      	adds	r3, #77	@ 0x4d
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	334c      	adds	r3, #76	@ 0x4c
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e095      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334d      	adds	r3, #77	@ 0x4d
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d114      	bne.n	80031f0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	334d      	adds	r3, #77	@ 0x4d
 80031d6:	2202      	movs	r2, #2
 80031d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	334c      	adds	r3, #76	@ 0x4c
 80031ea:	2205      	movs	r2, #5
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e075      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	334d      	adds	r3, #77	@ 0x4d
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b07      	cmp	r3, #7
 8003204:	d00a      	beq.n	800321c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	334d      	adds	r3, #77	@ 0x4d
 8003216:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003218:	2b09      	cmp	r3, #9
 800321a:	d170      	bne.n	80032fe <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	334d      	adds	r3, #77	@ 0x4d
 800322c:	2202      	movs	r2, #2
 800322e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3344      	adds	r3, #68	@ 0x44
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	1c59      	adds	r1, r3, #1
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4403      	add	r3, r0
 8003250:	3344      	adds	r3, #68	@ 0x44
 8003252:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3344      	adds	r3, #68	@ 0x44
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d914      	bls.n	8003294 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3344      	adds	r3, #68	@ 0x44
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334c      	adds	r3, #76	@ 0x4c
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003292:	e022      	b.n	80032da <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334c      	adds	r3, #76	@ 0x4c
 80032a4:	2202      	movs	r2, #2
 80032a6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d4:	461a      	mov	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	334c      	adds	r3, #76	@ 0x4c
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f005 f864 	bl	80083c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032f8:	e002      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80032fe:	bf00      	nop
  }
}
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	@ 0x28
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	0c5b      	lsrs	r3, r3, #17
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d004      	beq.n	800334c <HCD_RXQLVL_IRQHandler+0x46>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b05      	cmp	r3, #5
 8003346:	f000 80b6 	beq.w	80034b6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800334a:	e0b7      	b.n	80034bc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80b3 	beq.w	80034ba <HCD_RXQLVL_IRQHandler+0x1b4>
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	332c      	adds	r3, #44	@ 0x2c
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a7 	beq.w	80034ba <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3338      	adds	r3, #56	@ 0x38
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	18d1      	adds	r1, r2, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4403      	add	r3, r0
 8003390:	3334      	adds	r3, #52	@ 0x34
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4299      	cmp	r1, r3
 8003396:	f200 8083 	bhi.w	80034a0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	332c      	adds	r3, #44	@ 0x2c
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	b292      	uxth	r2, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f001 fe9c 	bl	80050f2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	332c      	adds	r3, #44	@ 0x2c
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	18d1      	adds	r1, r2, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4403      	add	r3, r0
 80033de:	332c      	adds	r3, #44	@ 0x2c
 80033e0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3338      	adds	r3, #56	@ 0x38
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	18d1      	adds	r1, r2, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	3338      	adds	r3, #56	@ 0x38
 8003408:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	0cdb      	lsrs	r3, r3, #19
 800341a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3328      	adds	r3, #40	@ 0x28
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4293      	cmp	r3, r2
 8003438:	d13f      	bne.n	80034ba <HCD_RXQLVL_IRQHandler+0x1b4>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03c      	beq.n	80034ba <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003456:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800345e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	333c      	adds	r3, #60	@ 0x3c
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f083 0301 	eor.w	r3, r3, #1
 8003488:	b2d8      	uxtb	r0, r3
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	333c      	adds	r3, #60	@ 0x3c
 800349a:	4602      	mov	r2, r0
 800349c:	701a      	strb	r2, [r3, #0]
      break;
 800349e:	e00c      	b.n	80034ba <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334c      	adds	r3, #76	@ 0x4c
 80034b0:	2204      	movs	r2, #4
 80034b2:	701a      	strb	r2, [r3, #0]
      break;
 80034b4:	e001      	b.n	80034ba <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034b6:	bf00      	nop
 80034b8:	e000      	b.n	80034bc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034ba:	bf00      	nop
  }
}
 80034bc:	bf00      	nop
 80034be:	3728      	adds	r7, #40	@ 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80034f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d10b      	bne.n	8003514 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f004 ff3e 	bl	8008388 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b08      	cmp	r3, #8
 800351c:	d132      	bne.n	8003584 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f043 0308 	orr.w	r3, r3, #8
 8003524:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d126      	bne.n	800357e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7a5b      	ldrb	r3, [r3, #9]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d113      	bne.n	8003560 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800353e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003542:	d106      	bne.n	8003552 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2102      	movs	r1, #2
 800354a:	4618      	mov	r0, r3
 800354c:	f001 ff60 	bl	8005410 <USB_InitFSLSPClkSel>
 8003550:	e011      	b.n	8003576 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	4618      	mov	r0, r3
 800355a:	f001 ff59 	bl	8005410 <USB_InitFSLSPClkSel>
 800355e:	e00a      	b.n	8003576 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	79db      	ldrb	r3, [r3, #7]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800356e:	461a      	mov	r2, r3
 8003570:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003574:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f004 ff30 	bl	80083dc <HAL_HCD_PortEnabled_Callback>
 800357c:	e002      	b.n	8003584 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f004 ff3a 	bl	80083f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b20      	cmp	r3, #32
 800358c:	d103      	bne.n	8003596 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f043 0320 	orr.w	r3, r3, #32
 8003594:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800359c:	461a      	mov	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6013      	str	r3, [r2, #0]
}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e12b      	b.n	8003816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd f9b6 	bl	8000944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800360e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003610:	f001 fa20 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8003614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a81      	ldr	r2, [pc, #516]	@ (8003820 <HAL_I2C_Init+0x274>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d807      	bhi.n	8003630 <HAL_I2C_Init+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a80      	ldr	r2, [pc, #512]	@ (8003824 <HAL_I2C_Init+0x278>)
 8003624:	4293      	cmp	r3, r2
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e006      	b.n	800363e <HAL_I2C_Init+0x92>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a7d      	ldr	r2, [pc, #500]	@ (8003828 <HAL_I2C_Init+0x27c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0e7      	b.n	8003816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a78      	ldr	r2, [pc, #480]	@ (800382c <HAL_I2C_Init+0x280>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	0c9b      	lsrs	r3, r3, #18
 8003650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a6a      	ldr	r2, [pc, #424]	@ (8003820 <HAL_I2C_Init+0x274>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d802      	bhi.n	8003680 <HAL_I2C_Init+0xd4>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3301      	adds	r3, #1
 800367e:	e009      	b.n	8003694 <HAL_I2C_Init+0xe8>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	4a69      	ldr	r2, [pc, #420]	@ (8003830 <HAL_I2C_Init+0x284>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	3301      	adds	r3, #1
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	495c      	ldr	r1, [pc, #368]	@ (8003820 <HAL_I2C_Init+0x274>)
 80036b0:	428b      	cmp	r3, r1
 80036b2:	d819      	bhi.n	80036e8 <HAL_I2C_Init+0x13c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e59      	subs	r1, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036c8:	400b      	ands	r3, r1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_I2C_Init+0x138>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1e59      	subs	r1, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e2:	e051      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 80036e4:	2304      	movs	r3, #4
 80036e6:	e04f      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d111      	bne.n	8003714 <HAL_I2C_Init+0x168>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e012      	b.n	800373a <HAL_I2C_Init+0x18e>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	0099      	lsls	r1, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	fbb0 f3f3 	udiv	r3, r0, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Init+0x196>
 800373e:	2301      	movs	r3, #1
 8003740:	e022      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10e      	bne.n	8003768 <HAL_I2C_Init+0x1bc>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1e58      	subs	r0, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	440b      	add	r3, r1
 8003758:	fbb0 f3f3 	udiv	r3, r0, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003766:	e00f      	b.n	8003788 <HAL_I2C_Init+0x1dc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	0099      	lsls	r1, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	fbb0 f3f3 	udiv	r3, r0, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003784:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	6809      	ldr	r1, [r1, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6911      	ldr	r1, [r2, #16]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	000186a0 	.word	0x000186a0
 8003824:	001e847f 	.word	0x001e847f
 8003828:	003d08ff 	.word	0x003d08ff
 800382c:	431bde83 	.word	0x431bde83
 8003830:	10624dd3 	.word	0x10624dd3

08003834 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e128      	b.n	8003a98 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a90      	ldr	r2, [pc, #576]	@ (8003aa0 <HAL_I2S_Init+0x26c>)
 800385e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fd f8b7 	bl	80009d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800387c:	f023 030f 	bic.w	r3, r3, #15
 8003880:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2202      	movs	r2, #2
 8003888:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d060      	beq.n	8003954 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800389a:	2310      	movs	r3, #16
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e001      	b.n	80038a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038a0:	2320      	movs	r3, #32
 80038a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d802      	bhi.n	80038b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038b2:	2001      	movs	r0, #1
 80038b4:	f001 f9c4 	bl	8004c40 <HAL_RCCEx_GetPeriphCLKFreq>
 80038b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c2:	d125      	bne.n	8003910 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	3305      	adds	r3, #5
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	e01f      	b.n	800392e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	3305      	adds	r3, #5
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e00e      	b.n	800392e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fbb2 f2f3 	udiv	r2, r2, r3
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	3305      	adds	r3, #5
 800392c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4a5c      	ldr	r2, [pc, #368]	@ (8003aa4 <HAL_I2S_Init+0x270>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e003      	b.n	800395c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003954:	2302      	movs	r3, #2
 8003956:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d902      	bls.n	8003968 <HAL_I2S_Init+0x134>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2bff      	cmp	r3, #255	@ 0xff
 8003966:	d907      	bls.n	8003978 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	f043 0210 	orr.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e08f      	b.n	8003a98 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	ea42 0103 	orr.w	r1, r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	430a      	orrs	r2, r1
 800398a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003996:	f023 030f 	bic.w	r3, r3, #15
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6851      	ldr	r1, [r2, #4]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6892      	ldr	r2, [r2, #8]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68d2      	ldr	r2, [r2, #12]
 80039a8:	4311      	orrs	r1, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6992      	ldr	r2, [r2, #24]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d161      	bne.n	8003a88 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <HAL_I2S_Init+0x274>)
 80039c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a37      	ldr	r2, [pc, #220]	@ (8003aac <HAL_I2S_Init+0x278>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_I2S_Init+0x1a4>
 80039d4:	4b36      	ldr	r3, [pc, #216]	@ (8003ab0 <HAL_I2S_Init+0x27c>)
 80039d6:	e001      	b.n	80039dc <HAL_I2S_Init+0x1a8>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	4932      	ldr	r1, [pc, #200]	@ (8003aac <HAL_I2S_Init+0x278>)
 80039e4:	428a      	cmp	r2, r1
 80039e6:	d101      	bne.n	80039ec <HAL_I2S_Init+0x1b8>
 80039e8:	4a31      	ldr	r2, [pc, #196]	@ (8003ab0 <HAL_I2S_Init+0x27c>)
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x1bc>
 80039ec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80039f0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039f4:	f023 030f 	bic.w	r3, r3, #15
 80039f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2b      	ldr	r2, [pc, #172]	@ (8003aac <HAL_I2S_Init+0x278>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_I2S_Init+0x1d4>
 8003a04:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab0 <HAL_I2S_Init+0x27c>)
 8003a06:	e001      	b.n	8003a0c <HAL_I2S_Init+0x1d8>
 8003a08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a25      	ldr	r2, [pc, #148]	@ (8003aac <HAL_I2S_Init+0x278>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_I2S_Init+0x1ea>
 8003a1a:	4b25      	ldr	r3, [pc, #148]	@ (8003ab0 <HAL_I2S_Init+0x27c>)
 8003a1c:	e001      	b.n	8003a22 <HAL_I2S_Init+0x1ee>
 8003a1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a2e:	d003      	beq.n	8003a38 <HAL_I2S_Init+0x204>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d103      	bne.n	8003a40 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e001      	b.n	8003a44 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a70:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <HAL_I2S_Init+0x278>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2S_Init+0x24c>
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <HAL_I2S_Init+0x27c>)
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x250>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a84:	897a      	ldrh	r2, [r7, #10]
 8003a86:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	08003bab 	.word	0x08003bab
 8003aa4:	cccccccd 	.word	0xcccccccd
 8003aa8:	08003cc1 	.word	0x08003cc1
 8003aac:	40003800 	.word	0x40003800
 8003ab0:	40003400 	.word	0x40003400

08003ab4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10e      	bne.n	8003b44 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ffb8 	bl	8003ab4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	1c9a      	adds	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10e      	bne.n	8003ba2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff93 	bl	8003ac8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d13a      	bne.n	8003c3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d109      	bne.n	8003be4 <I2S_IRQHandler+0x3a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b40      	cmp	r3, #64	@ 0x40
 8003bdc:	d102      	bne.n	8003be4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffb4 	bl	8003b4c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bea:	2b40      	cmp	r3, #64	@ 0x40
 8003bec:	d126      	bne.n	8003c3c <I2S_IRQHandler+0x92>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d11f      	bne.n	8003c3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f043 0202 	orr.w	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ff50 	bl	8003adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d136      	bne.n	8003cb6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d109      	bne.n	8003c66 <I2S_IRQHandler+0xbc>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5c:	2b80      	cmp	r3, #128	@ 0x80
 8003c5e:	d102      	bne.n	8003c66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff45 	bl	8003af0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d122      	bne.n	8003cb6 <I2S_IRQHandler+0x10c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d11b      	bne.n	8003cb6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca8:	f043 0204 	orr.w	r2, r3, #4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff13 	bl	8003adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a92      	ldr	r2, [pc, #584]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cda:	4b92      	ldr	r3, [pc, #584]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cdc:	e001      	b.n	8003ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a8b      	ldr	r2, [pc, #556]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cfa:	e001      	b.n	8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003cfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0c:	d004      	beq.n	8003d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 8099 	bne.w	8003e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d107      	bne.n	8003d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f925 	bl	8003f7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f9c8 	bl	80040dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d13a      	bne.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d035      	beq.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6e      	ldr	r2, [pc, #440]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d6a:	4b6e      	ldr	r3, [pc, #440]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d6c:	e001      	b.n	8003d72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4969      	ldr	r1, [pc, #420]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7a:	428b      	cmp	r3, r1
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d7e:	4b69      	ldr	r3, [pc, #420]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d80:	e001      	b.n	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f043 0202 	orr.w	r2, r3, #2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fe88 	bl	8003adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	f040 80c3 	bne.w	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80bd 	beq.w	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003df2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a49      	ldr	r2, [pc, #292]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003dfe:	4b49      	ldr	r3, [pc, #292]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e00:	e001      	b.n	8003e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4944      	ldr	r1, [pc, #272]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0e:	428b      	cmp	r3, r1
 8003e10:	d101      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e12:	4b44      	ldr	r3, [pc, #272]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e14:	e001      	b.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e1e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f043 0204 	orr.w	r2, r3, #4
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fe4a 	bl	8003adc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e48:	e089      	b.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d107      	bne.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8be 	bl	8003fe0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f8fd 	bl	8004078 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e84:	2b40      	cmp	r3, #64	@ 0x40
 8003e86:	d12f      	bne.n	8003ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02a      	beq.n	8003ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ea0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003eac:	4b1d      	ldr	r3, [pc, #116]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eae:	e001      	b.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003eb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4919      	ldr	r1, [pc, #100]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ec0:	4b18      	ldr	r3, [pc, #96]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec2:	e001      	b.n	8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ec4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ecc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fdfa 	bl	8003adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d136      	bne.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d031      	beq.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a07      	ldr	r2, [pc, #28]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f06:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f08:	e001      	b.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4902      	ldr	r1, [pc, #8]	@ (8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f16:	428b      	cmp	r3, r1
 8003f18:	d106      	bne.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f1a:	4b02      	ldr	r3, [pc, #8]	@ (8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1c:	e006      	b.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f1e:	bf00      	nop
 8003f20:	40003800 	.word	0x40003800
 8003f24:	40003400 	.word	0x40003400
 8003f28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f30:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fdc0 	bl	8003adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f5c:	e000      	b.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f5e:	bf00      	nop
}
 8003f60:	bf00      	nop
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	1c99      	adds	r1, r3, #2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f8e:	881a      	ldrh	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d113      	bne.n	8003fd6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d106      	bne.n	8003fd6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffc9 	bl	8003f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	1c99      	adds	r1, r3, #2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003ff2:	8819      	ldrh	r1, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8004070 <I2SEx_TxISR_I2SExt+0x90>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <I2SEx_TxISR_I2SExt+0x22>
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <I2SEx_TxISR_I2SExt+0x94>)
 8004000:	e001      	b.n	8004006 <I2SEx_TxISR_I2SExt+0x26>
 8004002:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004006:	460a      	mov	r2, r1
 8004008:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <I2SEx_TxISR_I2SExt+0x90>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d101      	bne.n	8004030 <I2SEx_TxISR_I2SExt+0x50>
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <I2SEx_TxISR_I2SExt+0x94>)
 800402e:	e001      	b.n	8004034 <I2SEx_TxISR_I2SExt+0x54>
 8004030:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	490d      	ldr	r1, [pc, #52]	@ (8004070 <I2SEx_TxISR_I2SExt+0x90>)
 800403c:	428b      	cmp	r3, r1
 800403e:	d101      	bne.n	8004044 <I2SEx_TxISR_I2SExt+0x64>
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <I2SEx_TxISR_I2SExt+0x94>)
 8004042:	e001      	b.n	8004048 <I2SEx_TxISR_I2SExt+0x68>
 8004044:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004048:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800404c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff81 	bl	8003f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40003800 	.word	0x40003800
 8004074:	40003400 	.word	0x40003400

08004078 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68d8      	ldr	r0, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408a:	1c99      	adds	r1, r3, #2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004090:	b282      	uxth	r2, r0
 8004092:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d113      	bne.n	80040d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ff4a 	bl	8003f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a20      	ldr	r2, [pc, #128]	@ (800416c <I2SEx_RxISR_I2SExt+0x90>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <I2SEx_RxISR_I2SExt+0x16>
 80040ee:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <I2SEx_RxISR_I2SExt+0x94>)
 80040f0:	e001      	b.n	80040f6 <I2SEx_RxISR_I2SExt+0x1a>
 80040f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f6:	68d8      	ldr	r0, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	1c99      	adds	r1, r3, #2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004102:	b282      	uxth	r2, r0
 8004104:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d121      	bne.n	8004162 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a12      	ldr	r2, [pc, #72]	@ (800416c <I2SEx_RxISR_I2SExt+0x90>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <I2SEx_RxISR_I2SExt+0x50>
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <I2SEx_RxISR_I2SExt+0x94>)
 800412a:	e001      	b.n	8004130 <I2SEx_RxISR_I2SExt+0x54>
 800412c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	490d      	ldr	r1, [pc, #52]	@ (800416c <I2SEx_RxISR_I2SExt+0x90>)
 8004138:	428b      	cmp	r3, r1
 800413a:	d101      	bne.n	8004140 <I2SEx_RxISR_I2SExt+0x64>
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <I2SEx_RxISR_I2SExt+0x94>)
 800413e:	e001      	b.n	8004144 <I2SEx_RxISR_I2SExt+0x68>
 8004140:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004144:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004148:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d106      	bne.n	8004162 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ff03 	bl	8003f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40003800 	.word	0x40003800
 8004170:	40003400 	.word	0x40003400

08004174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e267      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d075      	beq.n	800427e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004192:	4b88      	ldr	r3, [pc, #544]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b85      	ldr	r3, [pc, #532]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b82      	ldr	r3, [pc, #520]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b7e      	ldr	r3, [pc, #504]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x108>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e242      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x74>
 80041da:	4b76      	ldr	r3, [pc, #472]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x98>
 80041f2:	4b70      	ldr	r3, [pc, #448]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6f      	ldr	r2, [pc, #444]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b6d      	ldr	r3, [pc, #436]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6c      	ldr	r2, [pc, #432]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 800420c:	4b69      	ldr	r3, [pc, #420]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a68      	ldr	r2, [pc, #416]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b66      	ldr	r3, [pc, #408]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a65      	ldr	r2, [pc, #404]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fc fdac 	bl	8000d88 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fc fda8 	bl	8000d88 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e207      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b5b      	ldr	r3, [pc, #364]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xc0>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fc fd98 	bl	8000d88 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7fc fd94 	bl	8000d88 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	@ 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1f3      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0xe8>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d063      	beq.n	8004352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800428a:	4b4a      	ldr	r3, [pc, #296]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b47      	ldr	r3, [pc, #284]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d11c      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b44      	ldr	r3, [pc, #272]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	4b41      	ldr	r3, [pc, #260]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e1c7      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4937      	ldr	r1, [pc, #220]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	e03a      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e4:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <HAL_RCC_OscConfig+0x244>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fc fd4d 	bl	8000d88 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fc fd49 	bl	8000d88 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1a8      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	4b2b      	ldr	r3, [pc, #172]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b28      	ldr	r3, [pc, #160]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4925      	ldr	r1, [pc, #148]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
 8004324:	e015      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCC_OscConfig+0x244>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fc fd2c 	bl	8000d88 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004334:	f7fc fd28 	bl	8000d88 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e187      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004346:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d036      	beq.n	80043cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004366:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <HAL_RCC_OscConfig+0x248>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fc fd0c 	bl	8000d88 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004374:	f7fc fd08 	bl	8000d88 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e167      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x200>
 8004392:	e01b      	b.n	80043cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004394:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_OscConfig+0x248>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7fc fcf5 	bl	8000d88 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	e00e      	b.n	80043c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fc fcf1 	bl	8000d88 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d907      	bls.n	80043c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e150      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	42470000 	.word	0x42470000
 80043bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b88      	ldr	r3, [pc, #544]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ea      	bne.n	80043a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8097 	beq.w	8004508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4b81      	ldr	r3, [pc, #516]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	4b7d      	ldr	r3, [pc, #500]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	4a7c      	ldr	r2, [pc, #496]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043fa:	4b7a      	ldr	r3, [pc, #488]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b77      	ldr	r3, [pc, #476]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004416:	4b74      	ldr	r3, [pc, #464]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a73      	ldr	r2, [pc, #460]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fc fcb1 	bl	8000d88 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fc fcad 	bl	8000d88 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e10c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b6a      	ldr	r3, [pc, #424]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x2ea>
 8004450:	4b64      	ldr	r3, [pc, #400]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	4a63      	ldr	r2, [pc, #396]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	@ 0x70
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x30c>
 8004466:	4b5f      	ldr	r3, [pc, #380]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	4a5e      	ldr	r2, [pc, #376]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	@ 0x70
 8004472:	4b5c      	ldr	r3, [pc, #368]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	4a5b      	ldr	r2, [pc, #364]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	@ 0x70
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 8004480:	4b58      	ldr	r3, [pc, #352]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a57      	ldr	r2, [pc, #348]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
 800448c:	4b55      	ldr	r3, [pc, #340]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004490:	4a54      	ldr	r2, [pc, #336]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004492:	f023 0304 	bic.w	r3, r3, #4
 8004496:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d015      	beq.n	80044cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fc fc72 	bl	8000d88 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fc fc6e 	bl	8000d88 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0cb      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ee      	beq.n	80044a8 <HAL_RCC_OscConfig+0x334>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044cc:	f7fc fc5c 	bl	8000d88 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fc fc58 	bl	8000d88 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0b5      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	4b3e      	ldr	r3, [pc, #248]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ee      	bne.n	80044d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	4a38      	ldr	r2, [pc, #224]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004506:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80a1 	beq.w	8004654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004512:	4b34      	ldr	r3, [pc, #208]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b08      	cmp	r3, #8
 800451c:	d05c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d141      	bne.n	80045aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <HAL_RCC_OscConfig+0x478>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fc fc2c 	bl	8000d88 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fc fc28 	bl	8000d88 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e087      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b27      	ldr	r3, [pc, #156]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	491b      	ldr	r1, [pc, #108]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <HAL_RCC_OscConfig+0x478>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fc fc01 	bl	8000d88 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fc fbfd 	bl	8000d88 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e05c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x416>
 80045a8:	e054      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <HAL_RCC_OscConfig+0x478>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fc fbea 	bl	8000d88 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fc fbe6 	bl	8000d88 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e045      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x444>
 80045d6:	e03d      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e038      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <HAL_RCC_OscConfig+0x4ec>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d028      	beq.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d121      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d11a      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800

08004664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0cc      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004678:	4b68      	ldr	r3, [pc, #416]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d90c      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b65      	ldr	r3, [pc, #404]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b63      	ldr	r3, [pc, #396]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0b8      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b8:	4b59      	ldr	r3, [pc, #356]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a58      	ldr	r2, [pc, #352]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046d0:	4b53      	ldr	r3, [pc, #332]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a52      	ldr	r2, [pc, #328]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046dc:	4b50      	ldr	r3, [pc, #320]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	494d      	ldr	r1, [pc, #308]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d044      	beq.n	8004784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b47      	ldr	r3, [pc, #284]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d119      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e07f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d003      	beq.n	8004722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	2b03      	cmp	r3, #3
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004722:	4b3f      	ldr	r3, [pc, #252]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004732:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e067      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004742:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0203 	bic.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4934      	ldr	r1, [pc, #208]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004754:	f7fc fb18 	bl	8000d88 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	e00a      	b.n	8004772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fc fb14 	bl	8000d88 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e04f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	4b2b      	ldr	r3, [pc, #172]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 020c 	and.w	r2, r3, #12
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	429a      	cmp	r2, r3
 8004782:	d1eb      	bne.n	800475c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	4b25      	ldr	r3, [pc, #148]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d20c      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b22      	ldr	r3, [pc, #136]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e032      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b19      	ldr	r3, [pc, #100]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4916      	ldr	r1, [pc, #88]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d6:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	490e      	ldr	r1, [pc, #56]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ea:	f000 f821 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047ee:	4602      	mov	r2, r0
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	490a      	ldr	r1, [pc, #40]	@ (8004824 <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	5ccb      	ldrb	r3, [r1, r3]
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	4a09      	ldr	r2, [pc, #36]	@ (8004828 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <HAL_RCC_ClockConfig+0x1c8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fa78 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023c00 	.word	0x40023c00
 8004820:	40023800 	.word	0x40023800
 8004824:	08008ab4 	.word	0x08008ab4
 8004828:	20000000 	.word	0x20000000
 800482c:	20000004 	.word	0x20000004

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004834:	b094      	sub	sp, #80	@ 0x50
 8004836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	647b      	str	r3, [r7, #68]	@ 0x44
 800483c:	2300      	movs	r3, #0
 800483e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004840:	2300      	movs	r3, #0
 8004842:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004848:	4b79      	ldr	r3, [pc, #484]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b08      	cmp	r3, #8
 8004852:	d00d      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x40>
 8004854:	2b08      	cmp	r3, #8
 8004856:	f200 80e1 	bhi.w	8004a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x34>
 800485e:	2b04      	cmp	r3, #4
 8004860:	d003      	beq.n	800486a <HAL_RCC_GetSysClockFreq+0x3a>
 8004862:	e0db      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b73      	ldr	r3, [pc, #460]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004866:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004868:	e0db      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486a:	4b73      	ldr	r3, [pc, #460]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800486c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800486e:	e0d8      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004870:	4b6f      	ldr	r3, [pc, #444]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d063      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004886:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	2200      	movs	r2, #0
 800488e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004890:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30
 800489a:	2300      	movs	r3, #0
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
 800489e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	f04f 0000 	mov.w	r0, #0
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	0159      	lsls	r1, r3, #5
 80048b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b4:	0150      	lsls	r0, r2, #5
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4621      	mov	r1, r4
 80048bc:	1a51      	subs	r1, r2, r1
 80048be:	6139      	str	r1, [r7, #16]
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb63 0301 	sbc.w	r3, r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d4:	4659      	mov	r1, fp
 80048d6:	018b      	lsls	r3, r1, #6
 80048d8:	4651      	mov	r1, sl
 80048da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048de:	4651      	mov	r1, sl
 80048e0:	018a      	lsls	r2, r1, #6
 80048e2:	4651      	mov	r1, sl
 80048e4:	ebb2 0801 	subs.w	r8, r2, r1
 80048e8:	4659      	mov	r1, fp
 80048ea:	eb63 0901 	sbc.w	r9, r3, r1
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004902:	4690      	mov	r8, r2
 8004904:	4699      	mov	r9, r3
 8004906:	4623      	mov	r3, r4
 8004908:	eb18 0303 	adds.w	r3, r8, r3
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	462b      	mov	r3, r5
 8004910:	eb49 0303 	adc.w	r3, r9, r3
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004922:	4629      	mov	r1, r5
 8004924:	024b      	lsls	r3, r1, #9
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800492c:	4621      	mov	r1, r4
 800492e:	024a      	lsls	r2, r1, #9
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004936:	2200      	movs	r2, #0
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800493a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800493c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004940:	f7fb fc42 	bl	80001c8 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800494c:	e058      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494e:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	2200      	movs	r2, #0
 8004956:	4618      	mov	r0, r3
 8004958:	4611      	mov	r1, r2
 800495a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
 8004964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	f04f 0000 	mov.w	r0, #0
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	0159      	lsls	r1, r3, #5
 8004976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800497a:	0150      	lsls	r0, r2, #5
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4641      	mov	r1, r8
 8004982:	ebb2 0a01 	subs.w	sl, r2, r1
 8004986:	4649      	mov	r1, r9
 8004988:	eb63 0b01 	sbc.w	fp, r3, r1
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800499c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049a0:	ebb2 040a 	subs.w	r4, r2, sl
 80049a4:	eb63 050b 	sbc.w	r5, r3, fp
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	00eb      	lsls	r3, r5, #3
 80049b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b6:	00e2      	lsls	r2, r4, #3
 80049b8:	4614      	mov	r4, r2
 80049ba:	461d      	mov	r5, r3
 80049bc:	4643      	mov	r3, r8
 80049be:	18e3      	adds	r3, r4, r3
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	464b      	mov	r3, r9
 80049c4:	eb45 0303 	adc.w	r3, r5, r3
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049d6:	4629      	mov	r1, r5
 80049d8:	028b      	lsls	r3, r1, #10
 80049da:	4621      	mov	r1, r4
 80049dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049e0:	4621      	mov	r1, r4
 80049e2:	028a      	lsls	r2, r1, #10
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ea:	2200      	movs	r2, #0
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	61fa      	str	r2, [r7, #28]
 80049f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f4:	f7fb fbe8 	bl	80001c8 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4613      	mov	r3, r2
 80049fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a1a:	e002      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b05      	ldr	r3, [pc, #20]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3750      	adds	r7, #80	@ 0x50
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	007a1200 	.word	0x007a1200

08004a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a40:	4b03      	ldr	r3, [pc, #12]	@ (8004a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000000 	.word	0x20000000

08004a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a58:	f7ff fff0 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	0a9b      	lsrs	r3, r3, #10
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	@ (8004a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40023800 	.word	0x40023800
 8004a78:	08008ac4 	.word	0x08008ac4

08004a7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d035      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aa4:	4b62      	ldr	r3, [pc, #392]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aaa:	f7fc f96d 	bl	8000d88 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ab2:	f7fc f969 	bl	8000d88 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e0b0      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	019a      	lsls	r2, r3, #6
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	071b      	lsls	r3, r3, #28
 8004adc:	4955      	ldr	r1, [pc, #340]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ae4:	4b52      	ldr	r3, [pc, #328]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aea:	f7fc f94d 	bl	8000d88 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004af2:	f7fc f949 	bl	8000d88 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e090      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b04:	4b4b      	ldr	r3, [pc, #300]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 8083 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	4b44      	ldr	r3, [pc, #272]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	4a43      	ldr	r2, [pc, #268]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b2e:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b46:	f7fc f91f 	bl	8000d88 <HAL_GetTick>
 8004b4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b4e:	f7fc f91b 	bl	8000d88 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e062      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b60:	4b35      	ldr	r3, [pc, #212]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b6c:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02f      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d028      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b94:	4b29      	ldr	r3, [pc, #164]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9a:	4b28      	ldr	r3, [pc, #160]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ba0:	4a24      	ldr	r2, [pc, #144]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ba6:	4b23      	ldr	r3, [pc, #140]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d114      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fc f8e9 	bl	8000d88 <HAL_GetTick>
 8004bb6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb8:	e00a      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bba:	f7fc f8e5 	bl	8000d88 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e02a      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	4b18      	ldr	r3, [pc, #96]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ee      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004be8:	d10d      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bea:	4b12      	ldr	r3, [pc, #72]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfe:	490d      	ldr	r1, [pc, #52]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]
 8004c04:	e005      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c06:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c10:	6093      	str	r3, [r2, #8]
 8004c12:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1e:	4905      	ldr	r1, [pc, #20]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	42470068 	.word	0x42470068
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	42470e40 	.word	0x42470e40

08004c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d13f      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c5e:	4b24      	ldr	r3, [pc, #144]	@ (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c74:	d12f      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c76:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c78:	617b      	str	r3, [r7, #20]
          break;
 8004c7a:	e02f      	b.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c88:	d108      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c8a:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c92:	4a19      	ldr	r2, [pc, #100]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	e007      	b.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c9c:	4b14      	ldr	r3, [pc, #80]	@ (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ca4:	4a15      	ldr	r2, [pc, #84]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cac:	4b10      	ldr	r3, [pc, #64]	@ (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cc6:	0f1b      	lsrs	r3, r3, #28
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	617b      	str	r3, [r7, #20]
          break;
 8004cd4:	e002      	b.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
          break;
 8004cda:	bf00      	nop
        }
      }
      break;
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004cde:	bf00      	nop
    }
  }
  return frequency;
 8004ce0:	697b      	ldr	r3, [r7, #20]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	00bb8000 	.word	0x00bb8000
 8004cf8:	007a1200 	.word	0x007a1200
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e07b      	b.n	8004e0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d22:	d009      	beq.n	8004d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	61da      	str	r2, [r3, #28]
 8004d2a:	e005      	b.n	8004d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fb febe 	bl	8000ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dbc:	ea42 0103 	orr.w	r1, r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0104 	and.w	r1, r3, #4
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	f003 0210 	and.w	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004df8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e12:	b084      	sub	sp, #16
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	f107 001c 	add.w	r0, r7, #28
 8004e20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e24:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d123      	bne.n	8004e74 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d105      	bne.n	8004e68 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f9dc 	bl	8005226 <USB_CoreReset>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	e01b      	b.n	8004eac <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f9d0 	bl	8005226 <USB_CoreReset>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e8a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e9e:	e005      	b.n	8004eac <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004eac:	7fbb      	ldrb	r3, [r7, #30]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10b      	bne.n	8004eca <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f043 0206 	orr.w	r2, r3, #6
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ed6:	b004      	add	sp, #16
 8004ed8:	4770      	bx	lr

08004eda <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 0201 	bic.w	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d115      	bne.n	8004f6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f4c:	200a      	movs	r0, #10
 8004f4e:	f7fb ff27 	bl	8000da0 <HAL_Delay>
      ms += 10U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	330a      	adds	r3, #10
 8004f56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f956 	bl	800520a <USB_GetMode>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d01e      	beq.n	8004fa2 <USB_SetCurrentMode+0x84>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f68:	d9f0      	bls.n	8004f4c <USB_SetCurrentMode+0x2e>
 8004f6a:	e01a      	b.n	8004fa2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d115      	bne.n	8004f9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f7e:	200a      	movs	r0, #10
 8004f80:	f7fb ff0e 	bl	8000da0 <HAL_Delay>
      ms += 10U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	330a      	adds	r3, #10
 8004f88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f93d 	bl	800520a <USB_GetMode>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <USB_SetCurrentMode+0x84>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f9a:	d9f0      	bls.n	8004f7e <USB_SetCurrentMode+0x60>
 8004f9c:	e001      	b.n	8004fa2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e005      	b.n	8004fae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fa6:	d101      	bne.n	8004fac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fd0:	d901      	bls.n	8004fd6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e01b      	b.n	800500e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	daf2      	bge.n	8004fc4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ffa:	d901      	bls.n	8005000 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e006      	b.n	800500e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b20      	cmp	r3, #32
 800500a:	d0f0      	beq.n	8004fee <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005032:	d901      	bls.n	8005038 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e018      	b.n	800506a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	daf2      	bge.n	8005026 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2210      	movs	r2, #16
 8005048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005056:	d901      	bls.n	800505c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e006      	b.n	800506a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b10      	cmp	r3, #16
 8005066:	d0f0      	beq.n	800504a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005076:	b480      	push	{r7}
 8005078:	b089      	sub	sp, #36	@ 0x24
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	4611      	mov	r1, r2
 8005082:	461a      	mov	r2, r3
 8005084:	460b      	mov	r3, r1
 8005086:	71fb      	strb	r3, [r7, #7]
 8005088:	4613      	mov	r3, r2
 800508a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005094:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d123      	bne.n	80050e4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800509c:	88bb      	ldrh	r3, [r7, #4]
 800509e:	3303      	adds	r3, #3
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e018      	b.n	80050dc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	031a      	lsls	r2, r3, #12
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050b6:	461a      	mov	r2, r3
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	3301      	adds	r3, #1
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3e2      	bcc.n	80050aa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3724      	adds	r7, #36	@ 0x24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b08b      	sub	sp, #44	@ 0x2c
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	4613      	mov	r3, r2
 80050fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	b29b      	uxth	r3, r3
 800510e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005118:	2300      	movs	r3, #0
 800511a:	623b      	str	r3, [r7, #32]
 800511c:	e014      	b.n	8005148 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	601a      	str	r2, [r3, #0]
    pDest++;
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	3301      	adds	r3, #1
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	3301      	adds	r3, #1
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	3301      	adds	r3, #1
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	3301      	adds	r3, #1
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	3301      	adds	r3, #1
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	429a      	cmp	r2, r3
 800514e:	d3e6      	bcc.n	800511e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005150:	8bfb      	ldrh	r3, [r7, #30]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01e      	beq.n	8005194 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005160:	461a      	mov	r2, r3
 8005162:	f107 0310 	add.w	r3, r7, #16
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	b2da      	uxtb	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	701a      	strb	r2, [r3, #0]
      i++;
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	3301      	adds	r3, #1
 8005180:	623b      	str	r3, [r7, #32]
      pDest++;
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005188:	8bfb      	ldrh	r3, [r7, #30]
 800518a:	3b01      	subs	r3, #1
 800518c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800518e:	8bfb      	ldrh	r3, [r7, #30]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ea      	bne.n	800516a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005196:	4618      	mov	r0, r3
 8005198:	372c      	adds	r7, #44	@ 0x2c
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4013      	ands	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051fc:	68bb      	ldr	r3, [r7, #8]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0301 	and.w	r3, r3, #1
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800523e:	d901      	bls.n	8005244 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e01b      	b.n	800527c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	daf2      	bge.n	8005232 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f043 0201 	orr.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005268:	d901      	bls.n	800526e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e006      	b.n	800527c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d0f0      	beq.n	800525c <USB_CoreReset+0x36>

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005288:	b084      	sub	sp, #16
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052a8:	461a      	mov	r2, r3
 80052aa:	2300      	movs	r3, #0
 80052ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d119      	bne.n	8005312 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10a      	bne.n	80052fc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052f4:	f043 0304 	orr.w	r3, r3, #4
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e014      	b.n	8005326 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800530a:	f023 0304 	bic.w	r3, r3, #4
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e009      	b.n	8005326 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005320:	f023 0304 	bic.w	r3, r3, #4
 8005324:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005326:	2110      	movs	r1, #16
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fe44 	bl	8004fb6 <USB_FlushTxFifo>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff fe6e 	bl	800501a <USB_FlushRxFifo>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e015      	b.n	800537a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535a:	461a      	mov	r2, r3
 800535c:	f04f 33ff 	mov.w	r3, #4294967295
 8005360:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536e:	461a      	mov	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	3301      	adds	r3, #1
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800537e:	461a      	mov	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4293      	cmp	r3, r2
 8005384:	d3e3      	bcc.n	800534e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f04f 32ff 	mov.w	r2, #4294967295
 8005392:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a18      	ldr	r2, [pc, #96]	@ (80053f8 <USB_HostInit+0x170>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10b      	bne.n	80053b4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053a2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a15      	ldr	r2, [pc, #84]	@ (80053fc <USB_HostInit+0x174>)
 80053a8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a14      	ldr	r2, [pc, #80]	@ (8005400 <USB_HostInit+0x178>)
 80053ae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80053b2:	e009      	b.n	80053c8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2280      	movs	r2, #128	@ 0x80
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a11      	ldr	r2, [pc, #68]	@ (8005404 <USB_HostInit+0x17c>)
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a11      	ldr	r2, [pc, #68]	@ (8005408 <USB_HostInit+0x180>)
 80053c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f043 0210 	orr.w	r2, r3, #16
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <USB_HostInit+0x184>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f4:	b004      	add	sp, #16
 80053f6:	4770      	bx	lr
 80053f8:	40040000 	.word	0x40040000
 80053fc:	01000200 	.word	0x01000200
 8005400:	00e00300 	.word	0x00e00300
 8005404:	00600080 	.word	0x00600080
 8005408:	004000e0 	.word	0x004000e0
 800540c:	a3200008 	.word	0xa3200008

08005410 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005458:	461a      	mov	r2, r3
 800545a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800545e:	6053      	str	r3, [r2, #4]
 8005460:	e00c      	b.n	800547c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d107      	bne.n	8005478 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800546e:	461a      	mov	r2, r3
 8005470:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005474:	6053      	str	r3, [r2, #4]
 8005476:	e001      	b.n	800547c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80054aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054ba:	2064      	movs	r0, #100	@ 0x64
 80054bc:	f7fb fc70 	bl	8000da0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054ce:	200a      	movs	r0, #10
 80054d0:	f7fb fc66 	bl	8000da0 <HAL_Delay>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	460b      	mov	r3, r1
 80054e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005502:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <USB_DriveVbus+0x44>
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d106      	bne.n	8005522 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800551c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005520:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552c:	d109      	bne.n	8005542 <USB_DriveVbus+0x64>
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800553c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005540:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	0c5b      	lsrs	r3, r3, #17
 800556e:	f003 0303 	and.w	r3, r3, #3
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	b29b      	uxth	r3, r3
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	461a      	mov	r2, r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	70fb      	strb	r3, [r7, #3]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70bb      	strb	r3, [r7, #2]
 80055b6:	4613      	mov	r3, r2
 80055b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ce:	461a      	mov	r2, r3
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295
 80055d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d87c      	bhi.n	80056d8 <USB_HC_Init+0x138>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <USB_HC_Init+0x44>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	0800569b 	.word	0x0800569b
 80055ec:	080055f5 	.word	0x080055f5
 80055f0:	0800565d 	.word	0x0800565d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005600:	461a      	mov	r2, r3
 8005602:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005606:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800560c:	2b00      	cmp	r3, #0
 800560e:	da10      	bge.n	8005632 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	440a      	add	r2, r1
 8005626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800562a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005630:	e055      	b.n	80056de <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a6f      	ldr	r2, [pc, #444]	@ (80057f4 <USB_HC_Init+0x254>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d151      	bne.n	80056de <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	440a      	add	r2, r1
 8005650:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005654:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005658:	60d3      	str	r3, [r2, #12]
      break;
 800565a:	e040      	b.n	80056de <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005668:	461a      	mov	r2, r3
 800566a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800566e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005674:	2b00      	cmp	r3, #0
 8005676:	da34      	bge.n	80056e2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	440a      	add	r2, r1
 800568e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005696:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005698:	e023      	b.n	80056e2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a6:	461a      	mov	r2, r3
 80056a8:	f240 2325 	movw	r3, #549	@ 0x225
 80056ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da17      	bge.n	80056e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056d0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80056d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056d6:	e006      	b.n	80056e6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	77fb      	strb	r3, [r7, #31]
      break;
 80056dc:	e004      	b.n	80056e8 <USB_HC_Init+0x148>
      break;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <USB_HC_Init+0x148>
      break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <USB_HC_Init+0x148>
      break;
 80056e6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f4:	461a      	mov	r2, r3
 80056f6:	2300      	movs	r3, #0
 80056f8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	440a      	add	r2, r1
 8005710:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005714:	f043 0302 	orr.w	r3, r3, #2
 8005718:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005734:	4313      	orrs	r3, r2
 8005736:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005744:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005748:	2b00      	cmp	r3, #0
 800574a:	da03      	bge.n	8005754 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800574c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	e001      	b.n	8005758 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fef9 	bl	8005550 <USB_GetHostSpeed>
 800575e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005760:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005764:	2b02      	cmp	r3, #2
 8005766:	d106      	bne.n	8005776 <USB_HC_Init+0x1d6>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d003      	beq.n	8005776 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800576e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e001      	b.n	800577a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800577a:	787b      	ldrb	r3, [r7, #1]
 800577c:	059b      	lsls	r3, r3, #22
 800577e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005782:	78bb      	ldrb	r3, [r7, #2]
 8005784:	02db      	lsls	r3, r3, #11
 8005786:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800578a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800578c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005790:	049b      	lsls	r3, r3, #18
 8005792:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005796:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005798:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800579a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800579e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80057b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057b8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d003      	beq.n	80057ca <USB_HC_Init+0x22a>
 80057c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d10f      	bne.n	80057ea <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40040000 	.word	0x40040000

080057f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	@ 0x30
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005814:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a5d      	ldr	r2, [pc, #372]	@ (8005990 <USB_HC_StartXfer+0x198>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d12f      	bne.n	800587e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d11c      	bne.n	800585e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	7c9b      	ldrb	r3, [r3, #18]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <USB_HC_StartXfer+0x3c>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	7c9b      	ldrb	r3, [r3, #18]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d124      	bne.n	800587e <USB_HC_StartXfer+0x86>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	799b      	ldrb	r3, [r3, #6]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d120      	bne.n	800587e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	440a      	add	r2, r1
 8005852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585a:	60d3      	str	r3, [r2, #12]
 800585c:	e00f      	b.n	800587e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	791b      	ldrb	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <USB_HC_StartXfer+0x86>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	795b      	ldrb	r3, [r3, #5]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d107      	bne.n	800587e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	4619      	mov	r1, r3
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fb6b 	bl	8005f50 <USB_DoPing>
        return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e232      	b.n	8005ce4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	799b      	ldrb	r3, [r3, #6]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d158      	bne.n	8005938 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005886:	2301      	movs	r3, #1
 8005888:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	78db      	ldrb	r3, [r3, #3]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	8a92      	ldrh	r2, [r2, #20]
 8005898:	fb03 f202 	mul.w	r2, r3, r2
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	61da      	str	r2, [r3, #28]
 80058a0:	e07c      	b.n	800599c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	7c9b      	ldrb	r3, [r3, #18]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d130      	bne.n	800590c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	2bbc      	cmp	r3, #188	@ 0xbc
 80058b0:	d918      	bls.n	80058e4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	8a9b      	ldrh	r3, [r3, #20]
 80058b6:	461a      	mov	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d003      	beq.n	80058d4 <USB_HC_StartXfer+0xdc>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d103      	bne.n	80058dc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2202      	movs	r2, #2
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	e05f      	b.n	800599c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2201      	movs	r2, #1
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e05b      	b.n	800599c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d007      	beq.n	8005904 <USB_HC_StartXfer+0x10c>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d003      	beq.n	8005904 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2204      	movs	r2, #4
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	e04b      	b.n	800599c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2203      	movs	r2, #3
 8005908:	60da      	str	r2, [r3, #12]
 800590a:	e047      	b.n	800599c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10d      	bne.n	800592e <USB_HC_StartXfer+0x136>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	8a92      	ldrh	r2, [r2, #20]
 800591a:	4293      	cmp	r3, r2
 800591c:	d907      	bls.n	800592e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800591e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	8a92      	ldrh	r2, [r2, #20]
 8005924:	fb03 f202 	mul.w	r2, r3, r2
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	61da      	str	r2, [r3, #28]
 800592c:	e036      	b.n	800599c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	61da      	str	r2, [r3, #28]
 8005936:	e031      	b.n	800599c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d018      	beq.n	8005972 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	8a92      	ldrh	r2, [r2, #20]
 8005948:	4413      	add	r3, r2
 800594a:	3b01      	subs	r3, #1
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	8a92      	ldrh	r2, [r2, #20]
 8005950:	fbb3 f3f2 	udiv	r3, r3, r2
 8005954:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005956:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005958:	8b7b      	ldrh	r3, [r7, #26]
 800595a:	429a      	cmp	r2, r3
 800595c:	d90b      	bls.n	8005976 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800595e:	8b7b      	ldrh	r3, [r7, #26]
 8005960:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	8a92      	ldrh	r2, [r2, #20]
 8005968:	fb03 f202 	mul.w	r2, r3, r2
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61da      	str	r2, [r3, #28]
 8005970:	e001      	b.n	8005976 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005972:	2301      	movs	r3, #1
 8005974:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	78db      	ldrb	r3, [r3, #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800597e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	8a92      	ldrh	r2, [r2, #20]
 8005984:	fb03 f202 	mul.w	r2, r3, r2
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61da      	str	r2, [r3, #28]
 800598c:	e006      	b.n	800599c <USB_HC_StartXfer+0x1a4>
 800598e:	bf00      	nop
 8005990:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059a6:	04d9      	lsls	r1, r3, #19
 80059a8:	4ba3      	ldr	r3, [pc, #652]	@ (8005c38 <USB_HC_StartXfer+0x440>)
 80059aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	7d9b      	ldrb	r3, [r3, #22]
 80059b2:	075b      	lsls	r3, r3, #29
 80059b4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059b8:	69f9      	ldr	r1, [r7, #28]
 80059ba:	0148      	lsls	r0, r1, #5
 80059bc:	6a39      	ldr	r1, [r7, #32]
 80059be:	4401      	add	r1, r0
 80059c0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059de:	460a      	mov	r2, r1
 80059e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	7e7b      	ldrb	r3, [r7, #25]
 8005a2a:	075b      	lsls	r3, r3, #29
 8005a2c:	69f9      	ldr	r1, [r7, #28]
 8005a2e:	0148      	lsls	r0, r1, #5
 8005a30:	6a39      	ldr	r1, [r7, #32]
 8005a32:	4401      	add	r1, r0
 8005a34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	799b      	ldrb	r3, [r3, #6]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f040 80c3 	bne.w	8005bcc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	7c5b      	ldrb	r3, [r3, #17]
 8005a4a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a50:	4313      	orrs	r3, r2
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	6a3a      	ldr	r2, [r7, #32]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a62:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	6a3a      	ldr	r2, [r7, #32]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	79db      	ldrb	r3, [r3, #7]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d123      	bne.n	8005ad4 <USB_HC_StartXfer+0x2dc>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	78db      	ldrb	r3, [r3, #3]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11f      	bne.n	8005ad4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ad2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	7c9b      	ldrb	r3, [r3, #18]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d003      	beq.n	8005ae4 <USB_HC_StartXfer+0x2ec>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	7c9b      	ldrb	r3, [r3, #18]
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d117      	bne.n	8005b14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d113      	bne.n	8005b14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d10f      	bne.n	8005b14 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	6a3a      	ldr	r2, [r7, #32]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b12:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	7c9b      	ldrb	r3, [r3, #18]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d162      	bne.n	8005be2 <USB_HC_StartXfer+0x3ea>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	78db      	ldrb	r3, [r3, #3]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d15e      	bne.n	8005be2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d858      	bhi.n	8005be0 <USB_HC_StartXfer+0x3e8>
 8005b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <USB_HC_StartXfer+0x33c>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08005b67 	.word	0x08005b67
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005bab 	.word	0x08005bab
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	6a3a      	ldr	r2, [r7, #32]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b62:	6053      	str	r3, [r2, #4]
          break;
 8005b64:	e03d      	b.n	8005be2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	6a3a      	ldr	r2, [r7, #32]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b80:	f043 030e 	orr.w	r3, r3, #14
 8005b84:	6053      	str	r3, [r2, #4]
          break;
 8005b86:	e02c      	b.n	8005be2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	6a3a      	ldr	r2, [r7, #32]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ba6:	6053      	str	r3, [r2, #4]
          break;
 8005ba8:	e01b      	b.n	8005be2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	6a3a      	ldr	r2, [r7, #32]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bc8:	6053      	str	r3, [r2, #4]
          break;
 8005bca:	e00a      	b.n	8005be2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6053      	str	r3, [r2, #4]
 8005bde:	e000      	b.n	8005be2 <USB_HC_StartXfer+0x3ea>
          break;
 8005be0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bf8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	e003      	b.n	8005c14 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c12:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c1a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c28:	461a      	mov	r2, r3
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e055      	b.n	8005ce4 <USB_HC_StartXfer+0x4ec>
 8005c38:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d14e      	bne.n	8005ce2 <USB_HC_StartXfer+0x4ea>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d04a      	beq.n	8005ce2 <USB_HC_StartXfer+0x4ea>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	79db      	ldrb	r3, [r3, #7]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d146      	bne.n	8005ce2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	7c9b      	ldrb	r3, [r3, #18]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d831      	bhi.n	8005cc0 <USB_HC_StartXfer+0x4c8>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <USB_HC_StartXfer+0x46c>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c99 	.word	0x08005c99
 8005c6c:	08005c75 	.word	0x08005c75
 8005c70:	08005c99 	.word	0x08005c99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	089b      	lsrs	r3, r3, #2
 8005c7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c7e:	8afa      	ldrh	r2, [r7, #22]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d91c      	bls.n	8005cc4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f043 0220 	orr.w	r2, r3, #32
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c96:	e015      	b.n	8005cc4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	3303      	adds	r3, #3
 8005c9e:	089b      	lsrs	r3, r3, #2
 8005ca0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005ca2:	8afa      	ldrh	r2, [r7, #22]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d90a      	bls.n	8005cc8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005cbe:	e003      	b.n	8005cc8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005cc0:	bf00      	nop
 8005cc2:	e002      	b.n	8005cca <USB_HC_StartXfer+0x4d2>
        break;
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <USB_HC_StartXfer+0x4d2>
        break;
 8005cc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6999      	ldr	r1, [r3, #24]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785a      	ldrb	r2, [r3, #1]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2000      	movs	r0, #0
 8005cda:	9000      	str	r0, [sp, #0]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff f9ca 	bl	8005076 <USB_WritePacket>
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3728      	adds	r7, #40	@ 0x28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	b29b      	uxth	r3, r3
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b089      	sub	sp, #36	@ 0x24
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	0c9b      	lsrs	r3, r3, #18
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	0fdb      	lsrs	r3, r3, #31
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	0fdb      	lsrs	r3, r3, #31
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d10d      	bne.n	8005d90 <USB_HC_Halt+0x82>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <USB_HC_Halt+0x82>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d002      	beq.n	8005d8c <USB_HC_Halt+0x7e>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d101      	bne.n	8005d90 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e0d8      	b.n	8005f42 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <USB_HC_Halt+0x8e>
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d173      	bne.n	8005e84 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d14a      	bne.n	8005e5e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d133      	bne.n	8005e3c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005df2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e12:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e20:	d82e      	bhi.n	8005e80 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e38:	d0ec      	beq.n	8005e14 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e3a:	e081      	b.n	8005f40 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e5a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e5c:	e070      	b.n	8005f40 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e7e:	e05f      	b.n	8005f40 <USB_HC_Halt+0x232>
            break;
 8005e80:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e82:	e05d      	b.n	8005f40 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ea2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d133      	bne.n	8005f1c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ece:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ed2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ef2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f00:	d81d      	bhi.n	8005f3e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f18:	d0ec      	beq.n	8005ef4 <USB_HC_Halt+0x1e6>
 8005f1a:	e011      	b.n	8005f40 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e000      	b.n	8005f40 <USB_HC_Halt+0x232>
          break;
 8005f3e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3724      	adds	r7, #36	@ 0x24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f64:	2301      	movs	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	04da      	lsls	r2, r3, #19
 8005f6c:	4b15      	ldr	r3, [pc, #84]	@ (8005fc4 <USB_DoPing+0x74>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fa0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	1ff80000 	.word	0x1ff80000

08005fc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fe ff8d 	bl	8004efc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fe2:	2110      	movs	r1, #16
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fe ffe6 	bl	8004fb6 <USB_FlushTxFifo>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff f810 	bl	800501a <USB_FlushRxFifo>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e01f      	b.n	800604a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006020:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006028:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006030:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800603e:	461a      	mov	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	3301      	adds	r3, #1
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b0f      	cmp	r3, #15
 800604e:	d9dc      	bls.n	800600a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e034      	b.n	80060c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800606c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006074:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800607c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608a:	461a      	mov	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800609c:	d80c      	bhi.n	80060b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060b4:	d0ec      	beq.n	8006090 <USB_StopHost+0xc8>
 80060b6:	e000      	b.n	80060ba <USB_StopHost+0xf2>
        break;
 80060b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	3301      	adds	r3, #1
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b0f      	cmp	r3, #15
 80060c4:	d9c7      	bls.n	8006056 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060cc:	461a      	mov	r2, r3
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
 80060d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f04f 32ff 	mov.w	r2, #4294967295
 80060da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fe fefc 	bl	8004eda <USB_EnableGlobalInt>

  return ret;
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b089      	sub	sp, #36	@ 0x24
 80060f0:	af04      	add	r7, sp, #16
 80060f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80060f4:	2301      	movs	r3, #1
 80060f6:	2202      	movs	r2, #2
 80060f8:	2102      	movs	r1, #2
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fc85 	bl	8006a0a <USBH_FindInterface>
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	2bff      	cmp	r3, #255	@ 0xff
 8006108:	d002      	beq.n	8006110 <USBH_CDC_InterfaceInit+0x24>
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d901      	bls.n	8006114 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006110:	2302      	movs	r3, #2
 8006112:	e13d      	b.n	8006390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fc5a 	bl	80069d2 <USBH_SelectInterface>
 800611e:	4603      	mov	r3, r0
 8006120:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006128:	2302      	movs	r3, #2
 800612a:	e131      	b.n	8006390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006132:	2050      	movs	r0, #80	@ 0x50
 8006134:	f002 fb64 	bl	8008800 <malloc>
 8006138:	4603      	mov	r3, r0
 800613a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800614c:	2302      	movs	r3, #2
 800614e:	e11f      	b.n	8006390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006150:	2250      	movs	r2, #80	@ 0x50
 8006152:	2100      	movs	r1, #0
 8006154:	68b8      	ldr	r0, [r7, #8]
 8006156:	f002 fc11 	bl	800897c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	211a      	movs	r1, #26
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b25b      	sxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	da15      	bge.n	800619e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	211a      	movs	r1, #26
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	4413      	add	r3, r2
 800617e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006182:	781a      	ldrb	r2, [r3, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	211a      	movs	r1, #26
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	4413      	add	r3, r2
 8006194:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006198:	881a      	ldrh	r2, [r3, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 ffbe 	bl	8008126 <USBH_AllocPipe>
 80061aa:	4603      	mov	r3, r0
 80061ac:	461a      	mov	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	7819      	ldrb	r1, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	7858      	ldrb	r0, [r3, #1]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	8952      	ldrh	r2, [r2, #10]
 80061ca:	9202      	str	r2, [sp, #8]
 80061cc:	2203      	movs	r2, #3
 80061ce:	9201      	str	r2, [sp, #4]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	4623      	mov	r3, r4
 80061d4:	4602      	mov	r2, r0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 ff76 	bl	80080c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2200      	movs	r2, #0
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f002 fa85 	bl	80086f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80061ea:	2300      	movs	r3, #0
 80061ec:	2200      	movs	r2, #0
 80061ee:	210a      	movs	r1, #10
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc0a 	bl	8006a0a <USBH_FindInterface>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2bff      	cmp	r3, #255	@ 0xff
 80061fe:	d002      	beq.n	8006206 <USBH_CDC_InterfaceInit+0x11a>
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d901      	bls.n	800620a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006206:	2302      	movs	r3, #2
 8006208:	e0c2      	b.n	8006390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	211a      	movs	r1, #26
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	b25b      	sxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	da16      	bge.n	8006250 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	211a      	movs	r1, #26
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	4413      	add	r3, r2
 800622e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	211a      	movs	r1, #26
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006248:	881a      	ldrh	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	835a      	strh	r2, [r3, #26]
 800624e:	e015      	b.n	800627c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	211a      	movs	r1, #26
 8006256:	fb01 f303 	mul.w	r3, r1, r3
 800625a:	4413      	add	r3, r2
 800625c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	211a      	movs	r1, #26
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	4413      	add	r3, r2
 8006272:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006276:	881a      	ldrh	r2, [r3, #0]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	211a      	movs	r1, #26
 8006282:	fb01 f303 	mul.w	r3, r1, r3
 8006286:	4413      	add	r3, r2
 8006288:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b25b      	sxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	da16      	bge.n	80062c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	211a      	movs	r1, #26
 800629a:	fb01 f303 	mul.w	r3, r1, r3
 800629e:	4413      	add	r3, r2
 80062a0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80062a4:	781a      	ldrb	r2, [r3, #0]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	211a      	movs	r1, #26
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80062ba:	881a      	ldrh	r2, [r3, #0]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	835a      	strh	r2, [r3, #26]
 80062c0:	e015      	b.n	80062ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	211a      	movs	r1, #26
 80062c8:	fb01 f303 	mul.w	r3, r1, r3
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	211a      	movs	r1, #26
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80062e8:	881a      	ldrh	r2, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7b9b      	ldrb	r3, [r3, #14]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 ff16 	bl	8008126 <USBH_AllocPipe>
 80062fa:	4603      	mov	r3, r0
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	7bdb      	ldrb	r3, [r3, #15]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 ff0c 	bl	8008126 <USBH_AllocPipe>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7b59      	ldrb	r1, [r3, #13]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	7b98      	ldrb	r0, [r3, #14]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	8b12      	ldrh	r2, [r2, #24]
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	2202      	movs	r2, #2
 8006332:	9201      	str	r2, [sp, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	4623      	mov	r3, r4
 8006338:	4602      	mov	r2, r0
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fec4 	bl	80080c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	7b19      	ldrb	r1, [r3, #12]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	7bd8      	ldrb	r0, [r3, #15]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	8b52      	ldrh	r2, [r2, #26]
 8006358:	9202      	str	r2, [sp, #8]
 800635a:	2202      	movs	r2, #2
 800635c:	9201      	str	r2, [sp, #4]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4623      	mov	r3, r4
 8006362:	4602      	mov	r2, r0
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 feaf 	bl	80080c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	7b5b      	ldrb	r3, [r3, #13]
 8006376:	2200      	movs	r2, #0
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f002 f9ba 	bl	80086f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	7b1b      	ldrb	r3, [r3, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f002 f9b3 	bl	80086f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	bd90      	pop	{r4, r7, pc}

08006398 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00e      	beq.n	80063d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 fea4 	bl	8008106 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fecf 	bl	8008168 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	7b1b      	ldrb	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00e      	beq.n	80063f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	7b1b      	ldrb	r3, [r3, #12]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fe91 	bl	8008106 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	7b1b      	ldrb	r3, [r3, #12]
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 febc 	bl	8008168 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	7b5b      	ldrb	r3, [r3, #13]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7b5b      	ldrb	r3, [r3, #13]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fe7e 	bl	8008106 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	7b5b      	ldrb	r3, [r3, #13]
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 fea9 	bl	8008168 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	4618      	mov	r0, r3
 8006432:	f002 f9ed 	bl	8008810 <free>
    phost->pActiveClass->pData = 0U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800643c:	2200      	movs	r2, #0
 800643e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3340      	adds	r3, #64	@ 0x40
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8b1 	bl	80065ca <GetLineCoding>
 8006468:	4603      	mov	r3, r0
 800646a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006478:	2102      	movs	r1, #2
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800647e:	7afb      	ldrb	r3, [r7, #11]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d877      	bhi.n	800659c <USBH_CDC_Process+0x114>
 80064ac:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <USBH_CDC_Process+0x2c>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064c9 	.word	0x080064c9
 80064b8:	080064cf 	.word	0x080064cf
 80064bc:	080064ff 	.word	0x080064ff
 80064c0:	08006573 	.word	0x08006573
 80064c4:	08006581 	.word	0x08006581
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73fb      	strb	r3, [r7, #15]
      break;
 80064cc:	e06d      	b.n	80065aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f897 	bl	8006608 <SetLineCoding>
 80064da:	4603      	mov	r3, r0
 80064dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064ec:	e058      	b.n	80065a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d055      	beq.n	80065a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2204      	movs	r2, #4
 80064f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80064fc:	e050      	b.n	80065a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	3340      	adds	r3, #64	@ 0x40
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f860 	bl	80065ca <GetLineCoding>
 800650a:	4603      	mov	r3, r0
 800650c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d126      	bne.n	8006562 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006526:	791b      	ldrb	r3, [r3, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	d13b      	bne.n	80065a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006536:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006538:	429a      	cmp	r2, r3
 800653a:	d133      	bne.n	80065a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006546:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006548:	429a      	cmp	r2, r3
 800654a:	d12b      	bne.n	80065a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006554:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006556:	429a      	cmp	r2, r3
 8006558:	d124      	bne.n	80065a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f958 	bl	8006810 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006560:	e020      	b.n	80065a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d01d      	beq.n	80065a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2204      	movs	r2, #4
 800656c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006570:	e018      	b.n	80065a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f867 	bl	8006646 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f8da 	bl	8006732 <CDC_ProcessReception>
      break;
 800657e:	e014      	b.n	80065aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006580:	2100      	movs	r1, #0
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 f81a 	bl	80075bc <USBH_ClrFeature>
 8006588:	4603      	mov	r3, r0
 800658a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800659a:	e005      	b.n	80065a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800659c:	bf00      	nop
 800659e:	e004      	b.n	80065aa <USBH_CDC_Process+0x122>
      break;
 80065a0:	bf00      	nop
 80065a2:	e002      	b.n	80065aa <USBH_CDC_Process+0x122>
      break;
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <USBH_CDC_Process+0x122>
      break;
 80065a8:	bf00      	nop

  }

  return status;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	22a1      	movs	r2, #161	@ 0xa1
 80065d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2221      	movs	r2, #33	@ 0x21
 80065de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2207      	movs	r2, #7
 80065f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2207      	movs	r2, #7
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fb14 	bl	8007c26 <USBH_CtlReq>
 80065fe:	4603      	mov	r3, r0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2221      	movs	r2, #33	@ 0x21
 8006616:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2207      	movs	r2, #7
 800662e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2207      	movs	r2, #7
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 faf5 	bl	8007c26 <USBH_CtlReq>
 800663c:	4603      	mov	r3, r0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af02      	add	r7, sp, #8
 800664c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006658:	2300      	movs	r3, #0
 800665a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006662:	2b01      	cmp	r3, #1
 8006664:	d002      	beq.n	800666c <CDC_ProcessTransmission+0x26>
 8006666:	2b02      	cmp	r3, #2
 8006668:	d023      	beq.n	80066b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800666a:	e05e      	b.n	800672a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	8b12      	ldrh	r2, [r2, #24]
 8006674:	4293      	cmp	r3, r2
 8006676:	d90b      	bls.n	8006690 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	69d9      	ldr	r1, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8b1a      	ldrh	r2, [r3, #24]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	7b5b      	ldrb	r3, [r3, #13]
 8006684:	2001      	movs	r0, #1
 8006686:	9000      	str	r0, [sp, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 fcda 	bl	8008042 <USBH_BulkSendData>
 800668e:	e00b      	b.n	80066a8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	7b5b      	ldrb	r3, [r3, #13]
 800669e:	2001      	movs	r0, #1
 80066a0:	9000      	str	r0, [sp, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fccd 	bl	8008042 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80066b0:	e03b      	b.n	800672a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	7b5b      	ldrb	r3, [r3, #13]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 fff1 	bl	80086a0 <USBH_LL_GetURBState>
 80066be:	4603      	mov	r3, r0
 80066c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d128      	bne.n	800671a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	8b12      	ldrh	r2, [r2, #24]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d90e      	bls.n	80066f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	8b12      	ldrh	r2, [r2, #24]
 80066dc:	1a9a      	subs	r2, r3, r2
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	8b12      	ldrh	r2, [r2, #24]
 80066ea:	441a      	add	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	61da      	str	r2, [r3, #28]
 80066f0:	e002      	b.n	80066f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006708:	e00e      	b.n	8006728 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f868 	bl	80067e8 <USBH_CDC_TransmitCallback>
      break;
 8006718:	e006      	b.n	8006728 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d103      	bne.n	8006728 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006728:	bf00      	nop
  }
}
 800672a:	bf00      	nop
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006744:	2300      	movs	r3, #0
 8006746:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800674e:	2b03      	cmp	r3, #3
 8006750:	d002      	beq.n	8006758 <CDC_ProcessReception+0x26>
 8006752:	2b04      	cmp	r3, #4
 8006754:	d00e      	beq.n	8006774 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006756:	e043      	b.n	80067e0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6a19      	ldr	r1, [r3, #32]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	8b5a      	ldrh	r2, [r3, #26]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	7b1b      	ldrb	r3, [r3, #12]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fc91 	bl	800808c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2204      	movs	r2, #4
 800676e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006772:	e035      	b.n	80067e0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	7b1b      	ldrb	r3, [r3, #12]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 ff90 	bl	80086a0 <USBH_LL_GetURBState>
 8006780:	4603      	mov	r3, r0
 8006782:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d129      	bne.n	80067de <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	7b1b      	ldrb	r3, [r3, #12]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fef3 	bl	800857c <USBH_LL_GetLastXferSize>
 8006796:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d016      	beq.n	80067d0 <CDC_ProcessReception+0x9e>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	8b5b      	ldrh	r3, [r3, #26]
 80067a6:	461a      	mov	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d910      	bls.n	80067d0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad2      	subs	r2, r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	441a      	add	r2, r3
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2203      	movs	r2, #3
 80067ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80067ce:	e006      	b.n	80067de <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f80f 	bl	80067fc <USBH_CDC_ReceiveCallback>
      break;
 80067de:	bf00      	nop
  }
}
 80067e0:	bf00      	nop
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006838:	2302      	movs	r3, #2
 800683a:	e029      	b.n	8006890 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	79fa      	ldrb	r2, [r7, #7]
 8006840:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f81f 	bl	8006898 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f001 fdc3 	bl	8008414 <USBH_LL_Init>

  return USBH_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e009      	b.n	80068be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	33e0      	adds	r3, #224	@ 0xe0
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	2200      	movs	r2, #0
 80068b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b0f      	cmp	r3, #15
 80068c2:	d9f2      	bls.n	80068aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e009      	b.n	80068de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068e4:	d3f1      	bcc.n	80068ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2240      	movs	r2, #64	@ 0x40
 800690a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	331c      	adds	r3, #28
 8006936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f002 f81d 	bl	800897c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f002 f814 	bl	800897c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800695a:	2212      	movs	r2, #18
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f002 f80c 	bl	800897c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800696a:	223e      	movs	r2, #62	@ 0x3e
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f002 f804 	bl	800897c <memset>

  return USBH_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d016      	beq.n	80069c0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10e      	bne.n	80069ba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80069a2:	1c59      	adds	r1, r3, #1
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	33de      	adds	r3, #222	@ 0xde
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73fb      	strb	r3, [r7, #15]
 80069b8:	e004      	b.n	80069c4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80069ba:	2302      	movs	r3, #2
 80069bc:	73fb      	strb	r3, [r7, #15]
 80069be:	e001      	b.n	80069c4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80069c0:	2302      	movs	r3, #2
 80069c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d204      	bcs.n	80069f8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80069f6:	e001      	b.n	80069fc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069f8:	2302      	movs	r3, #2
 80069fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	461a      	mov	r2, r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	70fb      	strb	r3, [r7, #3]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70bb      	strb	r3, [r7, #2]
 8006a20:	4613      	mov	r3, r2
 8006a22:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a32:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a34:	e025      	b.n	8006a82 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	221a      	movs	r2, #26
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	3308      	adds	r3, #8
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	3302      	adds	r3, #2
 8006a46:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	795b      	ldrb	r3, [r3, #5]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d002      	beq.n	8006a58 <USBH_FindInterface+0x4e>
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	2bff      	cmp	r3, #255	@ 0xff
 8006a56:	d111      	bne.n	8006a7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a5c:	78ba      	ldrb	r2, [r7, #2]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d002      	beq.n	8006a68 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a62:	78bb      	ldrb	r3, [r7, #2]
 8006a64:	2bff      	cmp	r3, #255	@ 0xff
 8006a66:	d109      	bne.n	8006a7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a6c:	787a      	ldrb	r2, [r7, #1]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d002      	beq.n	8006a78 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a72:	787b      	ldrb	r3, [r7, #1]
 8006a74:	2bff      	cmp	r3, #255	@ 0xff
 8006a76:	d101      	bne.n	8006a7c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	e006      	b.n	8006a8a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d9d6      	bls.n	8006a36 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a88:	23ff      	movs	r3, #255	@ 0xff
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fcf4 	bl	800848c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fe0d 	bl	80086c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af04      	add	r7, sp, #16
 8006abe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d102      	bne.n	8006ada <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b0b      	cmp	r3, #11
 8006ae2:	f200 81bb 	bhi.w	8006e5c <USBH_Process+0x3a4>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <USBH_Process+0x34>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b1d 	.word	0x08006b1d
 8006af0:	08006b4f 	.word	0x08006b4f
 8006af4:	08006bb7 	.word	0x08006bb7
 8006af8:	08006df7 	.word	0x08006df7
 8006afc:	08006e5d 	.word	0x08006e5d
 8006b00:	08006c57 	.word	0x08006c57
 8006b04:	08006d9d 	.word	0x08006d9d
 8006b08:	08006c8d 	.word	0x08006c8d
 8006b0c:	08006cad 	.word	0x08006cad
 8006b10:	08006ccb 	.word	0x08006ccb
 8006b14:	08006d0f 	.word	0x08006d0f
 8006b18:	08006ddf 	.word	0x08006ddf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 819b 	beq.w	8006e60 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b30:	20c8      	movs	r0, #200	@ 0xc8
 8006b32:	f001 fe12 	bl	800875a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fd05 	bl	8008546 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b4c:	e188      	b.n	8006e60 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d107      	bne.n	8006b68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b66:	e18a      	b.n	8006e7e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b72:	d914      	bls.n	8006b9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d903      	bls.n	8006b96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	220d      	movs	r2, #13
 8006b92:	701a      	strb	r2, [r3, #0]
      break;
 8006b94:	e173      	b.n	8006e7e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	701a      	strb	r2, [r3, #0]
      break;
 8006b9c:	e16f      	b.n	8006e7e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006ba4:	f103 020a 	add.w	r2, r3, #10
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006bae:	200a      	movs	r0, #10
 8006bb0:	f001 fdd3 	bl	800875a <USBH_Delay>
      break;
 8006bb4:	e163      	b.n	8006e7e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006bcc:	2064      	movs	r0, #100	@ 0x64
 8006bce:	f001 fdc4 	bl	800875a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fc90 	bl	80084f8 <USBH_LL_GetSpeed>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2205      	movs	r2, #5
 8006be6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006be8:	2100      	movs	r1, #0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fa9b 	bl	8008126 <USBH_AllocPipe>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006bf8:	2180      	movs	r1, #128	@ 0x80
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fa93 	bl	8008126 <USBH_AllocPipe>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7919      	ldrb	r1, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c1c:	9202      	str	r2, [sp, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	4603      	mov	r3, r0
 8006c26:	2280      	movs	r2, #128	@ 0x80
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fa4d 	bl	80080c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7959      	ldrb	r1, [r3, #5]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c42:	9202      	str	r2, [sp, #8]
 8006c44:	2200      	movs	r2, #0
 8006c46:	9201      	str	r2, [sp, #4]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fa3a 	bl	80080c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c54:	e113      	b.n	8006e7e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f916 	bl	8006e88 <USBH_HandleEnum>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 80fd 	bne.w	8006e64 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d103      	bne.n	8006c84 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2208      	movs	r2, #8
 8006c80:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c82:	e0ef      	b.n	8006e64 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2207      	movs	r2, #7
 8006c88:	701a      	strb	r2, [r3, #0]
      break;
 8006c8a:	e0eb      	b.n	8006e64 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80e8 	beq.w	8006e68 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2208      	movs	r2, #8
 8006ca8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006caa:	e0dd      	b.n	8006e68 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc3a 	bl	800752e <USBH_SetCfg>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 80d5 	bne.w	8006e6c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2209      	movs	r2, #9
 8006cc6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cc8:	e0d0      	b.n	8006e6c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d016      	beq.n	8006d06 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006cd8:	2101      	movs	r1, #1
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fc4a 	bl	8007574 <USBH_SetFeature>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	220a      	movs	r2, #10
 8006cf0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cf2:	e0bd      	b.n	8006e70 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	f040 80b9 	bne.w	8006e70 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	220a      	movs	r2, #10
 8006d02:	701a      	strb	r2, [r3, #0]
      break;
 8006d04:	e0b4      	b.n	8006e70 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	220a      	movs	r2, #10
 8006d0a:	701a      	strb	r2, [r3, #0]
      break;
 8006d0c:	e0b0      	b.n	8006e70 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80ad 	beq.w	8006e74 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
 8006d26:	e016      	b.n	8006d56 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d28:	7bfa      	ldrb	r2, [r7, #15]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	32de      	adds	r2, #222	@ 0xde
 8006d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d32:	791a      	ldrb	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d108      	bne.n	8006d50 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d3e:	7bfa      	ldrb	r2, [r7, #15]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	32de      	adds	r2, #222	@ 0xde
 8006d44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006d4e:	e005      	b.n	8006d5c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	3301      	adds	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0e5      	beq.n	8006d28 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d016      	beq.n	8006d94 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2206      	movs	r2, #6
 8006d7c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d84:	2103      	movs	r1, #3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d8a:	e073      	b.n	8006e74 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	220d      	movs	r2, #13
 8006d90:	701a      	strb	r2, [r3, #0]
      break;
 8006d92:	e06f      	b.n	8006e74 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220d      	movs	r2, #13
 8006d98:	701a      	strb	r2, [r3, #0]
      break;
 8006d9a:	e06b      	b.n	8006e74 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d017      	beq.n	8006dd6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220b      	movs	r2, #11
 8006dc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dc4:	e058      	b.n	8006e78 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d154      	bne.n	8006e78 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220d      	movs	r2, #13
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e050      	b.n	8006e78 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	220d      	movs	r2, #13
 8006dda:	701a      	strb	r2, [r3, #0]
      break;
 8006ddc:	e04c      	b.n	8006e78 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d049      	beq.n	8006e7c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
      }
      break;
 8006df4:	e042      	b.n	8006e7c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fd4a 	bl	8006898 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e32:	2105      	movs	r1, #5
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d107      	bne.n	8006e54 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff fe22 	bl	8006a96 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e52:	e014      	b.n	8006e7e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fb19 	bl	800848c <USBH_LL_Start>
      break;
 8006e5a:	e010      	b.n	8006e7e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e5c:	bf00      	nop
 8006e5e:	e00e      	b.n	8006e7e <USBH_Process+0x3c6>
      break;
 8006e60:	bf00      	nop
 8006e62:	e00c      	b.n	8006e7e <USBH_Process+0x3c6>
      break;
 8006e64:	bf00      	nop
 8006e66:	e00a      	b.n	8006e7e <USBH_Process+0x3c6>
    break;
 8006e68:	bf00      	nop
 8006e6a:	e008      	b.n	8006e7e <USBH_Process+0x3c6>
      break;
 8006e6c:	bf00      	nop
 8006e6e:	e006      	b.n	8006e7e <USBH_Process+0x3c6>
      break;
 8006e70:	bf00      	nop
 8006e72:	e004      	b.n	8006e7e <USBH_Process+0x3c6>
      break;
 8006e74:	bf00      	nop
 8006e76:	e002      	b.n	8006e7e <USBH_Process+0x3c6>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e000      	b.n	8006e7e <USBH_Process+0x3c6>
      break;
 8006e7c:	bf00      	nop
  }
  return USBH_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e90:	2301      	movs	r3, #1
 8006e92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	2b07      	cmp	r3, #7
 8006e9e:	f200 81bd 	bhi.w	800721c <USBH_HandleEnum+0x394>
 8006ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <USBH_HandleEnum+0x20>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ec9 	.word	0x08006ec9
 8006eac:	08006f83 	.word	0x08006f83
 8006eb0:	08006fed 	.word	0x08006fed
 8006eb4:	08007077 	.word	0x08007077
 8006eb8:	080070e1 	.word	0x080070e1
 8006ebc:	08007151 	.word	0x08007151
 8006ec0:	08007197 	.word	0x08007197
 8006ec4:	080071dd 	.word	0x080071dd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ec8:	2108      	movs	r1, #8
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa4c 	bl	8007368 <USBH_Get_DevDesc>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d12e      	bne.n	8006f38 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	7919      	ldrb	r1, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006efe:	9202      	str	r2, [sp, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	9201      	str	r2, [sp, #4]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	4603      	mov	r3, r0
 8006f08:	2280      	movs	r2, #128	@ 0x80
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 f8dc 	bl	80080c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	7959      	ldrb	r1, [r3, #5]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f24:	9202      	str	r2, [sp, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	9201      	str	r2, [sp, #4]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2200      	movs	r2, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 f8c9 	bl	80080c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f36:	e173      	b.n	8007220 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	f040 8170 	bne.w	8007220 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f46:	3301      	adds	r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d903      	bls.n	8006f62 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	220d      	movs	r2, #13
 8006f5e:	701a      	strb	r2, [r3, #0]
      break;
 8006f60:	e15e      	b.n	8007220 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	795b      	ldrb	r3, [r3, #5]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f8fd 	bl	8008168 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f8f7 	bl	8008168 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
      break;
 8006f80:	e14e      	b.n	8007220 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f82:	2112      	movs	r1, #18
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f9ef 	bl	8007368 <USBH_Get_DevDesc>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f9a:	e143      	b.n	8007224 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	f040 8140 	bne.w	8007224 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006faa:	3301      	adds	r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d903      	bls.n	8006fc6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	220d      	movs	r2, #13
 8006fc2:	701a      	strb	r2, [r3, #0]
      break;
 8006fc4:	e12e      	b.n	8007224 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	795b      	ldrb	r3, [r3, #5]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 f8cb 	bl	8008168 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f8c5 	bl	8008168 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
      break;
 8006fea:	e11b      	b.n	8007224 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006fec:	2101      	movs	r1, #1
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa79 	bl	80074e6 <USBH_SetAddress>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d130      	bne.n	8007060 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006ffe:	2002      	movs	r0, #2
 8007000:	f001 fbab 	bl	800875a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2203      	movs	r2, #3
 8007010:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7919      	ldrb	r1, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007026:	9202      	str	r2, [sp, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	9201      	str	r2, [sp, #4]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	4603      	mov	r3, r0
 8007030:	2280      	movs	r2, #128	@ 0x80
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 f848 	bl	80080c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	7959      	ldrb	r1, [r3, #5]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	2200      	movs	r2, #0
 8007050:	9201      	str	r2, [sp, #4]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4603      	mov	r3, r0
 8007056:	2200      	movs	r2, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f835 	bl	80080c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800705e:	e0e3      	b.n	8007228 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b03      	cmp	r3, #3
 8007064:	f040 80e0 	bne.w	8007228 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	220d      	movs	r2, #13
 800706c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	705a      	strb	r2, [r3, #1]
      break;
 8007074:	e0d8      	b.n	8007228 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007076:	2109      	movs	r1, #9
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f9a1 	bl	80073c0 <USBH_Get_CfgDesc>
 800707e:	4603      	mov	r3, r0
 8007080:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2204      	movs	r2, #4
 800708c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800708e:	e0cd      	b.n	800722c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b03      	cmp	r3, #3
 8007094:	f040 80ca 	bne.w	800722c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800709e:	3301      	adds	r3, #1
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d903      	bls.n	80070ba <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	220d      	movs	r2, #13
 80070b6:	701a      	strb	r2, [r3, #0]
      break;
 80070b8:	e0b8      	b.n	800722c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	795b      	ldrb	r3, [r3, #5]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f851 	bl	8008168 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	791b      	ldrb	r3, [r3, #4]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f84b 	bl	8008168 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	701a      	strb	r2, [r3, #0]
      break;
 80070de:	e0a5      	b.n	800722c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f969 	bl	80073c0 <USBH_Get_CfgDesc>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2205      	movs	r2, #5
 80070fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070fe:	e097      	b.n	8007230 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b03      	cmp	r3, #3
 8007104:	f040 8094 	bne.w	8007230 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800710e:	3301      	adds	r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800711e:	2b03      	cmp	r3, #3
 8007120:	d903      	bls.n	800712a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	220d      	movs	r2, #13
 8007126:	701a      	strb	r2, [r3, #0]
      break;
 8007128:	e082      	b.n	8007230 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	795b      	ldrb	r3, [r3, #5]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f819 	bl	8008168 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	791b      	ldrb	r3, [r3, #4]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f813 	bl	8008168 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
      break;
 800714e:	e06f      	b.n	8007230 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007156:	2b00      	cmp	r3, #0
 8007158:	d019      	beq.n	800718e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007166:	23ff      	movs	r3, #255	@ 0xff
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f953 	bl	8007414 <USBH_Get_StringDesc>
 800716e:	4603      	mov	r3, r0
 8007170:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2206      	movs	r2, #6
 800717c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800717e:	e059      	b.n	8007234 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b03      	cmp	r3, #3
 8007184:	d156      	bne.n	8007234 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2206      	movs	r2, #6
 800718a:	705a      	strb	r2, [r3, #1]
      break;
 800718c:	e052      	b.n	8007234 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2206      	movs	r2, #6
 8007192:	705a      	strb	r2, [r3, #1]
      break;
 8007194:	e04e      	b.n	8007234 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800719c:	2b00      	cmp	r3, #0
 800719e:	d019      	beq.n	80071d4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80071ac:	23ff      	movs	r3, #255	@ 0xff
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f930 	bl	8007414 <USBH_Get_StringDesc>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2207      	movs	r2, #7
 80071c2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071c4:	e038      	b.n	8007238 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d135      	bne.n	8007238 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2207      	movs	r2, #7
 80071d0:	705a      	strb	r2, [r3, #1]
      break;
 80071d2:	e031      	b.n	8007238 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2207      	movs	r2, #7
 80071d8:	705a      	strb	r2, [r3, #1]
      break;
 80071da:	e02d      	b.n	8007238 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d017      	beq.n	8007216 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80071f2:	23ff      	movs	r3, #255	@ 0xff
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f90d 	bl	8007414 <USBH_Get_StringDesc>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007208:	e018      	b.n	800723c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d115      	bne.n	800723c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]
      break;
 8007214:	e012      	b.n	800723c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
      break;
 800721a:	e00f      	b.n	800723c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800721c:	bf00      	nop
 800721e:	e00e      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 8007220:	bf00      	nop
 8007222:	e00c      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 8007224:	bf00      	nop
 8007226:	e00a      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 8007228:	bf00      	nop
 800722a:	e008      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 800722c:	bf00      	nop
 800722e:	e006      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 8007230:	bf00      	nop
 8007232:	e004      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 8007234:	bf00      	nop
 8007236:	e002      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <USBH_HandleEnum+0x3b6>
      break;
 800723c:	bf00      	nop
  }
  return Status;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f804 	bl	800728a <USBH_HandleSof>
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b0b      	cmp	r3, #11
 800729a:	d10a      	bne.n	80072b2 <USBH_HandleSof+0x28>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
  }
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80072ca:	bf00      	nop
}
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80072e6:	bf00      	nop
}
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f8be 	bl	80084c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	791b      	ldrb	r3, [r3, #4]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 ff0b 	bl	8008168 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	795b      	ldrb	r3, [r3, #5]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 ff05 	bl	8008168 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af02      	add	r7, sp, #8
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800737a:	d901      	bls.n	8007380 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800737c:	2303      	movs	r3, #3
 800737e:	e01b      	b.n	80073b8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007386:	887b      	ldrh	r3, [r7, #2]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	4613      	mov	r3, r2
 800738c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007390:	2100      	movs	r1, #0
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f872 	bl	800747c <USBH_GetDescriptor>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80073a8:	887a      	ldrh	r2, [r7, #2]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f929 	bl	8007604 <USBH_ParseDevDesc>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	331c      	adds	r3, #28
 80073d0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80073d2:	887b      	ldrh	r3, [r7, #2]
 80073d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d8:	d901      	bls.n	80073de <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80073da:	2303      	movs	r3, #3
 80073dc:	e016      	b.n	800740c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80073de:	887b      	ldrh	r3, [r7, #2]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f846 	bl	800747c <USBH_GetDescriptor>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80073fa:	887b      	ldrh	r3, [r7, #2]
 80073fc:	461a      	mov	r2, r3
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9af 	bl	8007764 <USBH_ParseCfgDesc>
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	461a      	mov	r2, r3
 8007420:	460b      	mov	r3, r1
 8007422:	72fb      	strb	r3, [r7, #11]
 8007424:	4613      	mov	r3, r2
 8007426:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007428:	893b      	ldrh	r3, [r7, #8]
 800742a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800742e:	d802      	bhi.n	8007436 <USBH_Get_StringDesc+0x22>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007436:	2303      	movs	r3, #3
 8007438:	e01c      	b.n	8007474 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	b29b      	uxth	r3, r3
 800743e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007442:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800744a:	893b      	ldrh	r3, [r7, #8]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	460b      	mov	r3, r1
 8007450:	2100      	movs	r1, #0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f812 	bl	800747c <USBH_GetDescriptor>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d107      	bne.n	8007472 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007468:	893a      	ldrh	r2, [r7, #8]
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fb8d 	bl	8007b8c <USBH_ParseStringDesc>
  }

  return status;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	72fb      	strb	r3, [r7, #11]
 800748a:	4613      	mov	r3, r2
 800748c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	789b      	ldrb	r3, [r3, #2]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d11c      	bne.n	80074d0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800749c:	b2da      	uxtb	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2206      	movs	r2, #6
 80074a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	893a      	ldrh	r2, [r7, #8]
 80074ac:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80074ae:	893b      	ldrh	r3, [r7, #8]
 80074b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80074b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074b8:	d104      	bne.n	80074c4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f240 4209 	movw	r2, #1033	@ 0x409
 80074c0:	829a      	strh	r2, [r3, #20]
 80074c2:	e002      	b.n	80074ca <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8b3a      	ldrh	r2, [r7, #24]
 80074ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80074d0:	8b3b      	ldrh	r3, [r7, #24]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fba5 	bl	8007c26 <USBH_CtlReq>
 80074dc:	4603      	mov	r3, r0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	789b      	ldrb	r3, [r3, #2]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d10f      	bne.n	800751a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2205      	movs	r2, #5
 8007504:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	b29a      	uxth	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800751a:	2200      	movs	r2, #0
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fb81 	bl	8007c26 <USBH_CtlReq>
 8007524:	4603      	mov	r3, r0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	789b      	ldrb	r3, [r3, #2]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10e      	bne.n	8007560 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2209      	movs	r2, #9
 800754c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	887a      	ldrh	r2, [r7, #2]
 8007552:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fb5e 	bl	8007c26 <USBH_CtlReq>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	789b      	ldrb	r3, [r3, #2]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d10f      	bne.n	80075a8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2203      	movs	r2, #3
 8007592:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075a8:	2200      	movs	r2, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fb3a 	bl	8007c26 <USBH_CtlReq>
 80075b2:	4603      	mov	r3, r0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	789b      	ldrb	r3, [r3, #2]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d10f      	bne.n	80075f0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075f0:	2200      	movs	r2, #0
 80075f2:	2100      	movs	r1, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fb16 	bl	8007c26 <USBH_CtlReq>
 80075fa:	4603      	mov	r3, r0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007618:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007624:	2302      	movs	r3, #2
 8007626:	e094      	b.n	8007752 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	781a      	ldrb	r2, [r3, #0]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	785a      	ldrb	r2, [r3, #1]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3302      	adds	r3, #2
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3303      	adds	r3, #3
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	b29b      	uxth	r3, r3
 800764a:	4313      	orrs	r3, r2
 800764c:	b29a      	uxth	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	791a      	ldrb	r2, [r3, #4]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	795a      	ldrb	r2, [r3, #5]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	799a      	ldrb	r2, [r3, #6]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	79da      	ldrb	r2, [r3, #7]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007682:	2b01      	cmp	r3, #1
 8007684:	d11b      	bne.n	80076be <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	79db      	ldrb	r3, [r3, #7]
 800768a:	2b20      	cmp	r3, #32
 800768c:	dc0f      	bgt.n	80076ae <USBH_ParseDevDesc+0xaa>
 800768e:	2b08      	cmp	r3, #8
 8007690:	db0f      	blt.n	80076b2 <USBH_ParseDevDesc+0xae>
 8007692:	3b08      	subs	r3, #8
 8007694:	4a32      	ldr	r2, [pc, #200]	@ (8007760 <USBH_ParseDevDesc+0x15c>)
 8007696:	fa22 f303 	lsr.w	r3, r2, r3
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf14      	ite	ne
 80076a2:	2301      	movne	r3, #1
 80076a4:	2300      	moveq	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d106      	bne.n	80076ba <USBH_ParseDevDesc+0xb6>
 80076ac:	e001      	b.n	80076b2 <USBH_ParseDevDesc+0xae>
 80076ae:	2b40      	cmp	r3, #64	@ 0x40
 80076b0:	d003      	beq.n	80076ba <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2208      	movs	r2, #8
 80076b6:	71da      	strb	r2, [r3, #7]
        break;
 80076b8:	e000      	b.n	80076bc <USBH_ParseDevDesc+0xb8>
        break;
 80076ba:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80076bc:	e00e      	b.n	80076dc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d107      	bne.n	80076d8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	79db      	ldrb	r3, [r3, #7]
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d005      	beq.n	80076dc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2208      	movs	r2, #8
 80076d4:	71da      	strb	r2, [r3, #7]
 80076d6:	e001      	b.n	80076dc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80076d8:	2303      	movs	r3, #3
 80076da:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d936      	bls.n	8007750 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3308      	adds	r3, #8
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	3309      	adds	r3, #9
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	4313      	orrs	r3, r2
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	330a      	adds	r3, #10
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	330b      	adds	r3, #11
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	b29b      	uxth	r3, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	330c      	adds	r3, #12
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	330d      	adds	r3, #13
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	b29b      	uxth	r3, r3
 8007728:	4313      	orrs	r3, r2
 800772a:	b29a      	uxth	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	7b9a      	ldrb	r2, [r3, #14]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	7bda      	ldrb	r2, [r3, #15]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	7c1a      	ldrb	r2, [r3, #16]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	7c5a      	ldrb	r2, [r3, #17]
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
}
 8007752:	4618      	mov	r0, r3
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	01000101 	.word	0x01000101

08007764 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08c      	sub	sp, #48	@ 0x30
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007778:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007792:	2302      	movs	r3, #2
 8007794:	e0da      	b.n	800794c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	785a      	ldrb	r2, [r3, #1]
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	3302      	adds	r3, #2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3303      	adds	r3, #3
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077c4:	bf28      	it	cs
 80077c6:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	791a      	ldrb	r2, [r3, #4]
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	795a      	ldrb	r2, [r3, #5]
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	799a      	ldrb	r2, [r3, #6]
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	79da      	ldrb	r2, [r3, #7]
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	7a1a      	ldrb	r2, [r3, #8]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d002      	beq.n	8007806 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	2209      	movs	r2, #9
 8007804:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b09      	cmp	r3, #9
 800780a:	f240 809d 	bls.w	8007948 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800780e:	2309      	movs	r3, #9
 8007810:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007816:	e081      	b.n	800791c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007818:	f107 0316 	add.w	r3, r7, #22
 800781c:	4619      	mov	r1, r3
 800781e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007820:	f000 f9e7 	bl	8007bf2 <USBH_GetNextDesc>
 8007824:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	785b      	ldrb	r3, [r3, #1]
 800782a:	2b04      	cmp	r3, #4
 800782c:	d176      	bne.n	800791c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b09      	cmp	r3, #9
 8007834:	d002      	beq.n	800783c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007838:	2209      	movs	r2, #9
 800783a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800783c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007840:	221a      	movs	r2, #26
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	3308      	adds	r3, #8
 8007848:	6a3a      	ldr	r2, [r7, #32]
 800784a:	4413      	add	r3, r2
 800784c:	3302      	adds	r3, #2
 800784e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007852:	69f8      	ldr	r0, [r7, #28]
 8007854:	f000 f87e 	bl	8007954 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007862:	e043      	b.n	80078ec <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007864:	f107 0316 	add.w	r3, r7, #22
 8007868:	4619      	mov	r1, r3
 800786a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800786c:	f000 f9c1 	bl	8007bf2 <USBH_GetNextDesc>
 8007870:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b05      	cmp	r3, #5
 8007878:	d138      	bne.n	80078ec <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	795b      	ldrb	r3, [r3, #5]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d113      	bne.n	80078aa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007886:	2b02      	cmp	r3, #2
 8007888:	d003      	beq.n	8007892 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	799b      	ldrb	r3, [r3, #6]
 800788e:	2b03      	cmp	r3, #3
 8007890:	d10b      	bne.n	80078aa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	79db      	ldrb	r3, [r3, #7]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <USBH_ParseCfgDesc+0x14e>
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d007      	beq.n	80078b2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	2209      	movs	r2, #9
 80078a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80078a8:	e003      	b.n	80078b2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	2207      	movs	r2, #7
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	e000      	b.n	80078b4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80078b2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80078b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80078bc:	3201      	adds	r2, #1
 80078be:	00d2      	lsls	r2, r2, #3
 80078c0:	211a      	movs	r1, #26
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	4413      	add	r3, r2
 80078c8:	3308      	adds	r3, #8
 80078ca:	6a3a      	ldr	r2, [r7, #32]
 80078cc:	4413      	add	r3, r2
 80078ce:	3304      	adds	r3, #4
 80078d0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80078d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078d4:	69b9      	ldr	r1, [r7, #24]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f870 	bl	80079bc <USBH_ParseEPDesc>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80078e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078e6:	3301      	adds	r3, #1
 80078e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d204      	bcs.n	8007902 <USBH_ParseCfgDesc+0x19e>
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	885a      	ldrh	r2, [r3, #2]
 80078fc:	8afb      	ldrh	r3, [r7, #22]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d8b0      	bhi.n	8007864 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800790a:	429a      	cmp	r2, r3
 800790c:	d201      	bcs.n	8007912 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800790e:	2303      	movs	r3, #3
 8007910:	e01c      	b.n	800794c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007916:	3301      	adds	r3, #1
 8007918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800791c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007920:	2b01      	cmp	r3, #1
 8007922:	d805      	bhi.n	8007930 <USBH_ParseCfgDesc+0x1cc>
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	885a      	ldrh	r2, [r3, #2]
 8007928:	8afb      	ldrh	r3, [r7, #22]
 800792a:	429a      	cmp	r2, r3
 800792c:	f63f af74 	bhi.w	8007818 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	791b      	ldrb	r3, [r3, #4]
 8007934:	2b02      	cmp	r3, #2
 8007936:	bf28      	it	cs
 8007938:	2302      	movcs	r3, #2
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007940:	429a      	cmp	r2, r3
 8007942:	d201      	bcs.n	8007948 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007944:	2303      	movs	r3, #3
 8007946:	e001      	b.n	800794c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800794c:	4618      	mov	r0, r3
 800794e:	3730      	adds	r7, #48	@ 0x30
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	785a      	ldrb	r2, [r3, #1]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	789a      	ldrb	r2, [r3, #2]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	78da      	ldrb	r2, [r3, #3]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	3304      	adds	r3, #4
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b02      	cmp	r3, #2
 8007986:	bf28      	it	cs
 8007988:	2302      	movcs	r3, #2
 800798a:	b2da      	uxtb	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	795a      	ldrb	r2, [r3, #5]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	799a      	ldrb	r2, [r3, #6]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	79da      	ldrb	r2, [r3, #7]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	7a1a      	ldrb	r2, [r3, #8]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	721a      	strb	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	781a      	ldrb	r2, [r3, #0]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	785a      	ldrb	r2, [r3, #1]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	789a      	ldrb	r2, [r3, #2]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	78da      	ldrb	r2, [r3, #3]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3304      	adds	r3, #4
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3305      	adds	r3, #5
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	799a      	ldrb	r2, [r3, #6]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	889b      	ldrh	r3, [r3, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a1e:	d804      	bhi.n	8007a2a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a28:	d901      	bls.n	8007a2e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d136      	bne.n	8007aa6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	78db      	ldrb	r3, [r3, #3]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d108      	bne.n	8007a56 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	889b      	ldrh	r3, [r3, #4]
 8007a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a4c:	f240 8097 	bls.w	8007b7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a50:	2303      	movs	r3, #3
 8007a52:	75fb      	strb	r3, [r7, #23]
 8007a54:	e093      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	78db      	ldrb	r3, [r3, #3]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d107      	bne.n	8007a72 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	889b      	ldrh	r3, [r3, #4]
 8007a66:	2b40      	cmp	r3, #64	@ 0x40
 8007a68:	f240 8089 	bls.w	8007b7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	75fb      	strb	r3, [r7, #23]
 8007a70:	e085      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	78db      	ldrb	r3, [r3, #3]
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d005      	beq.n	8007a8a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	78db      	ldrb	r3, [r3, #3]
 8007a82:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d10a      	bne.n	8007aa0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	799b      	ldrb	r3, [r3, #6]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <USBH_ParseEPDesc+0xde>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	799b      	ldrb	r3, [r3, #6]
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d970      	bls.n	8007b7c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a9e:	e06d      	b.n	8007b7c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	75fb      	strb	r3, [r7, #23]
 8007aa4:	e06b      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d13c      	bne.n	8007b2a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	78db      	ldrb	r3, [r3, #3]
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d005      	beq.n	8007ac8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	78db      	ldrb	r3, [r3, #3]
 8007ac0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	889b      	ldrh	r3, [r3, #4]
 8007acc:	2b40      	cmp	r3, #64	@ 0x40
 8007ace:	d956      	bls.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ad4:	e053      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	78db      	ldrb	r3, [r3, #3]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10e      	bne.n	8007b00 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	799b      	ldrb	r3, [r3, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d803      	bhi.n	8007afa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007af6:	2b40      	cmp	r3, #64	@ 0x40
 8007af8:	d941      	bls.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007afa:	2303      	movs	r3, #3
 8007afc:	75fb      	strb	r3, [r7, #23]
 8007afe:	e03e      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	78db      	ldrb	r3, [r3, #3]
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d10b      	bne.n	8007b24 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	799b      	ldrb	r3, [r3, #6]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <USBH_ParseEPDesc+0x162>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	889b      	ldrh	r3, [r3, #4]
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1c:	d32f      	bcc.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	75fb      	strb	r3, [r7, #23]
 8007b22:	e02c      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b24:	2303      	movs	r3, #3
 8007b26:	75fb      	strb	r3, [r7, #23]
 8007b28:	e029      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d120      	bne.n	8007b76 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	889b      	ldrh	r3, [r3, #4]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d01a      	beq.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	75fb      	strb	r3, [r7, #23]
 8007b4c:	e017      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d10a      	bne.n	8007b70 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	799b      	ldrb	r3, [r3, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <USBH_ParseEPDesc+0x1ae>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	889b      	ldrh	r3, [r3, #4]
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	d909      	bls.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	75fb      	strb	r3, [r7, #23]
 8007b6e:	e006      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b70:	2303      	movs	r3, #3
 8007b72:	75fb      	strb	r3, [r7, #23]
 8007b74:	e003      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007b76:	2303      	movs	r3, #3
 8007b78:	75fb      	strb	r3, [r7, #23]
 8007b7a:	e000      	b.n	8007b7e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b7c:	bf00      	nop
  }

  return status;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d120      	bne.n	8007be6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	1e9a      	subs	r2, r3, #2
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	bf28      	it	cs
 8007bb0:	4613      	movcs	r3, r2
 8007bb2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007bba:	2300      	movs	r3, #0
 8007bbc:	82fb      	strh	r3, [r7, #22]
 8007bbe:	e00b      	b.n	8007bd8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bc0:	8afb      	ldrh	r3, [r7, #22]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007bd2:	8afb      	ldrh	r3, [r7, #22]
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	82fb      	strh	r3, [r7, #22]
 8007bd8:	8afa      	ldrh	r2, [r7, #22]
 8007bda:	8abb      	ldrh	r3, [r7, #20]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d3ef      	bcc.n	8007bc0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  }
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7812      	ldrb	r2, [r2, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4413      	add	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c18:	68fb      	ldr	r3, [r7, #12]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b086      	sub	sp, #24
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	4613      	mov	r3, r2
 8007c32:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c34:	2301      	movs	r3, #1
 8007c36:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d002      	beq.n	8007c46 <USBH_CtlReq+0x20>
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d00f      	beq.n	8007c64 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c44:	e027      	b.n	8007c96 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	88fa      	ldrh	r2, [r7, #6]
 8007c50:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
      break;
 8007c62:	e018      	b.n	8007c96 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f81b 	bl	8007ca0 <USBH_HandleControl>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <USBH_CtlReq+0x54>
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d106      	bne.n	8007c88 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	761a      	strb	r2, [r3, #24]
      break;
 8007c86:	e005      	b.n	8007c94 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d102      	bne.n	8007c94 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	709a      	strb	r2, [r3, #2]
      break;
 8007c94:	bf00      	nop
  }
  return status;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7e1b      	ldrb	r3, [r3, #24]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	2b0a      	cmp	r3, #10
 8007cb8:	f200 8156 	bhi.w	8007f68 <USBH_HandleControl+0x2c8>
 8007cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc4 <USBH_HandleControl+0x24>)
 8007cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc2:	bf00      	nop
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	08007d0b 	.word	0x08007d0b
 8007ccc:	08007d75 	.word	0x08007d75
 8007cd0:	08007d9b 	.word	0x08007d9b
 8007cd4:	08007dd3 	.word	0x08007dd3
 8007cd8:	08007dfd 	.word	0x08007dfd
 8007cdc:	08007e4f 	.word	0x08007e4f
 8007ce0:	08007e71 	.word	0x08007e71
 8007ce4:	08007ead 	.word	0x08007ead
 8007ce8:	08007ed3 	.word	0x08007ed3
 8007cec:	08007f11 	.word	0x08007f11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f103 0110 	add.w	r1, r3, #16
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	795b      	ldrb	r3, [r3, #5]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f943 	bl	8007f88 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	761a      	strb	r2, [r3, #24]
      break;
 8007d08:	e139      	b.n	8007f7e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	795b      	ldrb	r3, [r3, #5]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fcc5 	bl	80086a0 <USBH_LL_GetURBState>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d11e      	bne.n	8007d5e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7c1b      	ldrb	r3, [r3, #16]
 8007d24:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d28:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	8adb      	ldrh	r3, [r3, #22]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d32:	7b7b      	ldrb	r3, [r7, #13]
 8007d34:	2b80      	cmp	r3, #128	@ 0x80
 8007d36:	d103      	bne.n	8007d40 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d3e:	e115      	b.n	8007f6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2205      	movs	r2, #5
 8007d44:	761a      	strb	r2, [r3, #24]
      break;
 8007d46:	e111      	b.n	8007f6c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d48:	7b7b      	ldrb	r3, [r7, #13]
 8007d4a:	2b80      	cmp	r3, #128	@ 0x80
 8007d4c:	d103      	bne.n	8007d56 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2209      	movs	r2, #9
 8007d52:	761a      	strb	r2, [r3, #24]
      break;
 8007d54:	e10a      	b.n	8007f6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2207      	movs	r2, #7
 8007d5a:	761a      	strb	r2, [r3, #24]
      break;
 8007d5c:	e106      	b.n	8007f6c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d003      	beq.n	8007d6c <USBH_HandleControl+0xcc>
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	f040 8100 	bne.w	8007f6c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	220b      	movs	r2, #11
 8007d70:	761a      	strb	r2, [r3, #24]
      break;
 8007d72:	e0fb      	b.n	8007f6c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6899      	ldr	r1, [r3, #8]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	899a      	ldrh	r2, [r3, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	791b      	ldrb	r3, [r3, #4]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f93a 	bl	8008006 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2204      	movs	r2, #4
 8007d96:	761a      	strb	r2, [r3, #24]
      break;
 8007d98:	e0f1      	b.n	8007f7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	791b      	ldrb	r3, [r3, #4]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fc7d 	bl	80086a0 <USBH_LL_GetURBState>
 8007da6:	4603      	mov	r3, r0
 8007da8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d102      	bne.n	8007db6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2209      	movs	r2, #9
 8007db4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b05      	cmp	r3, #5
 8007dba:	d102      	bne.n	8007dc2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007dc0:	e0d6      	b.n	8007f70 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	f040 80d3 	bne.w	8007f70 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	220b      	movs	r2, #11
 8007dce:	761a      	strb	r2, [r3, #24]
      break;
 8007dd0:	e0ce      	b.n	8007f70 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6899      	ldr	r1, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	899a      	ldrh	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	795b      	ldrb	r3, [r3, #5]
 8007dde:	2001      	movs	r0, #1
 8007de0:	9000      	str	r0, [sp, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f8ea 	bl	8007fbc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2206      	movs	r2, #6
 8007df8:	761a      	strb	r2, [r3, #24]
      break;
 8007dfa:	e0c0      	b.n	8007f7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	795b      	ldrb	r3, [r3, #5]
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fc4c 	bl	80086a0 <USBH_LL_GetURBState>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d103      	bne.n	8007e1a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2207      	movs	r2, #7
 8007e16:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e18:	e0ac      	b.n	8007f74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b05      	cmp	r3, #5
 8007e1e:	d105      	bne.n	8007e2c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	220c      	movs	r2, #12
 8007e24:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e26:	2303      	movs	r3, #3
 8007e28:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2a:	e0a3      	b.n	8007f74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d103      	bne.n	8007e3a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2205      	movs	r2, #5
 8007e36:	761a      	strb	r2, [r3, #24]
      break;
 8007e38:	e09c      	b.n	8007f74 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	f040 8099 	bne.w	8007f74 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	220b      	movs	r2, #11
 8007e46:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e4c:	e092      	b.n	8007f74 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	791b      	ldrb	r3, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	2100      	movs	r1, #0
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f8d5 	bl	8008006 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	761a      	strb	r2, [r3, #24]

      break;
 8007e6e:	e086      	b.n	8007f7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	791b      	ldrb	r3, [r3, #4]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc12 	bl	80086a0 <USBH_LL_GetURBState>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d105      	bne.n	8007e92 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	220d      	movs	r2, #13
 8007e8a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e90:	e072      	b.n	8007f78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d103      	bne.n	8007ea0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	220b      	movs	r2, #11
 8007e9c:	761a      	strb	r2, [r3, #24]
      break;
 8007e9e:	e06b      	b.n	8007f78 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d168      	bne.n	8007f78 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eaa:	e065      	b.n	8007f78 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	795b      	ldrb	r3, [r3, #5]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	9200      	str	r2, [sp, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f87f 	bl	8007fbc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	220a      	movs	r2, #10
 8007ece:	761a      	strb	r2, [r3, #24]
      break;
 8007ed0:	e055      	b.n	8007f7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	795b      	ldrb	r3, [r3, #5]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fbe1 	bl	80086a0 <USBH_LL_GetURBState>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d105      	bne.n	8007ef4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	220d      	movs	r2, #13
 8007ef0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ef2:	e043      	b.n	8007f7c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d103      	bne.n	8007f02 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2209      	movs	r2, #9
 8007efe:	761a      	strb	r2, [r3, #24]
      break;
 8007f00:	e03c      	b.n	8007f7c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d139      	bne.n	8007f7c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	220b      	movs	r2, #11
 8007f0c:	761a      	strb	r2, [r3, #24]
      break;
 8007f0e:	e035      	b.n	8007f7c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7e5b      	ldrb	r3, [r3, #25]
 8007f14:	3301      	adds	r3, #1
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	765a      	strb	r2, [r3, #25]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	7e5b      	ldrb	r3, [r3, #25]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d806      	bhi.n	8007f32 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f30:	e025      	b.n	8007f7e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f38:	2106      	movs	r1, #6
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	795b      	ldrb	r3, [r3, #5]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f90c 	bl	8008168 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	791b      	ldrb	r3, [r3, #4]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f906 	bl	8008168 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f62:	2302      	movs	r3, #2
 8007f64:	73fb      	strb	r3, [r7, #15]
      break;
 8007f66:	e00a      	b.n	8007f7e <USBH_HandleControl+0x2de>

    default:
      break;
 8007f68:	bf00      	nop
 8007f6a:	e008      	b.n	8007f7e <USBH_HandleControl+0x2de>
      break;
 8007f6c:	bf00      	nop
 8007f6e:	e006      	b.n	8007f7e <USBH_HandleControl+0x2de>
      break;
 8007f70:	bf00      	nop
 8007f72:	e004      	b.n	8007f7e <USBH_HandleControl+0x2de>
      break;
 8007f74:	bf00      	nop
 8007f76:	e002      	b.n	8007f7e <USBH_HandleControl+0x2de>
      break;
 8007f78:	bf00      	nop
 8007f7a:	e000      	b.n	8007f7e <USBH_HandleControl+0x2de>
      break;
 8007f7c:	bf00      	nop
  }

  return status;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af04      	add	r7, sp, #16
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f96:	79f9      	ldrb	r1, [r7, #7]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	2308      	movs	r3, #8
 8007f9e:	9302      	str	r3, [sp, #8]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2200      	movs	r2, #0
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fb46 	bl	800863e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af04      	add	r7, sp, #16
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	460b      	mov	r3, r1
 8007fcc:	80fb      	strh	r3, [r7, #6]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fe0:	7979      	ldrb	r1, [r7, #5]
 8007fe2:	7e3b      	ldrb	r3, [r7, #24]
 8007fe4:	9303      	str	r3, [sp, #12]
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	9302      	str	r3, [sp, #8]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	2301      	movs	r3, #1
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 fb21 	bl	800863e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b088      	sub	sp, #32
 800800a:	af04      	add	r7, sp, #16
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	4611      	mov	r1, r2
 8008012:	461a      	mov	r2, r3
 8008014:	460b      	mov	r3, r1
 8008016:	80fb      	strh	r3, [r7, #6]
 8008018:	4613      	mov	r3, r2
 800801a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800801c:	7979      	ldrb	r1, [r7, #5]
 800801e:	2300      	movs	r3, #0
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	9302      	str	r3, [sp, #8]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	2301      	movs	r3, #1
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	2300      	movs	r3, #0
 8008030:	2201      	movs	r2, #1
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fb03 	bl	800863e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008038:	2300      	movs	r3, #0

}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b088      	sub	sp, #32
 8008046:	af04      	add	r7, sp, #16
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	4611      	mov	r1, r2
 800804e:	461a      	mov	r2, r3
 8008050:	460b      	mov	r3, r1
 8008052:	80fb      	strh	r3, [r7, #6]
 8008054:	4613      	mov	r3, r2
 8008056:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008066:	7979      	ldrb	r1, [r7, #5]
 8008068:	7e3b      	ldrb	r3, [r7, #24]
 800806a:	9303      	str	r3, [sp, #12]
 800806c:	88fb      	ldrh	r3, [r7, #6]
 800806e:	9302      	str	r3, [sp, #8]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	2301      	movs	r3, #1
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2302      	movs	r3, #2
 800807a:	2200      	movs	r2, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fade 	bl	800863e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af04      	add	r7, sp, #16
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4611      	mov	r1, r2
 8008098:	461a      	mov	r2, r3
 800809a:	460b      	mov	r3, r1
 800809c:	80fb      	strh	r3, [r7, #6]
 800809e:	4613      	mov	r3, r2
 80080a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080a2:	7979      	ldrb	r1, [r7, #5]
 80080a4:	2300      	movs	r3, #0
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	9302      	str	r3, [sp, #8]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	2301      	movs	r3, #1
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	2302      	movs	r3, #2
 80080b6:	2201      	movs	r2, #1
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fac0 	bl	800863e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af04      	add	r7, sp, #16
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	4603      	mov	r3, r0
 80080d8:	70fb      	strb	r3, [r7, #3]
 80080da:	460b      	mov	r3, r1
 80080dc:	70bb      	strb	r3, [r7, #2]
 80080de:	4613      	mov	r3, r2
 80080e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80080e2:	7878      	ldrb	r0, [r7, #1]
 80080e4:	78ba      	ldrb	r2, [r7, #2]
 80080e6:	78f9      	ldrb	r1, [r7, #3]
 80080e8:	8b3b      	ldrh	r3, [r7, #24]
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	7d3b      	ldrb	r3, [r7, #20]
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	7c3b      	ldrb	r3, [r7, #16]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	4603      	mov	r3, r0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa53 	bl	80085a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa72 	bl	8008600 <USBH_LL_ClosePipe>

  return USBH_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f836 	bl	80081a4 <USBH_GetFreePipe>
 8008138:	4603      	mov	r3, r0
 800813a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800813c:	89fb      	ldrh	r3, [r7, #14]
 800813e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008142:	4293      	cmp	r3, r2
 8008144:	d00a      	beq.n	800815c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	89fb      	ldrh	r3, [r7, #14]
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	33e0      	adds	r3, #224	@ 0xe0
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	440b      	add	r3, r1
 800815a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800815c:	89fb      	ldrh	r3, [r7, #14]
 800815e:	b2db      	uxtb	r3, r3
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	2b0f      	cmp	r3, #15
 8008178:	d80d      	bhi.n	8008196 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	33e0      	adds	r3, #224	@ 0xe0
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	78fb      	ldrb	r3, [r7, #3]
 8008188:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	33e0      	adds	r3, #224	@ 0xe0
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
 80081b4:	e00f      	b.n	80081d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	33e0      	adds	r3, #224	@ 0xe0
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	e007      	b.n	80081e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	3301      	adds	r3, #1
 80081d4:	73fb      	strb	r3, [r7, #15]
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2b0f      	cmp	r3, #15
 80081da:	d9ec      	bls.n	80081b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80081dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80081f0:	2201      	movs	r2, #1
 80081f2:	490e      	ldr	r1, [pc, #56]	@ (800822c <MX_USB_HOST_Init+0x40>)
 80081f4:	480e      	ldr	r0, [pc, #56]	@ (8008230 <MX_USB_HOST_Init+0x44>)
 80081f6:	f7fe fb15 	bl	8006824 <USBH_Init>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008200:	f7f8 fb72 	bl	80008e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008204:	490b      	ldr	r1, [pc, #44]	@ (8008234 <MX_USB_HOST_Init+0x48>)
 8008206:	480a      	ldr	r0, [pc, #40]	@ (8008230 <MX_USB_HOST_Init+0x44>)
 8008208:	f7fe fbb9 	bl	800697e <USBH_RegisterClass>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008212:	f7f8 fb69 	bl	80008e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008216:	4806      	ldr	r0, [pc, #24]	@ (8008230 <MX_USB_HOST_Init+0x44>)
 8008218:	f7fe fc3d 	bl	8006a96 <USBH_Start>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008222:	f7f8 fb61 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008226:	bf00      	nop
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	0800824d 	.word	0x0800824d
 8008230:	20000194 	.word	0x20000194
 8008234:	2000000c 	.word	0x2000000c

08008238 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800823c:	4802      	ldr	r0, [pc, #8]	@ (8008248 <MX_USB_HOST_Process+0x10>)
 800823e:	f7fe fc3b 	bl	8006ab8 <USBH_Process>
}
 8008242:	bf00      	nop
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000194 	.word	0x20000194

0800824c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	3b01      	subs	r3, #1
 800825c:	2b04      	cmp	r3, #4
 800825e:	d819      	bhi.n	8008294 <USBH_UserProcess+0x48>
 8008260:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <USBH_UserProcess+0x1c>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	08008295 	.word	0x08008295
 800826c:	08008285 	.word	0x08008285
 8008270:	08008295 	.word	0x08008295
 8008274:	0800828d 	.word	0x0800828d
 8008278:	0800827d 	.word	0x0800827d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800827c:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <USBH_UserProcess+0x58>)
 800827e:	2203      	movs	r2, #3
 8008280:	701a      	strb	r2, [r3, #0]
  break;
 8008282:	e008      	b.n	8008296 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008284:	4b07      	ldr	r3, [pc, #28]	@ (80082a4 <USBH_UserProcess+0x58>)
 8008286:	2202      	movs	r2, #2
 8008288:	701a      	strb	r2, [r3, #0]
  break;
 800828a:	e004      	b.n	8008296 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <USBH_UserProcess+0x58>)
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
  break;
 8008292:	e000      	b.n	8008296 <USBH_UserProcess+0x4a>

  default:
  break;
 8008294:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	2000056c 	.word	0x2000056c

080082a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	@ 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	605a      	str	r2, [r3, #4]
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082c8:	d147      	bne.n	800835a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	4b25      	ldr	r3, [pc, #148]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d2:	4a24      	ldr	r2, [pc, #144]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80082da:	4b22      	ldr	r3, [pc, #136]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 80082dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80082e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082f4:	f107 0314 	add.w	r3, r7, #20
 80082f8:	4619      	mov	r1, r3
 80082fa:	481b      	ldr	r0, [pc, #108]	@ (8008368 <HAL_HCD_MspInit+0xc0>)
 80082fc:	f7f8 fe86 	bl	800100c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008300:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008306:	2302      	movs	r3, #2
 8008308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800830e:	2300      	movs	r3, #0
 8008310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008312:	230a      	movs	r3, #10
 8008314:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008316:	f107 0314 	add.w	r3, r7, #20
 800831a:	4619      	mov	r1, r3
 800831c:	4812      	ldr	r0, [pc, #72]	@ (8008368 <HAL_HCD_MspInit+0xc0>)
 800831e:	f7f8 fe75 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008322:	4b10      	ldr	r3, [pc, #64]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 8008324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008326:	4a0f      	ldr	r2, [pc, #60]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 8008328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832c:	6353      	str	r3, [r2, #52]	@ 0x34
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	4b0c      	ldr	r3, [pc, #48]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 8008334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008336:	4a0b      	ldr	r2, [pc, #44]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 8008338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800833c:	6453      	str	r3, [r2, #68]	@ 0x44
 800833e:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <HAL_HCD_MspInit+0xbc>)
 8008340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	2043      	movs	r0, #67	@ 0x43
 8008350:	f7f8 fe25 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008354:	2043      	movs	r0, #67	@ 0x43
 8008356:	f7f8 fe3e 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800835a:	bf00      	nop
 800835c:	3728      	adds	r7, #40	@ 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40023800 	.word	0x40023800
 8008368:	40020000 	.word	0x40020000

0800836c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe ff73 	bl	8007266 <USBH_LL_IncTimer>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe ffab 	bl	80072f2 <USBH_LL_Connect>
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe ffb4 	bl	8007320 <USBH_LL_Disconnect>
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
 80083cc:	4613      	mov	r3, r2
 80083ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe ff65 	bl	80072ba <USBH_LL_PortEnabled>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe ff65 	bl	80072d6 <USBH_LL_PortDisabled>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008422:	2b01      	cmp	r3, #1
 8008424:	d12a      	bne.n	800847c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008426:	4a18      	ldr	r2, [pc, #96]	@ (8008488 <USBH_LL_Init+0x74>)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a15      	ldr	r2, [pc, #84]	@ (8008488 <USBH_LL_Init+0x74>)
 8008432:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008436:	4b14      	ldr	r3, [pc, #80]	@ (8008488 <USBH_LL_Init+0x74>)
 8008438:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800843c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800843e:	4b12      	ldr	r3, [pc, #72]	@ (8008488 <USBH_LL_Init+0x74>)
 8008440:	2208      	movs	r2, #8
 8008442:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008444:	4b10      	ldr	r3, [pc, #64]	@ (8008488 <USBH_LL_Init+0x74>)
 8008446:	2201      	movs	r2, #1
 8008448:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800844a:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <USBH_LL_Init+0x74>)
 800844c:	2200      	movs	r2, #0
 800844e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008450:	4b0d      	ldr	r3, [pc, #52]	@ (8008488 <USBH_LL_Init+0x74>)
 8008452:	2202      	movs	r2, #2
 8008454:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008456:	4b0c      	ldr	r3, [pc, #48]	@ (8008488 <USBH_LL_Init+0x74>)
 8008458:	2200      	movs	r2, #0
 800845a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800845c:	480a      	ldr	r0, [pc, #40]	@ (8008488 <USBH_LL_Init+0x74>)
 800845e:	f7f8 ff8a 	bl	8001376 <HAL_HCD_Init>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008468:	f7f8 fa3e 	bl	80008e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800846c:	4806      	ldr	r0, [pc, #24]	@ (8008488 <USBH_LL_Init+0x74>)
 800846e:	f7f9 fbeb 	bl	8001c48 <HAL_HCD_GetCurrentFrame>
 8008472:	4603      	mov	r3, r0
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7fe fee6 	bl	8007248 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000570 	.word	0x20000570

0800848c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7f9 fb58 	bl	8001b58 <HAL_HCD_Start>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f95e 	bl	8008770 <USBH_Get_USB_Status>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80084d8:	4618      	mov	r0, r3
 80084da:	f7f9 fb60 	bl	8001b9e <HAL_HCD_Stop>
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 f943 	bl	8008770 <USBH_Get_USB_Status>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800850a:	4618      	mov	r0, r3
 800850c:	f7f9 fbaa 	bl	8001c64 <HAL_HCD_GetCurrentSpeed>
 8008510:	4603      	mov	r3, r0
 8008512:	2b02      	cmp	r3, #2
 8008514:	d00c      	beq.n	8008530 <USBH_LL_GetSpeed+0x38>
 8008516:	2b02      	cmp	r3, #2
 8008518:	d80d      	bhi.n	8008536 <USBH_LL_GetSpeed+0x3e>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <USBH_LL_GetSpeed+0x2c>
 800851e:	2b01      	cmp	r3, #1
 8008520:	d003      	beq.n	800852a <USBH_LL_GetSpeed+0x32>
 8008522:	e008      	b.n	8008536 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]
    break;
 8008528:	e008      	b.n	800853c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800852a:	2301      	movs	r3, #1
 800852c:	73fb      	strb	r3, [r7, #15]
    break;
 800852e:	e005      	b.n	800853c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008530:	2302      	movs	r3, #2
 8008532:	73fb      	strb	r3, [r7, #15]
    break;
 8008534:	e002      	b.n	800853c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008536:	2301      	movs	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]
    break;
 800853a:	bf00      	nop
  }
  return  speed;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800855c:	4618      	mov	r0, r3
 800855e:	f7f9 fb3b 	bl	8001bd8 <HAL_HCD_ResetPort>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f901 	bl	8008770 <USBH_Get_USB_Status>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008572:	7bbb      	ldrb	r3, [r7, #14]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800858e:	78fa      	ldrb	r2, [r7, #3]
 8008590:	4611      	mov	r1, r2
 8008592:	4618      	mov	r0, r3
 8008594:	f7f9 fb43 	bl	8001c1e <HAL_HCD_HC_GetXferCount>
 8008598:	4603      	mov	r3, r0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085a2:	b590      	push	{r4, r7, lr}
 80085a4:	b089      	sub	sp, #36	@ 0x24
 80085a6:	af04      	add	r7, sp, #16
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	4608      	mov	r0, r1
 80085ac:	4611      	mov	r1, r2
 80085ae:	461a      	mov	r2, r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	70fb      	strb	r3, [r7, #3]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70bb      	strb	r3, [r7, #2]
 80085b8:	4613      	mov	r3, r2
 80085ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80085ca:	787c      	ldrb	r4, [r7, #1]
 80085cc:	78ba      	ldrb	r2, [r7, #2]
 80085ce:	78f9      	ldrb	r1, [r7, #3]
 80085d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80085d2:	9302      	str	r3, [sp, #8]
 80085d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	4623      	mov	r3, r4
 80085e2:	f7f8 ff2f 	bl	8001444 <HAL_HCD_HC_Init>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f8bf 	bl	8008770 <USBH_Get_USB_Status>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd90      	pop	{r4, r7, pc}

08008600 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7f8 ffc8 	bl	80015b4 <HAL_HCD_HC_Halt>
 8008624:	4603      	mov	r3, r0
 8008626:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f8a0 	bl	8008770 <USBH_Get_USB_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008634:	7bbb      	ldrb	r3, [r7, #14]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800863e:	b590      	push	{r4, r7, lr}
 8008640:	b089      	sub	sp, #36	@ 0x24
 8008642:	af04      	add	r7, sp, #16
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	4608      	mov	r0, r1
 8008648:	4611      	mov	r1, r2
 800864a:	461a      	mov	r2, r3
 800864c:	4603      	mov	r3, r0
 800864e:	70fb      	strb	r3, [r7, #3]
 8008650:	460b      	mov	r3, r1
 8008652:	70bb      	strb	r3, [r7, #2]
 8008654:	4613      	mov	r3, r2
 8008656:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008666:	787c      	ldrb	r4, [r7, #1]
 8008668:	78ba      	ldrb	r2, [r7, #2]
 800866a:	78f9      	ldrb	r1, [r7, #3]
 800866c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008674:	9302      	str	r3, [sp, #8]
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	4623      	mov	r3, r4
 8008682:	f7f8 ffbb 	bl	80015fc <HAL_HCD_HC_SubmitRequest>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 f86f 	bl	8008770 <USBH_Get_USB_Status>
 8008692:	4603      	mov	r3, r0
 8008694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008696:	7bbb      	ldrb	r3, [r7, #14]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	bd90      	pop	{r4, r7, pc}

080086a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086b2:	78fa      	ldrb	r2, [r7, #3]
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f9 fa9c 	bl	8001bf4 <HAL_HCD_HC_GetURBState>
 80086bc:	4603      	mov	r3, r0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d103      	bne.n	80086e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 f872 	bl	80087c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80086e4:	20c8      	movs	r0, #200	@ 0xc8
 80086e6:	f7f8 fb5b 	bl	8000da0 <HAL_Delay>
  return USBH_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
 8008700:	4613      	mov	r3, r2
 8008702:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800870a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800870c:	78fa      	ldrb	r2, [r7, #3]
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	4613      	mov	r3, r2
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	3317      	adds	r3, #23
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	68f9      	ldr	r1, [r7, #12]
 8008726:	4613      	mov	r3, r2
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	333c      	adds	r3, #60	@ 0x3c
 8008732:	78ba      	ldrb	r2, [r7, #2]
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e009      	b.n	800874c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	68f9      	ldr	r1, [r7, #12]
 800873c:	4613      	mov	r3, r2
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	333d      	adds	r3, #61	@ 0x3d
 8008748:	78ba      	ldrb	r2, [r7, #2]
 800874a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7f8 fb1c 	bl	8000da0 <HAL_Delay>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d817      	bhi.n	80087b4 <USBH_Get_USB_Status+0x44>
 8008784:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <USBH_Get_USB_Status+0x1c>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087a3 	.word	0x080087a3
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087af 	.word	0x080087af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
    break;
 80087a0:	e00b      	b.n	80087ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087a2:	2302      	movs	r3, #2
 80087a4:	73fb      	strb	r3, [r7, #15]
    break;
 80087a6:	e008      	b.n	80087ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
    break;
 80087ac:	e005      	b.n	80087ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087ae:	2302      	movs	r3, #2
 80087b0:	73fb      	strb	r3, [r7, #15]
    break;
 80087b2:	e002      	b.n	80087ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087b4:	2302      	movs	r3, #2
 80087b6:	73fb      	strb	r3, [r7, #15]
    break;
 80087b8:	bf00      	nop
  }
  return usb_status;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
 80087e0:	e001      	b.n	80087e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80087e2:	2301      	movs	r3, #1
 80087e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	461a      	mov	r2, r3
 80087ea:	2101      	movs	r1, #1
 80087ec:	4803      	ldr	r0, [pc, #12]	@ (80087fc <MX_DriverVbusFS+0x34>)
 80087ee:	f7f8 fda9 	bl	8001344 <HAL_GPIO_WritePin>
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	40020800 	.word	0x40020800

08008800 <malloc>:
 8008800:	4b02      	ldr	r3, [pc, #8]	@ (800880c <malloc+0xc>)
 8008802:	4601      	mov	r1, r0
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	f000 b82d 	b.w	8008864 <_malloc_r>
 800880a:	bf00      	nop
 800880c:	2000002c 	.word	0x2000002c

08008810 <free>:
 8008810:	4b02      	ldr	r3, [pc, #8]	@ (800881c <free+0xc>)
 8008812:	4601      	mov	r1, r0
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	f000 b8f5 	b.w	8008a04 <_free_r>
 800881a:	bf00      	nop
 800881c:	2000002c 	.word	0x2000002c

08008820 <sbrk_aligned>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	4e0f      	ldr	r6, [pc, #60]	@ (8008860 <sbrk_aligned+0x40>)
 8008824:	460c      	mov	r4, r1
 8008826:	6831      	ldr	r1, [r6, #0]
 8008828:	4605      	mov	r5, r0
 800882a:	b911      	cbnz	r1, 8008832 <sbrk_aligned+0x12>
 800882c:	f000 f8ae 	bl	800898c <_sbrk_r>
 8008830:	6030      	str	r0, [r6, #0]
 8008832:	4621      	mov	r1, r4
 8008834:	4628      	mov	r0, r5
 8008836:	f000 f8a9 	bl	800898c <_sbrk_r>
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	d103      	bne.n	8008846 <sbrk_aligned+0x26>
 800883e:	f04f 34ff 	mov.w	r4, #4294967295
 8008842:	4620      	mov	r0, r4
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	1cc4      	adds	r4, r0, #3
 8008848:	f024 0403 	bic.w	r4, r4, #3
 800884c:	42a0      	cmp	r0, r4
 800884e:	d0f8      	beq.n	8008842 <sbrk_aligned+0x22>
 8008850:	1a21      	subs	r1, r4, r0
 8008852:	4628      	mov	r0, r5
 8008854:	f000 f89a 	bl	800898c <_sbrk_r>
 8008858:	3001      	adds	r0, #1
 800885a:	d1f2      	bne.n	8008842 <sbrk_aligned+0x22>
 800885c:	e7ef      	b.n	800883e <sbrk_aligned+0x1e>
 800885e:	bf00      	nop
 8008860:	20000950 	.word	0x20000950

08008864 <_malloc_r>:
 8008864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008868:	1ccd      	adds	r5, r1, #3
 800886a:	f025 0503 	bic.w	r5, r5, #3
 800886e:	3508      	adds	r5, #8
 8008870:	2d0c      	cmp	r5, #12
 8008872:	bf38      	it	cc
 8008874:	250c      	movcc	r5, #12
 8008876:	2d00      	cmp	r5, #0
 8008878:	4606      	mov	r6, r0
 800887a:	db01      	blt.n	8008880 <_malloc_r+0x1c>
 800887c:	42a9      	cmp	r1, r5
 800887e:	d904      	bls.n	800888a <_malloc_r+0x26>
 8008880:	230c      	movs	r3, #12
 8008882:	6033      	str	r3, [r6, #0]
 8008884:	2000      	movs	r0, #0
 8008886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800888a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008960 <_malloc_r+0xfc>
 800888e:	f000 f869 	bl	8008964 <__malloc_lock>
 8008892:	f8d8 3000 	ldr.w	r3, [r8]
 8008896:	461c      	mov	r4, r3
 8008898:	bb44      	cbnz	r4, 80088ec <_malloc_r+0x88>
 800889a:	4629      	mov	r1, r5
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff ffbf 	bl	8008820 <sbrk_aligned>
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	4604      	mov	r4, r0
 80088a6:	d158      	bne.n	800895a <_malloc_r+0xf6>
 80088a8:	f8d8 4000 	ldr.w	r4, [r8]
 80088ac:	4627      	mov	r7, r4
 80088ae:	2f00      	cmp	r7, #0
 80088b0:	d143      	bne.n	800893a <_malloc_r+0xd6>
 80088b2:	2c00      	cmp	r4, #0
 80088b4:	d04b      	beq.n	800894e <_malloc_r+0xea>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	4639      	mov	r1, r7
 80088ba:	4630      	mov	r0, r6
 80088bc:	eb04 0903 	add.w	r9, r4, r3
 80088c0:	f000 f864 	bl	800898c <_sbrk_r>
 80088c4:	4581      	cmp	r9, r0
 80088c6:	d142      	bne.n	800894e <_malloc_r+0xea>
 80088c8:	6821      	ldr	r1, [r4, #0]
 80088ca:	1a6d      	subs	r5, r5, r1
 80088cc:	4629      	mov	r1, r5
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7ff ffa6 	bl	8008820 <sbrk_aligned>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d03a      	beq.n	800894e <_malloc_r+0xea>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	442b      	add	r3, r5
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	f8d8 3000 	ldr.w	r3, [r8]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	bb62      	cbnz	r2, 8008940 <_malloc_r+0xdc>
 80088e6:	f8c8 7000 	str.w	r7, [r8]
 80088ea:	e00f      	b.n	800890c <_malloc_r+0xa8>
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	1b52      	subs	r2, r2, r5
 80088f0:	d420      	bmi.n	8008934 <_malloc_r+0xd0>
 80088f2:	2a0b      	cmp	r2, #11
 80088f4:	d917      	bls.n	8008926 <_malloc_r+0xc2>
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	6025      	str	r5, [r4, #0]
 80088fc:	bf18      	it	ne
 80088fe:	6059      	strne	r1, [r3, #4]
 8008900:	6863      	ldr	r3, [r4, #4]
 8008902:	bf08      	it	eq
 8008904:	f8c8 1000 	streq.w	r1, [r8]
 8008908:	5162      	str	r2, [r4, r5]
 800890a:	604b      	str	r3, [r1, #4]
 800890c:	4630      	mov	r0, r6
 800890e:	f000 f82f 	bl	8008970 <__malloc_unlock>
 8008912:	f104 000b 	add.w	r0, r4, #11
 8008916:	1d23      	adds	r3, r4, #4
 8008918:	f020 0007 	bic.w	r0, r0, #7
 800891c:	1ac2      	subs	r2, r0, r3
 800891e:	bf1c      	itt	ne
 8008920:	1a1b      	subne	r3, r3, r0
 8008922:	50a3      	strne	r3, [r4, r2]
 8008924:	e7af      	b.n	8008886 <_malloc_r+0x22>
 8008926:	6862      	ldr	r2, [r4, #4]
 8008928:	42a3      	cmp	r3, r4
 800892a:	bf0c      	ite	eq
 800892c:	f8c8 2000 	streq.w	r2, [r8]
 8008930:	605a      	strne	r2, [r3, #4]
 8008932:	e7eb      	b.n	800890c <_malloc_r+0xa8>
 8008934:	4623      	mov	r3, r4
 8008936:	6864      	ldr	r4, [r4, #4]
 8008938:	e7ae      	b.n	8008898 <_malloc_r+0x34>
 800893a:	463c      	mov	r4, r7
 800893c:	687f      	ldr	r7, [r7, #4]
 800893e:	e7b6      	b.n	80088ae <_malloc_r+0x4a>
 8008940:	461a      	mov	r2, r3
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	42a3      	cmp	r3, r4
 8008946:	d1fb      	bne.n	8008940 <_malloc_r+0xdc>
 8008948:	2300      	movs	r3, #0
 800894a:	6053      	str	r3, [r2, #4]
 800894c:	e7de      	b.n	800890c <_malloc_r+0xa8>
 800894e:	230c      	movs	r3, #12
 8008950:	6033      	str	r3, [r6, #0]
 8008952:	4630      	mov	r0, r6
 8008954:	f000 f80c 	bl	8008970 <__malloc_unlock>
 8008958:	e794      	b.n	8008884 <_malloc_r+0x20>
 800895a:	6005      	str	r5, [r0, #0]
 800895c:	e7d6      	b.n	800890c <_malloc_r+0xa8>
 800895e:	bf00      	nop
 8008960:	20000954 	.word	0x20000954

08008964 <__malloc_lock>:
 8008964:	4801      	ldr	r0, [pc, #4]	@ (800896c <__malloc_lock+0x8>)
 8008966:	f000 b84b 	b.w	8008a00 <__retarget_lock_acquire_recursive>
 800896a:	bf00      	nop
 800896c:	20000a94 	.word	0x20000a94

08008970 <__malloc_unlock>:
 8008970:	4801      	ldr	r0, [pc, #4]	@ (8008978 <__malloc_unlock+0x8>)
 8008972:	f000 b846 	b.w	8008a02 <__retarget_lock_release_recursive>
 8008976:	bf00      	nop
 8008978:	20000a94 	.word	0x20000a94

0800897c <memset>:
 800897c:	4402      	add	r2, r0
 800897e:	4603      	mov	r3, r0
 8008980:	4293      	cmp	r3, r2
 8008982:	d100      	bne.n	8008986 <memset+0xa>
 8008984:	4770      	bx	lr
 8008986:	f803 1b01 	strb.w	r1, [r3], #1
 800898a:	e7f9      	b.n	8008980 <memset+0x4>

0800898c <_sbrk_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d06      	ldr	r5, [pc, #24]	@ (80089a8 <_sbrk_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7f8 f91e 	bl	8000bd8 <_sbrk>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_sbrk_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_sbrk_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000a90 	.word	0x20000a90

080089ac <__errno>:
 80089ac:	4b01      	ldr	r3, [pc, #4]	@ (80089b4 <__errno+0x8>)
 80089ae:	6818      	ldr	r0, [r3, #0]
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	2000002c 	.word	0x2000002c

080089b8 <__libc_init_array>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	4d0d      	ldr	r5, [pc, #52]	@ (80089f0 <__libc_init_array+0x38>)
 80089bc:	4c0d      	ldr	r4, [pc, #52]	@ (80089f4 <__libc_init_array+0x3c>)
 80089be:	1b64      	subs	r4, r4, r5
 80089c0:	10a4      	asrs	r4, r4, #2
 80089c2:	2600      	movs	r6, #0
 80089c4:	42a6      	cmp	r6, r4
 80089c6:	d109      	bne.n	80089dc <__libc_init_array+0x24>
 80089c8:	4d0b      	ldr	r5, [pc, #44]	@ (80089f8 <__libc_init_array+0x40>)
 80089ca:	4c0c      	ldr	r4, [pc, #48]	@ (80089fc <__libc_init_array+0x44>)
 80089cc:	f000 f864 	bl	8008a98 <_init>
 80089d0:	1b64      	subs	r4, r4, r5
 80089d2:	10a4      	asrs	r4, r4, #2
 80089d4:	2600      	movs	r6, #0
 80089d6:	42a6      	cmp	r6, r4
 80089d8:	d105      	bne.n	80089e6 <__libc_init_array+0x2e>
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e0:	4798      	blx	r3
 80089e2:	3601      	adds	r6, #1
 80089e4:	e7ee      	b.n	80089c4 <__libc_init_array+0xc>
 80089e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ea:	4798      	blx	r3
 80089ec:	3601      	adds	r6, #1
 80089ee:	e7f2      	b.n	80089d6 <__libc_init_array+0x1e>
 80089f0:	08008ad4 	.word	0x08008ad4
 80089f4:	08008ad4 	.word	0x08008ad4
 80089f8:	08008ad4 	.word	0x08008ad4
 80089fc:	08008ad8 	.word	0x08008ad8

08008a00 <__retarget_lock_acquire_recursive>:
 8008a00:	4770      	bx	lr

08008a02 <__retarget_lock_release_recursive>:
 8008a02:	4770      	bx	lr

08008a04 <_free_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4605      	mov	r5, r0
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d041      	beq.n	8008a90 <_free_r+0x8c>
 8008a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a10:	1f0c      	subs	r4, r1, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	bfb8      	it	lt
 8008a16:	18e4      	addlt	r4, r4, r3
 8008a18:	f7ff ffa4 	bl	8008964 <__malloc_lock>
 8008a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a94 <_free_r+0x90>)
 8008a1e:	6813      	ldr	r3, [r2, #0]
 8008a20:	b933      	cbnz	r3, 8008a30 <_free_r+0x2c>
 8008a22:	6063      	str	r3, [r4, #4]
 8008a24:	6014      	str	r4, [r2, #0]
 8008a26:	4628      	mov	r0, r5
 8008a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a2c:	f7ff bfa0 	b.w	8008970 <__malloc_unlock>
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	d908      	bls.n	8008a46 <_free_r+0x42>
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	1821      	adds	r1, r4, r0
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	bf01      	itttt	eq
 8008a3c:	6819      	ldreq	r1, [r3, #0]
 8008a3e:	685b      	ldreq	r3, [r3, #4]
 8008a40:	1809      	addeq	r1, r1, r0
 8008a42:	6021      	streq	r1, [r4, #0]
 8008a44:	e7ed      	b.n	8008a22 <_free_r+0x1e>
 8008a46:	461a      	mov	r2, r3
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	b10b      	cbz	r3, 8008a50 <_free_r+0x4c>
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	d9fa      	bls.n	8008a46 <_free_r+0x42>
 8008a50:	6811      	ldr	r1, [r2, #0]
 8008a52:	1850      	adds	r0, r2, r1
 8008a54:	42a0      	cmp	r0, r4
 8008a56:	d10b      	bne.n	8008a70 <_free_r+0x6c>
 8008a58:	6820      	ldr	r0, [r4, #0]
 8008a5a:	4401      	add	r1, r0
 8008a5c:	1850      	adds	r0, r2, r1
 8008a5e:	4283      	cmp	r3, r0
 8008a60:	6011      	str	r1, [r2, #0]
 8008a62:	d1e0      	bne.n	8008a26 <_free_r+0x22>
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	6053      	str	r3, [r2, #4]
 8008a6a:	4408      	add	r0, r1
 8008a6c:	6010      	str	r0, [r2, #0]
 8008a6e:	e7da      	b.n	8008a26 <_free_r+0x22>
 8008a70:	d902      	bls.n	8008a78 <_free_r+0x74>
 8008a72:	230c      	movs	r3, #12
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	e7d6      	b.n	8008a26 <_free_r+0x22>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	1821      	adds	r1, r4, r0
 8008a7c:	428b      	cmp	r3, r1
 8008a7e:	bf04      	itt	eq
 8008a80:	6819      	ldreq	r1, [r3, #0]
 8008a82:	685b      	ldreq	r3, [r3, #4]
 8008a84:	6063      	str	r3, [r4, #4]
 8008a86:	bf04      	itt	eq
 8008a88:	1809      	addeq	r1, r1, r0
 8008a8a:	6021      	streq	r1, [r4, #0]
 8008a8c:	6054      	str	r4, [r2, #4]
 8008a8e:	e7ca      	b.n	8008a26 <_free_r+0x22>
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	20000954 	.word	0x20000954

08008a98 <_init>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	bf00      	nop
 8008a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9e:	bc08      	pop	{r3}
 8008aa0:	469e      	mov	lr, r3
 8008aa2:	4770      	bx	lr

08008aa4 <_fini>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	bf00      	nop
 8008aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aaa:	bc08      	pop	{r3}
 8008aac:	469e      	mov	lr, r3
 8008aae:	4770      	bx	lr

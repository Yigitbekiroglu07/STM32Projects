
servoMotor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a98  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c3c  08009c3c  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c44  08009c44  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c44  08009c44  0000ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009c4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a4f  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df3  00000000  00000000  00024afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  000288f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001171  00000000  00000000  00029f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024357  00000000  00000000  0002b0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd24  00000000  00000000  0004f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ef7  00000000  00000000  0006d16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141063  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000631c  00000000  00000000  001410a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  001473c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c08 	.word	0x08009c08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009c08 	.word	0x08009c08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fceb 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f825 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f997 	bl	80007f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ca:	f000 f88b 	bl	80005e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004ce:	f000 f8b7 	bl	8000640 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d2:	f000 f8e5 	bl	80006a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d6:	f008 ff41 	bl	800935c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004da:	f000 f917 	bl	800070c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004de:	2104      	movs	r1, #4
 80004e0:	480a      	ldr	r0, [pc, #40]	@ (800050c <main+0x54>)
 80004e2:	f004 fe2d 	bl	8005140 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e6:	f008 ff5f 	bl	80093a8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    for(int i=20; i<=130; i=i+2){
 80004ea:	2314      	movs	r3, #20
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e009      	b.n	8000504 <main+0x4c>
__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,i); // Duty Cyle değiştirme kodu olduğudan buraya yazılır.
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <main+0x54>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	@ 0x64
 80004fa:	f000 fd3f 	bl	8000f7c <HAL_Delay>
    for(int i=20; i<=130; i=i+2){
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3302      	adds	r3, #2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b82      	cmp	r3, #130	@ 0x82
 8000508:	ddf2      	ble.n	80004f0 <main+0x38>
    MX_USB_HOST_Process();
 800050a:	e7ec      	b.n	80004e6 <main+0x2e>
 800050c:	2000018c 	.word	0x2000018c

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	@ 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f009 fae4 	bl	8009aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	@ (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	@ (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f003 feda 	bl	8004350 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 fa27 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2105      	movs	r1, #5
 80005c4:	4618      	mov	r0, r3
 80005c6:	f004 f93b 	bl	8004840 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d0:	f000 fa10 	bl	80009f4 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	@ 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <MX_I2C1_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	@ (800063c <MX_I2C1_Init+0x58>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <MX_I2C1_Init+0x50>)
 8000622:	f003 f8b1 	bl	8003788 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f9e2 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000098 	.word	0x20000098
 8000638:	40005400 	.word	0x40005400
 800063c:	000186a0 	.word	0x000186a0

08000640 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_I2S3_Init+0x54>)
 8000646:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <MX_I2S3_Init+0x58>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2S3_Init+0x54>)
 800064c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000650:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_I2S3_Init+0x54>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_I2S3_Init+0x54>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000664:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_I2S3_Init+0x54>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <MX_I2S3_Init+0x5c>)
 800066a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_I2S3_Init+0x54>)
 8000680:	f003 f9c6 	bl	8003a10 <HAL_I2S_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800068a:	f000 f9b3 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000ec 	.word	0x200000ec
 8000698:	40003c00 	.word	0x40003c00
 800069c:	00017700 	.word	0x00017700

080006a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a4:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006a6:	4a18      	ldr	r2, [pc, #96]	@ (8000708 <MX_SPI1_Init+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006ec:	220a      	movs	r2, #10
 80006ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_SPI1_Init+0x64>)
 80006f2:	f004 fbf3 	bl	8004edc <HAL_SPI_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f97a 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000134 	.word	0x20000134
 8000708:	40013000 	.word	0x40013000

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	@ 0x38
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
 8000738:	615a      	str	r2, [r3, #20]
 800073a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073c:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 800073e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000742:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 8000746:	f240 628f 	movw	r2, #1679	@ 0x68f
 800074a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000752:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 8000754:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000766:	4823      	ldr	r0, [pc, #140]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 8000768:	f004 fc41 	bl	8004fee <HAL_TIM_Base_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000772:	f000 f93f 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000780:	4619      	mov	r1, r3
 8000782:	481c      	ldr	r0, [pc, #112]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 8000784:	f004 ff56 	bl	8005634 <HAL_TIM_ConfigClockSource>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800078e:	f000 f931 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000792:	4818      	ldr	r0, [pc, #96]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 8000794:	f004 fc7a 	bl	800508c <HAL_TIM_PWM_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800079e:	f000 f929 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	4619      	mov	r1, r3
 80007b0:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 80007b2:	f005 fb55 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007bc:	f000 f91a 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c0:	2360      	movs	r3, #96	@ 0x60
 80007c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2204      	movs	r2, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 80007d8:	f004 fe6a 	bl	80054b0 <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007e2:	f000 f907 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007e6:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <MX_TIM2_Init+0xe8>)
 80007e8:	f000 fa68 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 80007ec:	bf00      	nop
 80007ee:	3738      	adds	r7, #56	@ 0x38
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000018c 	.word	0x2000018c

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	4b72      	ldr	r3, [pc, #456]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a71      	ldr	r2, [pc, #452]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b6f      	ldr	r3, [pc, #444]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b6b      	ldr	r3, [pc, #428]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a6a      	ldr	r2, [pc, #424]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b68      	ldr	r3, [pc, #416]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b64      	ldr	r3, [pc, #400]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a63      	ldr	r2, [pc, #396]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b61      	ldr	r3, [pc, #388]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b5d      	ldr	r3, [pc, #372]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a5c      	ldr	r2, [pc, #368]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b5a      	ldr	r3, [pc, #360]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b56      	ldr	r3, [pc, #344]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a55      	ldr	r2, [pc, #340]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b53      	ldr	r3, [pc, #332]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b4f      	ldr	r3, [pc, #316]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a4e      	ldr	r2, [pc, #312]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b4c      	ldr	r3, [pc, #304]	@ (80009dc <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4849      	ldr	r0, [pc, #292]	@ (80009e0 <MX_GPIO_Init+0x1e8>)
 80008bc:	f000 fe30 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	4847      	ldr	r0, [pc, #284]	@ (80009e4 <MX_GPIO_Init+0x1ec>)
 80008c6:	f000 fe2b 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ca:	2200      	movs	r2, #0
 80008cc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008d0:	4845      	ldr	r0, [pc, #276]	@ (80009e8 <MX_GPIO_Init+0x1f0>)
 80008d2:	f000 fe25 	bl	8001520 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	483c      	ldr	r0, [pc, #240]	@ (80009e0 <MX_GPIO_Init+0x1e8>)
 80008ee:	f000 fc7b 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4836      	ldr	r0, [pc, #216]	@ (80009e4 <MX_GPIO_Init+0x1ec>)
 800090a:	f000 fc6d 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091e:	2305      	movs	r3, #5
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	482e      	ldr	r0, [pc, #184]	@ (80009e4 <MX_GPIO_Init+0x1ec>)
 800092a:	f000 fc5d 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000932:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	482a      	ldr	r0, [pc, #168]	@ (80009ec <MX_GPIO_Init+0x1f4>)
 8000944:	f000 fc50 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000948:	2304      	movs	r3, #4
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4825      	ldr	r0, [pc, #148]	@ (80009f0 <MX_GPIO_Init+0x1f8>)
 800095c:	f000 fc44 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000960:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	481c      	ldr	r0, [pc, #112]	@ (80009f0 <MX_GPIO_Init+0x1f8>)
 800097e:	f000 fc33 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000982:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000986:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4813      	ldr	r0, [pc, #76]	@ (80009e8 <MX_GPIO_Init+0x1f0>)
 800099c:	f000 fc24 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a0:	2320      	movs	r3, #32
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <MX_GPIO_Init+0x1f0>)
 80009b4:	f000 fc18 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009bc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_GPIO_Init+0x1e8>)
 80009ce:	f000 fc0b 	bl	80011e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f000 fb90 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	@ (8000ad4 <HAL_I2C_MspInit+0x84>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d12c      	bne.n	8000acc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a94:	2312      	movs	r3, #18
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	@ (8000adc <HAL_I2C_MspInit+0x8c>)
 8000aac:	f000 fb9c 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000aba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	@ 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400

08000ae0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	@ 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a31      	ldr	r2, [pc, #196]	@ (8000bd0 <HAL_I2S_MspInit+0xf0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d15a      	bne.n	8000bc6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b10:	2301      	movs	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b14:	23c0      	movs	r3, #192	@ 0xc0
 8000b16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 f899 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b2c:	f7ff ff62 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	4a26      	ldr	r2, [pc, #152]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	4a18      	ldr	r2, [pc, #96]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b84:	2310      	movs	r3, #16
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b94:	2306      	movs	r3, #6
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <HAL_I2S_MspInit+0xf8>)
 8000ba0:	f000 fb22 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <HAL_I2S_MspInit+0xfc>)
 8000bc2:	f000 fb11 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3738      	adds	r7, #56	@ 0x38
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40003c00 	.word	0x40003c00
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020800 	.word	0x40020800

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	@ 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	@ (8000c64 <HAL_SPI_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a10      	ldr	r2, [pc, #64]	@ (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3a:	23e0      	movs	r3, #224	@ 0xe0
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <HAL_SPI_MspInit+0x8c>)
 8000c56:	f000 fac7 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40013000 	.word	0x40013000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c80:	d115      	bne.n	8000cae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x48>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x48>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x48>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	201c      	movs	r0, #28
 8000ca4:	f000 fa69 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca8:	201c      	movs	r0, #28
 8000caa:	f000 fa82 	bl	80011b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cdc:	d11d      	bne.n	8000d1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <HAL_TIM_MspPostInit+0x68>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <HAL_TIM_MspPostInit+0x68>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <HAL_TIM_MspPostInit+0x68>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <HAL_TIM_MspPostInit+0x6c>)
 8000d16:	f000 fa67 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3720      	adds	r7, #32
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f8db 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <TIM2_IRQHandler+0x10>)
 8000d92:	f004 fa9d 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000018c 	.word	0x2000018c

08000da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <OTG_FS_IRQHandler+0x10>)
 8000da6:	f000 feb5 	bl	8001b14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200005b8 	.word	0x200005b8

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f008 fe9a 	bl	8009b1c <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20020000 	.word	0x20020000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	200001d4 	.word	0x200001d4
 8000e1c:	20000ae0 	.word	0x20000ae0

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e48:	f7ff ffea 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f008 fe59 	bl	8009b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fb1f 	bl	80004b8 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e88:	08009c4c 	.word	0x08009c4c
  ldr r2, =_sbss
 8000e8c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e90:	20000ae0 	.word	0x20000ae0

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f94f 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fd98 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f967 	bl	80011ce <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f92f 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	200001d8 	.word	0x200001d8

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200001d8 	.word	0x200001d8

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	@ (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	@ (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	@ (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e16b      	b.n	80014dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 815a 	bne.w	80014d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80b4 	beq.w	80014d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b60      	ldr	r3, [pc, #384]	@ (80014f4 <HAL_GPIO_Init+0x30c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a5f      	ldr	r2, [pc, #380]	@ (80014f4 <HAL_GPIO_Init+0x30c>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b5d      	ldr	r3, [pc, #372]	@ (80014f4 <HAL_GPIO_Init+0x30c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a5b      	ldr	r2, [pc, #364]	@ (80014f8 <HAL_GPIO_Init+0x310>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a52      	ldr	r2, [pc, #328]	@ (80014fc <HAL_GPIO_Init+0x314>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d02b      	beq.n	800140e <HAL_GPIO_Init+0x226>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a51      	ldr	r2, [pc, #324]	@ (8001500 <HAL_GPIO_Init+0x318>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d025      	beq.n	800140a <HAL_GPIO_Init+0x222>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a50      	ldr	r2, [pc, #320]	@ (8001504 <HAL_GPIO_Init+0x31c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d01f      	beq.n	8001406 <HAL_GPIO_Init+0x21e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001508 <HAL_GPIO_Init+0x320>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4e      	ldr	r2, [pc, #312]	@ (800150c <HAL_GPIO_Init+0x324>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x216>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001510 <HAL_GPIO_Init+0x328>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x212>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001514 <HAL_GPIO_Init+0x32c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x20e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001518 <HAL_GPIO_Init+0x330>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x20a>
 80013ee:	2307      	movs	r3, #7
 80013f0:	e00e      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013f2:	2308      	movs	r3, #8
 80013f4:	e00c      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013f6:	2306      	movs	r3, #6
 80013f8:	e00a      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e008      	b.n	8001410 <HAL_GPIO_Init+0x228>
 80013fe:	2304      	movs	r3, #4
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x228>
 8001402:	2303      	movs	r3, #3
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x228>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x228>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x228>
 800140e:	2300      	movs	r3, #0
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f002 0203 	and.w	r2, r2, #3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4093      	lsls	r3, r2
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001420:	4935      	ldr	r1, [pc, #212]	@ (80014f8 <HAL_GPIO_Init+0x310>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <HAL_GPIO_Init+0x334>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001452:	4a32      	ldr	r2, [pc, #200]	@ (800151c <HAL_GPIO_Init+0x334>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001458:	4b30      	ldr	r3, [pc, #192]	@ (800151c <HAL_GPIO_Init+0x334>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800147c:	4a27      	ldr	r2, [pc, #156]	@ (800151c <HAL_GPIO_Init+0x334>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001482:	4b26      	ldr	r3, [pc, #152]	@ (800151c <HAL_GPIO_Init+0x334>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a6:	4a1d      	ldr	r2, [pc, #116]	@ (800151c <HAL_GPIO_Init+0x334>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_GPIO_Init+0x334>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d0:	4a12      	ldr	r2, [pc, #72]	@ (800151c <HAL_GPIO_Init+0x334>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	f67f ae90 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3724      	adds	r7, #36	@ 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40021400 	.word	0x40021400
 8001514:	40021800 	.word	0x40021800
 8001518:	40021c00 	.word	0x40021c00
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af02      	add	r7, sp, #8
 8001558:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e059      	b.n	8001618 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f007 ff4a 	bl	8009418 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001592:	d102      	bne.n	800159a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fd63 	bl	800606a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7c1a      	ldrb	r2, [r3, #16]
 80015ac:	f88d 2000 	strb.w	r2, [sp]
 80015b0:	3304      	adds	r3, #4
 80015b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b4:	f004 fce4 	bl	8005f80 <USB_CoreInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e026      	b.n	8001618 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2101      	movs	r1, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fd5b 	bl	800608c <USB_SetCurrentMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e017      	b.n	8001618 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7c1a      	ldrb	r2, [r3, #16]
 80015f0:	f88d 2000 	strb.w	r2, [sp]
 80015f4:	3304      	adds	r3, #4
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	f004 fefe 	bl	80063f8 <USB_HostInit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e004      	b.n	8001618 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b08b      	sub	sp, #44	@ 0x2c
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4608      	mov	r0, r1
 800162a:	4611      	mov	r1, r2
 800162c:	461a      	mov	r2, r3
 800162e:	4603      	mov	r3, r0
 8001630:	70fb      	strb	r3, [r7, #3]
 8001632:	460b      	mov	r3, r1
 8001634:	70bb      	strb	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800163a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800163c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_HCD_HC_Init+0x2c>
 8001648:	2302      	movs	r3, #2
 800164a:	e09d      	b.n	8001788 <HAL_HCD_HC_Init+0x168>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3319      	adds	r3, #25
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3314      	adds	r3, #20
 8001678:	787a      	ldrb	r2, [r7, #1]
 800167a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3315      	adds	r3, #21
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	3326      	adds	r3, #38	@ 0x26
 80016a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80016a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016ae:	b2d8      	uxtb	r0, r3
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3316      	adds	r3, #22
 80016be:	4602      	mov	r2, r0
 80016c0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fbc8 	bl	8001e5c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da0a      	bge.n	80016ea <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3317      	adds	r3, #23
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e009      	b.n	80016fe <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3317      	adds	r3, #23
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f004 ffdc 	bl	80066c0 <USB_GetHostSpeed>
 8001708:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800170a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10b      	bne.n	800172a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001712:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_HCD_HC_Init+0x10a>
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d104      	bne.n	800172a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2bbc      	cmp	r3, #188	@ 0xbc
 8001724:	d901      	bls.n	800172a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001726:	23bc      	movs	r3, #188	@ 0xbc
 8001728:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3318      	adds	r3, #24
 800173a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800173e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	b298      	uxth	r0, r3
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3328      	adds	r3, #40	@ 0x28
 8001754:	4602      	mov	r2, r0
 8001756:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	b29b      	uxth	r3, r3
 8001760:	787c      	ldrb	r4, [r7, #1]
 8001762:	78ba      	ldrb	r2, [r7, #2]
 8001764:	78f9      	ldrb	r1, [r7, #3]
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4623      	mov	r3, r4
 8001776:	f004 ffcb 	bl	8006710 <USB_HC_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}

08001790 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_HCD_HC_Halt+0x1e>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e00f      	b.n	80017ce <HAL_HCD_HC_Halt+0x3e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fb5d 	bl	8006e7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	70fb      	strb	r3, [r7, #3]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70bb      	strb	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3317      	adds	r3, #23
 8001802:	78ba      	ldrb	r2, [r7, #2]
 8001804:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3326      	adds	r3, #38	@ 0x26
 8001816:	787a      	ldrb	r2, [r7, #1]
 8001818:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800181a:	7c3b      	ldrb	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d114      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	332a      	adds	r3, #42	@ 0x2a
 8001830:	2203      	movs	r2, #3
 8001832:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3319      	adds	r3, #25
 8001844:	7f3a      	ldrb	r2, [r7, #28]
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e009      	b.n	800185e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	332a      	adds	r3, #42	@ 0x2a
 800185a:	2202      	movs	r2, #2
 800185c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800185e:	787b      	ldrb	r3, [r7, #1]
 8001860:	2b03      	cmp	r3, #3
 8001862:	f200 8102 	bhi.w	8001a6a <HAL_HCD_HC_SubmitRequest+0x292>
 8001866:	a201      	add	r2, pc, #4	@ (adr r2, 800186c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001a55 	.word	0x08001a55
 8001874:	08001941 	.word	0x08001941
 8001878:	080019cb 	.word	0x080019cb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800187c:	7c3b      	ldrb	r3, [r7, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 80f5 	bne.w	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001884:	78bb      	ldrb	r3, [r7, #2]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d12d      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800188a:	8b3b      	ldrh	r3, [r7, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	333d      	adds	r3, #61	@ 0x3d
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	333d      	adds	r3, #61	@ 0x3d
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	332a      	adds	r3, #42	@ 0x2a
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018ce:	e0ce      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	332a      	adds	r3, #42	@ 0x2a
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
      break;
 80018e4:	e0c3      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	331a      	adds	r3, #26
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 80b8 	bne.w	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	333c      	adds	r3, #60	@ 0x3c
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e0a1      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332a      	adds	r3, #42	@ 0x2a
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e096      	b.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d120      	bne.n	8001988 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	333d      	adds	r3, #61	@ 0x3d
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10a      	bne.n	8001972 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	332a      	adds	r3, #42	@ 0x2a
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001970:	e07e      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	332a      	adds	r3, #42	@ 0x2a
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
      break;
 8001986:	e073      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	333c      	adds	r3, #60	@ 0x3c
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	332a      	adds	r3, #42	@ 0x2a
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	e05d      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	332a      	adds	r3, #42	@ 0x2a
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e052      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019ca:	78bb      	ldrb	r3, [r7, #2]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d120      	bne.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	333d      	adds	r3, #61	@ 0x3d
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	332a      	adds	r3, #42	@ 0x2a
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fa:	e039      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	332a      	adds	r3, #42	@ 0x2a
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
      break;
 8001a10:	e02e      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	333c      	adds	r3, #60	@ 0x3c
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	332a      	adds	r3, #42	@ 0x2a
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
      break;
 8001a3c:	e018      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	332a      	adds	r3, #42	@ 0x2a
 8001a4e:	2202      	movs	r2, #2
 8001a50:	701a      	strb	r2, [r3, #0]
      break;
 8001a52:	e00d      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	332a      	adds	r3, #42	@ 0x2a
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
      break;
 8001a68:	e002      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	332c      	adds	r3, #44	@ 0x2c
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	8b39      	ldrh	r1, [r7, #24]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4403      	add	r3, r0
 8001a94:	3334      	adds	r3, #52	@ 0x34
 8001a96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	334c      	adds	r3, #76	@ 0x4c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3338      	adds	r3, #56	@ 0x38
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3315      	adds	r3, #21
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	334d      	adds	r3, #77	@ 0x4d
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	3310      	adds	r3, #16
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	1d19      	adds	r1, r3, #4
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f004 ff30 	bl	8006968 <USB_HC_StartXfer>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 fc24 	bl	8006378 <USB_GetMode>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 80fb 	bne.w	8001d2e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fbe7 	bl	8006310 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80f1 	beq.w	8001d2c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 fbde 	bl	8006310 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b5e:	d104      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fbce 	bl	8006310 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b7e:	d104      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fbbe 	bl	8006310 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b9e:	d104      	bne.n	8001baa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fbae 	bl	8006310 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d103      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fba0 	bl	8006310 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bda:	d120      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001be4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d113      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	6938      	ldr	r0, [r7, #16]
 8001bfa:	f004 fa93 	bl	8006124 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bfe:	6938      	ldr	r0, [r7, #16]
 8001c00:	f004 fac2 	bl	8006188 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7a5b      	ldrb	r3, [r3, #9]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d105      	bne.n	8001c18 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fcb4 	bl	8006580 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f007 fc7b 	bl	8009514 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fb74 	bl	8006310 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c32:	d102      	bne.n	8001c3a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f001 fd33 	bl	80036a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fb66 	bl	8006310 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d106      	bne.n	8001c5c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f007 fc44 	bl	80094dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fb55 	bl	8006310 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c70:	d139      	bne.n	8001ce6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 f8f0 	bl	8006e5c <USB_HC_ReadInterrupt>
 8001c7c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e025      	b.n	8001cd0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d018      	beq.n	8001cca <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cae:	d106      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f905 	bl	8001ec6 <HCD_HC_IN_IRQHandler>
 8001cbc:	e005      	b.n	8001cca <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 ff67 	bl	8002b98 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	795b      	ldrb	r3, [r3, #5]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d3d3      	bcc.n	8001c84 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 fb10 	bl	8006310 <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d101      	bne.n	8001cfe <HAL_HCD_IRQHandler+0x1ea>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_HCD_IRQHandler+0x1ec>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0210 	bic.w	r2, r2, #16
 8001d12:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f001 fbe4 	bl	80034e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0210 	orr.w	r2, r2, #16
 8001d28:	619a      	str	r2, [r3, #24]
 8001d2a:	e000      	b.n	8001d2e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d2c:	bf00      	nop
    }
  }
}
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_HCD_Start+0x16>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e013      	b.n	8001d72 <HAL_HCD_Start+0x3e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fc78 	bl	800664e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 f970 	bl	8006048 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_HCD_Stop+0x16>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e00d      	b.n	8001dac <HAL_HCD_Stop+0x32>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f005 f9cb 	bl	8007138 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 fc1a 	bl	80065fa <USB_ResetPort>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	334c      	adds	r3, #76	@ 0x4c
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3338      	adds	r3, #56	@ 0x38
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fc5c 	bl	80066ee <USB_GetCurrentFrame>
 8001e36:	4603      	mov	r3, r0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 fc37 	bl	80066c0 <USB_GetHostSpeed>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	331a      	adds	r3, #26
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	331b      	adds	r3, #27
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3325      	adds	r3, #37	@ 0x25
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3324      	adds	r3, #36	@ 0x24
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fa26 	bl	8006336 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11a      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2304      	movs	r3, #4
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	334d      	adds	r3, #77	@ 0x4d
 8001f16:	2207      	movs	r2, #7
 8001f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 ffab 	bl	8006e7e <USB_HC_Halt>
 8001f28:	e09e      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 f9ff 	bl	8006336 <USB_ReadChInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f42:	d11b      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f50:	461a      	mov	r2, r3
 8001f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	334d      	adds	r3, #77	@ 0x4d
 8001f68:	2208      	movs	r2, #8
 8001f6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 ff82 	bl	8006e7e <USB_HC_Halt>
 8001f7a:	e075      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 f9d6 	bl	8006336 <USB_ReadChInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d11a      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	334d      	adds	r3, #77	@ 0x4d
 8001fb6:	2206      	movs	r2, #6
 8001fb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 ff5b 	bl	8006e7e <USB_HC_Halt>
 8001fc8:	e04e      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 f9af 	bl	8006336 <USB_ReadChInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe2:	d11b      	bne.n	800201c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	334d      	adds	r3, #77	@ 0x4d
 8002008:	2209      	movs	r2, #9
 800200a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f004 ff32 	bl	8006e7e <USB_HC_Halt>
 800201a:	e025      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f004 f986 	bl	8006336 <USB_ReadChInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002030:	2b80      	cmp	r3, #128	@ 0x80
 8002032:	d119      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	334d      	adds	r3, #77	@ 0x4d
 8002056:	2207      	movs	r2, #7
 8002058:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f004 ff0b 	bl	8006e7e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f004 f960 	bl	8006336 <USB_ReadChInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002080:	d112      	bne.n	80020a8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fef7 	bl	8006e7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209c:	461a      	mov	r2, r3
 800209e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a2:	6093      	str	r3, [r2, #8]
 80020a4:	f000 bd75 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 f940 	bl	8006336 <USB_ReadChInterrupts>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f040 8128 	bne.w	8002312 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	2320      	movs	r3, #32
 80020d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	331b      	adds	r3, #27
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d119      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	331b      	adds	r3, #27
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	0151      	lsls	r1, r2, #5
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	440a      	add	r2, r1
 8002114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	799b      	ldrb	r3, [r3, #6]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01b      	beq.n	800215e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3330      	adds	r3, #48	@ 0x30
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	1ac9      	subs	r1, r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4403      	add	r3, r0
 800215a:	3338      	adds	r3, #56	@ 0x38
 800215c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334d      	adds	r3, #77	@ 0x4d
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3344      	adds	r3, #68	@ 0x44
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002192:	461a      	mov	r2, r3
 8002194:	2301      	movs	r3, #1
 8002196:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3326      	adds	r3, #38	@ 0x26
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3326      	adds	r3, #38	@ 0x26
 80021be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d110      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fe56 	bl	8006e7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021de:	461a      	mov	r2, r3
 80021e0:	2310      	movs	r3, #16
 80021e2:	6093      	str	r3, [r2, #8]
 80021e4:	e03d      	b.n	8002262 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3326      	adds	r3, #38	@ 0x26
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d00a      	beq.n	8002212 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3326      	adds	r3, #38	@ 0x26
 800220c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800220e:	2b01      	cmp	r3, #1
 8002210:	d127      	bne.n	8002262 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	440a      	add	r2, r1
 8002228:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800222c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002230:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	334c      	adds	r3, #76	@ 0x4c
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	334c      	adds	r3, #76	@ 0x4c
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f007 f967 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	799b      	ldrb	r3, [r3, #6]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d13b      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3338      	adds	r3, #56	@ 0x38
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4403      	add	r3, r0
 800228a:	3328      	adds	r3, #40	@ 0x28
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	440b      	add	r3, r1
 8002290:	1e59      	subs	r1, r3, #1
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4403      	add	r3, r0
 80022a0:	3328      	adds	r3, #40	@ 0x28
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8470 	beq.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	@ 0x3c
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	f083 0301 	eor.w	r3, r3, #1
 80022ca:	b2d8      	uxtb	r0, r3
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	333c      	adds	r3, #60	@ 0x3c
 80022da:	4602      	mov	r2, r0
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	f000 bc58 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	333c      	adds	r3, #60	@ 0x3c
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	f083 0301 	eor.w	r3, r3, #1
 80022fa:	b2d8      	uxtb	r0, r3
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	333c      	adds	r3, #60	@ 0x3c
 800230a:	4602      	mov	r2, r0
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	f000 bc40 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f004 f80b 	bl	8006336 <USB_ReadChInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b20      	cmp	r3, #32
 8002328:	d131      	bne.n	800238e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002336:	461a      	mov	r2, r3
 8002338:	2320      	movs	r3, #32
 800233a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	331a      	adds	r3, #26
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 841f 	bne.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	331b      	adds	r3, #27
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334d      	adds	r3, #77	@ 0x4d
 8002378:	2203      	movs	r2, #3
 800237a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fd7a 	bl	8006e7e <USB_HC_Halt>
 800238a:	f000 bc02 	b.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f003 ffcd 	bl	8006336 <USB_ReadChInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	f040 8305 	bne.w	80029b2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b4:	461a      	mov	r2, r3
 80023b6:	2302      	movs	r3, #2
 80023b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	334d      	adds	r3, #77	@ 0x4d
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d114      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	334d      	adds	r3, #77	@ 0x4d
 80023e0:	2202      	movs	r2, #2
 80023e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	334c      	adds	r3, #76	@ 0x4c
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e2cc      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	334d      	adds	r3, #77	@ 0x4d
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b06      	cmp	r3, #6
 800240e:	d114      	bne.n	800243a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	334d      	adds	r3, #77	@ 0x4d
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	334c      	adds	r3, #76	@ 0x4c
 8002434:	2205      	movs	r2, #5
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e2ac      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	334d      	adds	r3, #77	@ 0x4d
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b07      	cmp	r3, #7
 800244e:	d00b      	beq.n	8002468 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	334d      	adds	r3, #77	@ 0x4d
 8002460:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002462:	2b09      	cmp	r3, #9
 8002464:	f040 80a6 	bne.w	80025b4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334d      	adds	r3, #77	@ 0x4d
 8002478:	2202      	movs	r2, #2
 800247a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3344      	adds	r3, #68	@ 0x44
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4403      	add	r3, r0
 800249c:	3344      	adds	r3, #68	@ 0x44
 800249e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3344      	adds	r3, #68	@ 0x44
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d943      	bls.n	800253e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3344      	adds	r3, #68	@ 0x44
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	331a      	adds	r3, #26
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d123      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	331b      	adds	r3, #27
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	331c      	adds	r3, #28
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334c      	adds	r3, #76	@ 0x4c
 8002538:	2204      	movs	r2, #4
 800253a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800253c:	e229      	b.n	8002992 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	334c      	adds	r3, #76	@ 0x4c
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3326      	adds	r3, #38	@ 0x26
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3326      	adds	r3, #38	@ 0x26
 8002578:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800257a:	2b02      	cmp	r3, #2
 800257c:	f040 8209 	bne.w	8002992 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002596:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800259e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ac:	461a      	mov	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025b2:	e1ee      	b.n	8002992 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	334d      	adds	r3, #77	@ 0x4d
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	f040 80c8 	bne.w	800275c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334d      	adds	r3, #77	@ 0x4d
 80025dc:	2202      	movs	r2, #2
 80025de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	331b      	adds	r3, #27
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	f040 81ce 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3326      	adds	r3, #38	@ 0x26
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d16b      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3348      	adds	r3, #72	@ 0x48
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c59      	adds	r1, r3, #1
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4403      	add	r3, r0
 800262e:	3348      	adds	r3, #72	@ 0x48
 8002630:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3348      	adds	r3, #72	@ 0x48
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d943      	bls.n	80026d0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3348      	adds	r3, #72	@ 0x48
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	331b      	adds	r3, #27
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3344      	adds	r3, #68	@ 0x44
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d809      	bhi.n	800269a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	331c      	adds	r3, #28
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	0151      	lsls	r1, r2, #5
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	440a      	add	r2, r1
 80026b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	334c      	adds	r3, #76	@ 0x4c
 80026ca:	2204      	movs	r2, #4
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e014      	b.n	80026fa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334c      	adds	r3, #76	@ 0x4c
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e009      	b.n	80026fa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	334c      	adds	r3, #76	@ 0x4c
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3326      	adds	r3, #38	@ 0x26
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3326      	adds	r3, #38	@ 0x26
 8002720:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002722:	2b02      	cmp	r3, #2
 8002724:	f040 8136 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800273e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002746:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e11b      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	334d      	adds	r3, #77	@ 0x4d
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b03      	cmp	r3, #3
 8002770:	f040 8081 	bne.w	8002876 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334d      	adds	r3, #77	@ 0x4d
 8002784:	2202      	movs	r2, #2
 8002786:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	331b      	adds	r3, #27
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 80fa 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334c      	adds	r3, #76	@ 0x4c
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	0151      	lsls	r1, r2, #5
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	440a      	add	r2, r1
 80027ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	0151      	lsls	r1, r2, #5
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	440a      	add	r2, r1
 800280a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800280e:	f023 0320 	bic.w	r3, r3, #32
 8002812:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3326      	adds	r3, #38	@ 0x26
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3326      	adds	r3, #38	@ 0x26
 800283a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800283c:	2b02      	cmp	r3, #2
 800283e:	f040 80a9 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002858:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002860:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e08e      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	334d      	adds	r3, #77	@ 0x4d
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d143      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334d      	adds	r3, #77	@ 0x4d
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3326      	adds	r3, #38	@ 0x26
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3326      	adds	r3, #38	@ 0x26
 80028da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d159      	bne.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e03f      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d126      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	334d      	adds	r3, #77	@ 0x4d
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3344      	adds	r3, #68	@ 0x44
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1c59      	adds	r1, r3, #1
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4403      	add	r3, r0
 800295e:	3344      	adds	r3, #68	@ 0x44
 8002960:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	334c      	adds	r3, #76	@ 0x4c
 8002972:	2204      	movs	r2, #4
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e00d      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b02      	cmp	r3, #2
 800298c:	f000 8100 	beq.w	8002b90 <HCD_HC_IN_IRQHandler+0xcca>
 8002990:	e000      	b.n	8002994 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002992:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	334c      	adds	r3, #76	@ 0x4c
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f006 fdc0 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029b0:	e0ef      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fcbb 	bl	8006336 <USB_ReadChInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b40      	cmp	r3, #64	@ 0x40
 80029c8:	d12f      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d6:	461a      	mov	r2, r3
 80029d8:	2340      	movs	r3, #64	@ 0x40
 80029da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334d      	adds	r3, #77	@ 0x4d
 80029ec:	2205      	movs	r2, #5
 80029ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	331a      	adds	r3, #26
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3344      	adds	r3, #68	@ 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fa2b 	bl	8006e7e <USB_HC_Halt>
 8002a28:	e0b3      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 fc7f 	bl	8006336 <USB_ReadChInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	f040 80a7 	bne.w	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3326      	adds	r3, #38	@ 0x26
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d11b      	bne.n	8002a92 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	@ 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	334d      	adds	r3, #77	@ 0x4d
 8002a7e:	2204      	movs	r2, #4
 8002a80:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 f9f7 	bl	8006e7e <USB_HC_Halt>
 8002a90:	e03f      	b.n	8002b12 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3326      	adds	r3, #38	@ 0x26
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3326      	adds	r3, #38	@ 0x26
 8002ab8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d129      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3344      	adds	r3, #68	@ 0x44
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	799b      	ldrb	r3, [r3, #6]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HCD_HC_IN_IRQHandler+0xc2a>
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	331b      	adds	r3, #27
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d110      	bne.n	8002b12 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 f9b6 	bl	8006e7e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	331b      	adds	r3, #27
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d129      	bne.n	8002b7c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	331b      	adds	r3, #27
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	0151      	lsls	r1, r2, #5
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	440a      	add	r2, r1
 8002b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b5a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	0151      	lsls	r1, r2, #5
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	440a      	add	r2, r1
 8002b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	6093      	str	r3, [r2, #8]
 8002b8e:	e000      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b90:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fbbd 	bl	8006336 <USB_ReadChInterrupts>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d11b      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334d      	adds	r3, #77	@ 0x4d
 8002be8:	2207      	movs	r2, #7
 8002bea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 f942 	bl	8006e7e <USB_HC_Halt>
 8002bfa:	f000 bc6f 	b.w	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 fb95 	bl	8006336 <USB_ReadChInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 8082 	bne.w	8002d1c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2320      	movs	r3, #32
 8002c28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3319      	adds	r3, #25
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d124      	bne.n	8002c8a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3319      	adds	r3, #25
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334c      	adds	r3, #76	@ 0x4c
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334d      	adds	r3, #77	@ 0x4d
 8002c78:	2203      	movs	r2, #3
 8002c7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f004 f8fa 	bl	8006e7e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	331a      	adds	r3, #26
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	f040 841d 	bne.w	80034dc <HCD_HC_OUT_IRQHandler+0x944>
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	331b      	adds	r3, #27
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 8411 	bne.w	80034dc <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3326      	adds	r3, #38	@ 0x26
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d009      	beq.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	331b      	adds	r3, #27
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	334d      	adds	r3, #77	@ 0x4d
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 f8bc 	bl	8006e7e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3344      	adds	r3, #68	@ 0x44
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e3df      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 fb06 	bl	8006336 <USB_ReadChInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d34:	d111      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 f893 	bl	8006e7e <USB_HC_Halt>
 8002d58:	e3c0      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fae7 	bl	8006336 <USB_ReadChInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d168      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3344      	adds	r3, #68	@ 0x44
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fad1 	bl	8006336 <USB_ReadChInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b40      	cmp	r3, #64	@ 0x40
 8002d9c:	d112      	bne.n	8002dc4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3319      	adds	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2340      	movs	r3, #64	@ 0x40
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	331b      	adds	r3, #27
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	331b      	adds	r3, #27
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	334d      	adds	r3, #77	@ 0x4d
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f004 f81e 	bl	8006e7e <USB_HC_Halt>
 8002e42:	e34b      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fa72 	bl	8006336 <USB_ReadChInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e58:	2b40      	cmp	r3, #64	@ 0x40
 8002e5a:	d139      	bne.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	334d      	adds	r3, #77	@ 0x4d
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	331a      	adds	r3, #26
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3319      	adds	r3, #25
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3344      	adds	r3, #68	@ 0x44
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 ffe1 	bl	8006e7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2340      	movs	r3, #64	@ 0x40
 8002ecc:	6093      	str	r3, [r2, #8]
 8002ece:	e305      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 fa2c 	bl	8006336 <USB_ReadChInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d11a      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	334d      	adds	r3, #77	@ 0x4d
 8002f0a:	2206      	movs	r2, #6
 8002f0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 ffb1 	bl	8006e7e <USB_HC_Halt>
 8002f1c:	e2de      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fa05 	bl	8006336 <USB_ReadChInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d144      	bne.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3344      	adds	r3, #68	@ 0x44
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	334d      	adds	r3, #77	@ 0x4d
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3319      	adds	r3, #25
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d114      	bne.n	8002f9e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3318      	adds	r3, #24
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3319      	adds	r3, #25
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 ff69 	bl	8006e7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	6093      	str	r3, [r2, #8]
 8002fbe:	e28d      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f9b4 	bl	8006336 <USB_ReadChInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b80      	cmp	r3, #128	@ 0x80
 8002fd6:	d169      	bne.n	80030ac <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	799b      	ldrb	r3, [r3, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d111      	bne.n	8003004 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 ff3e 	bl	8006e7e <USB_HC_Halt>
 8003002:	e049      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3344      	adds	r3, #68	@ 0x44
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4403      	add	r3, r0
 8003024:	3344      	adds	r3, #68	@ 0x44
 8003026:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3344      	adds	r3, #68	@ 0x44
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d922      	bls.n	8003084 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3344      	adds	r3, #68	@ 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	334c      	adds	r3, #76	@ 0x4c
 8003062:	2204      	movs	r2, #4
 8003064:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334c      	adds	r3, #76	@ 0x4c
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f006 fa57 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003082:	e009      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	334c      	adds	r3, #76	@ 0x4c
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	6093      	str	r3, [r2, #8]
 80030aa:	e217      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 f93e 	bl	8006336 <USB_ReadChInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c4:	d11b      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334d      	adds	r3, #77	@ 0x4d
 80030d6:	2209      	movs	r2, #9
 80030d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fecb 	bl	8006e7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030fa:	6093      	str	r3, [r2, #8]
 80030fc:	e1ee      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f003 f915 	bl	8006336 <USB_ReadChInterrupts>
 800310c:	4603      	mov	r3, r0
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	f040 81df 	bne.w	80034d6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2302      	movs	r3, #2
 8003128:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	@ 0x4d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 8093 	bne.w	8003268 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334d      	adds	r3, #77	@ 0x4d
 8003152:	2202      	movs	r2, #2
 8003154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334c      	adds	r3, #76	@ 0x4c
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3326      	adds	r3, #38	@ 0x26
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d00b      	beq.n	8003198 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3326      	adds	r3, #38	@ 0x26
 8003190:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003192:	2b03      	cmp	r3, #3
 8003194:	f040 8190 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	799b      	ldrb	r3, [r3, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d115      	bne.n	80031cc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	333d      	adds	r3, #61	@ 0x3d
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2d8      	uxtb	r0, r3
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	333d      	adds	r3, #61	@ 0x3d
 80031c8:	4602      	mov	r2, r0
 80031ca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	799b      	ldrb	r3, [r3, #6]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	f040 8171 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	3334      	adds	r3, #52	@ 0x34
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8165 	beq.w	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3334      	adds	r3, #52	@ 0x34
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4403      	add	r3, r0
 800320e:	3328      	adds	r3, #40	@ 0x28
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	440b      	add	r3, r1
 8003214:	1e59      	subs	r1, r3, #1
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4403      	add	r3, r0
 8003224:	3328      	adds	r3, #40	@ 0x28
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	fbb1 f3f3 	udiv	r3, r1, r3
 800322c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 813f 	beq.w	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	333d      	adds	r3, #61	@ 0x3d
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	f083 0301 	eor.w	r3, r3, #1
 8003252:	b2d8      	uxtb	r0, r3
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	333d      	adds	r3, #61	@ 0x3d
 8003262:	4602      	mov	r2, r0
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e127      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	334d      	adds	r3, #77	@ 0x4d
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d120      	bne.n	80032c0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334d      	adds	r3, #77	@ 0x4d
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	331b      	adds	r3, #27
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 8107 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334c      	adds	r3, #76	@ 0x4c
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e0fb      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	@ 0x4d
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d13a      	bne.n	800334c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	@ 0x4d
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	@ 0x4c
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	331b      	adds	r3, #27
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 80d1 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	331b      	adds	r3, #27
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	440a      	add	r2, r1
 8003340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003348:	6053      	str	r3, [r2, #4]
 800334a:	e0b5      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	334d      	adds	r3, #77	@ 0x4d
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d114      	bne.n	800338c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	334d      	adds	r3, #77	@ 0x4d
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	334c      	adds	r3, #76	@ 0x4c
 8003386:	2202      	movs	r2, #2
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e095      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	334d      	adds	r3, #77	@ 0x4d
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d114      	bne.n	80033cc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334d      	adds	r3, #77	@ 0x4d
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	334c      	adds	r3, #76	@ 0x4c
 80033c6:	2205      	movs	r2, #5
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e075      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	334d      	adds	r3, #77	@ 0x4d
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d00a      	beq.n	80033f8 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334d      	adds	r3, #77	@ 0x4d
 80033f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	d170      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334d      	adds	r3, #77	@ 0x4d
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	3344      	adds	r3, #68	@ 0x44
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4403      	add	r3, r0
 800342c:	3344      	adds	r3, #68	@ 0x44
 800342e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3344      	adds	r3, #68	@ 0x44
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d914      	bls.n	8003470 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3344      	adds	r3, #68	@ 0x44
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334c      	adds	r3, #76	@ 0x4c
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800346e:	e022      	b.n	80034b6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334c      	adds	r3, #76	@ 0x4c
 8003480:	2202      	movs	r2, #2
 8003482:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800349a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b0:	461a      	mov	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	334c      	adds	r3, #76	@ 0x4c
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f006 f82e 	bl	8009530 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034d4:	e002      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80034da:	bf00      	nop
  }
}
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b08a      	sub	sp, #40	@ 0x28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	0c5b      	lsrs	r3, r3, #17
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003516:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d004      	beq.n	8003528 <HCD_RXQLVL_IRQHandler+0x46>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b05      	cmp	r3, #5
 8003522:	f000 80b6 	beq.w	8003692 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003526:	e0b7      	b.n	8003698 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80b3 	beq.w	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	332c      	adds	r3, #44	@ 0x2c
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80a7 	beq.w	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3338      	adds	r3, #56	@ 0x38
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	18d1      	adds	r1, r2, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4403      	add	r3, r0
 800356c:	3334      	adds	r3, #52	@ 0x34
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4299      	cmp	r1, r3
 8003572:	f200 8083 	bhi.w	800367c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	332c      	adds	r3, #44	@ 0x2c
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	b292      	uxth	r2, r2
 8003590:	4619      	mov	r1, r3
 8003592:	f002 fe65 	bl	8006260 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	332c      	adds	r3, #44	@ 0x2c
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	18d1      	adds	r1, r2, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4403      	add	r3, r0
 80035ba:	332c      	adds	r3, #44	@ 0x2c
 80035bc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3338      	adds	r3, #56	@ 0x38
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	18d1      	adds	r1, r2, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	3338      	adds	r3, #56	@ 0x38
 80035e4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	0cdb      	lsrs	r3, r3, #19
 80035f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3328      	adds	r3, #40	@ 0x28
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4293      	cmp	r3, r2
 8003614:	d13f      	bne.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d03c      	beq.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003632:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800363a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	333c      	adds	r3, #60	@ 0x3c
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2d8      	uxtb	r0, r3
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	333c      	adds	r3, #60	@ 0x3c
 8003676:	4602      	mov	r2, r0
 8003678:	701a      	strb	r2, [r3, #0]
      break;
 800367a:	e00c      	b.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	334c      	adds	r3, #76	@ 0x4c
 800368c:	2204      	movs	r2, #4
 800368e:	701a      	strb	r2, [r3, #0]
      break;
 8003690:	e001      	b.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003696:	bf00      	nop
  }
}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	@ 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d10b      	bne.n	80036f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f005 ff08 	bl	80094f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f043 0302 	orr.w	r3, r3, #2
 80036ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d132      	bne.n	8003760 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d126      	bne.n	800375a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7a5b      	ldrb	r3, [r3, #9]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d113      	bne.n	800373c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800371a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800371e:	d106      	bne.n	800372e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f002 ff2a 	bl	8006580 <USB_InitFSLSPClkSel>
 800372c:	e011      	b.n	8003752 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f002 ff23 	bl	8006580 <USB_InitFSLSPClkSel>
 800373a:	e00a      	b.n	8003752 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	79db      	ldrb	r3, [r3, #7]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800374a:	461a      	mov	r2, r3
 800374c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003750:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f005 fefa 	bl	800954c <HAL_HCD_PortEnabled_Callback>
 8003758:	e002      	b.n	8003760 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f005 ff04 	bl	8009568 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b20      	cmp	r3, #32
 8003768:	d103      	bne.n	8003772 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f043 0320 	orr.w	r3, r3, #32
 8003770:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003778:	461a      	mov	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6013      	str	r3, [r2, #0]
}
 800377e:	bf00      	nop
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e12b      	b.n	80039f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd f94e 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	@ 0x24
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037ec:	f001 fa20 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 80037f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a81      	ldr	r2, [pc, #516]	@ (80039fc <HAL_I2C_Init+0x274>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d807      	bhi.n	800380c <HAL_I2C_Init+0x84>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a80      	ldr	r2, [pc, #512]	@ (8003a00 <HAL_I2C_Init+0x278>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e006      	b.n	800381a <HAL_I2C_Init+0x92>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a04 <HAL_I2C_Init+0x27c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0e7      	b.n	80039f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a78      	ldr	r2, [pc, #480]	@ (8003a08 <HAL_I2C_Init+0x280>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0c9b      	lsrs	r3, r3, #18
 800382c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a6a      	ldr	r2, [pc, #424]	@ (80039fc <HAL_I2C_Init+0x274>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d802      	bhi.n	800385c <HAL_I2C_Init+0xd4>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3301      	adds	r3, #1
 800385a:	e009      	b.n	8003870 <HAL_I2C_Init+0xe8>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	4a69      	ldr	r2, [pc, #420]	@ (8003a0c <HAL_I2C_Init+0x284>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	3301      	adds	r3, #1
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	430b      	orrs	r3, r1
 8003876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003882:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	495c      	ldr	r1, [pc, #368]	@ (80039fc <HAL_I2C_Init+0x274>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d819      	bhi.n	80038c4 <HAL_I2C_Init+0x13c>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e59      	subs	r1, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fbb1 f3f3 	udiv	r3, r1, r3
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038a4:	400b      	ands	r3, r1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_I2C_Init+0x138>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e59      	subs	r1, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038be:	e051      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 80038c0:	2304      	movs	r3, #4
 80038c2:	e04f      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_I2C_Init+0x168>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	440b      	add	r3, r1
 80038da:	fbb0 f3f3 	udiv	r3, r0, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e012      	b.n	8003916 <HAL_I2C_Init+0x18e>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Init+0x196>
 800391a:	2301      	movs	r3, #1
 800391c:	e022      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <HAL_I2C_Init+0x1bc>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e58      	subs	r0, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	440b      	add	r3, r1
 8003934:	fbb0 f3f3 	udiv	r3, r0, r3
 8003938:	3301      	adds	r3, #1
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003942:	e00f      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	0099      	lsls	r1, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	6809      	ldr	r1, [r1, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6911      	ldr	r1, [r2, #16]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68d2      	ldr	r2, [r2, #12]
 800399e:	4311      	orrs	r1, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	000186a0 	.word	0x000186a0
 8003a00:	001e847f 	.word	0x001e847f
 8003a04:	003d08ff 	.word	0x003d08ff
 8003a08:	431bde83 	.word	0x431bde83
 8003a0c:	10624dd3 	.word	0x10624dd3

08003a10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e128      	b.n	8003c74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a90      	ldr	r2, [pc, #576]	@ (8003c7c <HAL_I2S_Init+0x26c>)
 8003a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fd f84f 	bl	8000ae0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a58:	f023 030f 	bic.w	r3, r3, #15
 8003a5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2202      	movs	r2, #2
 8003a64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d060      	beq.n	8003b30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a76:	2310      	movs	r3, #16
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e001      	b.n	8003a80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d802      	bhi.n	8003a8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f001 f9c4 	bl	8004e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9e:	d125      	bne.n	8003aec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	3305      	adds	r3, #5
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e01f      	b.n	8003b0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	e00e      	b.n	8003b0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	3305      	adds	r3, #5
 8003b08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8003c80 <HAL_I2S_Init+0x270>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e003      	b.n	8003b38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d902      	bls.n	8003b44 <HAL_I2S_Init+0x134>
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2bff      	cmp	r3, #255	@ 0xff
 8003b42:	d907      	bls.n	8003b54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	f043 0210 	orr.w	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e08f      	b.n	8003c74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	ea42 0103 	orr.w	r1, r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b72:	f023 030f 	bic.w	r3, r3, #15
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6851      	ldr	r1, [r2, #4]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6892      	ldr	r2, [r2, #8]
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68d2      	ldr	r2, [r2, #12]
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6992      	ldr	r2, [r2, #24]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d161      	bne.n	8003c64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a38      	ldr	r2, [pc, #224]	@ (8003c84 <HAL_I2S_Init+0x274>)
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a37      	ldr	r2, [pc, #220]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x1a4>
 8003bb0:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x1a8>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4932      	ldr	r1, [pc, #200]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bc0:	428a      	cmp	r2, r1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2S_Init+0x1b8>
 8003bc4:	4a31      	ldr	r2, [pc, #196]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003bc6:	e001      	b.n	8003bcc <HAL_I2S_Init+0x1bc>
 8003bc8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bcc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bd0:	f023 030f 	bic.w	r3, r3, #15
 8003bd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2b      	ldr	r2, [pc, #172]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_I2S_Init+0x1d4>
 8003be0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003be2:	e001      	b.n	8003be8 <HAL_I2S_Init+0x1d8>
 8003be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be8:	2202      	movs	r2, #2
 8003bea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2S_Init+0x1ea>
 8003bf6:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003bf8:	e001      	b.n	8003bfe <HAL_I2S_Init+0x1ee>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0a:	d003      	beq.n	8003c14 <HAL_I2S_Init+0x204>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e001      	b.n	8003c20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	897b      	ldrh	r3, [r7, #10]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a0d      	ldr	r2, [pc, #52]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_I2S_Init+0x24c>
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003c5a:	e001      	b.n	8003c60 <HAL_I2S_Init+0x250>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c60:	897a      	ldrh	r2, [r7, #10]
 8003c62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	08003d87 	.word	0x08003d87
 8003c80:	cccccccd 	.word	0xcccccccd
 8003c84:	08003e9d 	.word	0x08003e9d
 8003c88:	40003800 	.word	0x40003800
 8003c8c:	40003400 	.word	0x40003400

08003c90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ffb8 	bl	8003c90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	b292      	uxth	r2, r2
 8003d3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10e      	bne.n	8003d7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff93 	bl	8003ca4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d13a      	bne.n	8003e18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d109      	bne.n	8003dc0 <I2S_IRQHandler+0x3a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	d102      	bne.n	8003dc0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ffb4 	bl	8003d28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d126      	bne.n	8003e18 <I2S_IRQHandler+0x92>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d11f      	bne.n	8003e18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003de6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ff50 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d136      	bne.n	8003e92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d109      	bne.n	8003e42 <I2S_IRQHandler+0xbc>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	2b80      	cmp	r3, #128	@ 0x80
 8003e3a:	d102      	bne.n	8003e42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff45 	bl	8003ccc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d122      	bne.n	8003e92 <I2S_IRQHandler+0x10c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d11b      	bne.n	8003e92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff13 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e92:	bf00      	nop
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a92      	ldr	r2, [pc, #584]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eb6:	4b92      	ldr	r3, [pc, #584]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a8b      	ldr	r2, [pc, #556]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed6:	e001      	b.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee8:	d004      	beq.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 8099 	bne.w	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d107      	bne.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f925 	bl	8004158 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9c8 	bl	80042b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	d13a      	bne.n	8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d035      	beq.n	8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a6e      	ldr	r2, [pc, #440]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f46:	4b6e      	ldr	r3, [pc, #440]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4969      	ldr	r1, [pc, #420]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f56:	428b      	cmp	r3, r1
 8003f58:	d101      	bne.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f5a:	4b69      	ldr	r3, [pc, #420]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f5c:	e001      	b.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fe88 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	f040 80c3 	bne.w	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80bd 	beq.w	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a49      	ldr	r2, [pc, #292]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fda:	4b49      	ldr	r3, [pc, #292]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fdc:	e001      	b.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4944      	ldr	r1, [pc, #272]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fea:	428b      	cmp	r3, r1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fee:	4b44      	ldr	r3, [pc, #272]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff0:	e001      	b.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ff2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ffa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fe4a 	bl	8003cb8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004024:	e089      	b.n	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d107      	bne.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8be 	bl	80041bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f8fd 	bl	8004254 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d12f      	bne.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02a      	beq.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800407c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004088:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408a:	e001      	b.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800408c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4919      	ldr	r1, [pc, #100]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004098:	428b      	cmp	r3, r1
 800409a:	d101      	bne.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800409c:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409e:	e001      	b.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fdfa 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d136      	bne.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d031      	beq.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a07      	ldr	r2, [pc, #28]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040e2:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e4:	e001      	b.n	80040ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4902      	ldr	r1, [pc, #8]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040f2:	428b      	cmp	r3, r1
 80040f4:	d106      	bne.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040f6:	4b02      	ldr	r3, [pc, #8]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040f8:	e006      	b.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040fa:	bf00      	nop
 80040fc:	40003800 	.word	0x40003800
 8004100:	40003400 	.word	0x40003400
 8004104:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004108:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800410c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800411c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	f043 0204 	orr.w	r2, r3, #4
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fdc0 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004138:	e000      	b.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800413a:	bf00      	nop
}
 800413c:	bf00      	nop
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	1c99      	adds	r1, r3, #2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6251      	str	r1, [r2, #36]	@ 0x24
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d113      	bne.n	80041b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ffc9 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	1c99      	adds	r1, r3, #2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80041ce:	8819      	ldrh	r1, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <I2SEx_TxISR_I2SExt+0x90>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <I2SEx_TxISR_I2SExt+0x22>
 80041da:	4b1d      	ldr	r3, [pc, #116]	@ (8004250 <I2SEx_TxISR_I2SExt+0x94>)
 80041dc:	e001      	b.n	80041e2 <I2SEx_TxISR_I2SExt+0x26>
 80041de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e2:	460a      	mov	r2, r1
 80041e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d121      	bne.n	8004242 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <I2SEx_TxISR_I2SExt+0x90>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <I2SEx_TxISR_I2SExt+0x50>
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <I2SEx_TxISR_I2SExt+0x94>)
 800420a:	e001      	b.n	8004210 <I2SEx_TxISR_I2SExt+0x54>
 800420c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	490d      	ldr	r1, [pc, #52]	@ (800424c <I2SEx_TxISR_I2SExt+0x90>)
 8004218:	428b      	cmp	r3, r1
 800421a:	d101      	bne.n	8004220 <I2SEx_TxISR_I2SExt+0x64>
 800421c:	4b0c      	ldr	r3, [pc, #48]	@ (8004250 <I2SEx_TxISR_I2SExt+0x94>)
 800421e:	e001      	b.n	8004224 <I2SEx_TxISR_I2SExt+0x68>
 8004220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004224:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004228:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff81 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40003800 	.word	0x40003800
 8004250:	40003400 	.word	0x40003400

08004254 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68d8      	ldr	r0, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	1c99      	adds	r1, r3, #2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800426c:	b282      	uxth	r2, r0
 800426e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004296:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ff4a 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a20      	ldr	r2, [pc, #128]	@ (8004348 <I2SEx_RxISR_I2SExt+0x90>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <I2SEx_RxISR_I2SExt+0x16>
 80042ca:	4b20      	ldr	r3, [pc, #128]	@ (800434c <I2SEx_RxISR_I2SExt+0x94>)
 80042cc:	e001      	b.n	80042d2 <I2SEx_RxISR_I2SExt+0x1a>
 80042ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d2:	68d8      	ldr	r0, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	1c99      	adds	r1, r3, #2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042de:	b282      	uxth	r2, r0
 80042e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d121      	bne.n	800433e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <I2SEx_RxISR_I2SExt+0x90>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <I2SEx_RxISR_I2SExt+0x50>
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <I2SEx_RxISR_I2SExt+0x94>)
 8004306:	e001      	b.n	800430c <I2SEx_RxISR_I2SExt+0x54>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	490d      	ldr	r1, [pc, #52]	@ (8004348 <I2SEx_RxISR_I2SExt+0x90>)
 8004314:	428b      	cmp	r3, r1
 8004316:	d101      	bne.n	800431c <I2SEx_RxISR_I2SExt+0x64>
 8004318:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <I2SEx_RxISR_I2SExt+0x94>)
 800431a:	e001      	b.n	8004320 <I2SEx_RxISR_I2SExt+0x68>
 800431c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004320:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004324:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff03 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40003800 	.word	0x40003800
 800434c:	40003400 	.word	0x40003400

08004350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e267      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d075      	beq.n	800445a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436e:	4b88      	ldr	r3, [pc, #544]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b04      	cmp	r3, #4
 8004378:	d00c      	beq.n	8004394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437a:	4b85      	ldr	r3, [pc, #532]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004382:	2b08      	cmp	r3, #8
 8004384:	d112      	bne.n	80043ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004386:	4b82      	ldr	r3, [pc, #520]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004392:	d10b      	bne.n	80043ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	4b7e      	ldr	r3, [pc, #504]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05b      	beq.n	8004458 <HAL_RCC_OscConfig+0x108>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d157      	bne.n	8004458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e242      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b4:	d106      	bne.n	80043c4 <HAL_RCC_OscConfig+0x74>
 80043b6:	4b76      	ldr	r3, [pc, #472]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a75      	ldr	r2, [pc, #468]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e01d      	b.n	8004400 <HAL_RCC_OscConfig+0xb0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x98>
 80043ce:	4b70      	ldr	r3, [pc, #448]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b6d      	ldr	r3, [pc, #436]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6c      	ldr	r2, [pc, #432]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0xb0>
 80043e8:	4b69      	ldr	r3, [pc, #420]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a68      	ldr	r2, [pc, #416]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b66      	ldr	r3, [pc, #408]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fc fdac 	bl	8000f64 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004410:	f7fc fda8 	bl	8000f64 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e207      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	4b5b      	ldr	r3, [pc, #364]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0xc0>
 800442e:	e014      	b.n	800445a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fc fd98 	bl	8000f64 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004438:	f7fc fd94 	bl	8000f64 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	@ 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1f3      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444a:	4b51      	ldr	r3, [pc, #324]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0xe8>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d063      	beq.n	800452e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004466:	4b4a      	ldr	r3, [pc, #296]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004472:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800447a:	2b08      	cmp	r3, #8
 800447c:	d11c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447e:	4b44      	ldr	r3, [pc, #272]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d116      	bne.n	80044b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	4b41      	ldr	r3, [pc, #260]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_RCC_OscConfig+0x152>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e1c7      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4937      	ldr	r1, [pc, #220]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	e03a      	b.n	800452e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d020      	beq.n	8004502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c0:	4b34      	ldr	r3, [pc, #208]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fc fd4d 	bl	8000f64 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fc fd49 	bl	8000f64 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1a8      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ec:	4b28      	ldr	r3, [pc, #160]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4925      	ldr	r1, [pc, #148]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	600b      	str	r3, [r1, #0]
 8004500:	e015      	b.n	800452e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fc fd2c 	bl	8000f64 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004510:	f7fc fd28 	bl	8000f64 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e187      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004522:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d036      	beq.n	80045a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <HAL_RCC_OscConfig+0x248>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fc fd0c 	bl	8000f64 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004550:	f7fc fd08 	bl	8000f64 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e167      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x200>
 800456e:	e01b      	b.n	80045a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_RCC_OscConfig+0x248>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004576:	f7fc fcf5 	bl	8000f64 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	e00e      	b.n	800459c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457e:	f7fc fcf1 	bl	8000f64 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d907      	bls.n	800459c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e150      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
 8004590:	40023800 	.word	0x40023800
 8004594:	42470000 	.word	0x42470000
 8004598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	4b88      	ldr	r3, [pc, #544]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ea      	bne.n	800457e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8097 	beq.w	80046e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ba:	4b81      	ldr	r3, [pc, #516]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	4b7d      	ldr	r3, [pc, #500]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	4a7c      	ldr	r2, [pc, #496]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045d6:	4b7a      	ldr	r3, [pc, #488]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e6:	4b77      	ldr	r3, [pc, #476]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d118      	bne.n	8004624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f2:	4b74      	ldr	r3, [pc, #464]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a73      	ldr	r2, [pc, #460]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fe:	f7fc fcb1 	bl	8000f64 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004606:	f7fc fcad 	bl	8000f64 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e10c      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	4b6a      	ldr	r3, [pc, #424]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x2ea>
 800462c:	4b64      	ldr	r3, [pc, #400]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a63      	ldr	r2, [pc, #396]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
 8004638:	e01c      	b.n	8004674 <HAL_RCC_OscConfig+0x324>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b05      	cmp	r3, #5
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x30c>
 8004642:	4b5f      	ldr	r3, [pc, #380]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	4a5e      	ldr	r2, [pc, #376]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	6713      	str	r3, [r2, #112]	@ 0x70
 800464e:	4b5c      	ldr	r3, [pc, #368]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	4a5b      	ldr	r2, [pc, #364]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	@ 0x70
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0x324>
 800465c:	4b58      	ldr	r3, [pc, #352]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004660:	4a57      	ldr	r2, [pc, #348]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	6713      	str	r3, [r2, #112]	@ 0x70
 8004668:	4b55      	ldr	r3, [pc, #340]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	4a54      	ldr	r2, [pc, #336]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800466e:	f023 0304 	bic.w	r3, r3, #4
 8004672:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fc fc72 	bl	8000f64 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fc fc6e 	bl	8000f64 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0cb      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	4b49      	ldr	r3, [pc, #292]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ee      	beq.n	8004684 <HAL_RCC_OscConfig+0x334>
 80046a6:	e014      	b.n	80046d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a8:	f7fc fc5c 	bl	8000f64 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fc fc58 	bl	8000f64 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0b5      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c6:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ee      	bne.n	80046b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d8:	4b39      	ldr	r3, [pc, #228]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046dc:	4a38      	ldr	r2, [pc, #224]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80a1 	beq.w	8004830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ee:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d05c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d141      	bne.n	8004786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_RCC_OscConfig+0x478>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fc fc2c 	bl	8000f64 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004710:	f7fc fc28 	bl	8000f64 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e087      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b27      	ldr	r3, [pc, #156]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	491b      	ldr	r1, [pc, #108]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x478>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fc fc01 	bl	8000f64 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004766:	f7fc fbfd 	bl	8000f64 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e05c      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004778:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x416>
 8004784:	e054      	b.n	8004830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <HAL_RCC_OscConfig+0x478>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fc fbea 	bl	8000f64 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004794:	f7fc fbe6 	bl	8000f64 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e045      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x444>
 80047b2:	e03d      	b.n	8004830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e038      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047cc:	4b1b      	ldr	r3, [pc, #108]	@ (800483c <HAL_RCC_OscConfig+0x4ec>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d028      	beq.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d121      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d11a      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004804:	4293      	cmp	r3, r2
 8004806:	d111      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	3b01      	subs	r3, #1
 8004816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d107      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0cc      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b68      	ldr	r3, [pc, #416]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d90c      	bls.n	800487c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b65      	ldr	r3, [pc, #404]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b63      	ldr	r3, [pc, #396]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0b8      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004894:	4b59      	ldr	r3, [pc, #356]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a58      	ldr	r2, [pc, #352]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800489e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048ac:	4b53      	ldr	r3, [pc, #332]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a52      	ldr	r2, [pc, #328]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b8:	4b50      	ldr	r3, [pc, #320]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	494d      	ldr	r1, [pc, #308]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d044      	beq.n	8004960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b47      	ldr	r3, [pc, #284]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d119      	bne.n	800491e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e07f      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fe:	4b3f      	ldr	r3, [pc, #252]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e06f      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490e:	4b3b      	ldr	r3, [pc, #236]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e067      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491e:	4b37      	ldr	r3, [pc, #220]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 0203 	bic.w	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4934      	ldr	r1, [pc, #208]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004930:	f7fc fb18 	bl	8000f64 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	e00a      	b.n	800494e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004938:	f7fc fb14 	bl	8000f64 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e04f      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494e:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 020c 	and.w	r2, r3, #12
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	429a      	cmp	r2, r3
 800495e:	d1eb      	bne.n	8004938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d20c      	bcs.n	8004988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b22      	ldr	r3, [pc, #136]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e032      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4916      	ldr	r1, [pc, #88]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b2:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	490e      	ldr	r1, [pc, #56]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049c6:	f000 f821 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	490a      	ldr	r1, [pc, #40]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c0>)
 80049d8:	5ccb      	ldrb	r3, [r1, r3]
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049e2:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fc fa78 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023c00 	.word	0x40023c00
 80049fc:	40023800 	.word	0x40023800
 8004a00:	08009c24 	.word	0x08009c24
 8004a04:	20000000 	.word	0x20000000
 8004a08:	20000004 	.word	0x20000004

08004a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b094      	sub	sp, #80	@ 0x50
 8004a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a18:	2300      	movs	r3, #0
 8004a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a24:	4b79      	ldr	r3, [pc, #484]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d00d      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x40>
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	f200 80e1 	bhi.w	8004bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a3e:	e0db      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a40:	4b73      	ldr	r3, [pc, #460]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a44:	e0db      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a46:	4b73      	ldr	r3, [pc, #460]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4a:	e0d8      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a54:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a56:	4b6d      	ldr	r3, [pc, #436]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d063      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b6a      	ldr	r3, [pc, #424]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	2200      	movs	r2, #0
 8004a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a76:	2300      	movs	r3, #0
 8004a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a7e:	4622      	mov	r2, r4
 8004a80:	462b      	mov	r3, r5
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	0159      	lsls	r1, r3, #5
 8004a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a90:	0150      	lsls	r0, r2, #5
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4621      	mov	r1, r4
 8004a98:	1a51      	subs	r1, r2, r1
 8004a9a:	6139      	str	r1, [r7, #16]
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	018b      	lsls	r3, r1, #6
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aba:	4651      	mov	r1, sl
 8004abc:	018a      	lsls	r2, r1, #6
 8004abe:	4651      	mov	r1, sl
 8004ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ade:	4690      	mov	r8, r2
 8004ae0:	4699      	mov	r9, r3
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	eb18 0303 	adds.w	r3, r8, r3
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	462b      	mov	r3, r5
 8004aec:	eb49 0303 	adc.w	r3, r9, r3
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004afe:	4629      	mov	r1, r5
 8004b00:	024b      	lsls	r3, r1, #9
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b08:	4621      	mov	r1, r4
 8004b0a:	024a      	lsls	r2, r1, #9
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b12:	2200      	movs	r2, #0
 8004b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b1c:	f7fb fb54 	bl	80001c8 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b28:	e058      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b38      	ldr	r3, [pc, #224]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	2200      	movs	r2, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	4611      	mov	r1, r2
 8004b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b44:	4642      	mov	r2, r8
 8004b46:	464b      	mov	r3, r9
 8004b48:	f04f 0000 	mov.w	r0, #0
 8004b4c:	f04f 0100 	mov.w	r1, #0
 8004b50:	0159      	lsls	r1, r3, #5
 8004b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b56:	0150      	lsls	r0, r2, #5
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b62:	4649      	mov	r1, r9
 8004b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b80:	eb63 050b 	sbc.w	r5, r3, fp
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	00eb      	lsls	r3, r5, #3
 8004b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b92:	00e2      	lsls	r2, r4, #3
 8004b94:	4614      	mov	r4, r2
 8004b96:	461d      	mov	r5, r3
 8004b98:	4643      	mov	r3, r8
 8004b9a:	18e3      	adds	r3, r4, r3
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	eb45 0303 	adc.w	r3, r5, r3
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	028b      	lsls	r3, r1, #10
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	028a      	lsls	r2, r1, #10
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	61fa      	str	r2, [r7, #28]
 8004bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd0:	f7fb fafa 	bl	80001c8 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4613      	mov	r3, r2
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	3301      	adds	r3, #1
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf6:	e002      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3750      	adds	r7, #80	@ 0x50
 8004c04:	46bd      	mov	sp, r7
 8004c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	007a1200 	.word	0x007a1200

08004c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c1c:	4b03      	ldr	r3, [pc, #12]	@ (8004c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000000 	.word	0x20000000

08004c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c34:	f7ff fff0 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0a9b      	lsrs	r3, r3, #10
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	@ (8004c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	08009c34 	.word	0x08009c34

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d035      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c80:	4b62      	ldr	r3, [pc, #392]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c86:	f7fc f96d 	bl	8000f64 <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c8e:	f7fc f969 	bl	8000f64 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e0b0      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	019a      	lsls	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	071b      	lsls	r3, r3, #28
 8004cb8:	4955      	ldr	r1, [pc, #340]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc0:	4b52      	ldr	r3, [pc, #328]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cc6:	f7fc f94d 	bl	8000f64 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cce:	f7fc f949 	bl	8000f64 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e090      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8083 	beq.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4b44      	ldr	r3, [pc, #272]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	4a43      	ldr	r2, [pc, #268]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0a:	4b41      	ldr	r3, [pc, #260]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d16:	4b3f      	ldr	r3, [pc, #252]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fc f91f 	bl	8000f64 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fc f91b 	bl	8000f64 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e062      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d3c:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d48:	4b31      	ldr	r3, [pc, #196]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d028      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d66:	4b2a      	ldr	r3, [pc, #168]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d70:	4b29      	ldr	r3, [pc, #164]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b28      	ldr	r3, [pc, #160]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d7c:	4a24      	ldr	r2, [pc, #144]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d82:	4b23      	ldr	r3, [pc, #140]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d114      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d8e:	f7fc f8e9 	bl	8000f64 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fc f8e5 	bl	8000f64 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e02a      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ee      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc4:	d10d      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dc6:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dda:	490d      	ldr	r1, [pc, #52]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004de2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dec:	6093      	str	r3, [r2, #8]
 8004dee:	4b08      	ldr	r3, [pc, #32]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfa:	4905      	ldr	r1, [pc, #20]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	42470068 	.word	0x42470068
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40007000 	.word	0x40007000
 8004e18:	42470e40 	.word	0x42470e40

08004e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d13f      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e50:	d12f      	bne.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e52:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e54:	617b      	str	r3, [r7, #20]
          break;
 8004e56:	e02f      	b.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e58:	4b1c      	ldr	r3, [pc, #112]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e64:	d108      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e66:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e007      	b.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e78:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e80:	4a15      	ldr	r2, [pc, #84]	@ (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e88:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea2:	0f1b      	lsrs	r3, r3, #28
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	617b      	str	r3, [r7, #20]
          break;
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
          break;
 8004eb6:	bf00      	nop
        }
      }
      break;
 8004eb8:	e000      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004eba:	bf00      	nop
    }
  }
  return frequency;
 8004ebc:	697b      	ldr	r3, [r7, #20]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00bb8000 	.word	0x00bb8000
 8004ed4:	007a1200 	.word	0x007a1200
 8004ed8:	00f42400 	.word	0x00f42400

08004edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e07b      	b.n	8004fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004efe:	d009      	beq.n	8004f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	61da      	str	r2, [r3, #28]
 8004f06:	e005      	b.n	8004f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fe56 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	ea42 0103 	orr.w	r1, r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	f003 0104 	and.w	r1, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f003 0210 	and.w	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e041      	b.n	8005084 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fb fe2b 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f000 fbfb 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e041      	b.n	8005122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f839 	bl	800512a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f000 fbac 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <HAL_TIM_PWM_Start+0x24>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	e022      	b.n	80051aa <HAL_TIM_PWM_Start+0x6a>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d109      	bne.n	800517e <HAL_TIM_PWM_Start+0x3e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e015      	b.n	80051aa <HAL_TIM_PWM_Start+0x6a>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d109      	bne.n	8005198 <HAL_TIM_PWM_Start+0x58>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e008      	b.n	80051aa <HAL_TIM_PWM_Start+0x6a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e07c      	b.n	80052ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x82>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c0:	e013      	b.n	80051ea <HAL_TIM_PWM_Start+0xaa>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x92>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_PWM_Start+0xaa>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xa2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e0:	e003      	b.n	80051ea <HAL_TIM_PWM_Start+0xaa>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2201      	movs	r2, #1
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fe0e 	bl	8005e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2d      	ldr	r2, [pc, #180]	@ (80052b4 <HAL_TIM_PWM_Start+0x174>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_TIM_PWM_Start+0xcc>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2c      	ldr	r2, [pc, #176]	@ (80052b8 <HAL_TIM_PWM_Start+0x178>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_TIM_PWM_Start+0xd0>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <HAL_TIM_PWM_Start+0xd2>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a22      	ldr	r2, [pc, #136]	@ (80052b4 <HAL_TIM_PWM_Start+0x174>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005238:	d01d      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1f      	ldr	r2, [pc, #124]	@ (80052bc <HAL_TIM_PWM_Start+0x17c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1d      	ldr	r2, [pc, #116]	@ (80052c0 <HAL_TIM_PWM_Start+0x180>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1c      	ldr	r2, [pc, #112]	@ (80052c4 <HAL_TIM_PWM_Start+0x184>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a16      	ldr	r2, [pc, #88]	@ (80052b8 <HAL_TIM_PWM_Start+0x178>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	@ (80052c8 <HAL_TIM_PWM_Start+0x188>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <HAL_TIM_PWM_Start+0x18c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d111      	bne.n	800529a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b06      	cmp	r3, #6
 8005286:	d010      	beq.n	80052aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	e007      	b.n	80052aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40010400 	.word	0x40010400
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40001800 	.word	0x40001800

080052d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0202 	mvn.w	r2, #2
 8005304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa65 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa57 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa68 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d020      	beq.n	8005380 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0204 	mvn.w	r2, #4
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa3f 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa31 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa42 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d020      	beq.n	80053cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0208 	mvn.w	r2, #8
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2204      	movs	r2, #4
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa19 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa0b 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fa1c 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d020      	beq.n	8005418 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0210 	mvn.w	r2, #16
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2208      	movs	r2, #8
 80053ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9f3 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f9e5 	bl	80057d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f9f6 	bl	80057fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0201 	mvn.w	r2, #1
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f9c3 	bl	80057c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00c      	beq.n	8005460 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fd86 	bl	8005f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f9c7 	bl	8005812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0220 	mvn.w	r2, #32
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fd58 	bl	8005f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e0ae      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b0c      	cmp	r3, #12
 80054da:	f200 809f 	bhi.w	800561c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054de:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	08005519 	.word	0x08005519
 80054e8:	0800561d 	.word	0x0800561d
 80054ec:	0800561d 	.word	0x0800561d
 80054f0:	0800561d 	.word	0x0800561d
 80054f4:	08005559 	.word	0x08005559
 80054f8:	0800561d 	.word	0x0800561d
 80054fc:	0800561d 	.word	0x0800561d
 8005500:	0800561d 	.word	0x0800561d
 8005504:	0800559b 	.word	0x0800559b
 8005508:	0800561d 	.word	0x0800561d
 800550c:	0800561d 	.word	0x0800561d
 8005510:	0800561d 	.word	0x0800561d
 8005514:	080055db 	.word	0x080055db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fa2e 	bl	8005980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0208 	orr.w	r2, r2, #8
 8005532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0204 	bic.w	r2, r2, #4
 8005542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6999      	ldr	r1, [r3, #24]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	619a      	str	r2, [r3, #24]
      break;
 8005556:	e064      	b.n	8005622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fa7e 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6999      	ldr	r1, [r3, #24]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	619a      	str	r2, [r3, #24]
      break;
 8005598:	e043      	b.n	8005622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fad3 	bl	8005b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0208 	orr.w	r2, r2, #8
 80055b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0204 	bic.w	r2, r2, #4
 80055c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69d9      	ldr	r1, [r3, #28]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	61da      	str	r2, [r3, #28]
      break;
 80055d8:	e023      	b.n	8005622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fb27 	bl	8005c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69d9      	ldr	r1, [r3, #28]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	021a      	lsls	r2, r3, #8
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	61da      	str	r2, [r3, #28]
      break;
 800561a:	e002      	b.n	8005622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
      break;
 8005620:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIM_ConfigClockSource+0x1c>
 800564c:	2302      	movs	r3, #2
 800564e:	e0b4      	b.n	80057ba <HAL_TIM_ConfigClockSource+0x186>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800566e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005688:	d03e      	beq.n	8005708 <HAL_TIM_ConfigClockSource+0xd4>
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800568e:	f200 8087 	bhi.w	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005696:	f000 8086 	beq.w	80057a6 <HAL_TIM_ConfigClockSource+0x172>
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569e:	d87f      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b70      	cmp	r3, #112	@ 0x70
 80056a2:	d01a      	beq.n	80056da <HAL_TIM_ConfigClockSource+0xa6>
 80056a4:	2b70      	cmp	r3, #112	@ 0x70
 80056a6:	d87b      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056a8:	2b60      	cmp	r3, #96	@ 0x60
 80056aa:	d050      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x11a>
 80056ac:	2b60      	cmp	r3, #96	@ 0x60
 80056ae:	d877      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056b0:	2b50      	cmp	r3, #80	@ 0x50
 80056b2:	d03c      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xfa>
 80056b4:	2b50      	cmp	r3, #80	@ 0x50
 80056b6:	d873      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056b8:	2b40      	cmp	r3, #64	@ 0x40
 80056ba:	d058      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x13a>
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	d86f      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056c0:	2b30      	cmp	r3, #48	@ 0x30
 80056c2:	d064      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056c4:	2b30      	cmp	r3, #48	@ 0x30
 80056c6:	d86b      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d060      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d867      	bhi.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05c      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d05a      	beq.n	800578e <HAL_TIM_ConfigClockSource+0x15a>
 80056d8:	e062      	b.n	80057a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ea:	f000 fb73 	bl	8005dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	609a      	str	r2, [r3, #8]
      break;
 8005706:	e04f      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005718:	f000 fb5c 	bl	8005dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800572a:	609a      	str	r2, [r3, #8]
      break;
 800572c:	e03c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	461a      	mov	r2, r3
 800573c:	f000 fad0 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2150      	movs	r1, #80	@ 0x50
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fb29 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800574c:	e02c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800575a:	461a      	mov	r2, r3
 800575c:	f000 faef 	bl	8005d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2160      	movs	r1, #96	@ 0x60
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fb19 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800576c:	e01c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577a:	461a      	mov	r2, r3
 800577c:	f000 fab0 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2140      	movs	r1, #64	@ 0x40
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fb09 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800578c:	e00c      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f000 fb00 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800579e:	e003      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      break;
 80057a4:	e000      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a46      	ldr	r2, [pc, #280]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d00f      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a43      	ldr	r2, [pc, #268]	@ (8005958 <TIM_Base_SetConfig+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a42      	ldr	r2, [pc, #264]	@ (800595c <TIM_Base_SetConfig+0x134>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a41      	ldr	r2, [pc, #260]	@ (8005960 <TIM_Base_SetConfig+0x138>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a40      	ldr	r2, [pc, #256]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a35      	ldr	r2, [pc, #212]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005888:	d027      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a32      	ldr	r2, [pc, #200]	@ (8005958 <TIM_Base_SetConfig+0x130>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d023      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a31      	ldr	r2, [pc, #196]	@ (800595c <TIM_Base_SetConfig+0x134>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a30      	ldr	r2, [pc, #192]	@ (8005960 <TIM_Base_SetConfig+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005968 <TIM_Base_SetConfig+0x140>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	@ (800596c <TIM_Base_SetConfig+0x144>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005970 <TIM_Base_SetConfig+0x148>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005974 <TIM_Base_SetConfig+0x14c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <TIM_Base_SetConfig+0x150>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	@ (800597c <TIM_Base_SetConfig+0x154>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a10      	ldr	r2, [pc, #64]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]
  }
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40010400 	.word	0x40010400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800
 8005974:	40001800 	.word	0x40001800
 8005978:	40001c00 	.word	0x40001c00
 800597c:	40002000 	.word	0x40002000

08005980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0201 	bic.w	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0302 	bic.w	r3, r3, #2
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a20      	ldr	r2, [pc, #128]	@ (8005a58 <TIM_OC1_SetConfig+0xd8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC1_SetConfig+0x64>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <TIM_OC1_SetConfig+0xdc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10c      	bne.n	80059fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0308 	bic.w	r3, r3, #8
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 0304 	bic.w	r3, r3, #4
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <TIM_OC1_SetConfig+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC1_SetConfig+0x8e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a14      	ldr	r2, [pc, #80]	@ (8005a5c <TIM_OC1_SetConfig+0xdc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d111      	bne.n	8005a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f023 0210 	bic.w	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC2_SetConfig+0x68>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	@ (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC2_SetConfig+0x94>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d113      	bne.n	8005b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a21      	ldr	r2, [pc, #132]	@ (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_OC3_SetConfig+0x66>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a20      	ldr	r2, [pc, #128]	@ (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10d      	bne.n	8005bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC3_SetConfig+0x92>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	@ (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	@ (8005cd8 <TIM_OC4_SetConfig+0xa4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC4_SetConfig+0x68>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a11      	ldr	r2, [pc, #68]	@ (8005cdc <TIM_OC4_SetConfig+0xa8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d109      	bne.n	8005cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 030a 	bic.w	r3, r3, #10
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b087      	sub	sp, #28
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0210 	bic.w	r2, r3, #16
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	031b      	lsls	r3, r3, #12
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2201      	movs	r2, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e05a      	b.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a21      	ldr	r2, [pc, #132]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d022      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec4:	d01d      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	@ (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	@ (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a15      	ldr	r2, [pc, #84]	@ (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40010400 	.word	0x40010400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40001800 	.word	0x40001800

08005f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f80:	b084      	sub	sp, #16
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	f107 001c 	add.w	r0, r7, #28
 8005f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d123      	bne.n	8005fe2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d105      	bne.n	8005fd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9dc 	bl	8006394 <USB_CoreReset>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	e01b      	b.n	800601a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9d0 	bl	8006394 <USB_CoreReset>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ff8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	639a      	str	r2, [r3, #56]	@ 0x38
 800600c:	e005      	b.n	800601a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800601a:	7fbb      	ldrb	r3, [r7, #30]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d10b      	bne.n	8006038 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f043 0206 	orr.w	r2, r3, #6
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006044:	b004      	add	sp, #16
 8006046:	4770      	bx	lr

08006048 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f043 0201 	orr.w	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d115      	bne.n	80060da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060ba:	200a      	movs	r0, #10
 80060bc:	f7fa ff5e 	bl	8000f7c <HAL_Delay>
      ms += 10U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	330a      	adds	r3, #10
 80060c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f956 	bl	8006378 <USB_GetMode>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d01e      	beq.n	8006110 <USB_SetCurrentMode+0x84>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80060d6:	d9f0      	bls.n	80060ba <USB_SetCurrentMode+0x2e>
 80060d8:	e01a      	b.n	8006110 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d115      	bne.n	800610c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060ec:	200a      	movs	r0, #10
 80060ee:	f7fa ff45 	bl	8000f7c <HAL_Delay>
      ms += 10U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	330a      	adds	r3, #10
 80060f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f93d 	bl	8006378 <USB_GetMode>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <USB_SetCurrentMode+0x84>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2bc7      	cmp	r3, #199	@ 0xc7
 8006108:	d9f0      	bls.n	80060ec <USB_SetCurrentMode+0x60>
 800610a:	e001      	b.n	8006110 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e005      	b.n	800611c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2bc8      	cmp	r3, #200	@ 0xc8
 8006114:	d101      	bne.n	800611a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800613e:	d901      	bls.n	8006144 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e01b      	b.n	800617c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	daf2      	bge.n	8006132 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	019b      	lsls	r3, r3, #6
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006168:	d901      	bls.n	800616e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e006      	b.n	800617c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b20      	cmp	r3, #32
 8006178:	d0f0      	beq.n	800615c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061a0:	d901      	bls.n	80061a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e018      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	daf2      	bge.n	8006194 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2210      	movs	r2, #16
 80061b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c4:	d901      	bls.n	80061ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e006      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d0f0      	beq.n	80061b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b089      	sub	sp, #36	@ 0x24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4611      	mov	r1, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	460b      	mov	r3, r1
 80061f4:	71fb      	strb	r3, [r7, #7]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006202:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d123      	bne.n	8006252 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800620a:	88bb      	ldrh	r3, [r7, #4]
 800620c:	3303      	adds	r3, #3
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006212:	2300      	movs	r3, #0
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e018      	b.n	800624a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	031a      	lsls	r2, r3, #12
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006224:	461a      	mov	r2, r3
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3301      	adds	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	3301      	adds	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	3301      	adds	r3, #1
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	d3e2      	bcc.n	8006218 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3724      	adds	r7, #36	@ 0x24
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006260:	b480      	push	{r7}
 8006262:	b08b      	sub	sp, #44	@ 0x2c
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	b29b      	uxth	r3, r3
 800627c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	e014      	b.n	80062b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	601a      	str	r2, [r3, #0]
    pDest++;
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	3301      	adds	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	3301      	adds	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	3301      	adds	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	3301      	adds	r3, #1
 80062b4:	623b      	str	r3, [r7, #32]
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3e6      	bcc.n	800628c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062be:	8bfb      	ldrh	r3, [r7, #30]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01e      	beq.n	8006302 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ce:	461a      	mov	r2, r3
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	701a      	strb	r2, [r3, #0]
      i++;
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	3301      	adds	r3, #1
 80062ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	3301      	adds	r3, #1
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062fc:	8bfb      	ldrh	r3, [r7, #30]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ea      	bne.n	80062d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006304:	4618      	mov	r0, r3
 8006306:	372c      	adds	r7, #44	@ 0x2c
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006328:	68fb      	ldr	r3, [r7, #12]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800636a:	68bb      	ldr	r3, [r7, #8]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f003 0301 	and.w	r3, r3, #1
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063ac:	d901      	bls.n	80063b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e01b      	b.n	80063ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	daf2      	bge.n	80063a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063d6:	d901      	bls.n	80063dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e006      	b.n	80063ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d0f0      	beq.n	80063ca <USB_CoreReset+0x36>

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f8:	b084      	sub	sp, #16
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b086      	sub	sp, #24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006418:	461a      	mov	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d119      	bne.n	8006482 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800644e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006452:	2b01      	cmp	r3, #1
 8006454:	d10a      	bne.n	800646c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006464:	f043 0304 	orr.w	r3, r3, #4
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	e014      	b.n	8006496 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800647a:	f023 0304 	bic.w	r3, r3, #4
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e009      	b.n	8006496 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006490:	f023 0304 	bic.w	r3, r3, #4
 8006494:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006496:	2110      	movs	r1, #16
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff fe43 	bl	8006124 <USB_FlushTxFifo>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fe6d 	bl	8006188 <USB_FlushRxFifo>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	e015      	b.n	80064ea <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ca:	461a      	mov	r2, r3
 80064cc:	f04f 33ff 	mov.w	r3, #4294967295
 80064d0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064de:	461a      	mov	r2, r3
 80064e0:	2300      	movs	r3, #0
 80064e2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3301      	adds	r3, #1
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064ee:	461a      	mov	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d3e3      	bcc.n	80064be <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006502:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a18      	ldr	r2, [pc, #96]	@ (8006568 <USB_HostInit+0x170>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10b      	bne.n	8006524 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006512:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a15      	ldr	r2, [pc, #84]	@ (800656c <USB_HostInit+0x174>)
 8006518:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a14      	ldr	r2, [pc, #80]	@ (8006570 <USB_HostInit+0x178>)
 800651e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006522:	e009      	b.n	8006538 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2280      	movs	r2, #128	@ 0x80
 8006528:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a11      	ldr	r2, [pc, #68]	@ (8006574 <USB_HostInit+0x17c>)
 800652e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a11      	ldr	r2, [pc, #68]	@ (8006578 <USB_HostInit+0x180>)
 8006534:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006538:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	f043 0210 	orr.w	r2, r3, #16
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699a      	ldr	r2, [r3, #24]
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <USB_HostInit+0x184>)
 8006552:	4313      	orrs	r3, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006564:	b004      	add	sp, #16
 8006566:	4770      	bx	lr
 8006568:	40040000 	.word	0x40040000
 800656c:	01000200 	.word	0x01000200
 8006570:	00e00300 	.word	0x00e00300
 8006574:	00600080 	.word	0x00600080
 8006578:	004000e0 	.word	0x004000e0
 800657c:	a3200008 	.word	0xa3200008

08006580 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065b8:	4313      	orrs	r3, r2
 80065ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d107      	bne.n	80065d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065c8:	461a      	mov	r2, r3
 80065ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065ce:	6053      	str	r3, [r2, #4]
 80065d0:	e00c      	b.n	80065ec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d107      	bne.n	80065e8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065de:	461a      	mov	r2, r3
 80065e0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80065e4:	6053      	str	r3, [r2, #4]
 80065e6:	e001      	b.n	80065ec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800661a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006628:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800662a:	2064      	movs	r0, #100	@ 0x64
 800662c:	f7fa fca6 	bl	8000f7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800663c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800663e:	200a      	movs	r0, #10
 8006640:	f7fa fc9c 	bl	8000f7c <HAL_Delay>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006672:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <USB_DriveVbus+0x44>
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d106      	bne.n	8006692 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800668c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006690:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669c:	d109      	bne.n	80066b2 <USB_DriveVbus+0x64>
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0c5b      	lsrs	r3, r3, #17
 80066de:	f003 0303 	and.w	r3, r3, #3
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	b29b      	uxth	r3, r3
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	4608      	mov	r0, r1
 800671a:	4611      	mov	r1, r2
 800671c:	461a      	mov	r2, r3
 800671e:	4603      	mov	r3, r0
 8006720:	70fb      	strb	r3, [r7, #3]
 8006722:	460b      	mov	r3, r1
 8006724:	70bb      	strb	r3, [r7, #2]
 8006726:	4613      	mov	r3, r2
 8006728:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800673e:	461a      	mov	r2, r3
 8006740:	f04f 33ff 	mov.w	r3, #4294967295
 8006744:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006746:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800674a:	2b03      	cmp	r3, #3
 800674c:	d87c      	bhi.n	8006848 <USB_HC_Init+0x138>
 800674e:	a201      	add	r2, pc, #4	@ (adr r2, 8006754 <USB_HC_Init+0x44>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006765 	.word	0x08006765
 8006758:	0800680b 	.word	0x0800680b
 800675c:	08006765 	.word	0x08006765
 8006760:	080067cd 	.word	0x080067cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4413      	add	r3, r2
 800676c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006770:	461a      	mov	r2, r3
 8006772:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006776:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800677c:	2b00      	cmp	r3, #0
 800677e:	da10      	bge.n	80067a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	78fa      	ldrb	r2, [r7, #3]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	440a      	add	r2, r1
 8006796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800679a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80067a0:	e055      	b.n	800684e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a6f      	ldr	r2, [pc, #444]	@ (8006964 <USB_HC_Init+0x254>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d151      	bne.n	800684e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	78fa      	ldrb	r2, [r7, #3]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067c8:	60d3      	str	r3, [r2, #12]
      break;
 80067ca:	e040      	b.n	800684e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d8:	461a      	mov	r2, r3
 80067da:	f240 639d 	movw	r3, #1693	@ 0x69d
 80067de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	da34      	bge.n	8006852 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006806:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006808:	e023      	b.n	8006852 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006816:	461a      	mov	r2, r3
 8006818:	f240 2325 	movw	r3, #549	@ 0x225
 800681c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800681e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da17      	bge.n	8006856 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	440a      	add	r2, r1
 800683c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006840:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006844:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006846:	e006      	b.n	8006856 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	77fb      	strb	r3, [r7, #31]
      break;
 800684c:	e004      	b.n	8006858 <USB_HC_Init+0x148>
      break;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <USB_HC_Init+0x148>
      break;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <USB_HC_Init+0x148>
      break;
 8006856:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006864:	461a      	mov	r2, r3
 8006866:	2300      	movs	r3, #0
 8006868:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	440a      	add	r2, r1
 8006880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006884:	f043 0302 	orr.w	r3, r3, #2
 8006888:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	2101      	movs	r1, #1
 800689a:	fa01 f303 	lsl.w	r3, r1, r3
 800689e:	6939      	ldr	r1, [r7, #16]
 80068a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80068a4:	4313      	orrs	r3, r2
 80068a6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	da03      	bge.n	80068c4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e001      	b.n	80068c8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fef9 	bl	80066c0 <USB_GetHostSpeed>
 80068ce:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d106      	bne.n	80068e6 <USB_HC_Init+0x1d6>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d003      	beq.n	80068e6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e001      	b.n	80068ea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068ea:	787b      	ldrb	r3, [r7, #1]
 80068ec:	059b      	lsls	r3, r3, #22
 80068ee:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068f2:	78bb      	ldrb	r3, [r7, #2]
 80068f4:	02db      	lsls	r3, r3, #11
 80068f6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068fa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006900:	049b      	lsls	r3, r3, #18
 8006902:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006906:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006908:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800690a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800690e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	431a      	orrs	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006918:	78fa      	ldrb	r2, [r7, #3]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	440a      	add	r2, r1
 8006920:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006924:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006928:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800692a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800692e:	2b03      	cmp	r3, #3
 8006930:	d003      	beq.n	800693a <USB_HC_Init+0x22a>
 8006932:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d10f      	bne.n	800695a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	440a      	add	r2, r1
 8006950:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006954:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006958:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800695a:	7ffb      	ldrb	r3, [r7, #31]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40040000 	.word	0x40040000

08006968 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08c      	sub	sp, #48	@ 0x30
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006984:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a5d      	ldr	r2, [pc, #372]	@ (8006b00 <USB_HC_StartXfer+0x198>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d12f      	bne.n	80069ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d11c      	bne.n	80069ce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	7c9b      	ldrb	r3, [r3, #18]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <USB_HC_StartXfer+0x3c>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	7c9b      	ldrb	r3, [r3, #18]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d124      	bne.n	80069ee <USB_HC_StartXfer+0x86>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	799b      	ldrb	r3, [r3, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d120      	bne.n	80069ee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	6a3a      	ldr	r2, [r7, #32]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	60d3      	str	r3, [r2, #12]
 80069cc:	e00f      	b.n	80069ee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <USB_HC_StartXfer+0x86>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	795b      	ldrb	r3, [r3, #5]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d107      	bne.n	80069ee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	4619      	mov	r1, r3
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fb6b 	bl	80070c0 <USB_DoPing>
        return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e232      	b.n	8006e54 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	799b      	ldrb	r3, [r3, #6]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d158      	bne.n	8006aa8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80069f6:	2301      	movs	r3, #1
 80069f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	78db      	ldrb	r3, [r3, #3]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	8a92      	ldrh	r2, [r2, #20]
 8006a08:	fb03 f202 	mul.w	r2, r3, r2
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	61da      	str	r2, [r3, #28]
 8006a10:	e07c      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	7c9b      	ldrb	r3, [r3, #18]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d130      	bne.n	8006a7c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006a20:	d918      	bls.n	8006a54 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	8a9b      	ldrh	r3, [r3, #20]
 8006a26:	461a      	mov	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d003      	beq.n	8006a44 <USB_HC_StartXfer+0xdc>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d103      	bne.n	8006a4c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2202      	movs	r2, #2
 8006a48:	60da      	str	r2, [r3, #12]
 8006a4a:	e05f      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	e05b      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d007      	beq.n	8006a74 <USB_HC_StartXfer+0x10c>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d003      	beq.n	8006a74 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e04b      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2203      	movs	r2, #3
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	e047      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10d      	bne.n	8006a9e <USB_HC_StartXfer+0x136>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	8a92      	ldrh	r2, [r2, #20]
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d907      	bls.n	8006a9e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	8a92      	ldrh	r2, [r2, #20]
 8006a94:	fb03 f202 	mul.w	r2, r3, r2
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	61da      	str	r2, [r3, #28]
 8006a9c:	e036      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	61da      	str	r2, [r3, #28]
 8006aa6:	e031      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d018      	beq.n	8006ae2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	8a92      	ldrh	r2, [r2, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	3b01      	subs	r3, #1
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	8a92      	ldrh	r2, [r2, #20]
 8006ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ac4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006ac6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006ac8:	8b7b      	ldrh	r3, [r7, #26]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d90b      	bls.n	8006ae6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006ace:	8b7b      	ldrh	r3, [r7, #26]
 8006ad0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ad2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	8a92      	ldrh	r2, [r2, #20]
 8006ad8:	fb03 f202 	mul.w	r2, r3, r2
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61da      	str	r2, [r3, #28]
 8006ae0:	e001      	b.n	8006ae6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	78db      	ldrb	r3, [r3, #3]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006aee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	8a92      	ldrh	r2, [r2, #20]
 8006af4:	fb03 f202 	mul.w	r2, r3, r2
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	61da      	str	r2, [r3, #28]
 8006afc:	e006      	b.n	8006b0c <USB_HC_StartXfer+0x1a4>
 8006afe:	bf00      	nop
 8006b00:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b16:	04d9      	lsls	r1, r3, #19
 8006b18:	4ba3      	ldr	r3, [pc, #652]	@ (8006da8 <USB_HC_StartXfer+0x440>)
 8006b1a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b1c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	7d9b      	ldrb	r3, [r3, #22]
 8006b22:	075b      	lsls	r3, r3, #29
 8006b24:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b28:	69f9      	ldr	r1, [r7, #28]
 8006b2a:	0148      	lsls	r0, r1, #5
 8006b2c:	6a39      	ldr	r1, [r7, #32]
 8006b2e:	4401      	add	r1, r0
 8006b30:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b34:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b36:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6999      	ldr	r1, [r3, #24]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b4e:	460a      	mov	r2, r1
 8006b50:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b88:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	7e7b      	ldrb	r3, [r7, #25]
 8006b9a:	075b      	lsls	r3, r3, #29
 8006b9c:	69f9      	ldr	r1, [r7, #28]
 8006b9e:	0148      	lsls	r0, r1, #5
 8006ba0:	6a39      	ldr	r1, [r7, #32]
 8006ba2:	4401      	add	r1, r0
 8006ba4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	799b      	ldrb	r3, [r3, #6]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	f040 80c3 	bne.w	8006d3c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	7c5b      	ldrb	r3, [r3, #17]
 8006bba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bd2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006bf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	79db      	ldrb	r3, [r3, #7]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d123      	bne.n	8006c44 <USB_HC_StartXfer+0x2dc>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	78db      	ldrb	r3, [r3, #3]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11f      	bne.n	8006c44 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	6a3a      	ldr	r2, [r7, #32]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c22:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	6a3a      	ldr	r2, [r7, #32]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c42:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	7c9b      	ldrb	r3, [r3, #18]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d003      	beq.n	8006c54 <USB_HC_StartXfer+0x2ec>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	7c9b      	ldrb	r3, [r3, #18]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d117      	bne.n	8006c84 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d113      	bne.n	8006c84 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	78db      	ldrb	r3, [r3, #3]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d10f      	bne.n	8006c84 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	6a3a      	ldr	r2, [r7, #32]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c82:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	7c9b      	ldrb	r3, [r3, #18]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d162      	bne.n	8006d52 <USB_HC_StartXfer+0x3ea>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	78db      	ldrb	r3, [r3, #3]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d15e      	bne.n	8006d52 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d858      	bhi.n	8006d50 <USB_HC_StartXfer+0x3e8>
 8006c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca4 <USB_HC_StartXfer+0x33c>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006cf9 	.word	0x08006cf9
 8006cb0:	08006d1b 	.word	0x08006d1b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	6a3a      	ldr	r2, [r7, #32]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd2:	6053      	str	r3, [r2, #4]
          break;
 8006cd4:	e03d      	b.n	8006d52 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	6a3a      	ldr	r2, [r7, #32]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cf0:	f043 030e 	orr.w	r3, r3, #14
 8006cf4:	6053      	str	r3, [r2, #4]
          break;
 8006cf6:	e02c      	b.n	8006d52 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	6a3a      	ldr	r2, [r7, #32]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d16:	6053      	str	r3, [r2, #4]
          break;
 8006d18:	e01b      	b.n	8006d52 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	6a3a      	ldr	r2, [r7, #32]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d38:	6053      	str	r3, [r2, #4]
          break;
 8006d3a:	e00a      	b.n	8006d52 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6053      	str	r3, [r2, #4]
 8006d4e:	e000      	b.n	8006d52 <USB_HC_StartXfer+0x3ea>
          break;
 8006d50:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d68:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	78db      	ldrb	r3, [r3, #3]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d004      	beq.n	8006d7c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	e003      	b.n	8006d84 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d82:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d8a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d98:	461a      	mov	r2, r3
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e055      	b.n	8006e54 <USB_HC_StartXfer+0x4ec>
 8006da8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	78db      	ldrb	r3, [r3, #3]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d14e      	bne.n	8006e52 <USB_HC_StartXfer+0x4ea>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d04a      	beq.n	8006e52 <USB_HC_StartXfer+0x4ea>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	79db      	ldrb	r3, [r3, #7]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d146      	bne.n	8006e52 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	7c9b      	ldrb	r3, [r3, #18]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d831      	bhi.n	8006e30 <USB_HC_StartXfer+0x4c8>
 8006dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd4 <USB_HC_StartXfer+0x46c>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006e09 	.word	0x08006e09
 8006ddc:	08006de5 	.word	0x08006de5
 8006de0:	08006e09 	.word	0x08006e09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	3303      	adds	r3, #3
 8006dea:	089b      	lsrs	r3, r3, #2
 8006dec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006dee:	8afa      	ldrh	r2, [r7, #22]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d91c      	bls.n	8006e34 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f043 0220 	orr.w	r2, r3, #32
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e06:	e015      	b.n	8006e34 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	089b      	lsrs	r3, r3, #2
 8006e10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e12:	8afa      	ldrh	r2, [r7, #22]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d90a      	bls.n	8006e38 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e2e:	e003      	b.n	8006e38 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <USB_HC_StartXfer+0x4d2>
        break;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <USB_HC_StartXfer+0x4d2>
        break;
 8006e38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6999      	ldr	r1, [r3, #24]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	785a      	ldrb	r2, [r3, #1]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2000      	movs	r0, #0
 8006e4a:	9000      	str	r0, [sp, #0]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f7ff f9c9 	bl	80061e4 <USB_WritePacket>
  }

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3728      	adds	r7, #40	@ 0x28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	b29b      	uxth	r3, r3
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b089      	sub	sp, #36	@ 0x24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	0c9b      	lsrs	r3, r3, #18
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	0fdb      	lsrs	r3, r3, #31
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	0fdb      	lsrs	r3, r3, #31
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d10d      	bne.n	8006f00 <USB_HC_Halt+0x82>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <USB_HC_Halt+0x82>
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d002      	beq.n	8006efc <USB_HC_Halt+0x7e>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d101      	bne.n	8006f00 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	e0d8      	b.n	80070b2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <USB_HC_Halt+0x8e>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d173      	bne.n	8006ff4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f2a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d14a      	bne.n	8006fce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d133      	bne.n	8006fac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f62:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f82:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f90:	d82e      	bhi.n	8006ff0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fa8:	d0ec      	beq.n	8006f84 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006faa:	e081      	b.n	80070b0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fcc:	e070      	b.n	80070b0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fe8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fee:	e05f      	b.n	80070b0 <USB_HC_Halt+0x232>
            break;
 8006ff0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ff2:	e05d      	b.n	80070b0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	440a      	add	r2, r1
 800700a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800700e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007012:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d133      	bne.n	800708c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	69fa      	ldr	r2, [r7, #28]
 8007038:	440a      	add	r2, r1
 800703a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800703e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007042:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	4413      	add	r3, r2
 800704c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	440a      	add	r2, r1
 800705a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800705e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007062:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	3301      	adds	r3, #1
 8007068:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007070:	d81d      	bhi.n	80070ae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007088:	d0ec      	beq.n	8007064 <USB_HC_Halt+0x1e6>
 800708a:	e011      	b.n	80070b0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e000      	b.n	80070b0 <USB_HC_Halt+0x232>
          break;
 80070ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3724      	adds	r7, #36	@ 0x24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070d4:	2301      	movs	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	04da      	lsls	r2, r3, #19
 80070dc:	4b15      	ldr	r3, [pc, #84]	@ (8007134 <USB_DoPing+0x74>)
 80070de:	4013      	ands	r3, r2
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007108:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007110:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800711e:	461a      	mov	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	1ff80000 	.word	0x1ff80000

08007138 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fe ff8c 	bl	800606a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007152:	2110      	movs	r1, #16
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7fe ffe5 	bl	8006124 <USB_FlushTxFifo>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff f80f 	bl	8006188 <USB_FlushRxFifo>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007174:	2300      	movs	r3, #0
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	e01f      	b.n	80071ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	4413      	add	r3, r2
 8007182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007190:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007198:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ae:	461a      	mov	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	3301      	adds	r3, #1
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	d9dc      	bls.n	800717a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80071c0:	2300      	movs	r3, #0
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	e034      	b.n	8007230 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fa:	461a      	mov	r2, r3
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3301      	adds	r3, #1
 8007204:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800720c:	d80c      	bhi.n	8007228 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	4413      	add	r3, r2
 8007216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007224:	d0ec      	beq.n	8007200 <USB_StopHost+0xc8>
 8007226:	e000      	b.n	800722a <USB_StopHost+0xf2>
        break;
 8007228:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	3301      	adds	r3, #1
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b0f      	cmp	r3, #15
 8007234:	d9c7      	bls.n	80071c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800723c:	461a      	mov	r2, r3
 800723e:	f04f 33ff 	mov.w	r3, #4294967295
 8007242:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7fe fefb 	bl	8006048 <USB_EnableGlobalInt>

  return ret;
 8007252:	7ffb      	ldrb	r3, [r7, #31]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800725c:	b590      	push	{r4, r7, lr}
 800725e:	b089      	sub	sp, #36	@ 0x24
 8007260:	af04      	add	r7, sp, #16
 8007262:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007264:	2301      	movs	r3, #1
 8007266:	2202      	movs	r2, #2
 8007268:	2102      	movs	r1, #2
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fc85 	bl	8007b7a <USBH_FindInterface>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2bff      	cmp	r3, #255	@ 0xff
 8007278:	d002      	beq.n	8007280 <USBH_CDC_InterfaceInit+0x24>
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d901      	bls.n	8007284 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007280:	2302      	movs	r3, #2
 8007282:	e13d      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc5a 	bl	8007b42 <USBH_SelectInterface>
 800728e:	4603      	mov	r3, r0
 8007290:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007298:	2302      	movs	r3, #2
 800729a:	e131      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80072a2:	2050      	movs	r0, #80	@ 0x50
 80072a4:	f002 fb64 	bl	8009970 <malloc>
 80072a8:	4603      	mov	r3, r0
 80072aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80072bc:	2302      	movs	r3, #2
 80072be:	e11f      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80072c0:	2250      	movs	r2, #80	@ 0x50
 80072c2:	2100      	movs	r1, #0
 80072c4:	68b8      	ldr	r0, [r7, #8]
 80072c6:	f002 fc11 	bl	8009aec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	211a      	movs	r1, #26
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b25b      	sxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da15      	bge.n	800730e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	211a      	movs	r1, #26
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	211a      	movs	r1, #26
 80072fe:	fb01 f303 	mul.w	r3, r1, r3
 8007302:	4413      	add	r3, r2
 8007304:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 ffbe 	bl	8009296 <USBH_AllocPipe>
 800731a:	4603      	mov	r3, r0
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	7819      	ldrb	r1, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	7858      	ldrb	r0, [r3, #1]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	8952      	ldrh	r2, [r2, #10]
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	2203      	movs	r2, #3
 800733e:	9201      	str	r2, [sp, #4]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	4623      	mov	r3, r4
 8007344:	4602      	mov	r2, r0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 ff76 	bl	8009238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f002 fa85 	bl	8009864 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	210a      	movs	r1, #10
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fc0a 	bl	8007b7a <USBH_FindInterface>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2bff      	cmp	r3, #255	@ 0xff
 800736e:	d002      	beq.n	8007376 <USBH_CDC_InterfaceInit+0x11a>
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d901      	bls.n	800737a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	e0c2      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	211a      	movs	r1, #26
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	4413      	add	r3, r2
 8007386:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b25b      	sxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	da16      	bge.n	80073c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	211a      	movs	r1, #26
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	211a      	movs	r1, #26
 80073ae:	fb01 f303 	mul.w	r3, r1, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	835a      	strh	r2, [r3, #26]
 80073be:	e015      	b.n	80073ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	211a      	movs	r1, #26
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073d0:	781a      	ldrb	r2, [r3, #0]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	211a      	movs	r1, #26
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073e6:	881a      	ldrh	r2, [r3, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	211a      	movs	r1, #26
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b25b      	sxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	da16      	bge.n	8007432 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	211a      	movs	r1, #26
 800740a:	fb01 f303 	mul.w	r3, r1, r3
 800740e:	4413      	add	r3, r2
 8007410:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	211a      	movs	r1, #26
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	4413      	add	r3, r2
 8007426:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	835a      	strh	r2, [r3, #26]
 8007430:	e015      	b.n	800745e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	211a      	movs	r1, #26
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	4413      	add	r3, r2
 800743e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	211a      	movs	r1, #26
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	4413      	add	r3, r2
 8007454:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007458:	881a      	ldrh	r2, [r3, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	7b9b      	ldrb	r3, [r3, #14]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 ff16 	bl	8009296 <USBH_AllocPipe>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	7bdb      	ldrb	r3, [r3, #15]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 ff0c 	bl	8009296 <USBH_AllocPipe>
 800747e:	4603      	mov	r3, r0
 8007480:	461a      	mov	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7b59      	ldrb	r1, [r3, #13]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	7b98      	ldrb	r0, [r3, #14]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	8b12      	ldrh	r2, [r2, #24]
 800749e:	9202      	str	r2, [sp, #8]
 80074a0:	2202      	movs	r2, #2
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	4623      	mov	r3, r4
 80074a8:	4602      	mov	r2, r0
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fec4 	bl	8009238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	7b19      	ldrb	r1, [r3, #12]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	7bd8      	ldrb	r0, [r3, #15]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	8b52      	ldrh	r2, [r2, #26]
 80074c8:	9202      	str	r2, [sp, #8]
 80074ca:	2202      	movs	r2, #2
 80074cc:	9201      	str	r2, [sp, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4623      	mov	r3, r4
 80074d2:	4602      	mov	r2, r0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 feaf 	bl	8009238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	7b5b      	ldrb	r3, [r3, #13]
 80074e6:	2200      	movs	r2, #0
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f002 f9ba 	bl	8009864 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	7b1b      	ldrb	r3, [r3, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f002 f9b3 	bl	8009864 <USBH_LL_SetToggle>

  return USBH_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	bd90      	pop	{r4, r7, pc}

08007508 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00e      	beq.n	8007540 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 fea4 	bl	8009276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 fecf 	bl	80092d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	7b1b      	ldrb	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	7b1b      	ldrb	r3, [r3, #12]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fe91 	bl	8009276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	7b1b      	ldrb	r3, [r3, #12]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 febc 	bl	80092d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	7b5b      	ldrb	r3, [r3, #13]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00e      	beq.n	800758c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	7b5b      	ldrb	r3, [r3, #13]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fe7e 	bl	8009276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	7b5b      	ldrb	r3, [r3, #13]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fea9 	bl	80092d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f002 f9ed 	bl	8009980 <free>
    phost->pActiveClass->pData = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075ac:	2200      	movs	r2, #0
 80075ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3340      	adds	r3, #64	@ 0x40
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8b1 	bl	800773a <GetLineCoding>
 80075d8:	4603      	mov	r3, r0
 80075da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075e8:	2102      	movs	r1, #2
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075ee:	7afb      	ldrb	r3, [r7, #11]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007618:	2b04      	cmp	r3, #4
 800761a:	d877      	bhi.n	800770c <USBH_CDC_Process+0x114>
 800761c:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <USBH_CDC_Process+0x2c>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007639 	.word	0x08007639
 8007628:	0800763f 	.word	0x0800763f
 800762c:	0800766f 	.word	0x0800766f
 8007630:	080076e3 	.word	0x080076e3
 8007634:	080076f1 	.word	0x080076f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
      break;
 800763c:	e06d      	b.n	800771a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f897 	bl	8007778 <SetLineCoding>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800765c:	e058      	b.n	8007710 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d055      	beq.n	8007710 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2204      	movs	r2, #4
 8007668:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800766c:	e050      	b.n	8007710 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3340      	adds	r3, #64	@ 0x40
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f860 	bl	800773a <GetLineCoding>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d126      	bne.n	80076d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007696:	791b      	ldrb	r3, [r3, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d13b      	bne.n	8007714 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d133      	bne.n	8007714 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d12b      	bne.n	8007714 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d124      	bne.n	8007714 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f958 	bl	8007980 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076d0:	e020      	b.n	8007714 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d01d      	beq.n	8007714 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2204      	movs	r2, #4
 80076dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80076e0:	e018      	b.n	8007714 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f867 	bl	80077b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f8da 	bl	80078a2 <CDC_ProcessReception>
      break;
 80076ee:	e014      	b.n	800771a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f81a 	bl	800872c <USBH_ClrFeature>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800770a:	e005      	b.n	8007718 <USBH_CDC_Process+0x120>

    default:
      break;
 800770c:	bf00      	nop
 800770e:	e004      	b.n	800771a <USBH_CDC_Process+0x122>
      break;
 8007710:	bf00      	nop
 8007712:	e002      	b.n	800771a <USBH_CDC_Process+0x122>
      break;
 8007714:	bf00      	nop
 8007716:	e000      	b.n	800771a <USBH_CDC_Process+0x122>
      break;
 8007718:	bf00      	nop

  }

  return status;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	22a1      	movs	r2, #161	@ 0xa1
 8007748:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2221      	movs	r2, #33	@ 0x21
 800774e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2207      	movs	r2, #7
 8007760:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2207      	movs	r2, #7
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fb14 	bl	8008d96 <USBH_CtlReq>
 800776e:	4603      	mov	r3, r0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2221      	movs	r2, #33	@ 0x21
 8007786:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2207      	movs	r2, #7
 800779e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2207      	movs	r2, #7
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 faf5 	bl	8008d96 <USBH_CtlReq>
 80077ac:	4603      	mov	r3, r0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af02      	add	r7, sp, #8
 80077bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d002      	beq.n	80077dc <CDC_ProcessTransmission+0x26>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d023      	beq.n	8007822 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80077da:	e05e      	b.n	800789a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	8b12      	ldrh	r2, [r2, #24]
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d90b      	bls.n	8007800 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	69d9      	ldr	r1, [r3, #28]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8b1a      	ldrh	r2, [r3, #24]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7b5b      	ldrb	r3, [r3, #13]
 80077f4:	2001      	movs	r0, #1
 80077f6:	9000      	str	r0, [sp, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 fcda 	bl	80091b2 <USBH_BulkSendData>
 80077fe:	e00b      	b.n	8007818 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	7b5b      	ldrb	r3, [r3, #13]
 800780e:	2001      	movs	r0, #1
 8007810:	9000      	str	r0, [sp, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fccd 	bl	80091b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007820:	e03b      	b.n	800789a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	7b5b      	ldrb	r3, [r3, #13]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fff1 	bl	8009810 <USBH_LL_GetURBState>
 800782e:	4603      	mov	r3, r0
 8007830:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d128      	bne.n	800788a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	8b12      	ldrh	r2, [r2, #24]
 8007840:	4293      	cmp	r3, r2
 8007842:	d90e      	bls.n	8007862 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	8b12      	ldrh	r2, [r2, #24]
 800784c:	1a9a      	subs	r2, r3, r2
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	8b12      	ldrh	r2, [r2, #24]
 800785a:	441a      	add	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	61da      	str	r2, [r3, #28]
 8007860:	e002      	b.n	8007868 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007878:	e00e      	b.n	8007898 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f868 	bl	8007958 <USBH_CDC_TransmitCallback>
      break;
 8007888:	e006      	b.n	8007898 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800788a:	7afb      	ldrb	r3, [r7, #11]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d103      	bne.n	8007898 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007898:	bf00      	nop
  }
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d002      	beq.n	80078c8 <CDC_ProcessReception+0x26>
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d00e      	beq.n	80078e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80078c6:	e043      	b.n	8007950 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	6a19      	ldr	r1, [r3, #32]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	8b5a      	ldrh	r2, [r3, #26]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	7b1b      	ldrb	r3, [r3, #12]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 fc91 	bl	80091fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2204      	movs	r2, #4
 80078de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80078e2:	e035      	b.n	8007950 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	7b1b      	ldrb	r3, [r3, #12]
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 ff90 	bl	8009810 <USBH_LL_GetURBState>
 80078f0:	4603      	mov	r3, r0
 80078f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078f4:	7cfb      	ldrb	r3, [r7, #19]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d129      	bne.n	800794e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	7b1b      	ldrb	r3, [r3, #12]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fef3 	bl	80096ec <USBH_LL_GetLastXferSize>
 8007906:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	429a      	cmp	r2, r3
 8007910:	d016      	beq.n	8007940 <CDC_ProcessReception+0x9e>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	8b5b      	ldrh	r3, [r3, #26]
 8007916:	461a      	mov	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4293      	cmp	r3, r2
 800791c:	d910      	bls.n	8007940 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	6a1a      	ldr	r2, [r3, #32]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	441a      	add	r2, r3
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2203      	movs	r2, #3
 800793a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800793e:	e006      	b.n	800794e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f80f 	bl	800796c <USBH_CDC_ReceiveCallback>
      break;
 800794e:	bf00      	nop
  }
}
 8007950:	bf00      	nop
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079a8:	2302      	movs	r3, #2
 80079aa:	e029      	b.n	8007a00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	79fa      	ldrb	r2, [r7, #7]
 80079b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 f81f 	bl	8007a08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f001 fdc3 	bl	8009584 <USBH_LL_Init>

  return USBH_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e009      	b.n	8007a2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	33e0      	adds	r3, #224	@ 0xe0
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b0f      	cmp	r3, #15
 8007a32:	d9f2      	bls.n	8007a1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	e009      	b.n	8007a4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	d3f1      	bcc.n	8007a3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2240      	movs	r2, #64	@ 0x40
 8007a7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	331c      	adds	r3, #28
 8007aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 f81d 	bl	8009aec <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007abc:	2100      	movs	r1, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f002 f814 	bl	8009aec <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007aca:	2212      	movs	r2, #18
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f002 f80c 	bl	8009aec <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ada:	223e      	movs	r2, #62	@ 0x3e
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f002 f804 	bl	8009aec <memset>

  return USBH_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d016      	beq.n	8007b30 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10e      	bne.n	8007b2a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b12:	1c59      	adds	r1, r3, #1
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	33de      	adds	r3, #222	@ 0xde
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
 8007b28:	e004      	b.n	8007b34 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	73fb      	strb	r3, [r7, #15]
 8007b2e:	e001      	b.n	8007b34 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b30:	2302      	movs	r3, #2
 8007b32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d204      	bcs.n	8007b68 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007b66:	e001      	b.n	8007b6c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b087      	sub	sp, #28
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	461a      	mov	r2, r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	70fb      	strb	r3, [r7, #3]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70bb      	strb	r3, [r7, #2]
 8007b90:	4613      	mov	r3, r2
 8007b92:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ba2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ba4:	e025      	b.n	8007bf2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	221a      	movs	r2, #26
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	3308      	adds	r3, #8
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	795b      	ldrb	r3, [r3, #5]
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d002      	beq.n	8007bc8 <USBH_FindInterface+0x4e>
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	2bff      	cmp	r3, #255	@ 0xff
 8007bc6:	d111      	bne.n	8007bec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bcc:	78ba      	ldrb	r2, [r7, #2]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d002      	beq.n	8007bd8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bd2:	78bb      	ldrb	r3, [r7, #2]
 8007bd4:	2bff      	cmp	r3, #255	@ 0xff
 8007bd6:	d109      	bne.n	8007bec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bdc:	787a      	ldrb	r2, [r7, #1]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d002      	beq.n	8007be8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007be2:	787b      	ldrb	r3, [r7, #1]
 8007be4:	2bff      	cmp	r3, #255	@ 0xff
 8007be6:	d101      	bne.n	8007bec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	e006      	b.n	8007bfa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d9d6      	bls.n	8007ba6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007bf8:	23ff      	movs	r3, #255	@ 0xff
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fcf4 	bl	80095fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c14:	2101      	movs	r1, #1
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fe0d 	bl	8009836 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d102      	bne.n	8007c4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b0b      	cmp	r3, #11
 8007c52:	f200 81bb 	bhi.w	8007fcc <USBH_Process+0x3a4>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <USBH_Process+0x34>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007cbf 	.word	0x08007cbf
 8007c64:	08007d27 	.word	0x08007d27
 8007c68:	08007f67 	.word	0x08007f67
 8007c6c:	08007fcd 	.word	0x08007fcd
 8007c70:	08007dc7 	.word	0x08007dc7
 8007c74:	08007f0d 	.word	0x08007f0d
 8007c78:	08007dfd 	.word	0x08007dfd
 8007c7c:	08007e1d 	.word	0x08007e1d
 8007c80:	08007e3b 	.word	0x08007e3b
 8007c84:	08007e7f 	.word	0x08007e7f
 8007c88:	08007f4f 	.word	0x08007f4f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 819b 	beq.w	8007fd0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ca0:	20c8      	movs	r0, #200	@ 0xc8
 8007ca2:	f001 fe12 	bl	80098ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fd05 	bl	80096b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cbc:	e188      	b.n	8007fd0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d107      	bne.n	8007cd8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cd6:	e18a      	b.n	8007fee <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007cde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ce2:	d914      	bls.n	8007d0e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007cea:	3301      	adds	r3, #1
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d903      	bls.n	8007d06 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	220d      	movs	r2, #13
 8007d02:	701a      	strb	r2, [r3, #0]
      break;
 8007d04:	e173      	b.n	8007fee <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
      break;
 8007d0c:	e16f      	b.n	8007fee <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d14:	f103 020a 	add.w	r2, r3, #10
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007d1e:	200a      	movs	r0, #10
 8007d20:	f001 fdd3 	bl	80098ca <USBH_Delay>
      break;
 8007d24:	e163      	b.n	8007fee <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d36:	2104      	movs	r1, #4
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d3c:	2064      	movs	r0, #100	@ 0x64
 8007d3e:	f001 fdc4 	bl	80098ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fc90 	bl	8009668 <USBH_LL_GetSpeed>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2205      	movs	r2, #5
 8007d56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d58:	2100      	movs	r1, #0
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fa9b 	bl	8009296 <USBH_AllocPipe>
 8007d60:	4603      	mov	r3, r0
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d68:	2180      	movs	r1, #128	@ 0x80
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fa93 	bl	8009296 <USBH_AllocPipe>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7919      	ldrb	r1, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d8c:	9202      	str	r2, [sp, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	9201      	str	r2, [sp, #4]
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	4603      	mov	r3, r0
 8007d96:	2280      	movs	r2, #128	@ 0x80
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 fa4d 	bl	8009238 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7959      	ldrb	r1, [r3, #5]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007db2:	9202      	str	r2, [sp, #8]
 8007db4:	2200      	movs	r2, #0
 8007db6:	9201      	str	r2, [sp, #4]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 fa3a 	bl	8009238 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dc4:	e113      	b.n	8007fee <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f916 	bl	8007ff8 <USBH_HandleEnum>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 80fd 	bne.w	8007fd4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d103      	bne.n	8007df4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2208      	movs	r2, #8
 8007df0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007df2:	e0ef      	b.n	8007fd4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2207      	movs	r2, #7
 8007df8:	701a      	strb	r2, [r3, #0]
      break;
 8007dfa:	e0eb      	b.n	8007fd4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80e8 	beq.w	8007fd8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e0e:	2101      	movs	r1, #1
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2208      	movs	r2, #8
 8007e18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007e1a:	e0dd      	b.n	8007fd8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fc3a 	bl	800869e <USBH_SetCfg>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 80d5 	bne.w	8007fdc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2209      	movs	r2, #9
 8007e36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e38:	e0d0      	b.n	8007fdc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d016      	beq.n	8007e76 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e48:	2101      	movs	r1, #1
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fc4a 	bl	80086e4 <USBH_SetFeature>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d103      	bne.n	8007e64 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	220a      	movs	r2, #10
 8007e60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e62:	e0bd      	b.n	8007fe0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	f040 80b9 	bne.w	8007fe0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	220a      	movs	r2, #10
 8007e72:	701a      	strb	r2, [r3, #0]
      break;
 8007e74:	e0b4      	b.n	8007fe0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	220a      	movs	r2, #10
 8007e7a:	701a      	strb	r2, [r3, #0]
      break;
 8007e7c:	e0b0      	b.n	8007fe0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80ad 	beq.w	8007fe4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
 8007e96:	e016      	b.n	8007ec6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e98:	7bfa      	ldrb	r2, [r7, #15]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	32de      	adds	r2, #222	@ 0xde
 8007e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea2:	791a      	ldrb	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d108      	bne.n	8007ec0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007eae:	7bfa      	ldrb	r2, [r7, #15]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	32de      	adds	r2, #222	@ 0xde
 8007eb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007ebe:	e005      	b.n	8007ecc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	73fb      	strb	r3, [r7, #15]
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0e5      	beq.n	8007e98 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d016      	beq.n	8007f04 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d109      	bne.n	8007efc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2206      	movs	r2, #6
 8007eec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ef4:	2103      	movs	r1, #3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007efa:	e073      	b.n	8007fe4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	220d      	movs	r2, #13
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e06f      	b.n	8007fe4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	220d      	movs	r2, #13
 8007f08:	701a      	strb	r2, [r3, #0]
      break;
 8007f0a:	e06b      	b.n	8007fe4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d017      	beq.n	8007f46 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220b      	movs	r2, #11
 8007f32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f34:	e058      	b.n	8007fe8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d154      	bne.n	8007fe8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	220d      	movs	r2, #13
 8007f42:	701a      	strb	r2, [r3, #0]
      break;
 8007f44:	e050      	b.n	8007fe8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	220d      	movs	r2, #13
 8007f4a:	701a      	strb	r2, [r3, #0]
      break;
 8007f4c:	e04c      	b.n	8007fe8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d049      	beq.n	8007fec <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
      }
      break;
 8007f64:	e042      	b.n	8007fec <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fd4a 	bl	8007a08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d009      	beq.n	8007f92 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fa2:	2105      	movs	r1, #5
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d107      	bne.n	8007fc4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fe22 	bl	8007c06 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fc2:	e014      	b.n	8007fee <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fb19 	bl	80095fc <USBH_LL_Start>
      break;
 8007fca:	e010      	b.n	8007fee <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007fcc:	bf00      	nop
 8007fce:	e00e      	b.n	8007fee <USBH_Process+0x3c6>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e00c      	b.n	8007fee <USBH_Process+0x3c6>
      break;
 8007fd4:	bf00      	nop
 8007fd6:	e00a      	b.n	8007fee <USBH_Process+0x3c6>
    break;
 8007fd8:	bf00      	nop
 8007fda:	e008      	b.n	8007fee <USBH_Process+0x3c6>
      break;
 8007fdc:	bf00      	nop
 8007fde:	e006      	b.n	8007fee <USBH_Process+0x3c6>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e004      	b.n	8007fee <USBH_Process+0x3c6>
      break;
 8007fe4:	bf00      	nop
 8007fe6:	e002      	b.n	8007fee <USBH_Process+0x3c6>
      break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <USBH_Process+0x3c6>
      break;
 8007fec:	bf00      	nop
  }
  return USBH_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008004:	2301      	movs	r3, #1
 8008006:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b07      	cmp	r3, #7
 800800e:	f200 81bd 	bhi.w	800838c <USBH_HandleEnum+0x394>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <USBH_HandleEnum+0x20>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008039 	.word	0x08008039
 800801c:	080080f3 	.word	0x080080f3
 8008020:	0800815d 	.word	0x0800815d
 8008024:	080081e7 	.word	0x080081e7
 8008028:	08008251 	.word	0x08008251
 800802c:	080082c1 	.word	0x080082c1
 8008030:	08008307 	.word	0x08008307
 8008034:	0800834d 	.word	0x0800834d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008038:	2108      	movs	r1, #8
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa4c 	bl	80084d8 <USBH_Get_DevDesc>
 8008040:	4603      	mov	r3, r0
 8008042:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d12e      	bne.n	80080a8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7919      	ldrb	r1, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800806e:	9202      	str	r2, [sp, #8]
 8008070:	2200      	movs	r2, #0
 8008072:	9201      	str	r2, [sp, #4]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	4603      	mov	r3, r0
 8008078:	2280      	movs	r2, #128	@ 0x80
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 f8dc 	bl	8009238 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7959      	ldrb	r1, [r3, #5]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008094:	9202      	str	r2, [sp, #8]
 8008096:	2200      	movs	r2, #0
 8008098:	9201      	str	r2, [sp, #4]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	4603      	mov	r3, r0
 800809e:	2200      	movs	r2, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 f8c9 	bl	8009238 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080a6:	e173      	b.n	8008390 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	f040 8170 	bne.w	8008390 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080b6:	3301      	adds	r3, #1
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d903      	bls.n	80080d2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	220d      	movs	r2, #13
 80080ce:	701a      	strb	r2, [r3, #0]
      break;
 80080d0:	e15e      	b.n	8008390 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	795b      	ldrb	r3, [r3, #5]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 f8fd 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	791b      	ldrb	r3, [r3, #4]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 f8f7 	bl	80092d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
      break;
 80080f0:	e14e      	b.n	8008390 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080f2:	2112      	movs	r1, #18
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f9ef 	bl	80084d8 <USBH_Get_DevDesc>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d103      	bne.n	800810c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800810a:	e143      	b.n	8008394 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b03      	cmp	r3, #3
 8008110:	f040 8140 	bne.w	8008394 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800811a:	3301      	adds	r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800812a:	2b03      	cmp	r3, #3
 800812c:	d903      	bls.n	8008136 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	220d      	movs	r2, #13
 8008132:	701a      	strb	r2, [r3, #0]
      break;
 8008134:	e12e      	b.n	8008394 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	795b      	ldrb	r3, [r3, #5]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f8cb 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	791b      	ldrb	r3, [r3, #4]
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 f8c5 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	701a      	strb	r2, [r3, #0]
      break;
 800815a:	e11b      	b.n	8008394 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800815c:	2101      	movs	r1, #1
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa79 	bl	8008656 <USBH_SetAddress>
 8008164:	4603      	mov	r3, r0
 8008166:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d130      	bne.n	80081d0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800816e:	2002      	movs	r0, #2
 8008170:	f001 fbab 	bl	80098ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2203      	movs	r2, #3
 8008180:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	7919      	ldrb	r1, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008196:	9202      	str	r2, [sp, #8]
 8008198:	2200      	movs	r2, #0
 800819a:	9201      	str	r2, [sp, #4]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4603      	mov	r3, r0
 80081a0:	2280      	movs	r2, #128	@ 0x80
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 f848 	bl	8009238 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7959      	ldrb	r1, [r3, #5]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081bc:	9202      	str	r2, [sp, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	9201      	str	r2, [sp, #4]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	4603      	mov	r3, r0
 80081c6:	2200      	movs	r2, #0
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f835 	bl	8009238 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081ce:	e0e3      	b.n	8008398 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	f040 80e0 	bne.w	8008398 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	220d      	movs	r2, #13
 80081dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	705a      	strb	r2, [r3, #1]
      break;
 80081e4:	e0d8      	b.n	8008398 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081e6:	2109      	movs	r1, #9
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f9a1 	bl	8008530 <USBH_Get_CfgDesc>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2204      	movs	r2, #4
 80081fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081fe:	e0cd      	b.n	800839c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b03      	cmp	r3, #3
 8008204:	f040 80ca 	bne.w	800839c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800820e:	3301      	adds	r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800821e:	2b03      	cmp	r3, #3
 8008220:	d903      	bls.n	800822a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	220d      	movs	r2, #13
 8008226:	701a      	strb	r2, [r3, #0]
      break;
 8008228:	e0b8      	b.n	800839c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	795b      	ldrb	r3, [r3, #5]
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f851 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f84b 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
      break;
 800824e:	e0a5      	b.n	800839c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f969 	bl	8008530 <USBH_Get_CfgDesc>
 800825e:	4603      	mov	r3, r0
 8008260:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d103      	bne.n	8008270 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2205      	movs	r2, #5
 800826c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800826e:	e097      	b.n	80083a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b03      	cmp	r3, #3
 8008274:	f040 8094 	bne.w	80083a0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800827e:	3301      	adds	r3, #1
 8008280:	b2da      	uxtb	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800828e:	2b03      	cmp	r3, #3
 8008290:	d903      	bls.n	800829a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	220d      	movs	r2, #13
 8008296:	701a      	strb	r2, [r3, #0]
      break;
 8008298:	e082      	b.n	80083a0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	795b      	ldrb	r3, [r3, #5]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f819 	bl	80092d8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	791b      	ldrb	r3, [r3, #4]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 f813 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
      break;
 80082be:	e06f      	b.n	80083a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d019      	beq.n	80082fe <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082d6:	23ff      	movs	r3, #255	@ 0xff
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f953 	bl	8008584 <USBH_Get_StringDesc>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d103      	bne.n	80082f0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2206      	movs	r2, #6
 80082ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082ee:	e059      	b.n	80083a4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d156      	bne.n	80083a4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2206      	movs	r2, #6
 80082fa:	705a      	strb	r2, [r3, #1]
      break;
 80082fc:	e052      	b.n	80083a4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2206      	movs	r2, #6
 8008302:	705a      	strb	r2, [r3, #1]
      break;
 8008304:	e04e      	b.n	80083a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800830c:	2b00      	cmp	r3, #0
 800830e:	d019      	beq.n	8008344 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800831c:	23ff      	movs	r3, #255	@ 0xff
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f930 	bl	8008584 <USBH_Get_StringDesc>
 8008324:	4603      	mov	r3, r0
 8008326:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2207      	movs	r2, #7
 8008332:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008334:	e038      	b.n	80083a8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b03      	cmp	r3, #3
 800833a:	d135      	bne.n	80083a8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2207      	movs	r2, #7
 8008340:	705a      	strb	r2, [r3, #1]
      break;
 8008342:	e031      	b.n	80083a8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2207      	movs	r2, #7
 8008348:	705a      	strb	r2, [r3, #1]
      break;
 800834a:	e02d      	b.n	80083a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008352:	2b00      	cmp	r3, #0
 8008354:	d017      	beq.n	8008386 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008362:	23ff      	movs	r3, #255	@ 0xff
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f90d 	bl	8008584 <USBH_Get_StringDesc>
 800836a:	4603      	mov	r3, r0
 800836c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008378:	e018      	b.n	80083ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d115      	bne.n	80083ac <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
      break;
 8008384:	e012      	b.n	80083ac <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
      break;
 800838a:	e00f      	b.n	80083ac <USBH_HandleEnum+0x3b4>

    default:
      break;
 800838c:	bf00      	nop
 800838e:	e00e      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 8008390:	bf00      	nop
 8008392:	e00c      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 8008394:	bf00      	nop
 8008396:	e00a      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 8008398:	bf00      	nop
 800839a:	e008      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 800839c:	bf00      	nop
 800839e:	e006      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 80083a0:	bf00      	nop
 80083a2:	e004      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 80083a4:	bf00      	nop
 80083a6:	e002      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 80083a8:	bf00      	nop
 80083aa:	e000      	b.n	80083ae <USBH_HandleEnum+0x3b6>
      break;
 80083ac:	bf00      	nop
  }
  return Status;
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f804 	bl	80083fa <USBH_HandleSof>
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b0b      	cmp	r3, #11
 800840a:	d10a      	bne.n	8008422 <USBH_HandleSof+0x28>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
  }
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800843a:	bf00      	nop
}
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008456:	bf00      	nop
}
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f8be 	bl	8009632 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 ff0b 	bl	80092d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	795b      	ldrb	r3, [r3, #5]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 ff05 	bl	80092d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af02      	add	r7, sp, #8
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80084e4:	887b      	ldrh	r3, [r7, #2]
 80084e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ea:	d901      	bls.n	80084f0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e01b      	b.n	8008528 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80084f6:	887b      	ldrh	r3, [r7, #2]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4613      	mov	r3, r2
 80084fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008500:	2100      	movs	r1, #0
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f872 	bl	80085ec <USBH_GetDescriptor>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008518:	887a      	ldrh	r2, [r7, #2]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f929 	bl	8008774 <USBH_ParseDevDesc>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	331c      	adds	r3, #28
 8008540:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008542:	887b      	ldrh	r3, [r7, #2]
 8008544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008548:	d901      	bls.n	800854e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800854a:	2303      	movs	r3, #3
 800854c:	e016      	b.n	800857c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800854e:	887b      	ldrh	r3, [r7, #2]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008558:	2100      	movs	r1, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f846 	bl	80085ec <USBH_GetDescriptor>
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d107      	bne.n	800857a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800856a:	887b      	ldrh	r3, [r7, #2]
 800856c:	461a      	mov	r2, r3
 800856e:	68b9      	ldr	r1, [r7, #8]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f9af 	bl	80088d4 <USBH_ParseCfgDesc>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	461a      	mov	r2, r3
 8008590:	460b      	mov	r3, r1
 8008592:	72fb      	strb	r3, [r7, #11]
 8008594:	4613      	mov	r3, r2
 8008596:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008598:	893b      	ldrh	r3, [r7, #8]
 800859a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859e:	d802      	bhi.n	80085a6 <USBH_Get_StringDesc+0x22>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e01c      	b.n	80085e4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80085aa:	7afb      	ldrb	r3, [r7, #11]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80085b2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085ba:	893b      	ldrh	r3, [r7, #8]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	460b      	mov	r3, r1
 80085c0:	2100      	movs	r1, #0
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f812 	bl	80085ec <USBH_GetDescriptor>
 80085c8:	4603      	mov	r3, r0
 80085ca:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d107      	bne.n	80085e2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085d8:	893a      	ldrh	r2, [r7, #8]
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fb8d 	bl	8008cfc <USBH_ParseStringDesc>
  }

  return status;
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	607b      	str	r3, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	72fb      	strb	r3, [r7, #11]
 80085fa:	4613      	mov	r3, r2
 80085fc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	789b      	ldrb	r3, [r3, #2]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d11c      	bne.n	8008640 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008606:	7afb      	ldrb	r3, [r7, #11]
 8008608:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800860c:	b2da      	uxtb	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2206      	movs	r2, #6
 8008616:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	893a      	ldrh	r2, [r7, #8]
 800861c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800861e:	893b      	ldrh	r3, [r7, #8]
 8008620:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008624:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008628:	d104      	bne.n	8008634 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f240 4209 	movw	r2, #1033	@ 0x409
 8008630:	829a      	strh	r2, [r3, #20]
 8008632:	e002      	b.n	800863a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8b3a      	ldrh	r2, [r7, #24]
 800863e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008640:	8b3b      	ldrh	r3, [r7, #24]
 8008642:	461a      	mov	r2, r3
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fba5 	bl	8008d96 <USBH_CtlReq>
 800864c:	4603      	mov	r3, r0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	789b      	ldrb	r3, [r3, #2]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d10f      	bne.n	800868a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2205      	movs	r2, #5
 8008674:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	b29a      	uxth	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fb81 	bl	8008d96 <USBH_CtlReq>
 8008694:	4603      	mov	r3, r0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	789b      	ldrb	r3, [r3, #2]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d10e      	bne.n	80086d0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2209      	movs	r2, #9
 80086bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	887a      	ldrh	r2, [r7, #2]
 80086c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086d0:	2200      	movs	r2, #0
 80086d2:	2100      	movs	r1, #0
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fb5e 	bl	8008d96 <USBH_CtlReq>
 80086da:	4603      	mov	r3, r0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	789b      	ldrb	r3, [r3, #2]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d10f      	bne.n	8008718 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2203      	movs	r2, #3
 8008702:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	b29a      	uxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fb3a 	bl	8008d96 <USBH_CtlReq>
 8008722:	4603      	mov	r3, r0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	789b      	ldrb	r3, [r3, #2]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d10f      	bne.n	8008760 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	b29a      	uxth	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008760:	2200      	movs	r2, #0
 8008762:	2100      	movs	r1, #0
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb16 	bl	8008d96 <USBH_CtlReq>
 800876a:	4603      	mov	r3, r0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008788:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008794:	2302      	movs	r3, #2
 8008796:	e094      	b.n	80088c2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	785a      	ldrb	r2, [r3, #1]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3302      	adds	r3, #2
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3303      	adds	r3, #3
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4313      	orrs	r3, r2
 80087bc:	b29a      	uxth	r2, r3
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	791a      	ldrb	r2, [r3, #4]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	795a      	ldrb	r2, [r3, #5]
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	799a      	ldrb	r2, [r3, #6]
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	79da      	ldrb	r2, [r3, #7]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d11b      	bne.n	800882e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	79db      	ldrb	r3, [r3, #7]
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	dc0f      	bgt.n	800881e <USBH_ParseDevDesc+0xaa>
 80087fe:	2b08      	cmp	r3, #8
 8008800:	db0f      	blt.n	8008822 <USBH_ParseDevDesc+0xae>
 8008802:	3b08      	subs	r3, #8
 8008804:	4a32      	ldr	r2, [pc, #200]	@ (80088d0 <USBH_ParseDevDesc+0x15c>)
 8008806:	fa22 f303 	lsr.w	r3, r2, r3
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	bf14      	ite	ne
 8008812:	2301      	movne	r3, #1
 8008814:	2300      	moveq	r3, #0
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <USBH_ParseDevDesc+0xb6>
 800881c:	e001      	b.n	8008822 <USBH_ParseDevDesc+0xae>
 800881e:	2b40      	cmp	r3, #64	@ 0x40
 8008820:	d003      	beq.n	800882a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2208      	movs	r2, #8
 8008826:	71da      	strb	r2, [r3, #7]
        break;
 8008828:	e000      	b.n	800882c <USBH_ParseDevDesc+0xb8>
        break;
 800882a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800882c:	e00e      	b.n	800884c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008834:	2b02      	cmp	r3, #2
 8008836:	d107      	bne.n	8008848 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	79db      	ldrb	r3, [r3, #7]
 800883c:	2b08      	cmp	r3, #8
 800883e:	d005      	beq.n	800884c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2208      	movs	r2, #8
 8008844:	71da      	strb	r2, [r3, #7]
 8008846:	e001      	b.n	800884c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008848:	2303      	movs	r3, #3
 800884a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	2b08      	cmp	r3, #8
 8008850:	d936      	bls.n	80088c0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	3308      	adds	r3, #8
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	3309      	adds	r3, #9
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	b29b      	uxth	r3, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	b29a      	uxth	r2, r3
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	330a      	adds	r3, #10
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	330b      	adds	r3, #11
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	4313      	orrs	r3, r2
 8008880:	b29a      	uxth	r2, r3
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	330c      	adds	r3, #12
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	330d      	adds	r3, #13
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	b29b      	uxth	r3, r3
 8008898:	4313      	orrs	r3, r2
 800889a:	b29a      	uxth	r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	7b9a      	ldrb	r2, [r3, #14]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	7bda      	ldrb	r2, [r3, #15]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	7c1a      	ldrb	r2, [r3, #16]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	7c5a      	ldrb	r2, [r3, #17]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	01000101 	.word	0x01000101

080088d4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08c      	sub	sp, #48	@ 0x30
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088e8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008902:	2302      	movs	r3, #2
 8008904:	e0da      	b.n	8008abc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	781a      	ldrb	r2, [r3, #0]
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	785a      	ldrb	r2, [r3, #1]
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	3302      	adds	r3, #2
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	3303      	adds	r3, #3
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	b29b      	uxth	r3, r3
 800892c:	4313      	orrs	r3, r2
 800892e:	b29b      	uxth	r3, r3
 8008930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008934:	bf28      	it	cs
 8008936:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800893a:	b29a      	uxth	r2, r3
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	791a      	ldrb	r2, [r3, #4]
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	795a      	ldrb	r2, [r3, #5]
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	799a      	ldrb	r2, [r3, #6]
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	79da      	ldrb	r2, [r3, #7]
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	7a1a      	ldrb	r2, [r3, #8]
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b09      	cmp	r3, #9
 800896e:	d002      	beq.n	8008976 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	2209      	movs	r2, #9
 8008974:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008976:	88fb      	ldrh	r3, [r7, #6]
 8008978:	2b09      	cmp	r3, #9
 800897a:	f240 809d 	bls.w	8008ab8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800897e:	2309      	movs	r3, #9
 8008980:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008986:	e081      	b.n	8008a8c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008988:	f107 0316 	add.w	r3, r7, #22
 800898c:	4619      	mov	r1, r3
 800898e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008990:	f000 f9e7 	bl	8008d62 <USBH_GetNextDesc>
 8008994:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	785b      	ldrb	r3, [r3, #1]
 800899a:	2b04      	cmp	r3, #4
 800899c:	d176      	bne.n	8008a8c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b09      	cmp	r3, #9
 80089a4:	d002      	beq.n	80089ac <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80089a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a8:	2209      	movs	r2, #9
 80089aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80089ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089b0:	221a      	movs	r2, #26
 80089b2:	fb02 f303 	mul.w	r3, r2, r3
 80089b6:	3308      	adds	r3, #8
 80089b8:	6a3a      	ldr	r2, [r7, #32]
 80089ba:	4413      	add	r3, r2
 80089bc:	3302      	adds	r3, #2
 80089be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80089c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089c2:	69f8      	ldr	r0, [r7, #28]
 80089c4:	f000 f87e 	bl	8008ac4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089d2:	e043      	b.n	8008a5c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089d4:	f107 0316 	add.w	r3, r7, #22
 80089d8:	4619      	mov	r1, r3
 80089da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089dc:	f000 f9c1 	bl	8008d62 <USBH_GetNextDesc>
 80089e0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	d138      	bne.n	8008a5c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	795b      	ldrb	r3, [r3, #5]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d113      	bne.n	8008a1a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d003      	beq.n	8008a02 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	799b      	ldrb	r3, [r3, #6]
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d10b      	bne.n	8008a1a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	79db      	ldrb	r3, [r3, #7]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <USBH_ParseCfgDesc+0x14e>
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d007      	beq.n	8008a22 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	2209      	movs	r2, #9
 8008a16:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a18:	e003      	b.n	8008a22 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1c:	2207      	movs	r2, #7
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e000      	b.n	8008a24 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a22:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a28:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a2c:	3201      	adds	r2, #1
 8008a2e:	00d2      	lsls	r2, r2, #3
 8008a30:	211a      	movs	r1, #26
 8008a32:	fb01 f303 	mul.w	r3, r1, r3
 8008a36:	4413      	add	r3, r2
 8008a38:	3308      	adds	r3, #8
 8008a3a:	6a3a      	ldr	r2, [r7, #32]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3304      	adds	r3, #4
 8008a40:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a44:	69b9      	ldr	r1, [r7, #24]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f870 	bl	8008b2c <USBH_ParseEPDesc>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008a52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a56:	3301      	adds	r3, #1
 8008a58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	791b      	ldrb	r3, [r3, #4]
 8008a60:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d204      	bcs.n	8008a72 <USBH_ParseCfgDesc+0x19e>
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	885a      	ldrh	r2, [r3, #2]
 8008a6c:	8afb      	ldrh	r3, [r7, #22]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d8b0      	bhi.n	80089d4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	791b      	ldrb	r3, [r3, #4]
 8008a76:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d201      	bcs.n	8008a82 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e01c      	b.n	8008abc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a86:	3301      	adds	r3, #1
 8008a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d805      	bhi.n	8008aa0 <USBH_ParseCfgDesc+0x1cc>
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	885a      	ldrh	r2, [r3, #2]
 8008a98:	8afb      	ldrh	r3, [r7, #22]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	f63f af74 	bhi.w	8008988 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	791b      	ldrb	r3, [r3, #4]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	bf28      	it	cs
 8008aa8:	2302      	movcs	r3, #2
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d201      	bcs.n	8008ab8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e001      	b.n	8008abc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3730      	adds	r7, #48	@ 0x30
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781a      	ldrb	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	785a      	ldrb	r2, [r3, #1]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	789a      	ldrb	r2, [r3, #2]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	78da      	ldrb	r2, [r3, #3]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	3304      	adds	r3, #4
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	bf28      	it	cs
 8008af8:	2302      	movcs	r3, #2
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	795a      	ldrb	r2, [r3, #5]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	799a      	ldrb	r2, [r3, #6]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	79da      	ldrb	r2, [r3, #7]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	7a1a      	ldrb	r2, [r3, #8]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	721a      	strb	r2, [r3, #8]
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	785a      	ldrb	r2, [r3, #1]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	789a      	ldrb	r2, [r3, #2]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	78da      	ldrb	r2, [r3, #3]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3305      	adds	r3, #5
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	799a      	ldrb	r2, [r3, #6]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	889b      	ldrh	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d009      	beq.n	8008b9a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b8e:	d804      	bhi.n	8008b9a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b98:	d901      	bls.n	8008b9e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d136      	bne.n	8008c16 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	78db      	ldrb	r3, [r3, #3]
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d108      	bne.n	8008bc6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	889b      	ldrh	r3, [r3, #4]
 8008bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bbc:	f240 8097 	bls.w	8008cee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	75fb      	strb	r3, [r7, #23]
 8008bc4:	e093      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	78db      	ldrb	r3, [r3, #3]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d107      	bne.n	8008be2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	889b      	ldrh	r3, [r3, #4]
 8008bd6:	2b40      	cmp	r3, #64	@ 0x40
 8008bd8:	f240 8089 	bls.w	8008cee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	75fb      	strb	r3, [r7, #23]
 8008be0:	e085      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	78db      	ldrb	r3, [r3, #3]
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d005      	beq.n	8008bfa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	78db      	ldrb	r3, [r3, #3]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d10a      	bne.n	8008c10 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	799b      	ldrb	r3, [r3, #6]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <USBH_ParseEPDesc+0xde>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	799b      	ldrb	r3, [r3, #6]
 8008c06:	2b10      	cmp	r3, #16
 8008c08:	d970      	bls.n	8008cec <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c0e:	e06d      	b.n	8008cec <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c10:	2303      	movs	r3, #3
 8008c12:	75fb      	strb	r3, [r7, #23]
 8008c14:	e06b      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d13c      	bne.n	8008c9a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	78db      	ldrb	r3, [r3, #3]
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d005      	beq.n	8008c38 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	78db      	ldrb	r3, [r3, #3]
 8008c30:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	889b      	ldrh	r3, [r3, #4]
 8008c3c:	2b40      	cmp	r3, #64	@ 0x40
 8008c3e:	d956      	bls.n	8008cee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c40:	2303      	movs	r3, #3
 8008c42:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c44:	e053      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	78db      	ldrb	r3, [r3, #3]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d10e      	bne.n	8008c70 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	799b      	ldrb	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d007      	beq.n	8008c6a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008c5e:	2b10      	cmp	r3, #16
 8008c60:	d803      	bhi.n	8008c6a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008c66:	2b40      	cmp	r3, #64	@ 0x40
 8008c68:	d941      	bls.n	8008cee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	75fb      	strb	r3, [r7, #23]
 8008c6e:	e03e      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	78db      	ldrb	r3, [r3, #3]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d10b      	bne.n	8008c94 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	799b      	ldrb	r3, [r3, #6]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <USBH_ParseEPDesc+0x162>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	889b      	ldrh	r3, [r3, #4]
 8008c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c8c:	d32f      	bcc.n	8008cee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	75fb      	strb	r3, [r7, #23]
 8008c92:	e02c      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c94:	2303      	movs	r3, #3
 8008c96:	75fb      	strb	r3, [r7, #23]
 8008c98:	e029      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d120      	bne.n	8008ce6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	78db      	ldrb	r3, [r3, #3]
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	889b      	ldrh	r3, [r3, #4]
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d01a      	beq.n	8008cee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	75fb      	strb	r3, [r7, #23]
 8008cbc:	e017      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	78db      	ldrb	r3, [r3, #3]
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d10a      	bne.n	8008ce0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	799b      	ldrb	r3, [r3, #6]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <USBH_ParseEPDesc+0x1ae>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	889b      	ldrh	r3, [r3, #4]
 8008cd6:	2b08      	cmp	r3, #8
 8008cd8:	d909      	bls.n	8008cee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	75fb      	strb	r3, [r7, #23]
 8008cde:	e006      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	75fb      	strb	r3, [r7, #23]
 8008ce4:	e003      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	75fb      	strb	r3, [r7, #23]
 8008cea:	e000      	b.n	8008cee <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cec:	bf00      	nop
  }

  return status;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d120      	bne.n	8008d56 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	1e9a      	subs	r2, r3, #2
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	bf28      	it	cs
 8008d20:	4613      	movcs	r3, r2
 8008d22:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3302      	adds	r3, #2
 8008d28:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	82fb      	strh	r3, [r7, #22]
 8008d2e:	e00b      	b.n	8008d48 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d30:	8afb      	ldrh	r3, [r7, #22]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d42:	8afb      	ldrh	r3, [r7, #22]
 8008d44:	3302      	adds	r3, #2
 8008d46:	82fb      	strh	r3, [r7, #22]
 8008d48:	8afa      	ldrh	r2, [r7, #22]
 8008d4a:	8abb      	ldrh	r3, [r7, #20]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d3ef      	bcc.n	8008d30 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2200      	movs	r2, #0
 8008d54:	701a      	strb	r2, [r3, #0]
  }
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b085      	sub	sp, #20
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	7812      	ldrb	r2, [r2, #0]
 8008d74:	4413      	add	r3, r2
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4413      	add	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d88:	68fb      	ldr	r3, [r7, #12]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b086      	sub	sp, #24
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	4613      	mov	r3, r2
 8008da2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	789b      	ldrb	r3, [r3, #2]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d002      	beq.n	8008db6 <USBH_CtlReq+0x20>
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d00f      	beq.n	8008dd4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008db4:	e027      	b.n	8008e06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	88fa      	ldrh	r2, [r7, #6]
 8008dc0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8008dd2:	e018      	b.n	8008e06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 f81b 	bl	8008e10 <USBH_HandleControl>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <USBH_CtlReq+0x54>
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d106      	bne.n	8008df8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	761a      	strb	r2, [r3, #24]
      break;
 8008df6:	e005      	b.n	8008e04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d102      	bne.n	8008e04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2201      	movs	r2, #1
 8008e02:	709a      	strb	r2, [r3, #2]
      break;
 8008e04:	bf00      	nop
  }
  return status;
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	7e1b      	ldrb	r3, [r3, #24]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	2b0a      	cmp	r3, #10
 8008e28:	f200 8156 	bhi.w	80090d8 <USBH_HandleControl+0x2c8>
 8008e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <USBH_HandleControl+0x24>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	08008e7b 	.word	0x08008e7b
 8008e3c:	08008ee5 	.word	0x08008ee5
 8008e40:	08008f0b 	.word	0x08008f0b
 8008e44:	08008f43 	.word	0x08008f43
 8008e48:	08008f6d 	.word	0x08008f6d
 8008e4c:	08008fbf 	.word	0x08008fbf
 8008e50:	08008fe1 	.word	0x08008fe1
 8008e54:	0800901d 	.word	0x0800901d
 8008e58:	08009043 	.word	0x08009043
 8008e5c:	08009081 	.word	0x08009081
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f103 0110 	add.w	r1, r3, #16
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	795b      	ldrb	r3, [r3, #5]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f943 	bl	80090f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2202      	movs	r2, #2
 8008e76:	761a      	strb	r2, [r3, #24]
      break;
 8008e78:	e139      	b.n	80090ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	795b      	ldrb	r3, [r3, #5]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fcc5 	bl	8009810 <USBH_LL_GetURBState>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d11e      	bne.n	8008ece <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	7c1b      	ldrb	r3, [r3, #16]
 8008e94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	8adb      	ldrh	r3, [r3, #22]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008ea2:	7b7b      	ldrb	r3, [r7, #13]
 8008ea4:	2b80      	cmp	r3, #128	@ 0x80
 8008ea6:	d103      	bne.n	8008eb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2203      	movs	r2, #3
 8008eac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008eae:	e115      	b.n	80090dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2205      	movs	r2, #5
 8008eb4:	761a      	strb	r2, [r3, #24]
      break;
 8008eb6:	e111      	b.n	80090dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008eb8:	7b7b      	ldrb	r3, [r7, #13]
 8008eba:	2b80      	cmp	r3, #128	@ 0x80
 8008ebc:	d103      	bne.n	8008ec6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2209      	movs	r2, #9
 8008ec2:	761a      	strb	r2, [r3, #24]
      break;
 8008ec4:	e10a      	b.n	80090dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2207      	movs	r2, #7
 8008eca:	761a      	strb	r2, [r3, #24]
      break;
 8008ecc:	e106      	b.n	80090dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d003      	beq.n	8008edc <USBH_HandleControl+0xcc>
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	f040 8100 	bne.w	80090dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	220b      	movs	r2, #11
 8008ee0:	761a      	strb	r2, [r3, #24]
      break;
 8008ee2:	e0fb      	b.n	80090dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6899      	ldr	r1, [r3, #8]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	899a      	ldrh	r2, [r3, #12]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	791b      	ldrb	r3, [r3, #4]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f93a 	bl	8009176 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2204      	movs	r2, #4
 8008f06:	761a      	strb	r2, [r3, #24]
      break;
 8008f08:	e0f1      	b.n	80090ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	791b      	ldrb	r3, [r3, #4]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fc7d 	bl	8009810 <USBH_LL_GetURBState>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d102      	bne.n	8008f26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2209      	movs	r2, #9
 8008f24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b05      	cmp	r3, #5
 8008f2a:	d102      	bne.n	8008f32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f30:	e0d6      	b.n	80090e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	f040 80d3 	bne.w	80090e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	220b      	movs	r2, #11
 8008f3e:	761a      	strb	r2, [r3, #24]
      break;
 8008f40:	e0ce      	b.n	80090e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6899      	ldr	r1, [r3, #8]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	899a      	ldrh	r2, [r3, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	795b      	ldrb	r3, [r3, #5]
 8008f4e:	2001      	movs	r0, #1
 8008f50:	9000      	str	r0, [sp, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f8ea 	bl	800912c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2206      	movs	r2, #6
 8008f68:	761a      	strb	r2, [r3, #24]
      break;
 8008f6a:	e0c0      	b.n	80090ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	795b      	ldrb	r3, [r3, #5]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fc4c 	bl	8009810 <USBH_LL_GetURBState>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d103      	bne.n	8008f8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2207      	movs	r2, #7
 8008f86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f88:	e0ac      	b.n	80090e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b05      	cmp	r3, #5
 8008f8e:	d105      	bne.n	8008f9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	220c      	movs	r2, #12
 8008f94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f96:	2303      	movs	r3, #3
 8008f98:	73fb      	strb	r3, [r7, #15]
      break;
 8008f9a:	e0a3      	b.n	80090e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d103      	bne.n	8008faa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2205      	movs	r2, #5
 8008fa6:	761a      	strb	r2, [r3, #24]
      break;
 8008fa8:	e09c      	b.n	80090e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
 8008fac:	2b04      	cmp	r3, #4
 8008fae:	f040 8099 	bne.w	80090e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	220b      	movs	r2, #11
 8008fb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbc:	e092      	b.n	80090e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	791b      	ldrb	r3, [r3, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f8d5 	bl	8009176 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2208      	movs	r2, #8
 8008fdc:	761a      	strb	r2, [r3, #24]

      break;
 8008fde:	e086      	b.n	80090ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	791b      	ldrb	r3, [r3, #4]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fc12 	bl	8009810 <USBH_LL_GetURBState>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d105      	bne.n	8009002 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	220d      	movs	r2, #13
 8008ffa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009000:	e072      	b.n	80090e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b04      	cmp	r3, #4
 8009006:	d103      	bne.n	8009010 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	220b      	movs	r2, #11
 800900c:	761a      	strb	r2, [r3, #24]
      break;
 800900e:	e06b      	b.n	80090e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	2b05      	cmp	r3, #5
 8009014:	d168      	bne.n	80090e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009016:	2303      	movs	r3, #3
 8009018:	73fb      	strb	r3, [r7, #15]
      break;
 800901a:	e065      	b.n	80090e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	795b      	ldrb	r3, [r3, #5]
 8009020:	2201      	movs	r2, #1
 8009022:	9200      	str	r2, [sp, #0]
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f87f 	bl	800912c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009034:	b29a      	uxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	220a      	movs	r2, #10
 800903e:	761a      	strb	r2, [r3, #24]
      break;
 8009040:	e055      	b.n	80090ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	795b      	ldrb	r3, [r3, #5]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fbe1 	bl	8009810 <USBH_LL_GetURBState>
 800904e:	4603      	mov	r3, r0
 8009050:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d105      	bne.n	8009064 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	220d      	movs	r2, #13
 8009060:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009062:	e043      	b.n	80090ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d103      	bne.n	8009072 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2209      	movs	r2, #9
 800906e:	761a      	strb	r2, [r3, #24]
      break;
 8009070:	e03c      	b.n	80090ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b04      	cmp	r3, #4
 8009076:	d139      	bne.n	80090ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	220b      	movs	r2, #11
 800907c:	761a      	strb	r2, [r3, #24]
      break;
 800907e:	e035      	b.n	80090ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7e5b      	ldrb	r3, [r3, #25]
 8009084:	3301      	adds	r3, #1
 8009086:	b2da      	uxtb	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	765a      	strb	r2, [r3, #25]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7e5b      	ldrb	r3, [r3, #25]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d806      	bhi.n	80090a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80090a0:	e025      	b.n	80090ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090a8:	2106      	movs	r1, #6
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	795b      	ldrb	r3, [r3, #5]
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f90c 	bl	80092d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	791b      	ldrb	r3, [r3, #4]
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f906 	bl	80092d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80090d2:	2302      	movs	r3, #2
 80090d4:	73fb      	strb	r3, [r7, #15]
      break;
 80090d6:	e00a      	b.n	80090ee <USBH_HandleControl+0x2de>

    default:
      break;
 80090d8:	bf00      	nop
 80090da:	e008      	b.n	80090ee <USBH_HandleControl+0x2de>
      break;
 80090dc:	bf00      	nop
 80090de:	e006      	b.n	80090ee <USBH_HandleControl+0x2de>
      break;
 80090e0:	bf00      	nop
 80090e2:	e004      	b.n	80090ee <USBH_HandleControl+0x2de>
      break;
 80090e4:	bf00      	nop
 80090e6:	e002      	b.n	80090ee <USBH_HandleControl+0x2de>
      break;
 80090e8:	bf00      	nop
 80090ea:	e000      	b.n	80090ee <USBH_HandleControl+0x2de>
      break;
 80090ec:	bf00      	nop
  }

  return status;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af04      	add	r7, sp, #16
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009106:	79f9      	ldrb	r1, [r7, #7]
 8009108:	2300      	movs	r3, #0
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	2308      	movs	r3, #8
 800910e:	9302      	str	r3, [sp, #8]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	2300      	movs	r3, #0
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	2300      	movs	r3, #0
 800911a:	2200      	movs	r2, #0
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fb46 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af04      	add	r7, sp, #16
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4611      	mov	r1, r2
 8009138:	461a      	mov	r2, r3
 800913a:	460b      	mov	r3, r1
 800913c:	80fb      	strh	r3, [r7, #6]
 800913e:	4613      	mov	r3, r2
 8009140:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009150:	7979      	ldrb	r1, [r7, #5]
 8009152:	7e3b      	ldrb	r3, [r7, #24]
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	9302      	str	r3, [sp, #8]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	2301      	movs	r3, #1
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2300      	movs	r3, #0
 8009164:	2200      	movs	r2, #0
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 fb21 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b088      	sub	sp, #32
 800917a:	af04      	add	r7, sp, #16
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	4611      	mov	r1, r2
 8009182:	461a      	mov	r2, r3
 8009184:	460b      	mov	r3, r1
 8009186:	80fb      	strh	r3, [r7, #6]
 8009188:	4613      	mov	r3, r2
 800918a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800918c:	7979      	ldrb	r1, [r7, #5]
 800918e:	2300      	movs	r3, #0
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	2301      	movs	r3, #1
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	2300      	movs	r3, #0
 80091a0:	2201      	movs	r2, #1
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 fb03 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091a8:	2300      	movs	r3, #0

}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af04      	add	r7, sp, #16
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	4611      	mov	r1, r2
 80091be:	461a      	mov	r2, r3
 80091c0:	460b      	mov	r3, r1
 80091c2:	80fb      	strh	r3, [r7, #6]
 80091c4:	4613      	mov	r3, r2
 80091c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091d6:	7979      	ldrb	r1, [r7, #5]
 80091d8:	7e3b      	ldrb	r3, [r7, #24]
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	2301      	movs	r3, #1
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2302      	movs	r3, #2
 80091ea:	2200      	movs	r2, #0
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 fade 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af04      	add	r7, sp, #16
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4611      	mov	r1, r2
 8009208:	461a      	mov	r2, r3
 800920a:	460b      	mov	r3, r1
 800920c:	80fb      	strh	r3, [r7, #6]
 800920e:	4613      	mov	r3, r2
 8009210:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009212:	7979      	ldrb	r1, [r7, #5]
 8009214:	2300      	movs	r3, #0
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	2301      	movs	r3, #1
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2302      	movs	r3, #2
 8009226:	2201      	movs	r2, #1
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 fac0 	bl	80097ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af04      	add	r7, sp, #16
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	461a      	mov	r2, r3
 8009246:	4603      	mov	r3, r0
 8009248:	70fb      	strb	r3, [r7, #3]
 800924a:	460b      	mov	r3, r1
 800924c:	70bb      	strb	r3, [r7, #2]
 800924e:	4613      	mov	r3, r2
 8009250:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009252:	7878      	ldrb	r0, [r7, #1]
 8009254:	78ba      	ldrb	r2, [r7, #2]
 8009256:	78f9      	ldrb	r1, [r7, #3]
 8009258:	8b3b      	ldrh	r3, [r7, #24]
 800925a:	9302      	str	r3, [sp, #8]
 800925c:	7d3b      	ldrb	r3, [r7, #20]
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	7c3b      	ldrb	r3, [r7, #16]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	4603      	mov	r3, r0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa53 	bl	8009712 <USBH_LL_OpenPipe>

  return USBH_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa72 	bl	8009770 <USBH_LL_ClosePipe>

  return USBH_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f836 	bl	8009314 <USBH_GetFreePipe>
 80092a8:	4603      	mov	r3, r0
 80092aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00a      	beq.n	80092cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	89fb      	ldrh	r3, [r7, #14]
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	33e0      	adds	r3, #224	@ 0xe0
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80092cc:	89fb      	ldrh	r3, [r7, #14]
 80092ce:	b2db      	uxtb	r3, r3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	d80d      	bhi.n	8009306 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	33e0      	adds	r3, #224	@ 0xe0
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	33e0      	adds	r3, #224	@ 0xe0
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	440b      	add	r3, r1
 8009304:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e00f      	b.n	8009346 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	33e0      	adds	r3, #224	@ 0xe0
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	b29b      	uxth	r3, r3
 800933e:	e007      	b.n	8009350 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	3301      	adds	r3, #1
 8009344:	73fb      	strb	r3, [r7, #15]
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2b0f      	cmp	r3, #15
 800934a:	d9ec      	bls.n	8009326 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800934c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009360:	2201      	movs	r2, #1
 8009362:	490e      	ldr	r1, [pc, #56]	@ (800939c <MX_USB_HOST_Init+0x40>)
 8009364:	480e      	ldr	r0, [pc, #56]	@ (80093a0 <MX_USB_HOST_Init+0x44>)
 8009366:	f7fe fb15 	bl	8007994 <USBH_Init>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009370:	f7f7 fb40 	bl	80009f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009374:	490b      	ldr	r1, [pc, #44]	@ (80093a4 <MX_USB_HOST_Init+0x48>)
 8009376:	480a      	ldr	r0, [pc, #40]	@ (80093a0 <MX_USB_HOST_Init+0x44>)
 8009378:	f7fe fbb9 	bl	8007aee <USBH_RegisterClass>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009382:	f7f7 fb37 	bl	80009f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009386:	4806      	ldr	r0, [pc, #24]	@ (80093a0 <MX_USB_HOST_Init+0x44>)
 8009388:	f7fe fc3d 	bl	8007c06 <USBH_Start>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009392:	f7f7 fb2f 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009396:	bf00      	nop
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	080093bd 	.word	0x080093bd
 80093a0:	200001dc 	.word	0x200001dc
 80093a4:	2000000c 	.word	0x2000000c

080093a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80093ac:	4802      	ldr	r0, [pc, #8]	@ (80093b8 <MX_USB_HOST_Process+0x10>)
 80093ae:	f7fe fc3b 	bl	8007c28 <USBH_Process>
}
 80093b2:	bf00      	nop
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200001dc 	.word	0x200001dc

080093bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d819      	bhi.n	8009404 <USBH_UserProcess+0x48>
 80093d0:	a201      	add	r2, pc, #4	@ (adr r2, 80093d8 <USBH_UserProcess+0x1c>)
 80093d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d6:	bf00      	nop
 80093d8:	08009405 	.word	0x08009405
 80093dc:	080093f5 	.word	0x080093f5
 80093e0:	08009405 	.word	0x08009405
 80093e4:	080093fd 	.word	0x080093fd
 80093e8:	080093ed 	.word	0x080093ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80093ec:	4b09      	ldr	r3, [pc, #36]	@ (8009414 <USBH_UserProcess+0x58>)
 80093ee:	2203      	movs	r2, #3
 80093f0:	701a      	strb	r2, [r3, #0]
  break;
 80093f2:	e008      	b.n	8009406 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80093f4:	4b07      	ldr	r3, [pc, #28]	@ (8009414 <USBH_UserProcess+0x58>)
 80093f6:	2202      	movs	r2, #2
 80093f8:	701a      	strb	r2, [r3, #0]
  break;
 80093fa:	e004      	b.n	8009406 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80093fc:	4b05      	ldr	r3, [pc, #20]	@ (8009414 <USBH_UserProcess+0x58>)
 80093fe:	2201      	movs	r2, #1
 8009400:	701a      	strb	r2, [r3, #0]
  break;
 8009402:	e000      	b.n	8009406 <USBH_UserProcess+0x4a>

  default:
  break;
 8009404:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	200005b4 	.word	0x200005b4

08009418 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08a      	sub	sp, #40	@ 0x28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009420:	f107 0314 	add.w	r3, r7, #20
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	605a      	str	r2, [r3, #4]
 800942a:	609a      	str	r2, [r3, #8]
 800942c:	60da      	str	r2, [r3, #12]
 800942e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009438:	d147      	bne.n	80094ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800943a:	2300      	movs	r3, #0
 800943c:	613b      	str	r3, [r7, #16]
 800943e:	4b25      	ldr	r3, [pc, #148]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009442:	4a24      	ldr	r2, [pc, #144]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	6313      	str	r3, [r2, #48]	@ 0x30
 800944a:	4b22      	ldr	r3, [pc, #136]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 800944c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009456:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800945a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800945c:	2300      	movs	r3, #0
 800945e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009464:	f107 0314 	add.w	r3, r7, #20
 8009468:	4619      	mov	r1, r3
 800946a:	481b      	ldr	r0, [pc, #108]	@ (80094d8 <HAL_HCD_MspInit+0xc0>)
 800946c:	f7f7 febc 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009470:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009476:	2302      	movs	r3, #2
 8009478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800947e:	2300      	movs	r3, #0
 8009480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009482:	230a      	movs	r3, #10
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009486:	f107 0314 	add.w	r3, r7, #20
 800948a:	4619      	mov	r1, r3
 800948c:	4812      	ldr	r0, [pc, #72]	@ (80094d8 <HAL_HCD_MspInit+0xc0>)
 800948e:	f7f7 feab 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009492:	4b10      	ldr	r3, [pc, #64]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009496:	4a0f      	ldr	r2, [pc, #60]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 8009498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800949c:	6353      	str	r3, [r2, #52]	@ 0x34
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 80094a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094a6:	4a0b      	ldr	r2, [pc, #44]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 80094a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80094ae:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <HAL_HCD_MspInit+0xbc>)
 80094b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	2043      	movs	r0, #67	@ 0x43
 80094c0:	f7f7 fe5b 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094c4:	2043      	movs	r0, #67	@ 0x43
 80094c6:	f7f7 fe74 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094ca:	bf00      	nop
 80094cc:	3728      	adds	r7, #40	@ 0x28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40023800 	.word	0x40023800
 80094d8:	40020000 	.word	0x40020000

080094dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe ff73 	bl	80083d6 <USBH_LL_IncTimer>
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe ffab 	bl	8008462 <USBH_LL_Connect>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe ffb4 	bl	8008490 <USBH_LL_Disconnect>
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
 800953c:	4613      	mov	r3, r2
 800953e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe ff65 	bl	800842a <USBH_LL_PortEnabled>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe ff65 	bl	8008446 <USBH_LL_PortDisabled>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009592:	2b01      	cmp	r3, #1
 8009594:	d12a      	bne.n	80095ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009596:	4a18      	ldr	r2, [pc, #96]	@ (80095f8 <USBH_LL_Init+0x74>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a15      	ldr	r2, [pc, #84]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095a6:	4b14      	ldr	r3, [pc, #80]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80095ae:	4b12      	ldr	r3, [pc, #72]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095b0:	2208      	movs	r2, #8
 80095b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80095b4:	4b10      	ldr	r3, [pc, #64]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095ba:	4b0f      	ldr	r3, [pc, #60]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095bc:	2200      	movs	r2, #0
 80095be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80095c0:	4b0d      	ldr	r3, [pc, #52]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095c2:	2202      	movs	r2, #2
 80095c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095c6:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80095cc:	480a      	ldr	r0, [pc, #40]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095ce:	f7f7 ffc0 	bl	8001552 <HAL_HCD_Init>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80095d8:	f7f7 fa0c 	bl	80009f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80095dc:	4806      	ldr	r0, [pc, #24]	@ (80095f8 <USBH_LL_Init+0x74>)
 80095de:	f7f8 fc21 	bl	8001e24 <HAL_HCD_GetCurrentFrame>
 80095e2:	4603      	mov	r3, r0
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7fe fee6 	bl	80083b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200005b8 	.word	0x200005b8

080095fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009612:	4618      	mov	r0, r3
 8009614:	f7f8 fb8e 	bl	8001d34 <HAL_HCD_Start>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4618      	mov	r0, r3
 8009620:	f000 f95e 	bl	80098e0 <USBH_Get_USB_Status>
 8009624:	4603      	mov	r3, r0
 8009626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009628:	7bbb      	ldrb	r3, [r7, #14]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009648:	4618      	mov	r0, r3
 800964a:	f7f8 fb96 	bl	8001d7a <HAL_HCD_Stop>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f943 	bl	80098e0 <USBH_Get_USB_Status>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800967a:	4618      	mov	r0, r3
 800967c:	f7f8 fbe0 	bl	8001e40 <HAL_HCD_GetCurrentSpeed>
 8009680:	4603      	mov	r3, r0
 8009682:	2b02      	cmp	r3, #2
 8009684:	d00c      	beq.n	80096a0 <USBH_LL_GetSpeed+0x38>
 8009686:	2b02      	cmp	r3, #2
 8009688:	d80d      	bhi.n	80096a6 <USBH_LL_GetSpeed+0x3e>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <USBH_LL_GetSpeed+0x2c>
 800968e:	2b01      	cmp	r3, #1
 8009690:	d003      	beq.n	800969a <USBH_LL_GetSpeed+0x32>
 8009692:	e008      	b.n	80096a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
    break;
 8009698:	e008      	b.n	80096ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800969a:	2301      	movs	r3, #1
 800969c:	73fb      	strb	r3, [r7, #15]
    break;
 800969e:	e005      	b.n	80096ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80096a0:	2302      	movs	r3, #2
 80096a2:	73fb      	strb	r3, [r7, #15]
    break;
 80096a4:	e002      	b.n	80096ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80096a6:	2301      	movs	r3, #1
 80096a8:	73fb      	strb	r3, [r7, #15]
    break;
 80096aa:	bf00      	nop
  }
  return  speed;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7f8 fb71 	bl	8001db4 <HAL_HCD_ResetPort>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f901 	bl	80098e0 <USBH_Get_USB_Status>
 80096de:	4603      	mov	r3, r0
 80096e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	4611      	mov	r1, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7f8 fb79 	bl	8001dfa <HAL_HCD_HC_GetXferCount>
 8009708:	4603      	mov	r3, r0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009712:	b590      	push	{r4, r7, lr}
 8009714:	b089      	sub	sp, #36	@ 0x24
 8009716:	af04      	add	r7, sp, #16
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	4608      	mov	r0, r1
 800971c:	4611      	mov	r1, r2
 800971e:	461a      	mov	r2, r3
 8009720:	4603      	mov	r3, r0
 8009722:	70fb      	strb	r3, [r7, #3]
 8009724:	460b      	mov	r3, r1
 8009726:	70bb      	strb	r3, [r7, #2]
 8009728:	4613      	mov	r3, r2
 800972a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800973a:	787c      	ldrb	r4, [r7, #1]
 800973c:	78ba      	ldrb	r2, [r7, #2]
 800973e:	78f9      	ldrb	r1, [r7, #3]
 8009740:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009742:	9302      	str	r3, [sp, #8]
 8009744:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	4623      	mov	r3, r4
 8009752:	f7f7 ff65 	bl	8001620 <HAL_HCD_HC_Init>
 8009756:	4603      	mov	r3, r0
 8009758:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f8bf 	bl	80098e0 <USBH_Get_USB_Status>
 8009762:	4603      	mov	r3, r0
 8009764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009766:	7bbb      	ldrb	r3, [r7, #14]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	bd90      	pop	{r4, r7, pc}

08009770 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	4611      	mov	r1, r2
 800978e:	4618      	mov	r0, r3
 8009790:	f7f7 fffe 	bl	8001790 <HAL_HCD_HC_Halt>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f8a0 	bl	80098e0 <USBH_Get_USB_Status>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80097ae:	b590      	push	{r4, r7, lr}
 80097b0:	b089      	sub	sp, #36	@ 0x24
 80097b2:	af04      	add	r7, sp, #16
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	461a      	mov	r2, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70bb      	strb	r3, [r7, #2]
 80097c4:	4613      	mov	r3, r2
 80097c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097d6:	787c      	ldrb	r4, [r7, #1]
 80097d8:	78ba      	ldrb	r2, [r7, #2]
 80097da:	78f9      	ldrb	r1, [r7, #3]
 80097dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80097e0:	9303      	str	r3, [sp, #12]
 80097e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097e4:	9302      	str	r3, [sp, #8]
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4623      	mov	r3, r4
 80097f2:	f7f7 fff1 	bl	80017d8 <HAL_HCD_HC_SubmitRequest>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f86f 	bl	80098e0 <USBH_Get_USB_Status>
 8009802:	4603      	mov	r3, r0
 8009804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009806:	7bbb      	ldrb	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	bd90      	pop	{r4, r7, pc}

08009810 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7f8 fad2 	bl	8001dd0 <HAL_HCD_HC_GetURBState>
 800982c:	4603      	mov	r3, r0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009848:	2b01      	cmp	r3, #1
 800984a:	d103      	bne.n	8009854 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f872 	bl	8009938 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009854:	20c8      	movs	r0, #200	@ 0xc8
 8009856:	f7f7 fb91 	bl	8000f7c <HAL_Delay>
  return USBH_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
 8009870:	4613      	mov	r3, r2
 8009872:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800987a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	4613      	mov	r3, r2
 8009882:	011b      	lsls	r3, r3, #4
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	3317      	adds	r3, #23
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	68f9      	ldr	r1, [r7, #12]
 8009896:	4613      	mov	r3, r2
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	333c      	adds	r3, #60	@ 0x3c
 80098a2:	78ba      	ldrb	r2, [r7, #2]
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	e009      	b.n	80098bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	4613      	mov	r3, r2
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	333d      	adds	r3, #61	@ 0x3d
 80098b8:	78ba      	ldrb	r2, [r7, #2]
 80098ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7f7 fb52 	bl	8000f7c <HAL_Delay>
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d817      	bhi.n	8009924 <USBH_Get_USB_Status+0x44>
 80098f4:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <USBH_Get_USB_Status+0x1c>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	0800990d 	.word	0x0800990d
 8009900:	08009913 	.word	0x08009913
 8009904:	08009919 	.word	0x08009919
 8009908:	0800991f 	.word	0x0800991f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
    break;
 8009910:	e00b      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009912:	2302      	movs	r3, #2
 8009914:	73fb      	strb	r3, [r7, #15]
    break;
 8009916:	e008      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009918:	2301      	movs	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
    break;
 800991c:	e005      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800991e:	2302      	movs	r3, #2
 8009920:	73fb      	strb	r3, [r7, #15]
    break;
 8009922:	e002      	b.n	800992a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009924:	2302      	movs	r3, #2
 8009926:	73fb      	strb	r3, [r7, #15]
    break;
 8009928:	bf00      	nop
  }
  return usb_status;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800994c:	2300      	movs	r3, #0
 800994e:	73fb      	strb	r3, [r7, #15]
 8009950:	e001      	b.n	8009956 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009952:	2301      	movs	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	461a      	mov	r2, r3
 800995a:	2101      	movs	r1, #1
 800995c:	4803      	ldr	r0, [pc, #12]	@ (800996c <MX_DriverVbusFS+0x34>)
 800995e:	f7f7 fddf 	bl	8001520 <HAL_GPIO_WritePin>
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	40020800 	.word	0x40020800

08009970 <malloc>:
 8009970:	4b02      	ldr	r3, [pc, #8]	@ (800997c <malloc+0xc>)
 8009972:	4601      	mov	r1, r0
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	f000 b82d 	b.w	80099d4 <_malloc_r>
 800997a:	bf00      	nop
 800997c:	2000002c 	.word	0x2000002c

08009980 <free>:
 8009980:	4b02      	ldr	r3, [pc, #8]	@ (800998c <free+0xc>)
 8009982:	4601      	mov	r1, r0
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	f000 b8f5 	b.w	8009b74 <_free_r>
 800998a:	bf00      	nop
 800998c:	2000002c 	.word	0x2000002c

08009990 <sbrk_aligned>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4e0f      	ldr	r6, [pc, #60]	@ (80099d0 <sbrk_aligned+0x40>)
 8009994:	460c      	mov	r4, r1
 8009996:	6831      	ldr	r1, [r6, #0]
 8009998:	4605      	mov	r5, r0
 800999a:	b911      	cbnz	r1, 80099a2 <sbrk_aligned+0x12>
 800999c:	f000 f8ae 	bl	8009afc <_sbrk_r>
 80099a0:	6030      	str	r0, [r6, #0]
 80099a2:	4621      	mov	r1, r4
 80099a4:	4628      	mov	r0, r5
 80099a6:	f000 f8a9 	bl	8009afc <_sbrk_r>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d103      	bne.n	80099b6 <sbrk_aligned+0x26>
 80099ae:	f04f 34ff 	mov.w	r4, #4294967295
 80099b2:	4620      	mov	r0, r4
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	1cc4      	adds	r4, r0, #3
 80099b8:	f024 0403 	bic.w	r4, r4, #3
 80099bc:	42a0      	cmp	r0, r4
 80099be:	d0f8      	beq.n	80099b2 <sbrk_aligned+0x22>
 80099c0:	1a21      	subs	r1, r4, r0
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f89a 	bl	8009afc <_sbrk_r>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d1f2      	bne.n	80099b2 <sbrk_aligned+0x22>
 80099cc:	e7ef      	b.n	80099ae <sbrk_aligned+0x1e>
 80099ce:	bf00      	nop
 80099d0:	20000998 	.word	0x20000998

080099d4 <_malloc_r>:
 80099d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d8:	1ccd      	adds	r5, r1, #3
 80099da:	f025 0503 	bic.w	r5, r5, #3
 80099de:	3508      	adds	r5, #8
 80099e0:	2d0c      	cmp	r5, #12
 80099e2:	bf38      	it	cc
 80099e4:	250c      	movcc	r5, #12
 80099e6:	2d00      	cmp	r5, #0
 80099e8:	4606      	mov	r6, r0
 80099ea:	db01      	blt.n	80099f0 <_malloc_r+0x1c>
 80099ec:	42a9      	cmp	r1, r5
 80099ee:	d904      	bls.n	80099fa <_malloc_r+0x26>
 80099f0:	230c      	movs	r3, #12
 80099f2:	6033      	str	r3, [r6, #0]
 80099f4:	2000      	movs	r0, #0
 80099f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ad0 <_malloc_r+0xfc>
 80099fe:	f000 f869 	bl	8009ad4 <__malloc_lock>
 8009a02:	f8d8 3000 	ldr.w	r3, [r8]
 8009a06:	461c      	mov	r4, r3
 8009a08:	bb44      	cbnz	r4, 8009a5c <_malloc_r+0x88>
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7ff ffbf 	bl	8009990 <sbrk_aligned>
 8009a12:	1c43      	adds	r3, r0, #1
 8009a14:	4604      	mov	r4, r0
 8009a16:	d158      	bne.n	8009aca <_malloc_r+0xf6>
 8009a18:	f8d8 4000 	ldr.w	r4, [r8]
 8009a1c:	4627      	mov	r7, r4
 8009a1e:	2f00      	cmp	r7, #0
 8009a20:	d143      	bne.n	8009aaa <_malloc_r+0xd6>
 8009a22:	2c00      	cmp	r4, #0
 8009a24:	d04b      	beq.n	8009abe <_malloc_r+0xea>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	4639      	mov	r1, r7
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	eb04 0903 	add.w	r9, r4, r3
 8009a30:	f000 f864 	bl	8009afc <_sbrk_r>
 8009a34:	4581      	cmp	r9, r0
 8009a36:	d142      	bne.n	8009abe <_malloc_r+0xea>
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	1a6d      	subs	r5, r5, r1
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f7ff ffa6 	bl	8009990 <sbrk_aligned>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d03a      	beq.n	8009abe <_malloc_r+0xea>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	442b      	add	r3, r5
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	bb62      	cbnz	r2, 8009ab0 <_malloc_r+0xdc>
 8009a56:	f8c8 7000 	str.w	r7, [r8]
 8009a5a:	e00f      	b.n	8009a7c <_malloc_r+0xa8>
 8009a5c:	6822      	ldr	r2, [r4, #0]
 8009a5e:	1b52      	subs	r2, r2, r5
 8009a60:	d420      	bmi.n	8009aa4 <_malloc_r+0xd0>
 8009a62:	2a0b      	cmp	r2, #11
 8009a64:	d917      	bls.n	8009a96 <_malloc_r+0xc2>
 8009a66:	1961      	adds	r1, r4, r5
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	6025      	str	r5, [r4, #0]
 8009a6c:	bf18      	it	ne
 8009a6e:	6059      	strne	r1, [r3, #4]
 8009a70:	6863      	ldr	r3, [r4, #4]
 8009a72:	bf08      	it	eq
 8009a74:	f8c8 1000 	streq.w	r1, [r8]
 8009a78:	5162      	str	r2, [r4, r5]
 8009a7a:	604b      	str	r3, [r1, #4]
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f000 f82f 	bl	8009ae0 <__malloc_unlock>
 8009a82:	f104 000b 	add.w	r0, r4, #11
 8009a86:	1d23      	adds	r3, r4, #4
 8009a88:	f020 0007 	bic.w	r0, r0, #7
 8009a8c:	1ac2      	subs	r2, r0, r3
 8009a8e:	bf1c      	itt	ne
 8009a90:	1a1b      	subne	r3, r3, r0
 8009a92:	50a3      	strne	r3, [r4, r2]
 8009a94:	e7af      	b.n	80099f6 <_malloc_r+0x22>
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	bf0c      	ite	eq
 8009a9c:	f8c8 2000 	streq.w	r2, [r8]
 8009aa0:	605a      	strne	r2, [r3, #4]
 8009aa2:	e7eb      	b.n	8009a7c <_malloc_r+0xa8>
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	6864      	ldr	r4, [r4, #4]
 8009aa8:	e7ae      	b.n	8009a08 <_malloc_r+0x34>
 8009aaa:	463c      	mov	r4, r7
 8009aac:	687f      	ldr	r7, [r7, #4]
 8009aae:	e7b6      	b.n	8009a1e <_malloc_r+0x4a>
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d1fb      	bne.n	8009ab0 <_malloc_r+0xdc>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6053      	str	r3, [r2, #4]
 8009abc:	e7de      	b.n	8009a7c <_malloc_r+0xa8>
 8009abe:	230c      	movs	r3, #12
 8009ac0:	6033      	str	r3, [r6, #0]
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f000 f80c 	bl	8009ae0 <__malloc_unlock>
 8009ac8:	e794      	b.n	80099f4 <_malloc_r+0x20>
 8009aca:	6005      	str	r5, [r0, #0]
 8009acc:	e7d6      	b.n	8009a7c <_malloc_r+0xa8>
 8009ace:	bf00      	nop
 8009ad0:	2000099c 	.word	0x2000099c

08009ad4 <__malloc_lock>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	@ (8009adc <__malloc_lock+0x8>)
 8009ad6:	f000 b84b 	b.w	8009b70 <__retarget_lock_acquire_recursive>
 8009ada:	bf00      	nop
 8009adc:	20000adc 	.word	0x20000adc

08009ae0 <__malloc_unlock>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	@ (8009ae8 <__malloc_unlock+0x8>)
 8009ae2:	f000 b846 	b.w	8009b72 <__retarget_lock_release_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20000adc 	.word	0x20000adc

08009aec <memset>:
 8009aec:	4402      	add	r2, r0
 8009aee:	4603      	mov	r3, r0
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d100      	bne.n	8009af6 <memset+0xa>
 8009af4:	4770      	bx	lr
 8009af6:	f803 1b01 	strb.w	r1, [r3], #1
 8009afa:	e7f9      	b.n	8009af0 <memset+0x4>

08009afc <_sbrk_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d06      	ldr	r5, [pc, #24]	@ (8009b18 <_sbrk_r+0x1c>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	602b      	str	r3, [r5, #0]
 8009b08:	f7f7 f954 	bl	8000db4 <_sbrk>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_sbrk_r+0x1a>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_sbrk_r+0x1a>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20000ad8 	.word	0x20000ad8

08009b1c <__errno>:
 8009b1c:	4b01      	ldr	r3, [pc, #4]	@ (8009b24 <__errno+0x8>)
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	2000002c 	.word	0x2000002c

08009b28 <__libc_init_array>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b60 <__libc_init_array+0x38>)
 8009b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8009b64 <__libc_init_array+0x3c>)
 8009b2e:	1b64      	subs	r4, r4, r5
 8009b30:	10a4      	asrs	r4, r4, #2
 8009b32:	2600      	movs	r6, #0
 8009b34:	42a6      	cmp	r6, r4
 8009b36:	d109      	bne.n	8009b4c <__libc_init_array+0x24>
 8009b38:	4d0b      	ldr	r5, [pc, #44]	@ (8009b68 <__libc_init_array+0x40>)
 8009b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8009b6c <__libc_init_array+0x44>)
 8009b3c:	f000 f864 	bl	8009c08 <_init>
 8009b40:	1b64      	subs	r4, r4, r5
 8009b42:	10a4      	asrs	r4, r4, #2
 8009b44:	2600      	movs	r6, #0
 8009b46:	42a6      	cmp	r6, r4
 8009b48:	d105      	bne.n	8009b56 <__libc_init_array+0x2e>
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b50:	4798      	blx	r3
 8009b52:	3601      	adds	r6, #1
 8009b54:	e7ee      	b.n	8009b34 <__libc_init_array+0xc>
 8009b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b5a:	4798      	blx	r3
 8009b5c:	3601      	adds	r6, #1
 8009b5e:	e7f2      	b.n	8009b46 <__libc_init_array+0x1e>
 8009b60:	08009c44 	.word	0x08009c44
 8009b64:	08009c44 	.word	0x08009c44
 8009b68:	08009c44 	.word	0x08009c44
 8009b6c:	08009c48 	.word	0x08009c48

08009b70 <__retarget_lock_acquire_recursive>:
 8009b70:	4770      	bx	lr

08009b72 <__retarget_lock_release_recursive>:
 8009b72:	4770      	bx	lr

08009b74 <_free_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4605      	mov	r5, r0
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d041      	beq.n	8009c00 <_free_r+0x8c>
 8009b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b80:	1f0c      	subs	r4, r1, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfb8      	it	lt
 8009b86:	18e4      	addlt	r4, r4, r3
 8009b88:	f7ff ffa4 	bl	8009ad4 <__malloc_lock>
 8009b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c04 <_free_r+0x90>)
 8009b8e:	6813      	ldr	r3, [r2, #0]
 8009b90:	b933      	cbnz	r3, 8009ba0 <_free_r+0x2c>
 8009b92:	6063      	str	r3, [r4, #4]
 8009b94:	6014      	str	r4, [r2, #0]
 8009b96:	4628      	mov	r0, r5
 8009b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b9c:	f7ff bfa0 	b.w	8009ae0 <__malloc_unlock>
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d908      	bls.n	8009bb6 <_free_r+0x42>
 8009ba4:	6820      	ldr	r0, [r4, #0]
 8009ba6:	1821      	adds	r1, r4, r0
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	bf01      	itttt	eq
 8009bac:	6819      	ldreq	r1, [r3, #0]
 8009bae:	685b      	ldreq	r3, [r3, #4]
 8009bb0:	1809      	addeq	r1, r1, r0
 8009bb2:	6021      	streq	r1, [r4, #0]
 8009bb4:	e7ed      	b.n	8009b92 <_free_r+0x1e>
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	b10b      	cbz	r3, 8009bc0 <_free_r+0x4c>
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	d9fa      	bls.n	8009bb6 <_free_r+0x42>
 8009bc0:	6811      	ldr	r1, [r2, #0]
 8009bc2:	1850      	adds	r0, r2, r1
 8009bc4:	42a0      	cmp	r0, r4
 8009bc6:	d10b      	bne.n	8009be0 <_free_r+0x6c>
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	4401      	add	r1, r0
 8009bcc:	1850      	adds	r0, r2, r1
 8009bce:	4283      	cmp	r3, r0
 8009bd0:	6011      	str	r1, [r2, #0]
 8009bd2:	d1e0      	bne.n	8009b96 <_free_r+0x22>
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	6053      	str	r3, [r2, #4]
 8009bda:	4408      	add	r0, r1
 8009bdc:	6010      	str	r0, [r2, #0]
 8009bde:	e7da      	b.n	8009b96 <_free_r+0x22>
 8009be0:	d902      	bls.n	8009be8 <_free_r+0x74>
 8009be2:	230c      	movs	r3, #12
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	e7d6      	b.n	8009b96 <_free_r+0x22>
 8009be8:	6820      	ldr	r0, [r4, #0]
 8009bea:	1821      	adds	r1, r4, r0
 8009bec:	428b      	cmp	r3, r1
 8009bee:	bf04      	itt	eq
 8009bf0:	6819      	ldreq	r1, [r3, #0]
 8009bf2:	685b      	ldreq	r3, [r3, #4]
 8009bf4:	6063      	str	r3, [r4, #4]
 8009bf6:	bf04      	itt	eq
 8009bf8:	1809      	addeq	r1, r1, r0
 8009bfa:	6021      	streq	r1, [r4, #0]
 8009bfc:	6054      	str	r4, [r2, #4]
 8009bfe:	e7ca      	b.n	8009b96 <_free_r+0x22>
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
 8009c02:	bf00      	nop
 8009c04:	2000099c 	.word	0x2000099c

08009c08 <_init>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr

08009c14 <_fini>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	bf00      	nop
 8009c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1a:	bc08      	pop	{r3}
 8009c1c:	469e      	mov	lr, r3
 8009c1e:	4770      	bx	lr


karasimsek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008bf8  08008bf8  00009bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c14  08008c14  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  08008c14  08008c14  00009c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c1c  08008c1c  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c1c  08008c1c  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c20  08008c20  00009c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008c24  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a080  2**0
                  CONTENTS
 10 .bss          00000a1c  20000080  20000080  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000a080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a8d  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003890  00000000  00000000  0001eb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  000223d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d14  00000000  00000000  00023500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023416  00000000  00000000  00024214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001849d  00000000  00000000  0004762a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb7ef  00000000  00000000  0005fac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b2b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a74  00000000  00000000  0012b2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0012fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008be0 	.word	0x08008be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08008be0 	.word	0x08008be0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc8a 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f8a4 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f9a0 	bl	8000808 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f90a 	bl	80006e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f936 	bl	800073c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f964 	bl	800079c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 ff2e 	bl	8008334 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d8:	f007 ff52 	bl	8008380 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(HAL_GPIO_ReadPin(BUTON_GPIO_Port, BUTON_Pin)){
 80004dc:	2101      	movs	r1, #1
 80004de:	4848      	ldr	r0, [pc, #288]	@ (8000600 <main+0x148>)
 80004e0:	f000 ffbc 	bl	800145c <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f6      	beq.n	80004d8 <main+0x20>
    delay = delay - 100;
 80004ea:	4b46      	ldr	r3, [pc, #280]	@ (8000604 <main+0x14c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3b64      	subs	r3, #100	@ 0x64
 80004f0:	4a44      	ldr	r2, [pc, #272]	@ (8000604 <main+0x14c>)
 80004f2:	6013      	str	r3, [r2, #0]
    HAL_Delay(delay);
 80004f4:	4b43      	ldr	r3, [pc, #268]	@ (8000604 <main+0x14c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fcdd 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000504:	4840      	ldr	r0, [pc, #256]	@ (8000608 <main+0x150>)
 8000506:	f000 ffc1 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 800050a:	4b3e      	ldr	r3, [pc, #248]	@ (8000604 <main+0x14c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fcd2 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800051a:	483b      	ldr	r0, [pc, #236]	@ (8000608 <main+0x150>)
 800051c:	f000 ffb6 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8000520:	4b38      	ldr	r3, [pc, #224]	@ (8000604 <main+0x14c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f000 fcc7 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000530:	4835      	ldr	r0, [pc, #212]	@ (8000608 <main+0x150>)
 8000532:	f000 ffab 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8000536:	4b33      	ldr	r3, [pc, #204]	@ (8000604 <main+0x14c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fcbc 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000546:	4830      	ldr	r0, [pc, #192]	@ (8000608 <main+0x150>)
 8000548:	f000 ffa0 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 800054c:	4b2d      	ldr	r3, [pc, #180]	@ (8000604 <main+0x14c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fcb1 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	482a      	ldr	r0, [pc, #168]	@ (8000608 <main+0x150>)
 800055e:	f000 ff95 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <main+0x14c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fca6 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000572:	4825      	ldr	r0, [pc, #148]	@ (8000608 <main+0x150>)
 8000574:	f000 ff8a 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <main+0x14c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fc9b 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000588:	481f      	ldr	r0, [pc, #124]	@ (8000608 <main+0x150>)
 800058a:	f000 ff7f 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <main+0x14c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fc90 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800059e:	481a      	ldr	r0, [pc, #104]	@ (8000608 <main+0x150>)
 80005a0:	f000 ff74 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <main+0x14c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fc85 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b4:	4814      	ldr	r0, [pc, #80]	@ (8000608 <main+0x150>)
 80005b6:	f000 ff69 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <main+0x14c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fc7a 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ca:	480f      	ldr	r0, [pc, #60]	@ (8000608 <main+0x150>)
 80005cc:	f000 ff5e 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <main+0x14c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fc6f 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e0:	4809      	ldr	r0, [pc, #36]	@ (8000608 <main+0x150>)
 80005e2:	f000 ff53 	bl	800148c <HAL_GPIO_WritePin>
    HAL_Delay(delay);
 80005e6:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <main+0x14c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fc64 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f6:	4804      	ldr	r0, [pc, #16]	@ (8000608 <main+0x150>)
 80005f8:	f000 ff48 	bl	800148c <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80005fc:	e76c      	b.n	80004d8 <main+0x20>
 80005fe:	bf00      	nop
 8000600:	40020000 	.word	0x40020000
 8000604:	20000000 	.word	0x20000000
 8000608:	40020c00 	.word	0x40020c00

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f008 fa52 	bl	8008ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000680:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068a:	2307      	movs	r3, #7
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fe12 	bl	80042bc <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069e:	f000 f9af 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2105      	movs	r1, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 f873 	bl	80047ac <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006cc:	f000 f998 	bl	8000a00 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f002 ffe9 	bl	80036f4 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f96a 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000009c 	.word	0x2000009c
 8000734:	40005400 	.word	0x40005400
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000742:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <MX_I2S3_Init+0x58>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000760:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000764:	4a0c      	ldr	r2, [pc, #48]	@ (8000798 <MX_I2S3_Init+0x5c>)
 8000766:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_I2S3_Init+0x54>)
 800077c:	f003 f8fe 	bl	800397c <HAL_I2S_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000786:	f000 f93b 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000f0 	.word	0x200000f0
 8000794:	40003c00 	.word	0x40003c00
 8000798:	00017700 	.word	0x00017700

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	@ (8000804 <MX_SPI1_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_SPI1_Init+0x64>)
 80007ee:	f004 fb2b 	bl	8004e48 <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f902 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000138 	.word	0x20000138
 8000804:	40013000 	.word	0x40013000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b71      	ldr	r3, [pc, #452]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a70      	ldr	r2, [pc, #448]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b6e      	ldr	r3, [pc, #440]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b6a      	ldr	r3, [pc, #424]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a69      	ldr	r2, [pc, #420]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b67      	ldr	r3, [pc, #412]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b63      	ldr	r3, [pc, #396]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a62      	ldr	r2, [pc, #392]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b60      	ldr	r3, [pc, #384]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b5c      	ldr	r3, [pc, #368]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a5b      	ldr	r2, [pc, #364]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b59      	ldr	r3, [pc, #356]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b55      	ldr	r3, [pc, #340]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a54      	ldr	r2, [pc, #336]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b52      	ldr	r3, [pc, #328]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b4e      	ldr	r3, [pc, #312]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a4d      	ldr	r2, [pc, #308]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b4b      	ldr	r3, [pc, #300]	@ (80009e8 <MX_GPIO_Init+0x1e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4848      	ldr	r0, [pc, #288]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008cc:	f000 fdde 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4846      	ldr	r0, [pc, #280]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80008d6:	f000 fdd9 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	2200      	movs	r2, #0
 80008dc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008e0:	4844      	ldr	r0, [pc, #272]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 80008e2:	f000 fdd3 	bl	800148c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	483b      	ldr	r0, [pc, #236]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008fe:	f000 fc11 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4835      	ldr	r0, [pc, #212]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 800091a:	f000 fc03 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	482d      	ldr	r0, [pc, #180]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 800093a:	f000 fbf3 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTON_Pin */
  GPIO_InitStruct.Pin = BUTON_Pin;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTON_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4829      	ldr	r0, [pc, #164]	@ (80009f8 <MX_GPIO_Init+0x1f0>)
 8000952:	f000 fbe7 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000956:	2304      	movs	r3, #4
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4824      	ldr	r0, [pc, #144]	@ (80009fc <MX_GPIO_Init+0x1f4>)
 800096a:	f000 fbdb 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000980:	2305      	movs	r3, #5
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	481c      	ldr	r0, [pc, #112]	@ (80009fc <MX_GPIO_Init+0x1f4>)
 800098c:	f000 fbca 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000990:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000994:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4812      	ldr	r0, [pc, #72]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 80009aa:	f000 fbbb 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 80009c2:	f000 fbaf 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80009dc:	f000 fba2 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	@ 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fb28 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a9a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa0:	2312      	movs	r3, #18
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <HAL_I2C_MspInit+0x8c>)
 8000ab8:	f000 fb34 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	@ 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a31      	ldr	r2, [pc, #196]	@ (8000bdc <HAL_I2S_MspInit+0xf0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d15a      	bne.n	8000bd2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b20:	23c0      	movs	r3, #192	@ 0xc0
 8000b22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 f849 	bl	8004bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b38:	f7ff ff62 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	4b27      	ldr	r3, [pc, #156]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a26      	ldr	r2, [pc, #152]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4c:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a1f      	ldr	r2, [pc, #124]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b90:	2310      	movs	r3, #16
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480e      	ldr	r0, [pc, #56]	@ (8000be4 <HAL_I2S_MspInit+0xf8>)
 8000bac:	f000 faba 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <HAL_I2S_MspInit+0xfc>)
 8000bce:	f000 faa9 	bl	8001124 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	@ 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40003c00 	.word	0x40003c00
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020800 	.word	0x40020800

08000bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <HAL_SPI_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12b      	bne.n	8000c66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	4a17      	ldr	r2, [pc, #92]	@ (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	@ (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c46:	23e0      	movs	r3, #224	@ 0xe0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <HAL_SPI_MspInit+0x8c>)
 8000c62:	f000 fa5f 	bl	8001124 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f8d1 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <OTG_FS_IRQHandler+0x10>)
 8000ce2:	f000 fecd 	bl	8001a80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000574 	.word	0x20000574

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f007 fee8 	bl	8008af4 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20020000 	.word	0x20020000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	20000190 	.word	0x20000190
 8000d58:	20000aa0 	.word	0x20000aa0

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f007 fea7 	bl	8008b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fb81 	bl	80004b8 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000dc4:	08008c24 	.word	0x08008c24
  ldr r2, =_sbss
 8000dc8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000dcc:	20000a9c 	.word	0x20000a9c

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f94f 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fe00 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f967 	bl	800110a <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f92f 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	20000008 	.word	0x20000008

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2000000c 	.word	0x2000000c
 8000e9c:	20000194 	.word	0x20000194

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000194 	.word	0x20000194

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000000c 	.word	0x2000000c

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	@ (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e16b      	b.n	8001418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 815a 	bne.w	8001412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b4 	beq.w	8001412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001434 <HAL_GPIO_Init+0x310>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <HAL_GPIO_Init+0x314>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	@ (800143c <HAL_GPIO_Init+0x318>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	@ (8001440 <HAL_GPIO_Init+0x31c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	@ (8001444 <HAL_GPIO_Init+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_GPIO_Init+0x324>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	@ (800144c <HAL_GPIO_Init+0x328>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x20a>
 800132a:	2307      	movs	r3, #7
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x228>
 800132e:	2308      	movs	r3, #8
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x228>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	@ (8001434 <HAL_GPIO_Init+0x310>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <HAL_GPIO_Init+0x334>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <HAL_GPIO_Init+0x334>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_GPIO_Init+0x334>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae90 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e001      	b.n	800147e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af02      	add	r7, sp, #8
 80014c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e059      	b.n	8001584 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f006 ff80 	bl	80083f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014fe:	d102      	bne.n	8001506 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fd9a 	bl	8005044 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7c1a      	ldrb	r2, [r3, #16]
 8001518:	f88d 2000 	strb.w	r2, [sp]
 800151c:	3304      	adds	r3, #4
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	f003 fd1b 	bl	8004f5a <USB_CoreInit>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e026      	b.n	8001584 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fd92 	bl	8005066 <USB_SetCurrentMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e017      	b.n	8001584 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7c1a      	ldrb	r2, [r3, #16]
 800155c:	f88d 2000 	strb.w	r2, [sp]
 8001560:	3304      	adds	r3, #4
 8001562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001564:	f003 ff34 	bl	80053d0 <USB_HostInit>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e004      	b.n	8001584 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	@ 0x2c
 8001590:	af04      	add	r7, sp, #16
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4603      	mov	r3, r0
 800159c:	70fb      	strb	r3, [r7, #3]
 800159e:	460b      	mov	r3, r1
 80015a0:	70bb      	strb	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015a8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_HCD_HC_Init+0x2c>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e09d      	b.n	80016f4 <HAL_HCD_HC_Init+0x168>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3319      	adds	r3, #25
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3314      	adds	r3, #20
 80015e4:	787a      	ldrb	r2, [r7, #1]
 80015e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3315      	adds	r3, #21
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3326      	adds	r3, #38	@ 0x26
 800160c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001610:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	78bb      	ldrb	r3, [r7, #2]
 8001616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800161a:	b2d8      	uxtb	r0, r3
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3316      	adds	r3, #22
 800162a:	4602      	mov	r2, r0
 800162c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fbc8 	bl	8001dc8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001638:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da0a      	bge.n	8001656 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3317      	adds	r3, #23
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e009      	b.n	800166a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3317      	adds	r3, #23
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f004 f812 	bl	8005698 <USB_GetHostSpeed>
 8001674:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001676:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10b      	bne.n	8001696 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800167e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_HCD_HC_Init+0x10a>
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d104      	bne.n	8001696 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001690:	d901      	bls.n	8001696 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001692:	23bc      	movs	r3, #188	@ 0xbc
 8001694:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3318      	adds	r3, #24
 80016a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	b298      	uxth	r0, r3
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3328      	adds	r3, #40	@ 0x28
 80016c0:	4602      	mov	r2, r0
 80016c2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	787c      	ldrb	r4, [r7, #1]
 80016ce:	78ba      	ldrb	r2, [r7, #2]
 80016d0:	78f9      	ldrb	r1, [r7, #3]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4623      	mov	r3, r4
 80016e2:	f004 f801 	bl	80056e8 <USB_HC_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd90      	pop	{r4, r7, pc}

080016fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_HCD_HC_Halt+0x1e>
 8001716:	2302      	movs	r3, #2
 8001718:	e00f      	b.n	800173a <HAL_HCD_HC_Halt+0x3e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fb93 	bl	8005e56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	70fb      	strb	r3, [r7, #3]
 8001756:	460b      	mov	r3, r1
 8001758:	70bb      	strb	r3, [r7, #2]
 800175a:	4613      	mov	r3, r2
 800175c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	1a9b      	subs	r3, r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	3317      	adds	r3, #23
 800176e:	78ba      	ldrb	r2, [r7, #2]
 8001770:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	3326      	adds	r3, #38	@ 0x26
 8001782:	787a      	ldrb	r2, [r7, #1]
 8001784:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001786:	7c3b      	ldrb	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d114      	bne.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	332a      	adds	r3, #42	@ 0x2a
 800179c:	2203      	movs	r2, #3
 800179e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3319      	adds	r3, #25
 80017b0:	7f3a      	ldrb	r2, [r7, #28]
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e009      	b.n	80017ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	332a      	adds	r3, #42	@ 0x2a
 80017c6:	2202      	movs	r2, #2
 80017c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017ca:	787b      	ldrb	r3, [r7, #1]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	f200 8102 	bhi.w	80019d6 <HAL_HCD_HC_SubmitRequest+0x292>
 80017d2:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080019c1 	.word	0x080019c1
 80017e0:	080018ad 	.word	0x080018ad
 80017e4:	08001937 	.word	0x08001937
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017e8:	7c3b      	ldrb	r3, [r7, #16]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	f040 80f5 	bne.w	80019da <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d12d      	bne.n	8001852 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017f6:	8b3b      	ldrh	r3, [r7, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	333d      	adds	r3, #61	@ 0x3d
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	333d      	adds	r3, #61	@ 0x3d
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	332a      	adds	r3, #42	@ 0x2a
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800183a:	e0ce      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	332a      	adds	r3, #42	@ 0x2a
 800184c:	2202      	movs	r2, #2
 800184e:	701a      	strb	r2, [r3, #0]
      break;
 8001850:	e0c3      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	331a      	adds	r3, #26
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 80b8 	bne.w	80019da <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	333c      	adds	r3, #60	@ 0x3c
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	332a      	adds	r3, #42	@ 0x2a
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
      break;
 8001894:	e0a1      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	332a      	adds	r3, #42	@ 0x2a
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e096      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018ac:	78bb      	ldrb	r3, [r7, #2]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d120      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	333d      	adds	r3, #61	@ 0x3d
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	332a      	adds	r3, #42	@ 0x2a
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018dc:	e07e      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	332a      	adds	r3, #42	@ 0x2a
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
      break;
 80018f2:	e073      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	333c      	adds	r3, #60	@ 0x3c
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	332a      	adds	r3, #42	@ 0x2a
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
      break;
 800191e:	e05d      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	332a      	adds	r3, #42	@ 0x2a
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e052      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d120      	bne.n	800197e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	333d      	adds	r3, #61	@ 0x3d
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	332a      	adds	r3, #42	@ 0x2a
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001966:	e039      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	332a      	adds	r3, #42	@ 0x2a
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
      break;
 800197c:	e02e      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	333c      	adds	r3, #60	@ 0x3c
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	332a      	adds	r3, #42	@ 0x2a
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
      break;
 80019a8:	e018      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	332a      	adds	r3, #42	@ 0x2a
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
      break;
 80019be:	e00d      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	332a      	adds	r3, #42	@ 0x2a
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
      break;
 80019d4:	e002      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019d6:	bf00      	nop
 80019d8:	e000      	b.n	80019dc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	332c      	adds	r3, #44	@ 0x2c
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	8b39      	ldrh	r1, [r7, #24]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4403      	add	r3, r0
 8001a00:	3334      	adds	r3, #52	@ 0x34
 8001a02:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	334c      	adds	r3, #76	@ 0x4c
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3338      	adds	r3, #56	@ 0x38
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3315      	adds	r3, #21
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	334d      	adds	r3, #77	@ 0x4d
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	3310      	adds	r3, #16
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	1d19      	adds	r1, r3, #4
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	799b      	ldrb	r3, [r3, #6]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f003 ff66 	bl	8005940 <USB_HC_StartXfer>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop

08001a80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fc5b 	bl	8005352 <USB_GetMode>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f040 80fb 	bne.w	8001c9a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fc1e 	bl	80052ea <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80f1 	beq.w	8001c98 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fc15 	bl	80052ea <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001aca:	d104      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fc05 	bl	80052ea <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aea:	d104      	bne.n	8001af6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fbf5 	bl	80052ea <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b0a:	d104      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fbe5 	bl	80052ea <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d103      	bne.n	8001b32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fbd7 	bl	80052ea <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b46:	d120      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d113      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b62:	2110      	movs	r1, #16
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f003 faca 	bl	80050fe <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b6a:	6938      	ldr	r0, [r7, #16]
 8001b6c:	f003 faf9 	bl	8005162 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7a5b      	ldrb	r3, [r3, #9]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d105      	bne.n	8001b84 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fcea 	bl	8005558 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f006 fcb1 	bl	80084ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fbab 	bl	80052ea <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9e:	d102      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f001 fd33 	bl	800360c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fb9d 	bl	80052ea <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d106      	bne.n	8001bc8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f006 fc7a 	bl	80084b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fb8c 	bl	80052ea <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bdc:	d139      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 f926 	bl	8005e34 <USB_HC_ReadInterrupt>
 8001be8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e025      	b.n	8001c3c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d018      	beq.n	8001c36 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c1a:	d106      	bne.n	8001c2a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f905 	bl	8001e32 <HCD_HC_IN_IRQHandler>
 8001c28:	e005      	b.n	8001c36 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 ff67 	bl	8002b04 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	795b      	ldrb	r3, [r3, #5]
 8001c40:	461a      	mov	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d3d3      	bcc.n	8001bf0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fb47 	bl	80052ea <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d101      	bne.n	8001c6a <HAL_HCD_IRQHandler+0x1ea>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_HCD_IRQHandler+0x1ec>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d014      	beq.n	8001c9a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0210 	bic.w	r2, r2, #16
 8001c7e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 fbe4 	bl	800344e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699a      	ldr	r2, [r3, #24]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0210 	orr.w	r2, r2, #16
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	e000      	b.n	8001c9a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c98:	bf00      	nop
    }
  }
}
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_Start+0x16>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e013      	b.n	8001cde <HAL_HCD_Start+0x3e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fcae 	bl	8005626 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 f9a7 	bl	8005022 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_HCD_Stop+0x16>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e00d      	b.n	8001d18 <HAL_HCD_Stop+0x32>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 fa01 	bl	8006110 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fc50 	bl	80055d2 <USB_ResetPort>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	334c      	adds	r3, #76	@ 0x4c
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3338      	adds	r3, #56	@ 0x38
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fc92 	bl	80056c6 <USB_GetCurrentFrame>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fc6d 	bl	8005698 <USB_GetHostSpeed>
 8001dbe:	4603      	mov	r3, r0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	331a      	adds	r3, #26
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	331b      	adds	r3, #27
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3325      	adds	r3, #37	@ 0x25
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3324      	adds	r3, #36	@ 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fa5d 	bl	8005310 <USB_ReadChInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11a      	bne.n	8001e96 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2304      	movs	r3, #4
 8001e70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	334d      	adds	r3, #77	@ 0x4d
 8001e82:	2207      	movs	r2, #7
 8001e84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 ffe1 	bl	8005e56 <USB_HC_Halt>
 8001e94:	e09e      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fa36 	bl	8005310 <USB_ReadChInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eae:	d11b      	bne.n	8001ee8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	334d      	adds	r3, #77	@ 0x4d
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 ffb8 	bl	8005e56 <USB_HC_Halt>
 8001ee6:	e075      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fa0d 	bl	8005310 <USB_ReadChInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d11a      	bne.n	8001f36 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2308      	movs	r3, #8
 8001f10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	334d      	adds	r3, #77	@ 0x4d
 8001f22:	2206      	movs	r2, #6
 8001f24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 ff91 	bl	8005e56 <USB_HC_Halt>
 8001f34:	e04e      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 f9e6 	bl	8005310 <USB_ReadChInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4e:	d11b      	bne.n	8001f88 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	334d      	adds	r3, #77	@ 0x4d
 8001f74:	2209      	movs	r2, #9
 8001f76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 ff68 	bl	8005e56 <USB_HC_Halt>
 8001f86:	e025      	b.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f9bd 	bl	8005310 <USB_ReadChInterrupts>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9c:	2b80      	cmp	r3, #128	@ 0x80
 8001f9e:	d119      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fac:	461a      	mov	r2, r3
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	334d      	adds	r3, #77	@ 0x4d
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 ff41 	bl	8005e56 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 f997 	bl	8005310 <USB_ReadChInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fec:	d112      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 ff2d 	bl	8005e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002008:	461a      	mov	r2, r3
 800200a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200e:	6093      	str	r3, [r2, #8]
 8002010:	f000 bd75 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f003 f977 	bl	8005310 <USB_ReadChInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	f040 8128 	bne.w	800227e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203a:	461a      	mov	r2, r3
 800203c:	2320      	movs	r3, #32
 800203e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	331b      	adds	r3, #27
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d119      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	331b      	adds	r3, #27
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	0151      	lsls	r1, r2, #5
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	440a      	add	r2, r1
 8002080:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002088:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	799b      	ldrb	r3, [r3, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01b      	beq.n	80020ca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3330      	adds	r3, #48	@ 0x30
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	1ac9      	subs	r1, r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	3338      	adds	r3, #56	@ 0x38
 80020c8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	334d      	adds	r3, #77	@ 0x4d
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3344      	adds	r3, #68	@ 0x44
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3326      	adds	r3, #38	@ 0x26
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3326      	adds	r3, #38	@ 0x26
 800212a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800212c:	2b02      	cmp	r3, #2
 800212e:	d110      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f003 fe8c 	bl	8005e56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2310      	movs	r3, #16
 800214e:	6093      	str	r3, [r2, #8]
 8002150:	e03d      	b.n	80021ce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3326      	adds	r3, #38	@ 0x26
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d00a      	beq.n	800217e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3326      	adds	r3, #38	@ 0x26
 8002178:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800217a:	2b01      	cmp	r3, #1
 800217c:	d127      	bne.n	80021ce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	0151      	lsls	r1, r2, #5
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	440a      	add	r2, r1
 8002194:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002198:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800219c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	334c      	adds	r3, #76	@ 0x4c
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	334c      	adds	r3, #76	@ 0x4c
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f006 f99d 	bl	8008508 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	799b      	ldrb	r3, [r3, #6]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d13b      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3338      	adds	r3, #56	@ 0x38
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	3328      	adds	r3, #40	@ 0x28
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	440b      	add	r3, r1
 80021fc:	1e59      	subs	r1, r3, #1
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4403      	add	r3, r0
 800220c:	3328      	adds	r3, #40	@ 0x28
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	fbb1 f3f3 	udiv	r3, r1, r3
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8470 	beq.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	333c      	adds	r3, #60	@ 0x3c
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2d8      	uxtb	r0, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	333c      	adds	r3, #60	@ 0x3c
 8002246:	4602      	mov	r2, r0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	f000 bc58 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	333c      	adds	r3, #60	@ 0x3c
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	333c      	adds	r3, #60	@ 0x3c
 8002276:	4602      	mov	r2, r0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	f000 bc40 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f003 f842 	bl	8005310 <USB_ReadChInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	d131      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	2320      	movs	r3, #32
 80022a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	331a      	adds	r3, #26
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	f040 841f 	bne.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	331b      	adds	r3, #27
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	334d      	adds	r3, #77	@ 0x4d
 80022e4:	2203      	movs	r2, #3
 80022e6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fdb0 	bl	8005e56 <USB_HC_Halt>
 80022f6:	f000 bc02 	b.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f003 f804 	bl	8005310 <USB_ReadChInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	f040 8305 	bne.w	800291e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002320:	461a      	mov	r2, r3
 8002322:	2302      	movs	r3, #2
 8002324:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	334d      	adds	r3, #77	@ 0x4d
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d114      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334d      	adds	r3, #77	@ 0x4d
 800234c:	2202      	movs	r2, #2
 800234e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	@ 0x4c
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e2cc      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	334d      	adds	r3, #77	@ 0x4d
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b06      	cmp	r3, #6
 800237a:	d114      	bne.n	80023a6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334d      	adds	r3, #77	@ 0x4d
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	334c      	adds	r3, #76	@ 0x4c
 80023a0:	2205      	movs	r2, #5
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e2ac      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334d      	adds	r3, #77	@ 0x4d
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d00b      	beq.n	80023d4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	334d      	adds	r3, #77	@ 0x4d
 80023cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	f040 80a6 	bne.w	8002520 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334d      	adds	r3, #77	@ 0x4d
 80023e4:	2202      	movs	r2, #2
 80023e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3344      	adds	r3, #68	@ 0x44
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4403      	add	r3, r0
 8002408:	3344      	adds	r3, #68	@ 0x44
 800240a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	@ 0x44
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d943      	bls.n	80024aa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3344      	adds	r3, #68	@ 0x44
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	331a      	adds	r3, #26
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d123      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	331b      	adds	r3, #27
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	331c      	adds	r3, #28
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	0151      	lsls	r1, r2, #5
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	440a      	add	r2, r1
 800248a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800248e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002492:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334c      	adds	r3, #76	@ 0x4c
 80024a4:	2204      	movs	r2, #4
 80024a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024a8:	e229      	b.n	80028fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	334c      	adds	r3, #76	@ 0x4c
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3326      	adds	r3, #38	@ 0x26
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3326      	adds	r3, #38	@ 0x26
 80024e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	f040 8209 	bne.w	80028fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002502:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800250a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002518:	461a      	mov	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800251e:	e1ee      	b.n	80028fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	334d      	adds	r3, #77	@ 0x4d
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b05      	cmp	r3, #5
 8002534:	f040 80c8 	bne.w	80026c8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	334d      	adds	r3, #77	@ 0x4d
 8002548:	2202      	movs	r2, #2
 800254a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	331b      	adds	r3, #27
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 81ce 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3326      	adds	r3, #38	@ 0x26
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d16b      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3348      	adds	r3, #72	@ 0x48
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1c59      	adds	r1, r3, #1
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4403      	add	r3, r0
 800259a:	3348      	adds	r3, #72	@ 0x48
 800259c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3348      	adds	r3, #72	@ 0x48
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d943      	bls.n	800263c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3348      	adds	r3, #72	@ 0x48
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	331b      	adds	r3, #27
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3344      	adds	r3, #68	@ 0x44
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d809      	bhi.n	8002606 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	331c      	adds	r3, #28
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	440a      	add	r2, r1
 800261c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002624:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	334c      	adds	r3, #76	@ 0x4c
 8002636:	2204      	movs	r2, #4
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e014      	b.n	8002666 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334c      	adds	r3, #76	@ 0x4c
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e009      	b.n	8002666 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	334c      	adds	r3, #76	@ 0x4c
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3326      	adds	r3, #38	@ 0x26
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3326      	adds	r3, #38	@ 0x26
 800268c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800268e:	2b02      	cmp	r3, #2
 8002690:	f040 8136 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e11b      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	334d      	adds	r3, #77	@ 0x4d
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	f040 8081 	bne.w	80027e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	334d      	adds	r3, #77	@ 0x4d
 80026f0:	2202      	movs	r2, #2
 80026f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	331b      	adds	r3, #27
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	f040 80fa 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	334c      	adds	r3, #76	@ 0x4c
 800271c:	2202      	movs	r2, #2
 800271e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	440a      	add	r2, r1
 8002736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800273a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	440a      	add	r2, r1
 8002756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800275a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800275e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800277a:	f023 0320 	bic.w	r3, r3, #32
 800277e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3326      	adds	r3, #38	@ 0x26
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3326      	adds	r3, #38	@ 0x26
 80027a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f040 80a9 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e08e      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	334d      	adds	r3, #77	@ 0x4d
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d143      	bne.n	8002880 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	334d      	adds	r3, #77	@ 0x4d
 8002808:	2202      	movs	r2, #2
 800280a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334c      	adds	r3, #76	@ 0x4c
 800281c:	2202      	movs	r2, #2
 800281e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3326      	adds	r3, #38	@ 0x26
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3326      	adds	r3, #38	@ 0x26
 8002846:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002848:	2b02      	cmp	r3, #2
 800284a:	d159      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002862:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800286a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e03f      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	334d      	adds	r3, #77	@ 0x4d
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d126      	bne.n	80028e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	334d      	adds	r3, #77	@ 0x4d
 80028a6:	2202      	movs	r2, #2
 80028a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3344      	adds	r3, #68	@ 0x44
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1c59      	adds	r1, r3, #1
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4403      	add	r3, r0
 80028ca:	3344      	adds	r3, #68	@ 0x44
 80028cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	334c      	adds	r3, #76	@ 0x4c
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e00d      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334d      	adds	r3, #77	@ 0x4d
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f000 8100 	beq.w	8002afc <HCD_HC_IN_IRQHandler+0xcca>
 80028fc:	e000      	b.n	8002900 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334c      	adds	r3, #76	@ 0x4c
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fdf6 	bl	8008508 <HAL_HCD_HC_NotifyURBChange_Callback>
 800291c:	e0ef      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f002 fcf2 	bl	8005310 <USB_ReadChInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	2b40      	cmp	r3, #64	@ 0x40
 8002934:	d12f      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	2340      	movs	r3, #64	@ 0x40
 8002946:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	334d      	adds	r3, #77	@ 0x4d
 8002958:	2205      	movs	r2, #5
 800295a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	331a      	adds	r3, #26
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3344      	adds	r3, #68	@ 0x44
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fa61 	bl	8005e56 <USB_HC_Halt>
 8002994:	e0b3      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fcb6 	bl	8005310 <USB_ReadChInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	f040 80a7 	bne.w	8002afe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3326      	adds	r3, #38	@ 0x26
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d11b      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3344      	adds	r3, #68	@ 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	334d      	adds	r3, #77	@ 0x4d
 80029ea:	2204      	movs	r2, #4
 80029ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fa2d 	bl	8005e56 <USB_HC_Halt>
 80029fc:	e03f      	b.n	8002a7e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3326      	adds	r3, #38	@ 0x26
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3326      	adds	r3, #38	@ 0x26
 8002a24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d129      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3344      	adds	r3, #68	@ 0x44
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	799b      	ldrb	r3, [r3, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HCD_HC_IN_IRQHandler+0xc2a>
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	331b      	adds	r3, #27
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d110      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334d      	adds	r3, #77	@ 0x4d
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 f9ec 	bl	8005e56 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	331b      	adds	r3, #27
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d129      	bne.n	8002ae8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	331b      	adds	r3, #27
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ae2:	f043 0320 	orr.w	r3, r3, #32
 8002ae6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af4:	461a      	mov	r2, r3
 8002af6:	2310      	movs	r3, #16
 8002af8:	6093      	str	r3, [r2, #8]
 8002afa:	e000      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002afc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 fbf4 	bl	8005310 <USB_ReadChInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d11b      	bne.n	8002b6a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2304      	movs	r3, #4
 8002b42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	334d      	adds	r3, #77	@ 0x4d
 8002b54:	2207      	movs	r2, #7
 8002b56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 f978 	bl	8005e56 <USB_HC_Halt>
 8002b66:	f000 bc6f 	b.w	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fbcc 	bl	8005310 <USB_ReadChInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 8082 	bne.w	8002c88 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	2320      	movs	r3, #32
 8002b94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3319      	adds	r3, #25
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d124      	bne.n	8002bf6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	3319      	adds	r3, #25
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	334c      	adds	r3, #76	@ 0x4c
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334d      	adds	r3, #77	@ 0x4d
 8002be4:	2203      	movs	r2, #3
 8002be6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 f930 	bl	8005e56 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	331a      	adds	r3, #26
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 841d 	bne.w	8003448 <HCD_HC_OUT_IRQHandler+0x944>
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	331b      	adds	r3, #27
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8411 	bne.w	8003448 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3326      	adds	r3, #38	@ 0x26
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d009      	beq.n	8002c50 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	331b      	adds	r3, #27
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334d      	adds	r3, #77	@ 0x4d
 8002c60:	2203      	movs	r2, #3
 8002c62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 f8f2 	bl	8005e56 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3344      	adds	r3, #68	@ 0x44
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e3df      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 fb3d 	bl	8005310 <USB_ReadChInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca0:	d111      	bne.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cb4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 f8c9 	bl	8005e56 <USB_HC_Halt>
 8002cc4:	e3c0      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 fb1e 	bl	8005310 <USB_ReadChInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d168      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3344      	adds	r3, #68	@ 0x44
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fb08 	bl	8005310 <USB_ReadChInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d06:	2b40      	cmp	r3, #64	@ 0x40
 8002d08:	d112      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3319      	adds	r3, #25
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2340      	movs	r3, #64	@ 0x40
 8002d2e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	331b      	adds	r3, #27
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	331b      	adds	r3, #27
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	0151      	lsls	r1, r2, #5
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	440a      	add	r2, r1
 8002d70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d78:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	2301      	movs	r3, #1
 8002d8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	334d      	adds	r3, #77	@ 0x4d
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 f854 	bl	8005e56 <USB_HC_Halt>
 8002dae:	e34b      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 faa9 	bl	8005310 <USB_ReadChInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d139      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334d      	adds	r3, #77	@ 0x4d
 8002dd8:	2205      	movs	r2, #5
 8002dda:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	331a      	adds	r3, #26
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3319      	adds	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 f817 	bl	8005e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2340      	movs	r3, #64	@ 0x40
 8002e38:	6093      	str	r3, [r2, #8]
 8002e3a:	e305      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fa63 	bl	8005310 <USB_ReadChInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11a      	bne.n	8002e8a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334d      	adds	r3, #77	@ 0x4d
 8002e76:	2206      	movs	r2, #6
 8002e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 ffe7 	bl	8005e56 <USB_HC_Halt>
 8002e88:	e2de      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 fa3c 	bl	8005310 <USB_ReadChInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d144      	bne.n	8002f2c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3344      	adds	r3, #68	@ 0x44
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	334d      	adds	r3, #77	@ 0x4d
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3319      	adds	r3, #25
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d114      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3318      	adds	r3, #24
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3319      	adds	r3, #25
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 ff9f 	bl	8005e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2310      	movs	r3, #16
 8002f28:	6093      	str	r3, [r2, #8]
 8002f2a:	e28d      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 f9eb 	bl	8005310 <USB_ReadChInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b80      	cmp	r3, #128	@ 0x80
 8002f42:	d169      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	799b      	ldrb	r3, [r3, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d111      	bne.n	8002f70 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	334d      	adds	r3, #77	@ 0x4d
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 ff74 	bl	8005e56 <USB_HC_Halt>
 8002f6e:	e049      	b.n	8003004 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3344      	adds	r3, #68	@ 0x44
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4403      	add	r3, r0
 8002f90:	3344      	adds	r3, #68	@ 0x44
 8002f92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3344      	adds	r3, #68	@ 0x44
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d922      	bls.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3344      	adds	r3, #68	@ 0x44
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	334c      	adds	r3, #76	@ 0x4c
 8002fce:	2204      	movs	r2, #4
 8002fd0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	334c      	adds	r3, #76	@ 0x4c
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f005 fa8d 	bl	8008508 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fee:	e009      	b.n	8003004 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334c      	adds	r3, #76	@ 0x4c
 8003000:	2202      	movs	r2, #2
 8003002:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	6093      	str	r3, [r2, #8]
 8003016:	e217      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f002 f975 	bl	8005310 <USB_ReadChInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003030:	d11b      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334d      	adds	r3, #77	@ 0x4d
 8003042:	2209      	movs	r2, #9
 8003044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f002 ff01 	bl	8005e56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	e1ee      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f002 f94c 	bl	8005310 <USB_ReadChInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	f040 81df 	bne.w	8003442 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2302      	movs	r3, #2
 8003094:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	334d      	adds	r3, #77	@ 0x4d
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f040 8093 	bne.w	80031d4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334d      	adds	r3, #77	@ 0x4d
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	334c      	adds	r3, #76	@ 0x4c
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3326      	adds	r3, #38	@ 0x26
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d00b      	beq.n	8003104 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3326      	adds	r3, #38	@ 0x26
 80030fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030fe:	2b03      	cmp	r3, #3
 8003100:	f040 8190 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	799b      	ldrb	r3, [r3, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d115      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	333d      	adds	r3, #61	@ 0x3d
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	f083 0301 	eor.w	r3, r3, #1
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	333d      	adds	r3, #61	@ 0x3d
 8003134:	4602      	mov	r2, r0
 8003136:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	799b      	ldrb	r3, [r3, #6]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 8171 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3334      	adds	r3, #52	@ 0x34
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8165 	beq.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3334      	adds	r3, #52	@ 0x34
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4403      	add	r3, r0
 800317a:	3328      	adds	r3, #40	@ 0x28
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	440b      	add	r3, r1
 8003180:	1e59      	subs	r1, r3, #1
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4403      	add	r3, r0
 8003190:	3328      	adds	r3, #40	@ 0x28
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 813f 	beq.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	333d      	adds	r3, #61	@ 0x3d
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	f083 0301 	eor.w	r3, r3, #1
 80031be:	b2d8      	uxtb	r0, r3
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	333d      	adds	r3, #61	@ 0x3d
 80031ce:	4602      	mov	r2, r0
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e127      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	334d      	adds	r3, #77	@ 0x4d
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d120      	bne.n	800322c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	334d      	adds	r3, #77	@ 0x4d
 80031fa:	2202      	movs	r2, #2
 80031fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	331b      	adds	r3, #27
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 8107 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334c      	adds	r3, #76	@ 0x4c
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e0fb      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d13a      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	@ 0x4c
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	331b      	adds	r3, #27
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 80d1 	bne.w	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	331b      	adds	r3, #27
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b4:	6053      	str	r3, [r2, #4]
 80032b6:	e0b5      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334d      	adds	r3, #77	@ 0x4d
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d114      	bne.n	80032f8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	@ 0x4d
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	334c      	adds	r3, #76	@ 0x4c
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e095      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d114      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334c      	adds	r3, #76	@ 0x4c
 8003332:	2205      	movs	r2, #5
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e075      	b.n	8003424 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	334d      	adds	r3, #77	@ 0x4d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b07      	cmp	r3, #7
 800334c:	d00a      	beq.n	8003364 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	@ 0x4d
 800335e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003360:	2b09      	cmp	r3, #9
 8003362:	d170      	bne.n	8003446 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334d      	adds	r3, #77	@ 0x4d
 8003374:	2202      	movs	r2, #2
 8003376:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3344      	adds	r3, #68	@ 0x44
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4403      	add	r3, r0
 8003398:	3344      	adds	r3, #68	@ 0x44
 800339a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3344      	adds	r3, #68	@ 0x44
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d914      	bls.n	80033dc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3344      	adds	r3, #68	@ 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	334c      	adds	r3, #76	@ 0x4c
 80033d6:	2204      	movs	r2, #4
 80033d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033da:	e022      	b.n	8003422 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	334c      	adds	r3, #76	@ 0x4c
 80033ec:	2202      	movs	r2, #2
 80033ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003406:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800340e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003422:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334c      	adds	r3, #76	@ 0x4c
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f005 f864 	bl	8008508 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003440:	e002      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003446:	bf00      	nop
  }
}
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08a      	sub	sp, #40	@ 0x28
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	0c5b      	lsrs	r3, r3, #17
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003482:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d004      	beq.n	8003494 <HCD_RXQLVL_IRQHandler+0x46>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b05      	cmp	r3, #5
 800348e:	f000 80b6 	beq.w	80035fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003492:	e0b7      	b.n	8003604 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80b3 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	332c      	adds	r3, #44	@ 0x2c
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a7 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3338      	adds	r3, #56	@ 0x38
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	18d1      	adds	r1, r2, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4403      	add	r3, r0
 80034d8:	3334      	adds	r3, #52	@ 0x34
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4299      	cmp	r1, r3
 80034de:	f200 8083 	bhi.w	80035e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	332c      	adds	r3, #44	@ 0x2c
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	b292      	uxth	r2, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f001 fe9c 	bl	800523a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	332c      	adds	r3, #44	@ 0x2c
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	18d1      	adds	r1, r2, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4403      	add	r3, r0
 8003526:	332c      	adds	r3, #44	@ 0x2c
 8003528:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3338      	adds	r3, #56	@ 0x38
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	18d1      	adds	r1, r2, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	3338      	adds	r3, #56	@ 0x38
 8003550:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	0cdb      	lsrs	r3, r3, #19
 8003562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003566:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3328      	adds	r3, #40	@ 0x28
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4293      	cmp	r3, r2
 8003580:	d13f      	bne.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03c      	beq.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800359e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b4:	461a      	mov	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	333c      	adds	r3, #60	@ 0x3c
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f083 0301 	eor.w	r3, r3, #1
 80035d0:	b2d8      	uxtb	r0, r3
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	333c      	adds	r3, #60	@ 0x3c
 80035e2:	4602      	mov	r2, r0
 80035e4:	701a      	strb	r2, [r3, #0]
      break;
 80035e6:	e00c      	b.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334c      	adds	r3, #76	@ 0x4c
 80035f8:	2204      	movs	r2, #4
 80035fa:	701a      	strb	r2, [r3, #0]
      break;
 80035fc:	e001      	b.n	8003602 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003602:	bf00      	nop
  }
}
 8003604:	bf00      	nop
 8003606:	3728      	adds	r7, #40	@ 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003638:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d10b      	bne.n	800365c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f004 ff3e 	bl	80084d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f043 0302 	orr.w	r3, r3, #2
 800365a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b08      	cmp	r3, #8
 8003664:	d132      	bne.n	80036cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f043 0308 	orr.w	r3, r3, #8
 800366c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d126      	bne.n	80036c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7a5b      	ldrb	r3, [r3, #9]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d113      	bne.n	80036a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003686:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800368a:	d106      	bne.n	800369a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f001 ff60 	bl	8005558 <USB_InitFSLSPClkSel>
 8003698:	e011      	b.n	80036be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 ff59 	bl	8005558 <USB_InitFSLSPClkSel>
 80036a6:	e00a      	b.n	80036be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	79db      	ldrb	r3, [r3, #7]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036b6:	461a      	mov	r2, r3
 80036b8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f004 ff30 	bl	8008524 <HAL_HCD_PortEnabled_Callback>
 80036c4:	e002      	b.n	80036cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f004 ff3a 	bl	8008540 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d103      	bne.n	80036de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f043 0320 	orr.w	r3, r3, #32
 80036dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036e4:	461a      	mov	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6013      	str	r3, [r2, #0]
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e12b      	b.n	800395e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd f99e 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003758:	f001 fa20 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 800375c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4a81      	ldr	r2, [pc, #516]	@ (8003968 <HAL_I2C_Init+0x274>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d807      	bhi.n	8003778 <HAL_I2C_Init+0x84>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a80      	ldr	r2, [pc, #512]	@ (800396c <HAL_I2C_Init+0x278>)
 800376c:	4293      	cmp	r3, r2
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e006      	b.n	8003786 <HAL_I2C_Init+0x92>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a7d      	ldr	r2, [pc, #500]	@ (8003970 <HAL_I2C_Init+0x27c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	bf94      	ite	ls
 8003780:	2301      	movls	r3, #1
 8003782:	2300      	movhi	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0e7      	b.n	800395e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a78      	ldr	r2, [pc, #480]	@ (8003974 <HAL_I2C_Init+0x280>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003968 <HAL_I2C_Init+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d802      	bhi.n	80037c8 <HAL_I2C_Init+0xd4>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3301      	adds	r3, #1
 80037c6:	e009      	b.n	80037dc <HAL_I2C_Init+0xe8>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	4a69      	ldr	r2, [pc, #420]	@ (8003978 <HAL_I2C_Init+0x284>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	3301      	adds	r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	495c      	ldr	r1, [pc, #368]	@ (8003968 <HAL_I2C_Init+0x274>)
 80037f8:	428b      	cmp	r3, r1
 80037fa:	d819      	bhi.n	8003830 <HAL_I2C_Init+0x13c>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e59      	subs	r1, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fbb1 f3f3 	udiv	r3, r1, r3
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003810:	400b      	ands	r3, r1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_I2C_Init+0x138>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e59      	subs	r1, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fbb1 f3f3 	udiv	r3, r1, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	e051      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800382c:	2304      	movs	r3, #4
 800382e:	e04f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d111      	bne.n	800385c <HAL_I2C_Init+0x168>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e012      	b.n	8003882 <HAL_I2C_Init+0x18e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Init+0x196>
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <HAL_I2C_Init+0x1bc>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e58      	subs	r0, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	440b      	add	r3, r1
 80038a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ae:	e00f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	6809      	ldr	r1, [r1, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6911      	ldr	r1, [r2, #16]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68d2      	ldr	r2, [r2, #12]
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	000186a0 	.word	0x000186a0
 800396c:	001e847f 	.word	0x001e847f
 8003970:	003d08ff 	.word	0x003d08ff
 8003974:	431bde83 	.word	0x431bde83
 8003978:	10624dd3 	.word	0x10624dd3

0800397c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e128      	b.n	8003be0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a90      	ldr	r2, [pc, #576]	@ (8003be8 <HAL_I2S_Init+0x26c>)
 80039a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fd f89f 	bl	8000aec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2202      	movs	r2, #2
 80039d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d060      	beq.n	8003a9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e2:	2310      	movs	r3, #16
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e001      	b.n	80039ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d802      	bhi.n	80039fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f001 f9c4 	bl	8004d88 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0a:	d125      	bne.n	8003a58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	3305      	adds	r3, #5
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e01f      	b.n	8003a76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	3305      	adds	r3, #5
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e00e      	b.n	8003a76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	461a      	mov	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	3305      	adds	r3, #5
 8003a74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4a5c      	ldr	r2, [pc, #368]	@ (8003bec <HAL_I2S_Init+0x270>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	08db      	lsrs	r3, r3, #3
 8003a80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e003      	b.n	8003aa4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d902      	bls.n	8003ab0 <HAL_I2S_Init+0x134>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2bff      	cmp	r3, #255	@ 0xff
 8003aae:	d907      	bls.n	8003ac0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab4:	f043 0210 	orr.w	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e08f      	b.n	8003be0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	ea42 0103 	orr.w	r1, r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ade:	f023 030f 	bic.w	r3, r3, #15
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6851      	ldr	r1, [r2, #4]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68d2      	ldr	r2, [r2, #12]
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6992      	ldr	r2, [r2, #24]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d161      	bne.n	8003bd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a38      	ldr	r2, [pc, #224]	@ (8003bf0 <HAL_I2S_Init+0x274>)
 8003b10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a37      	ldr	r2, [pc, #220]	@ (8003bf4 <HAL_I2S_Init+0x278>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2S_Init+0x1a4>
 8003b1c:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b1e:	e001      	b.n	8003b24 <HAL_I2S_Init+0x1a8>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	4932      	ldr	r1, [pc, #200]	@ (8003bf4 <HAL_I2S_Init+0x278>)
 8003b2c:	428a      	cmp	r2, r1
 8003b2e:	d101      	bne.n	8003b34 <HAL_I2S_Init+0x1b8>
 8003b30:	4a31      	ldr	r2, [pc, #196]	@ (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b32:	e001      	b.n	8003b38 <HAL_I2S_Init+0x1bc>
 8003b34:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b38:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b3c:	f023 030f 	bic.w	r3, r3, #15
 8003b40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf4 <HAL_I2S_Init+0x278>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2S_Init+0x1d4>
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b4e:	e001      	b.n	8003b54 <HAL_I2S_Init+0x1d8>
 8003b50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b54:	2202      	movs	r2, #2
 8003b56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	@ (8003bf4 <HAL_I2S_Init+0x278>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_I2S_Init+0x1ea>
 8003b62:	4b25      	ldr	r3, [pc, #148]	@ (8003bf8 <HAL_I2S_Init+0x27c>)
 8003b64:	e001      	b.n	8003b6a <HAL_I2S_Init+0x1ee>
 8003b66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b76:	d003      	beq.n	8003b80 <HAL_I2S_Init+0x204>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	e001      	b.n	8003b8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003baa:	4313      	orrs	r3, r2
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <HAL_I2S_Init+0x278>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2S_Init+0x24c>
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <HAL_I2S_Init+0x27c>)
 8003bc6:	e001      	b.n	8003bcc <HAL_I2S_Init+0x250>
 8003bc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bcc:	897a      	ldrh	r2, [r7, #10]
 8003bce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	08003cf3 	.word	0x08003cf3
 8003bec:	cccccccd 	.word	0xcccccccd
 8003bf0:	08003e09 	.word	0x08003e09
 8003bf4:	40003800 	.word	0x40003800
 8003bf8:	40003400 	.word	0x40003400

08003bfc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10e      	bne.n	8003c8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ffb8 	bl	8003bfc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10e      	bne.n	8003cea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff93 	bl	8003c10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d13a      	bne.n	8003d84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d109      	bne.n	8003d2c <I2S_IRQHandler+0x3a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b40      	cmp	r3, #64	@ 0x40
 8003d24:	d102      	bne.n	8003d2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ffb4 	bl	8003c94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d32:	2b40      	cmp	r3, #64	@ 0x40
 8003d34:	d126      	bne.n	8003d84 <I2S_IRQHandler+0x92>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d11f      	bne.n	8003d84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff50 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d136      	bne.n	8003dfe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d109      	bne.n	8003dae <I2S_IRQHandler+0xbc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da4:	2b80      	cmp	r3, #128	@ 0x80
 8003da6:	d102      	bne.n	8003dae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff45 	bl	8003c38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d122      	bne.n	8003dfe <I2S_IRQHandler+0x10c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d11b      	bne.n	8003dfe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dd4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff13 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a92      	ldr	r2, [pc, #584]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e22:	4b92      	ldr	r3, [pc, #584]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e24:	e001      	b.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a8b      	ldr	r2, [pc, #556]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e40:	4b8a      	ldr	r3, [pc, #552]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e42:	e001      	b.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e54:	d004      	beq.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 8099 	bne.w	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d107      	bne.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f925 	bl	80040c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d107      	bne.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9c8 	bl	8004224 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9a:	2b40      	cmp	r3, #64	@ 0x40
 8003e9c:	d13a      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d035      	beq.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a6e      	ldr	r2, [pc, #440]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eb2:	4b6e      	ldr	r3, [pc, #440]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb4:	e001      	b.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4969      	ldr	r1, [pc, #420]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec2:	428b      	cmp	r3, r1
 8003ec4:	d101      	bne.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ec6:	4b69      	ldr	r3, [pc, #420]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec8:	e001      	b.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ece:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ed2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ee2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fe88 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	f040 80c3 	bne.w	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80bd 	beq.w	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a49      	ldr	r2, [pc, #292]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f46:	4b49      	ldr	r3, [pc, #292]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4944      	ldr	r1, [pc, #272]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f56:	428b      	cmp	r3, r1
 8003f58:	d101      	bne.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f5a:	4b44      	ldr	r3, [pc, #272]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f5c:	e001      	b.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f66:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0204 	orr.w	r2, r3, #4
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fe4a 	bl	8003c24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f90:	e089      	b.n	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d107      	bne.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8be 	bl	8004128 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8fd 	bl	80041c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	d12f      	bne.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02a      	beq.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fe8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1e      	ldr	r2, [pc, #120]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff6:	e001      	b.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4919      	ldr	r1, [pc, #100]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004004:	428b      	cmp	r3, r1
 8004006:	d101      	bne.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004008:	4b18      	ldr	r3, [pc, #96]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400a:	e001      	b.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800400c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004010:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004014:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fdfa 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b08      	cmp	r3, #8
 8004038:	d136      	bne.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d031      	beq.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a07      	ldr	r2, [pc, #28]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004050:	e001      	b.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004052:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4902      	ldr	r1, [pc, #8]	@ (8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800405e:	428b      	cmp	r3, r1
 8004060:	d106      	bne.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004062:	4b02      	ldr	r3, [pc, #8]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004064:	e006      	b.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004066:	bf00      	nop
 8004068:	40003800 	.word	0x40003800
 800406c:	40003400 	.word	0x40003400
 8004070:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004074:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004078:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004088:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f043 0204 	orr.w	r2, r3, #4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fdc0 	bl	8003c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a4:	e000      	b.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040a6:	bf00      	nop
}
 80040a8:	bf00      	nop
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	1c99      	adds	r1, r3, #2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80040d6:	881a      	ldrh	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d113      	bne.n	800411e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004104:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ffc9 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	1c99      	adds	r1, r3, #2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6251      	str	r1, [r2, #36]	@ 0x24
 800413a:	8819      	ldrh	r1, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <I2SEx_TxISR_I2SExt+0x22>
 8004146:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <I2SEx_TxISR_I2SExt+0x94>)
 8004148:	e001      	b.n	800414e <I2SEx_TxISR_I2SExt+0x26>
 800414a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800414e:	460a      	mov	r2, r1
 8004150:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d121      	bne.n	80041ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <I2SEx_TxISR_I2SExt+0x50>
 8004174:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <I2SEx_TxISR_I2SExt+0x94>)
 8004176:	e001      	b.n	800417c <I2SEx_TxISR_I2SExt+0x54>
 8004178:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	490d      	ldr	r1, [pc, #52]	@ (80041b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004184:	428b      	cmp	r3, r1
 8004186:	d101      	bne.n	800418c <I2SEx_TxISR_I2SExt+0x64>
 8004188:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <I2SEx_TxISR_I2SExt+0x94>)
 800418a:	e001      	b.n	8004190 <I2SEx_TxISR_I2SExt+0x68>
 800418c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004190:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004194:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff81 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40003800 	.word	0x40003800
 80041bc:	40003400 	.word	0x40003400

080041c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68d8      	ldr	r0, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	1c99      	adds	r1, r3, #2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041d8:	b282      	uxth	r2, r0
 80041da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004202:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ff4a 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a20      	ldr	r2, [pc, #128]	@ (80042b4 <I2SEx_RxISR_I2SExt+0x90>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <I2SEx_RxISR_I2SExt+0x16>
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004238:	e001      	b.n	800423e <I2SEx_RxISR_I2SExt+0x1a>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423e:	68d8      	ldr	r0, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	1c99      	adds	r1, r3, #2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800424a:	b282      	uxth	r2, r0
 800424c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d121      	bne.n	80042aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a12      	ldr	r2, [pc, #72]	@ (80042b4 <I2SEx_RxISR_I2SExt+0x90>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <I2SEx_RxISR_I2SExt+0x50>
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004272:	e001      	b.n	8004278 <I2SEx_RxISR_I2SExt+0x54>
 8004274:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	490d      	ldr	r1, [pc, #52]	@ (80042b4 <I2SEx_RxISR_I2SExt+0x90>)
 8004280:	428b      	cmp	r3, r1
 8004282:	d101      	bne.n	8004288 <I2SEx_RxISR_I2SExt+0x64>
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x94>)
 8004286:	e001      	b.n	800428c <I2SEx_RxISR_I2SExt+0x68>
 8004288:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800428c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004290:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff03 	bl	80040b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40003800 	.word	0x40003800
 80042b8:	40003400 	.word	0x40003400

080042bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e267      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d075      	beq.n	80043c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00c      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b85      	ldr	r3, [pc, #532]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4b82      	ldr	r3, [pc, #520]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4b7e      	ldr	r3, [pc, #504]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e242      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x74>
 8004322:	4b76      	ldr	r3, [pc, #472]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b70      	ldr	r3, [pc, #448]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6f      	ldr	r2, [pc, #444]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6d      	ldr	r3, [pc, #436]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6c      	ldr	r2, [pc, #432]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004354:	4b69      	ldr	r3, [pc, #420]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b66      	ldr	r3, [pc, #408]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fc fd94 	bl	8000ea0 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437c:	f7fc fd90 	bl	8000ea0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e207      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5b      	ldr	r3, [pc, #364]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc0>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fc fd80 	bl	8000ea0 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fc fd7c 	bl	8000ea0 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1f3      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b51      	ldr	r3, [pc, #324]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	4b4a      	ldr	r3, [pc, #296]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b44      	ldr	r3, [pc, #272]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c7      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3b      	ldr	r3, [pc, #236]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4937      	ldr	r1, [pc, #220]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b34      	ldr	r3, [pc, #208]	@ (8004500 <HAL_RCC_OscConfig+0x244>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fc fd35 	bl	8000ea0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443a:	f7fc fd31 	bl	8000ea0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a8      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2b      	ldr	r3, [pc, #172]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b28      	ldr	r3, [pc, #160]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4925      	ldr	r1, [pc, #148]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <HAL_RCC_OscConfig+0x244>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fc fd14 	bl	8000ea0 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447c:	f7fc fd10 	bl	8000ea0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e187      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1b      	ldr	r3, [pc, #108]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <HAL_RCC_OscConfig+0x248>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fc fcf4 	bl	8000ea0 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fc fcf0 	bl	8000ea0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e167      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCC_OscConfig+0x240>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x200>
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044dc:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <HAL_RCC_OscConfig+0x248>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fc fcdd 	bl	8000ea0 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	e00e      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fc fcd9 	bl	8000ea0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e150      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	4b88      	ldr	r3, [pc, #544]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ea      	bne.n	80044ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8097 	beq.w	8004650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b81      	ldr	r3, [pc, #516]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b7d      	ldr	r3, [pc, #500]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	4a7c      	ldr	r2, [pc, #496]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	@ 0x40
 8004542:	4b7a      	ldr	r3, [pc, #488]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b77      	ldr	r3, [pc, #476]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b74      	ldr	r3, [pc, #464]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a73      	ldr	r2, [pc, #460]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fc fc99 	bl	8000ea0 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fc fc95 	bl	8000ea0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e10c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b6a      	ldr	r3, [pc, #424]	@ (8004730 <HAL_RCC_OscConfig+0x474>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ea>
 8004598:	4b64      	ldr	r3, [pc, #400]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a4:	e01c      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	4a5e      	ldr	r2, [pc, #376]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ba:	4b5c      	ldr	r3, [pc, #368]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	4a5b      	ldr	r2, [pc, #364]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045c8:	4b58      	ldr	r3, [pc, #352]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045cc:	4a57      	ldr	r2, [pc, #348]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d4:	4b55      	ldr	r3, [pc, #340]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d8:	4a54      	ldr	r2, [pc, #336]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fc fc5a 	bl	8000ea0 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fc fc56 	bl	8000ea0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0cb      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b49      	ldr	r3, [pc, #292]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RCC_OscConfig+0x334>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fc fc44 	bl	8000ea0 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fc fc40 	bl	8000ea0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0b5      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004632:	4b3e      	ldr	r3, [pc, #248]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004644:	4b39      	ldr	r3, [pc, #228]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	4a38      	ldr	r2, [pc, #224]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a1 	beq.w	800479c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465a:	4b34      	ldr	r3, [pc, #208]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05c      	beq.n	8004720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d141      	bne.n	80046f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b31      	ldr	r3, [pc, #196]	@ (8004734 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fc fc14 	bl	8000ea0 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fc fc10 	bl	8000ea0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e087      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b27      	ldr	r3, [pc, #156]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	491b      	ldr	r1, [pc, #108]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <HAL_RCC_OscConfig+0x478>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc fbe9 	bl	8000ea0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fc fbe5 	bl	8000ea0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e05c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x416>
 80046f0:	e054      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fbd2 	bl	8000ea0 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fbce 	bl	8000ea0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e045      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
 800471e:	e03d      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e038      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d028      	beq.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d121      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d11a      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cc      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b68      	ldr	r3, [pc, #416]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90c      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b65      	ldr	r3, [pc, #404]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a58      	ldr	r2, [pc, #352]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800480a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a52      	ldr	r2, [pc, #328]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d003      	beq.n	800486a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b3f      	ldr	r3, [pc, #252]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e067      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4934      	ldr	r1, [pc, #208]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800489c:	f7fc fb00 	bl	8000ea0 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fc fafc 	bl	8000ea0 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b25      	ldr	r3, [pc, #148]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20c      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b22      	ldr	r3, [pc, #136]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	@ (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491e:	4b12      	ldr	r3, [pc, #72]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fa60 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800
 800496c:	08008bfc 	.word	0x08008bfc
 8004970:	20000004 	.word	0x20000004
 8004974:	20000008 	.word	0x20000008

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b094      	sub	sp, #80	@ 0x50
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	@ 0x44
 8004984:	2300      	movs	r3, #0
 8004986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004988:	2300      	movs	r3, #0
 800498a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b79      	ldr	r3, [pc, #484]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80e1 	bhi.w	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e0db      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b73      	ldr	r3, [pc, #460]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80049ae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80049b0:	e0db      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b73      	ldr	r3, [pc, #460]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049b6:	e0d8      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d063      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	0159      	lsls	r1, r3, #5
 80049f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fc:	0150      	lsls	r0, r2, #5
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4621      	mov	r1, r4
 8004a04:	1a51      	subs	r1, r2, r1
 8004a06:	6139      	str	r1, [r7, #16]
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	018b      	lsls	r3, r1, #6
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a26:	4651      	mov	r1, sl
 8004a28:	018a      	lsls	r2, r1, #6
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a30:	4659      	mov	r1, fp
 8004a32:	eb63 0901 	sbc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	462b      	mov	r3, r5
 8004a58:	eb49 0303 	adc.w	r3, r9, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	024b      	lsls	r3, r1, #9
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a74:	4621      	mov	r1, r4
 8004a76:	024a      	lsls	r2, r1, #9
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a88:	f7fb fb9e 	bl	80001c8 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a94:	e058      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b38      	ldr	r3, [pc, #224]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	0159      	lsls	r1, r3, #5
 8004abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac2:	0150      	lsls	r0, r2, #5
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aec:	eb63 050b 	sbc.w	r5, r3, fp
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	00eb      	lsls	r3, r5, #3
 8004afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afe:	00e2      	lsls	r2, r4, #3
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	18e3      	adds	r3, r4, r3
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	028b      	lsls	r3, r1, #10
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b28:	4621      	mov	r1, r4
 8004b2a:	028a      	lsls	r2, r1, #10
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	61fa      	str	r2, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	f7fb fb44 	bl	80001c8 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b48:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3750      	adds	r7, #80	@ 0x50
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	007a1200 	.word	0x007a1200

08004b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b88:	4b03      	ldr	r3, [pc, #12]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000004 	.word	0x20000004

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba0:	f7ff fff0 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	@ (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	08008c0c 	.word	0x08008c0c

08004bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d035      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bec:	4b62      	ldr	r3, [pc, #392]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf2:	f7fc f955 	bl	8000ea0 <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bfa:	f7fc f951 	bl	8000ea0 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0b0      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f0      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	019a      	lsls	r2, r3, #6
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	071b      	lsls	r3, r3, #28
 8004c24:	4955      	ldr	r1, [pc, #340]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c2c:	4b52      	ldr	r3, [pc, #328]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c32:	f7fc f935 	bl	8000ea0 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c3a:	f7fc f931 	bl	8000ea0 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e090      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8083 	beq.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4b44      	ldr	r3, [pc, #272]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	4a43      	ldr	r2, [pc, #268]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c76:	4b41      	ldr	r3, [pc, #260]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c82:	4b3f      	ldr	r3, [pc, #252]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3e      	ldr	r2, [pc, #248]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8e:	f7fc f907 	bl	8000ea0 <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fc f903 	bl	8000ea0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e062      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ca8:	4b35      	ldr	r3, [pc, #212]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb4:	4b31      	ldr	r3, [pc, #196]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02f      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d028      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cdc:	4b29      	ldr	r3, [pc, #164]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce2:	4b28      	ldr	r3, [pc, #160]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ce8:	4a24      	ldr	r2, [pc, #144]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cee:	4b23      	ldr	r3, [pc, #140]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d114      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fc f8d1 	bl	8000ea0 <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fc f8cd 	bl	8000ea0 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e02a      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d18:	4b18      	ldr	r3, [pc, #96]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ee      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d32:	4b12      	ldr	r3, [pc, #72]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d46:	490d      	ldr	r1, [pc, #52]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
 8004d4c:	e005      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	4a0a      	ldr	r2, [pc, #40]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d58:	6093      	str	r3, [r2, #8]
 8004d5a:	4b08      	ldr	r3, [pc, #32]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d66:	4905      	ldr	r1, [pc, #20]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	42470068 	.word	0x42470068
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40007000 	.word	0x40007000
 8004d84:	42470e40 	.word	0x42470e40

08004d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d13f      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004da6:	4b24      	ldr	r3, [pc, #144]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dbc:	d12f      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dc0:	617b      	str	r3, [r7, #20]
          break;
 8004dc2:	e02f      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd2:	4b19      	ldr	r3, [pc, #100]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dda:	4a19      	ldr	r2, [pc, #100]	@ (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e007      	b.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004de4:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dec:	4a15      	ldr	r2, [pc, #84]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004df4:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e0e:	0f1b      	lsrs	r3, r3, #28
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	617b      	str	r3, [r7, #20]
          break;
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
          break;
 8004e22:	bf00      	nop
        }
      }
      break;
 8004e24:	e000      	b.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e26:	bf00      	nop
    }
  }
  return frequency;
 8004e28:	697b      	ldr	r3, [r7, #20]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	00bb8000 	.word	0x00bb8000
 8004e40:	007a1200 	.word	0x007a1200
 8004e44:	00f42400 	.word	0x00f42400

08004e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07b      	b.n	8004f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d108      	bne.n	8004e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6a:	d009      	beq.n	8004e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61da      	str	r2, [r3, #28]
 8004e72:	e005      	b.n	8004e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb fea6 	bl	8000bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f04:	ea42 0103 	orr.w	r1, r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 0104 	and.w	r1, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	f003 0210 	and.w	r2, r3, #16
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	f107 001c 	add.w	r0, r7, #28
 8004f68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f6c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d123      	bne.n	8004fbc <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9dc 	bl	800536e <USB_CoreReset>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	e01b      	b.n	8004ff4 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f9d0 	bl	800536e <USB_CoreReset>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fe6:	e005      	b.n	8004ff4 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ff4:	7fbb      	ldrb	r3, [r7, #30]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d10b      	bne.n	8005012 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f043 0206 	orr.w	r2, r3, #6
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800501e:	b004      	add	sp, #16
 8005020:	4770      	bx	lr

08005022 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f043 0201 	orr.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 0201 	bic.w	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d115      	bne.n	80050b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005094:	200a      	movs	r0, #10
 8005096:	f7fb ff0f 	bl	8000eb8 <HAL_Delay>
      ms += 10U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	330a      	adds	r3, #10
 800509e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f956 	bl	8005352 <USB_GetMode>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d01e      	beq.n	80050ea <USB_SetCurrentMode+0x84>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80050b0:	d9f0      	bls.n	8005094 <USB_SetCurrentMode+0x2e>
 80050b2:	e01a      	b.n	80050ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d115      	bne.n	80050e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050c6:	200a      	movs	r0, #10
 80050c8:	f7fb fef6 	bl	8000eb8 <HAL_Delay>
      ms += 10U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	330a      	adds	r3, #10
 80050d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f93d 	bl	8005352 <USB_GetMode>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <USB_SetCurrentMode+0x84>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80050e2:	d9f0      	bls.n	80050c6 <USB_SetCurrentMode+0x60>
 80050e4:	e001      	b.n	80050ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e005      	b.n	80050f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80050ee:	d101      	bne.n	80050f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005118:	d901      	bls.n	800511e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e01b      	b.n	8005156 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	daf2      	bge.n	800510c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3301      	adds	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005142:	d901      	bls.n	8005148 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e006      	b.n	8005156 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b20      	cmp	r3, #32
 8005152:	d0f0      	beq.n	8005136 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3301      	adds	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800517a:	d901      	bls.n	8005180 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e018      	b.n	80051b2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	daf2      	bge.n	800516e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2210      	movs	r2, #16
 8005190:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800519e:	d901      	bls.n	80051a4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e006      	b.n	80051b2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d0f0      	beq.n	8005192 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051be:	b480      	push	{r7}
 80051c0:	b089      	sub	sp, #36	@ 0x24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	4611      	mov	r1, r2
 80051ca:	461a      	mov	r2, r3
 80051cc:	460b      	mov	r3, r1
 80051ce:	71fb      	strb	r3, [r7, #7]
 80051d0:	4613      	mov	r3, r2
 80051d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d123      	bne.n	800522c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	3303      	adds	r3, #3
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e018      	b.n	8005224 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	031a      	lsls	r2, r3, #12
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051fe:	461a      	mov	r2, r3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3301      	adds	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3301      	adds	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3301      	adds	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3301      	adds	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	3301      	adds	r3, #1
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d3e2      	bcc.n	80051f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3724      	adds	r7, #36	@ 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800523a:	b480      	push	{r7}
 800523c:	b08b      	sub	sp, #44	@ 0x2c
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	4613      	mov	r3, r2
 8005246:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	b29b      	uxth	r3, r3
 8005256:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	623b      	str	r3, [r7, #32]
 8005264:	e014      	b.n	8005290 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	601a      	str	r2, [r3, #0]
    pDest++;
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	3301      	adds	r3, #1
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	3301      	adds	r3, #1
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	3301      	adds	r3, #1
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	3301      	adds	r3, #1
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	3301      	adds	r3, #1
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	6a3a      	ldr	r2, [r7, #32]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d3e6      	bcc.n	8005266 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005298:	8bfb      	ldrh	r3, [r7, #30]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01e      	beq.n	80052dc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a8:	461a      	mov	r2, r3
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	fa22 f303 	lsr.w	r3, r2, r3
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	701a      	strb	r2, [r3, #0]
      i++;
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	3301      	adds	r3, #1
 80052c8:	623b      	str	r3, [r7, #32]
      pDest++;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	3301      	adds	r3, #1
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80052d0:	8bfb      	ldrh	r3, [r7, #30]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052d6:	8bfb      	ldrh	r3, [r7, #30]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ea      	bne.n	80052b2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052de:	4618      	mov	r0, r3
 80052e0:	372c      	adds	r7, #44	@ 0x2c
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005344:	68bb      	ldr	r3, [r7, #8]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0301 	and.w	r3, r3, #1
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3301      	adds	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005386:	d901      	bls.n	800538c <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e01b      	b.n	80053c4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	daf2      	bge.n	800537a <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b0:	d901      	bls.n	80053b6 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e006      	b.n	80053c4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d0f0      	beq.n	80053a4 <USB_CoreReset+0x36>

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d0:	b084      	sub	sp, #16
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053f0:	461a      	mov	r2, r3
 80053f2:	2300      	movs	r3, #0
 80053f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005406:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005412:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d119      	bne.n	800545a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800542a:	2b01      	cmp	r3, #1
 800542c:	d10a      	bne.n	8005444 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800543c:	f043 0304 	orr.w	r3, r3, #4
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e014      	b.n	800546e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005452:	f023 0304 	bic.w	r3, r3, #4
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e009      	b.n	800546e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800546e:	2110      	movs	r1, #16
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fe44 	bl	80050fe <USB_FlushTxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fe6e 	bl	8005162 <USB_FlushRxFifo>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	e015      	b.n	80054c2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a2:	461a      	mov	r2, r3
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	3301      	adds	r3, #1
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054c6:	461a      	mov	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d3e3      	bcc.n	8005496 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f04f 32ff 	mov.w	r2, #4294967295
 80054da:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <USB_HostInit+0x170>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10b      	bne.n	80054fc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ea:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a15      	ldr	r2, [pc, #84]	@ (8005544 <USB_HostInit+0x174>)
 80054f0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <USB_HostInit+0x178>)
 80054f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80054fa:	e009      	b.n	8005510 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2280      	movs	r2, #128	@ 0x80
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a11      	ldr	r2, [pc, #68]	@ (800554c <USB_HostInit+0x17c>)
 8005506:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a11      	ldr	r2, [pc, #68]	@ (8005550 <USB_HostInit+0x180>)
 800550c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005510:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <USB_HostInit+0x184>)
 800552a:	4313      	orrs	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800553c:	b004      	add	sp, #16
 800553e:	4770      	bx	lr
 8005540:	40040000 	.word	0x40040000
 8005544:	01000200 	.word	0x01000200
 8005548:	00e00300 	.word	0x00e00300
 800554c:	00600080 	.word	0x00600080
 8005550:	004000e0 	.word	0x004000e0
 8005554:	a3200008 	.word	0xa3200008

08005558 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005590:	4313      	orrs	r3, r2
 8005592:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055a0:	461a      	mov	r2, r3
 80055a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80055a6:	6053      	str	r3, [r2, #4]
 80055a8:	e00c      	b.n	80055c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d107      	bne.n	80055c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055b6:	461a      	mov	r2, r3
 80055b8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80055bc:	6053      	str	r3, [r2, #4]
 80055be:	e001      	b.n	80055c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005600:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005602:	2064      	movs	r0, #100	@ 0x64
 8005604:	f7fb fc58 	bl	8000eb8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005614:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005616:	200a      	movs	r0, #10
 8005618:	f7fb fc4e 	bl	8000eb8 <HAL_Delay>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	460b      	mov	r3, r1
 8005630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800564a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <USB_DriveVbus+0x44>
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005664:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005668:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005674:	d109      	bne.n	800568a <USB_DriveVbus+0x64>
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005684:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005688:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	0c5b      	lsrs	r3, r3, #17
 80056b6:	f003 0303 	and.w	r3, r3, #3
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	b29b      	uxth	r3, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	461a      	mov	r2, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	70fb      	strb	r3, [r7, #3]
 80056fa:	460b      	mov	r3, r1
 80056fc:	70bb      	strb	r3, [r7, #2]
 80056fe:	4613      	mov	r3, r2
 8005700:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005716:	461a      	mov	r2, r3
 8005718:	f04f 33ff 	mov.w	r3, #4294967295
 800571c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800571e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005722:	2b03      	cmp	r3, #3
 8005724:	d87c      	bhi.n	8005820 <USB_HC_Init+0x138>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <USB_HC_Init+0x44>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	0800573d 	.word	0x0800573d
 8005730:	080057e3 	.word	0x080057e3
 8005734:	0800573d 	.word	0x0800573d
 8005738:	080057a5 	.word	0x080057a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4413      	add	r3, r2
 8005744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005748:	461a      	mov	r2, r3
 800574a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800574e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005750:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005754:	2b00      	cmp	r3, #0
 8005756:	da10      	bge.n	800577a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	440a      	add	r2, r1
 800576e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005776:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005778:	e055      	b.n	8005826 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a6f      	ldr	r2, [pc, #444]	@ (800593c <USB_HC_Init+0x254>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d151      	bne.n	8005826 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	440a      	add	r2, r1
 8005798:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800579c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057a0:	60d3      	str	r3, [r2, #12]
      break;
 80057a2:	e040      	b.n	8005826 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b0:	461a      	mov	r2, r3
 80057b2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80057b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	da34      	bge.n	800582a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	78fa      	ldrb	r2, [r7, #3]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057e0:	e023      	b.n	800582a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ee:	461a      	mov	r2, r3
 80057f0:	f240 2325 	movw	r3, #549	@ 0x225
 80057f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da17      	bge.n	800582e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	440a      	add	r2, r1
 8005814:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005818:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800581c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800581e:	e006      	b.n	800582e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	77fb      	strb	r3, [r7, #31]
      break;
 8005824:	e004      	b.n	8005830 <USB_HC_Init+0x148>
      break;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <USB_HC_Init+0x148>
      break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <USB_HC_Init+0x148>
      break;
 800582e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583c:	461a      	mov	r2, r3
 800583e:	2300      	movs	r3, #0
 8005840:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800585c:	f043 0302 	orr.w	r3, r3, #2
 8005860:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2101      	movs	r1, #1
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800587c:	4313      	orrs	r3, r2
 800587e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800588c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005890:	2b00      	cmp	r3, #0
 8005892:	da03      	bge.n	800589c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005894:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e001      	b.n	80058a0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fef9 	bl	8005698 <USB_GetHostSpeed>
 80058a6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d106      	bne.n	80058be <USB_HC_Init+0x1d6>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d003      	beq.n	80058be <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e001      	b.n	80058c2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c2:	787b      	ldrb	r3, [r7, #1]
 80058c4:	059b      	lsls	r3, r3, #22
 80058c6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058ca:	78bb      	ldrb	r3, [r7, #2]
 80058cc:	02db      	lsls	r3, r3, #11
 80058ce:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058d8:	049b      	lsls	r3, r3, #18
 80058da:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058de:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80058e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058e6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f0:	78fa      	ldrb	r2, [r7, #3]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005900:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005902:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005906:	2b03      	cmp	r3, #3
 8005908:	d003      	beq.n	8005912 <USB_HC_Init+0x22a>
 800590a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10f      	bne.n	8005932 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	440a      	add	r2, r1
 8005928:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800592c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005930:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005932:	7ffb      	ldrb	r3, [r7, #31]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40040000 	.word	0x40040000

08005940 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	@ 0x30
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800595c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a5d      	ldr	r2, [pc, #372]	@ (8005ad8 <USB_HC_StartXfer+0x198>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d12f      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d11c      	bne.n	80059a6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	7c9b      	ldrb	r3, [r3, #18]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <USB_HC_StartXfer+0x3c>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	7c9b      	ldrb	r3, [r3, #18]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d124      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	799b      	ldrb	r3, [r3, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d120      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	6a3a      	ldr	r2, [r7, #32]
 8005998:	440a      	add	r2, r1
 800599a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	60d3      	str	r3, [r2, #12]
 80059a4:	e00f      	b.n	80059c6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	791b      	ldrb	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	795b      	ldrb	r3, [r3, #5]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d107      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fb6b 	bl	8006098 <USB_DoPing>
        return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e232      	b.n	8005e2c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	799b      	ldrb	r3, [r3, #6]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d158      	bne.n	8005a80 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80059ce:	2301      	movs	r3, #1
 80059d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	78db      	ldrb	r3, [r3, #3]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	8a92      	ldrh	r2, [r2, #20]
 80059e0:	fb03 f202 	mul.w	r2, r3, r2
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	61da      	str	r2, [r3, #28]
 80059e8:	e07c      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	7c9b      	ldrb	r3, [r3, #18]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d130      	bne.n	8005a54 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80059f8:	d918      	bls.n	8005a2c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	8a9b      	ldrh	r3, [r3, #20]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d003      	beq.n	8005a1c <USB_HC_StartXfer+0xdc>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d103      	bne.n	8005a24 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e05f      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2201      	movs	r2, #1
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	e05b      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d007      	beq.n	8005a4c <USB_HC_StartXfer+0x10c>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d003      	beq.n	8005a4c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2204      	movs	r2, #4
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	e04b      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	e047      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d10d      	bne.n	8005a76 <USB_HC_StartXfer+0x136>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	8a92      	ldrh	r2, [r2, #20]
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d907      	bls.n	8005a76 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	8a92      	ldrh	r2, [r2, #20]
 8005a6c:	fb03 f202 	mul.w	r2, r3, r2
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61da      	str	r2, [r3, #28]
 8005a74:	e036      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61da      	str	r2, [r3, #28]
 8005a7e:	e031      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d018      	beq.n	8005aba <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	8a92      	ldrh	r2, [r2, #20]
 8005a90:	4413      	add	r3, r2
 8005a92:	3b01      	subs	r3, #1
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	8a92      	ldrh	r2, [r2, #20]
 8005a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a9c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005a9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005aa0:	8b7b      	ldrh	r3, [r7, #26]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d90b      	bls.n	8005abe <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005aa6:	8b7b      	ldrh	r3, [r7, #26]
 8005aa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	8a92      	ldrh	r2, [r2, #20]
 8005ab0:	fb03 f202 	mul.w	r2, r3, r2
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	61da      	str	r2, [r3, #28]
 8005ab8:	e001      	b.n	8005abe <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005aba:	2301      	movs	r3, #1
 8005abc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ac6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	8a92      	ldrh	r2, [r2, #20]
 8005acc:	fb03 f202 	mul.w	r2, r3, r2
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	61da      	str	r2, [r3, #28]
 8005ad4:	e006      	b.n	8005ae4 <USB_HC_StartXfer+0x1a4>
 8005ad6:	bf00      	nop
 8005ad8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005aec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005aee:	04d9      	lsls	r1, r3, #19
 8005af0:	4ba3      	ldr	r3, [pc, #652]	@ (8005d80 <USB_HC_StartXfer+0x440>)
 8005af2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	7d9b      	ldrb	r3, [r3, #22]
 8005afa:	075b      	lsls	r3, r3, #29
 8005afc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b00:	69f9      	ldr	r1, [r7, #28]
 8005b02:	0148      	lsls	r0, r1, #5
 8005b04:	6a39      	ldr	r1, [r7, #32]
 8005b06:	4401      	add	r1, r0
 8005b08:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6999      	ldr	r1, [r3, #24]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b26:	460a      	mov	r2, r1
 8005b28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	6a3a      	ldr	r2, [r7, #32]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	7e7b      	ldrb	r3, [r7, #25]
 8005b72:	075b      	lsls	r3, r3, #29
 8005b74:	69f9      	ldr	r1, [r7, #28]
 8005b76:	0148      	lsls	r0, r1, #5
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	4401      	add	r1, r0
 8005b7c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	799b      	ldrb	r3, [r3, #6]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	f040 80c3 	bne.w	8005d14 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	7c5b      	ldrb	r3, [r3, #17]
 8005b92:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005baa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	6a3a      	ldr	r2, [r7, #32]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bc6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	79db      	ldrb	r3, [r3, #7]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d123      	bne.n	8005c1c <USB_HC_StartXfer+0x2dc>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	78db      	ldrb	r3, [r3, #3]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11f      	bne.n	8005c1c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	7c9b      	ldrb	r3, [r3, #18]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d003      	beq.n	8005c2c <USB_HC_StartXfer+0x2ec>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	7c9b      	ldrb	r3, [r3, #18]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d117      	bne.n	8005c5c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d113      	bne.n	8005c5c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10f      	bne.n	8005c5c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c5a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	7c9b      	ldrb	r3, [r3, #18]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d162      	bne.n	8005d2a <USB_HC_StartXfer+0x3ea>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	78db      	ldrb	r3, [r3, #3]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d15e      	bne.n	8005d2a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d858      	bhi.n	8005d28 <USB_HC_StartXfer+0x3e8>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <USB_HC_StartXfer+0x33c>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005caf 	.word	0x08005caf
 8005c84:	08005cd1 	.word	0x08005cd1
 8005c88:	08005cf3 	.word	0x08005cf3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	6a3a      	ldr	r2, [r7, #32]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005caa:	6053      	str	r3, [r2, #4]
          break;
 8005cac:	e03d      	b.n	8005d2a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc8:	f043 030e 	orr.w	r3, r3, #14
 8005ccc:	6053      	str	r3, [r2, #4]
          break;
 8005cce:	e02c      	b.n	8005d2a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cee:	6053      	str	r3, [r2, #4]
          break;
 8005cf0:	e01b      	b.n	8005d2a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	6a3a      	ldr	r2, [r7, #32]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d10:	6053      	str	r3, [r2, #4]
          break;
 8005d12:	e00a      	b.n	8005d2a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d20:	461a      	mov	r2, r3
 8005d22:	2300      	movs	r3, #0
 8005d24:	6053      	str	r3, [r2, #4]
 8005d26:	e000      	b.n	8005d2a <USB_HC_StartXfer+0x3ea>
          break;
 8005d28:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d40:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	78db      	ldrb	r3, [r3, #3]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	e003      	b.n	8005d5c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d5a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d62:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d70:	461a      	mov	r2, r3
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e055      	b.n	8005e2c <USB_HC_StartXfer+0x4ec>
 8005d80:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	78db      	ldrb	r3, [r3, #3]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d14e      	bne.n	8005e2a <USB_HC_StartXfer+0x4ea>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d04a      	beq.n	8005e2a <USB_HC_StartXfer+0x4ea>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	79db      	ldrb	r3, [r3, #7]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d146      	bne.n	8005e2a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	7c9b      	ldrb	r3, [r3, #18]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d831      	bhi.n	8005e08 <USB_HC_StartXfer+0x4c8>
 8005da4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <USB_HC_StartXfer+0x46c>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005de1 	.word	0x08005de1
 8005db4:	08005dbd 	.word	0x08005dbd
 8005db8:	08005de1 	.word	0x08005de1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	3303      	adds	r3, #3
 8005dc2:	089b      	lsrs	r3, r3, #2
 8005dc4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dc6:	8afa      	ldrh	r2, [r7, #22]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d91c      	bls.n	8005e0c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dde:	e015      	b.n	8005e0c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	3303      	adds	r3, #3
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005dea:	8afa      	ldrh	r2, [r7, #22]
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d90a      	bls.n	8005e10 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e06:	e003      	b.n	8005e10 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005e08:	bf00      	nop
 8005e0a:	e002      	b.n	8005e12 <USB_HC_StartXfer+0x4d2>
        break;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <USB_HC_StartXfer+0x4d2>
        break;
 8005e10:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785a      	ldrb	r2, [r3, #1]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2000      	movs	r0, #0
 8005e22:	9000      	str	r0, [sp, #0]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff f9ca 	bl	80051be <USB_WritePacket>
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3728      	adds	r7, #40	@ 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	b29b      	uxth	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b089      	sub	sp, #36	@ 0x24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	0c9b      	lsrs	r3, r3, #18
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	0fdb      	lsrs	r3, r3, #31
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	0fdb      	lsrs	r3, r3, #31
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d10d      	bne.n	8005ed8 <USB_HC_Halt+0x82>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <USB_HC_Halt+0x82>
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d002      	beq.n	8005ed4 <USB_HC_Halt+0x7e>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d101      	bne.n	8005ed8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e0d8      	b.n	800608a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <USB_HC_Halt+0x8e>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d173      	bne.n	8005fcc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005efe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f02:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d14a      	bne.n	8005fa6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d133      	bne.n	8005f84 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f3a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f5a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f68:	d82e      	bhi.n	8005fc8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f80:	d0ec      	beq.n	8005f5c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f82:	e081      	b.n	8006088 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fa2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fa4:	e070      	b.n	8006088 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fc4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fc6:	e05f      	b.n	8006088 <USB_HC_Halt+0x232>
            break;
 8005fc8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fca:	e05d      	b.n	8006088 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fe6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d133      	bne.n	8006064 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	440a      	add	r2, r1
 8006012:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006016:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800601a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	440a      	add	r2, r1
 8006032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006036:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800603a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3301      	adds	r3, #1
 8006040:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006048:	d81d      	bhi.n	8006086 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800605c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006060:	d0ec      	beq.n	800603c <USB_HC_Halt+0x1e6>
 8006062:	e011      	b.n	8006088 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	440a      	add	r2, r1
 800607a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800607e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	e000      	b.n	8006088 <USB_HC_Halt+0x232>
          break;
 8006086:	bf00      	nop
    }
  }

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3724      	adds	r7, #36	@ 0x24
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
	...

08006098 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060ac:	2301      	movs	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	04da      	lsls	r2, r3, #19
 80060b4:	4b15      	ldr	r3, [pc, #84]	@ (800610c <USB_DoPing+0x74>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060c8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060e0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060e8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	1ff80000 	.word	0x1ff80000

08006110 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fe ff8d 	bl	8005044 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800612a:	2110      	movs	r1, #16
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fe ffe6 	bl	80050fe <USB_FlushTxFifo>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff f810 	bl	8005162 <USB_FlushRxFifo>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800614c:	2300      	movs	r3, #0
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	e01f      	b.n	8006192 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006168:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006170:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006178:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006186:	461a      	mov	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	3301      	adds	r3, #1
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d9dc      	bls.n	8006152 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006198:	2300      	movs	r3, #0
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e034      	b.n	8006208 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d2:	461a      	mov	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061e4:	d80c      	bhi.n	8006200 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061fc:	d0ec      	beq.n	80061d8 <USB_StopHost+0xc8>
 80061fe:	e000      	b.n	8006202 <USB_StopHost+0xf2>
        break;
 8006200:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	3301      	adds	r3, #1
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b0f      	cmp	r3, #15
 800620c:	d9c7      	bls.n	800619e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006214:	461a      	mov	r2, r3
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7fe fefc 	bl	8005022 <USB_EnableGlobalInt>

  return ret;
 800622a:	7ffb      	ldrb	r3, [r7, #31]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b089      	sub	sp, #36	@ 0x24
 8006238:	af04      	add	r7, sp, #16
 800623a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800623c:	2301      	movs	r3, #1
 800623e:	2202      	movs	r2, #2
 8006240:	2102      	movs	r1, #2
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fc85 	bl	8006b52 <USBH_FindInterface>
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2bff      	cmp	r3, #255	@ 0xff
 8006250:	d002      	beq.n	8006258 <USBH_CDC_InterfaceInit+0x24>
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d901      	bls.n	800625c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006258:	2302      	movs	r3, #2
 800625a:	e13d      	b.n	80064d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fc5a 	bl	8006b1a <USBH_SelectInterface>
 8006266:	4603      	mov	r3, r0
 8006268:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006270:	2302      	movs	r3, #2
 8006272:	e131      	b.n	80064d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800627a:	2050      	movs	r0, #80	@ 0x50
 800627c:	f002 fb64 	bl	8008948 <malloc>
 8006280:	4603      	mov	r3, r0
 8006282:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006294:	2302      	movs	r3, #2
 8006296:	e11f      	b.n	80064d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006298:	2250      	movs	r2, #80	@ 0x50
 800629a:	2100      	movs	r1, #0
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f002 fc11 	bl	8008ac4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	211a      	movs	r1, #26
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	4413      	add	r3, r2
 80062ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da15      	bge.n	80062e6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	211a      	movs	r1, #26
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062ca:	781a      	ldrb	r2, [r3, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	211a      	movs	r1, #26
 80062d6:	fb01 f303 	mul.w	r3, r1, r3
 80062da:	4413      	add	r3, r2
 80062dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 ffbe 	bl	800826e <USBH_AllocPipe>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	7819      	ldrb	r1, [r3, #0]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	7858      	ldrb	r0, [r3, #1]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	8952      	ldrh	r2, [r2, #10]
 8006312:	9202      	str	r2, [sp, #8]
 8006314:	2203      	movs	r2, #3
 8006316:	9201      	str	r2, [sp, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	4623      	mov	r3, r4
 800631c:	4602      	mov	r2, r0
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 ff76 	bl	8008210 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2200      	movs	r2, #0
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f002 fa85 	bl	800883c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006332:	2300      	movs	r3, #0
 8006334:	2200      	movs	r2, #0
 8006336:	210a      	movs	r1, #10
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fc0a 	bl	8006b52 <USBH_FindInterface>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2bff      	cmp	r3, #255	@ 0xff
 8006346:	d002      	beq.n	800634e <USBH_CDC_InterfaceInit+0x11a>
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d901      	bls.n	8006352 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800634e:	2302      	movs	r3, #2
 8006350:	e0c2      	b.n	80064d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	211a      	movs	r1, #26
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	4413      	add	r3, r2
 800635e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b25b      	sxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	da16      	bge.n	8006398 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	211a      	movs	r1, #26
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	211a      	movs	r1, #26
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006390:	881a      	ldrh	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	835a      	strh	r2, [r3, #26]
 8006396:	e015      	b.n	80063c4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	211a      	movs	r1, #26
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	211a      	movs	r1, #26
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	211a      	movs	r1, #26
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	b25b      	sxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	da16      	bge.n	800640a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	211a      	movs	r1, #26
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	211a      	movs	r1, #26
 80063f8:	fb01 f303 	mul.w	r3, r1, r3
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006402:	881a      	ldrh	r2, [r3, #0]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	835a      	strh	r2, [r3, #26]
 8006408:	e015      	b.n	8006436 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	211a      	movs	r1, #26
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	211a      	movs	r1, #26
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006430:	881a      	ldrh	r2, [r3, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	7b9b      	ldrb	r3, [r3, #14]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 ff16 	bl	800826e <USBH_AllocPipe>
 8006442:	4603      	mov	r3, r0
 8006444:	461a      	mov	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	7bdb      	ldrb	r3, [r3, #15]
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 ff0c 	bl	800826e <USBH_AllocPipe>
 8006456:	4603      	mov	r3, r0
 8006458:	461a      	mov	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	7b59      	ldrb	r1, [r3, #13]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	7b98      	ldrb	r0, [r3, #14]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	8b12      	ldrh	r2, [r2, #24]
 8006476:	9202      	str	r2, [sp, #8]
 8006478:	2202      	movs	r2, #2
 800647a:	9201      	str	r2, [sp, #4]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	4623      	mov	r3, r4
 8006480:	4602      	mov	r2, r0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fec4 	bl	8008210 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	7b19      	ldrb	r1, [r3, #12]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	7bd8      	ldrb	r0, [r3, #15]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	8b52      	ldrh	r2, [r2, #26]
 80064a0:	9202      	str	r2, [sp, #8]
 80064a2:	2202      	movs	r2, #2
 80064a4:	9201      	str	r2, [sp, #4]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4623      	mov	r3, r4
 80064aa:	4602      	mov	r2, r0
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 feaf 	bl	8008210 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	7b5b      	ldrb	r3, [r3, #13]
 80064be:	2200      	movs	r2, #0
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f002 f9ba 	bl	800883c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	7b1b      	ldrb	r3, [r3, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f002 f9b3 	bl	800883c <USBH_LL_SetToggle>

  return USBH_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}

080064e0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00e      	beq.n	8006518 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fea4 	bl	800824e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fecf 	bl	80082b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	7b1b      	ldrb	r3, [r3, #12]
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fe91 	bl	800824e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	7b1b      	ldrb	r3, [r3, #12]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 febc 	bl	80082b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	7b5b      	ldrb	r3, [r3, #13]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	7b5b      	ldrb	r3, [r3, #13]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fe7e 	bl	800824e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	7b5b      	ldrb	r3, [r3, #13]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fea9 	bl	80082b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	4618      	mov	r0, r3
 800657a:	f002 f9ed 	bl	8008958 <free>
    phost->pActiveClass->pData = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006584:	2200      	movs	r2, #0
 8006586:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3340      	adds	r3, #64	@ 0x40
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f8b1 	bl	8006712 <GetLineCoding>
 80065b0:	4603      	mov	r3, r0
 80065b2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065b4:	7afb      	ldrb	r3, [r7, #11]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d105      	bne.n	80065c6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065c0:	2102      	movs	r1, #2
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065c6:	7afb      	ldrb	r3, [r7, #11]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d877      	bhi.n	80066e4 <USBH_CDC_Process+0x114>
 80065f4:	a201      	add	r2, pc, #4	@ (adr r2, 80065fc <USBH_CDC_Process+0x2c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006611 	.word	0x08006611
 8006600:	08006617 	.word	0x08006617
 8006604:	08006647 	.word	0x08006647
 8006608:	080066bb 	.word	0x080066bb
 800660c:	080066c9 	.word	0x080066c9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]
      break;
 8006614:	e06d      	b.n	80066f2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f897 	bl	8006750 <SetLineCoding>
 8006622:	4603      	mov	r3, r0
 8006624:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006634:	e058      	b.n	80066e8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d055      	beq.n	80066e8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2204      	movs	r2, #4
 8006640:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006644:	e050      	b.n	80066e8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	3340      	adds	r3, #64	@ 0x40
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f860 	bl	8006712 <GetLineCoding>
 8006652:	4603      	mov	r3, r0
 8006654:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d126      	bne.n	80066aa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666e:	791b      	ldrb	r3, [r3, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d13b      	bne.n	80066ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006680:	429a      	cmp	r2, r3
 8006682:	d133      	bne.n	80066ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800668e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006690:	429a      	cmp	r2, r3
 8006692:	d12b      	bne.n	80066ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800669c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800669e:	429a      	cmp	r2, r3
 80066a0:	d124      	bne.n	80066ec <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f958 	bl	8006958 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066a8:	e020      	b.n	80066ec <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d01d      	beq.n	80066ec <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2204      	movs	r2, #4
 80066b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80066b8:	e018      	b.n	80066ec <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f867 	bl	800678e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f8da 	bl	800687a <CDC_ProcessReception>
      break;
 80066c6:	e014      	b.n	80066f2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066c8:	2100      	movs	r1, #0
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 f81a 	bl	8007704 <USBH_ClrFeature>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80066e2:	e005      	b.n	80066f0 <USBH_CDC_Process+0x120>

    default:
      break;
 80066e4:	bf00      	nop
 80066e6:	e004      	b.n	80066f2 <USBH_CDC_Process+0x122>
      break;
 80066e8:	bf00      	nop
 80066ea:	e002      	b.n	80066f2 <USBH_CDC_Process+0x122>
      break;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <USBH_CDC_Process+0x122>
      break;
 80066f0:	bf00      	nop

  }

  return status;
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	22a1      	movs	r2, #161	@ 0xa1
 8006720:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2221      	movs	r2, #33	@ 0x21
 8006726:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2207      	movs	r2, #7
 8006738:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2207      	movs	r2, #7
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fb14 	bl	8007d6e <USBH_CtlReq>
 8006746:	4603      	mov	r3, r0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2221      	movs	r2, #33	@ 0x21
 800675e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2207      	movs	r2, #7
 8006776:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2207      	movs	r2, #7
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 faf5 	bl	8007d6e <USBH_CtlReq>
 8006784:	4603      	mov	r3, r0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af02      	add	r7, sp, #8
 8006794:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d002      	beq.n	80067b4 <CDC_ProcessTransmission+0x26>
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d023      	beq.n	80067fa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067b2:	e05e      	b.n	8006872 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	8b12      	ldrh	r2, [r2, #24]
 80067bc:	4293      	cmp	r3, r2
 80067be:	d90b      	bls.n	80067d8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	69d9      	ldr	r1, [r3, #28]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8b1a      	ldrh	r2, [r3, #24]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	7b5b      	ldrb	r3, [r3, #13]
 80067cc:	2001      	movs	r0, #1
 80067ce:	9000      	str	r0, [sp, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 fcda 	bl	800818a <USBH_BulkSendData>
 80067d6:	e00b      	b.n	80067f0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	7b5b      	ldrb	r3, [r3, #13]
 80067e6:	2001      	movs	r0, #1
 80067e8:	9000      	str	r0, [sp, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fccd 	bl	800818a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067f8:	e03b      	b.n	8006872 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7b5b      	ldrb	r3, [r3, #13]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fff1 	bl	80087e8 <USBH_LL_GetURBState>
 8006806:	4603      	mov	r3, r0
 8006808:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d128      	bne.n	8006862 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	8b12      	ldrh	r2, [r2, #24]
 8006818:	4293      	cmp	r3, r2
 800681a:	d90e      	bls.n	800683a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	8b12      	ldrh	r2, [r2, #24]
 8006824:	1a9a      	subs	r2, r3, r2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	8b12      	ldrh	r2, [r2, #24]
 8006832:	441a      	add	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]
 8006838:	e002      	b.n	8006840 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006850:	e00e      	b.n	8006870 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f868 	bl	8006930 <USBH_CDC_TransmitCallback>
      break;
 8006860:	e006      	b.n	8006870 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006862:	7afb      	ldrb	r3, [r7, #11]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d103      	bne.n	8006870 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006870:	bf00      	nop
  }
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800688c:	2300      	movs	r3, #0
 800688e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006896:	2b03      	cmp	r3, #3
 8006898:	d002      	beq.n	80068a0 <CDC_ProcessReception+0x26>
 800689a:	2b04      	cmp	r3, #4
 800689c:	d00e      	beq.n	80068bc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800689e:	e043      	b.n	8006928 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	6a19      	ldr	r1, [r3, #32]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	8b5a      	ldrh	r2, [r3, #26]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	7b1b      	ldrb	r3, [r3, #12]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fc91 	bl	80081d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2204      	movs	r2, #4
 80068b6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80068ba:	e035      	b.n	8006928 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	7b1b      	ldrb	r3, [r3, #12]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 ff90 	bl	80087e8 <USBH_LL_GetURBState>
 80068c8:	4603      	mov	r3, r0
 80068ca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068cc:	7cfb      	ldrb	r3, [r7, #19]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d129      	bne.n	8006926 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	7b1b      	ldrb	r3, [r3, #12]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fef3 	bl	80086c4 <USBH_LL_GetLastXferSize>
 80068de:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d016      	beq.n	8006918 <CDC_ProcessReception+0x9e>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	8b5b      	ldrh	r3, [r3, #26]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d910      	bls.n	8006918 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	1ad2      	subs	r2, r2, r3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6a1a      	ldr	r2, [r3, #32]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	441a      	add	r2, r3
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2203      	movs	r2, #3
 8006912:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006916:	e006      	b.n	8006926 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f80f 	bl	8006944 <USBH_CDC_ReceiveCallback>
      break;
 8006926:	bf00      	nop
  }
}
 8006928:	bf00      	nop
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006980:	2302      	movs	r3, #2
 8006982:	e029      	b.n	80069d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	79fa      	ldrb	r2, [r7, #7]
 8006988:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f81f 	bl	80069e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f001 fdc3 	bl	800855c <USBH_LL_Init>

  return USBH_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e009      	b.n	8006a06 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	33e0      	adds	r3, #224	@ 0xe0
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	2200      	movs	r2, #0
 80069fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b0f      	cmp	r3, #15
 8006a0a:	d9f2      	bls.n	80069f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e009      	b.n	8006a26 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2c:	d3f1      	bcc.n	8006a12 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2240      	movs	r2, #64	@ 0x40
 8006a52:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	331c      	adds	r3, #28
 8006a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a82:	2100      	movs	r1, #0
 8006a84:	4618      	mov	r0, r3
 8006a86:	f002 f81d 	bl	8008ac4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f002 f814 	bl	8008ac4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006aa2:	2212      	movs	r2, #18
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 f80c 	bl	8008ac4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ab2:	223e      	movs	r2, #62	@ 0x3e
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 f804 	bl	8008ac4 <memset>

  return USBH_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10e      	bne.n	8006b02 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	33de      	adds	r3, #222	@ 0xde
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
 8006b00:	e004      	b.n	8006b0c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b02:	2302      	movs	r3, #2
 8006b04:	73fb      	strb	r3, [r7, #15]
 8006b06:	e001      	b.n	8006b0c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d204      	bcs.n	8006b40 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006b3e:	e001      	b.n	8006b44 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b40:	2302      	movs	r3, #2
 8006b42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	4608      	mov	r0, r1
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	70fb      	strb	r3, [r7, #3]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70bb      	strb	r3, [r7, #2]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b7a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b7c:	e025      	b.n	8006bca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	221a      	movs	r2, #26
 8006b82:	fb02 f303 	mul.w	r3, r2, r3
 8006b86:	3308      	adds	r3, #8
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	795b      	ldrb	r3, [r3, #5]
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d002      	beq.n	8006ba0 <USBH_FindInterface+0x4e>
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	2bff      	cmp	r3, #255	@ 0xff
 8006b9e:	d111      	bne.n	8006bc4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ba4:	78ba      	ldrb	r2, [r7, #2]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d002      	beq.n	8006bb0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006baa:	78bb      	ldrb	r3, [r7, #2]
 8006bac:	2bff      	cmp	r3, #255	@ 0xff
 8006bae:	d109      	bne.n	8006bc4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bb4:	787a      	ldrb	r2, [r7, #1]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d002      	beq.n	8006bc0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bba:	787b      	ldrb	r3, [r7, #1]
 8006bbc:	2bff      	cmp	r3, #255	@ 0xff
 8006bbe:	d101      	bne.n	8006bc4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	e006      	b.n	8006bd2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d9d6      	bls.n	8006b7e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bd0:	23ff      	movs	r3, #255	@ 0xff
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fcf4 	bl	80085d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bec:	2101      	movs	r1, #1
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fe0d 	bl	800880e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af04      	add	r7, sp, #16
 8006c06:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d102      	bne.n	8006c22 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b0b      	cmp	r3, #11
 8006c2a:	f200 81bb 	bhi.w	8006fa4 <USBH_Process+0x3a4>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <USBH_Process+0x34>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006c97 	.word	0x08006c97
 8006c3c:	08006cff 	.word	0x08006cff
 8006c40:	08006f3f 	.word	0x08006f3f
 8006c44:	08006fa5 	.word	0x08006fa5
 8006c48:	08006d9f 	.word	0x08006d9f
 8006c4c:	08006ee5 	.word	0x08006ee5
 8006c50:	08006dd5 	.word	0x08006dd5
 8006c54:	08006df5 	.word	0x08006df5
 8006c58:	08006e13 	.word	0x08006e13
 8006c5c:	08006e57 	.word	0x08006e57
 8006c60:	08006f27 	.word	0x08006f27
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 819b 	beq.w	8006fa8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c78:	20c8      	movs	r0, #200	@ 0xc8
 8006c7a:	f001 fe12 	bl	80088a2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fd05 	bl	800868e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c94:	e188      	b.n	8006fa8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d107      	bne.n	8006cb0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cae:	e18a      	b.n	8006fc6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cba:	d914      	bls.n	8006ce6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d903      	bls.n	8006cde <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	220d      	movs	r2, #13
 8006cda:	701a      	strb	r2, [r3, #0]
      break;
 8006cdc:	e173      	b.n	8006fc6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
      break;
 8006ce4:	e16f      	b.n	8006fc6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cec:	f103 020a 	add.w	r2, r3, #10
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006cf6:	200a      	movs	r0, #10
 8006cf8:	f001 fdd3 	bl	80088a2 <USBH_Delay>
      break;
 8006cfc:	e163      	b.n	8006fc6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d0e:	2104      	movs	r1, #4
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d14:	2064      	movs	r0, #100	@ 0x64
 8006d16:	f001 fdc4 	bl	80088a2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fc90 	bl	8008640 <USBH_LL_GetSpeed>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2205      	movs	r2, #5
 8006d2e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d30:	2100      	movs	r1, #0
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fa9b 	bl	800826e <USBH_AllocPipe>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d40:	2180      	movs	r1, #128	@ 0x80
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 fa93 	bl	800826e <USBH_AllocPipe>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7919      	ldrb	r1, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d64:	9202      	str	r2, [sp, #8]
 8006d66:	2200      	movs	r2, #0
 8006d68:	9201      	str	r2, [sp, #4]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2280      	movs	r2, #128	@ 0x80
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 fa4d 	bl	8008210 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	7959      	ldrb	r1, [r3, #5]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d8a:	9202      	str	r2, [sp, #8]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	9201      	str	r2, [sp, #4]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	4603      	mov	r3, r0
 8006d94:	2200      	movs	r2, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fa3a 	bl	8008210 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d9c:	e113      	b.n	8006fc6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f916 	bl	8006fd0 <USBH_HandleEnum>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 80fd 	bne.w	8006fac <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d103      	bne.n	8006dcc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dca:	e0ef      	b.n	8006fac <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2207      	movs	r2, #7
 8006dd0:	701a      	strb	r2, [r3, #0]
      break;
 8006dd2:	e0eb      	b.n	8006fac <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80e8 	beq.w	8006fb0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006de6:	2101      	movs	r1, #1
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2208      	movs	r2, #8
 8006df0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006df2:	e0dd      	b.n	8006fb0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fc3a 	bl	8007676 <USBH_SetCfg>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 80d5 	bne.w	8006fb4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2209      	movs	r2, #9
 8006e0e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e10:	e0d0      	b.n	8006fb4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d016      	beq.n	8006e4e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e20:	2101      	movs	r1, #1
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fc4a 	bl	80076bc <USBH_SetFeature>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d103      	bne.n	8006e3c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220a      	movs	r2, #10
 8006e38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e3a:	e0bd      	b.n	8006fb8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	f040 80b9 	bne.w	8006fb8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	220a      	movs	r2, #10
 8006e4a:	701a      	strb	r2, [r3, #0]
      break;
 8006e4c:	e0b4      	b.n	8006fb8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	220a      	movs	r2, #10
 8006e52:	701a      	strb	r2, [r3, #0]
      break;
 8006e54:	e0b0      	b.n	8006fb8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80ad 	beq.w	8006fbc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
 8006e6e:	e016      	b.n	8006e9e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e70:	7bfa      	ldrb	r2, [r7, #15]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	32de      	adds	r2, #222	@ 0xde
 8006e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7a:	791a      	ldrb	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d108      	bne.n	8006e98 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e86:	7bfa      	ldrb	r2, [r7, #15]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	32de      	adds	r2, #222	@ 0xde
 8006e8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006e96:	e005      	b.n	8006ea4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	73fb      	strb	r3, [r7, #15]
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0e5      	beq.n	8006e70 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d016      	beq.n	8006edc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2206      	movs	r2, #6
 8006ec4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ecc:	2103      	movs	r1, #3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ed2:	e073      	b.n	8006fbc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	220d      	movs	r2, #13
 8006ed8:	701a      	strb	r2, [r3, #0]
      break;
 8006eda:	e06f      	b.n	8006fbc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	220d      	movs	r2, #13
 8006ee0:	701a      	strb	r2, [r3, #0]
      break;
 8006ee2:	e06b      	b.n	8006fbc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d017      	beq.n	8006f1e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	220b      	movs	r2, #11
 8006f0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f0c:	e058      	b.n	8006fc0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d154      	bne.n	8006fc0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	220d      	movs	r2, #13
 8006f1a:	701a      	strb	r2, [r3, #0]
      break;
 8006f1c:	e050      	b.n	8006fc0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220d      	movs	r2, #13
 8006f22:	701a      	strb	r2, [r3, #0]
      break;
 8006f24:	e04c      	b.n	8006fc0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d049      	beq.n	8006fc4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
      }
      break;
 8006f3c:	e042      	b.n	8006fc4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fd4a 	bl	80069e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f7a:	2105      	movs	r1, #5
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d107      	bne.n	8006f9c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff fe22 	bl	8006bde <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f9a:	e014      	b.n	8006fc6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fb19 	bl	80085d4 <USBH_LL_Start>
      break;
 8006fa2:	e010      	b.n	8006fc6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fa4:	bf00      	nop
 8006fa6:	e00e      	b.n	8006fc6 <USBH_Process+0x3c6>
      break;
 8006fa8:	bf00      	nop
 8006faa:	e00c      	b.n	8006fc6 <USBH_Process+0x3c6>
      break;
 8006fac:	bf00      	nop
 8006fae:	e00a      	b.n	8006fc6 <USBH_Process+0x3c6>
    break;
 8006fb0:	bf00      	nop
 8006fb2:	e008      	b.n	8006fc6 <USBH_Process+0x3c6>
      break;
 8006fb4:	bf00      	nop
 8006fb6:	e006      	b.n	8006fc6 <USBH_Process+0x3c6>
      break;
 8006fb8:	bf00      	nop
 8006fba:	e004      	b.n	8006fc6 <USBH_Process+0x3c6>
      break;
 8006fbc:	bf00      	nop
 8006fbe:	e002      	b.n	8006fc6 <USBH_Process+0x3c6>
      break;
 8006fc0:	bf00      	nop
 8006fc2:	e000      	b.n	8006fc6 <USBH_Process+0x3c6>
      break;
 8006fc4:	bf00      	nop
  }
  return USBH_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af04      	add	r7, sp, #16
 8006fd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b07      	cmp	r3, #7
 8006fe6:	f200 81bd 	bhi.w	8007364 <USBH_HandleEnum+0x394>
 8006fea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <USBH_HandleEnum+0x20>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	080070cb 	.word	0x080070cb
 8006ff8:	08007135 	.word	0x08007135
 8006ffc:	080071bf 	.word	0x080071bf
 8007000:	08007229 	.word	0x08007229
 8007004:	08007299 	.word	0x08007299
 8007008:	080072df 	.word	0x080072df
 800700c:	08007325 	.word	0x08007325
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007010:	2108      	movs	r1, #8
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa4c 	bl	80074b0 <USBH_Get_DevDesc>
 8007018:	4603      	mov	r3, r0
 800701a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d12e      	bne.n	8007080 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	7919      	ldrb	r1, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007046:	9202      	str	r2, [sp, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	9201      	str	r2, [sp, #4]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4603      	mov	r3, r0
 8007050:	2280      	movs	r2, #128	@ 0x80
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 f8dc 	bl	8008210 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7959      	ldrb	r1, [r3, #5]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	9201      	str	r2, [sp, #4]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4603      	mov	r3, r0
 8007076:	2200      	movs	r2, #0
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f8c9 	bl	8008210 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800707e:	e173      	b.n	8007368 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b03      	cmp	r3, #3
 8007084:	f040 8170 	bne.w	8007368 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800708e:	3301      	adds	r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d903      	bls.n	80070aa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	220d      	movs	r2, #13
 80070a6:	701a      	strb	r2, [r3, #0]
      break;
 80070a8:	e15e      	b.n	8007368 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 f8fd 	bl	80082b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f8f7 	bl	80082b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
      break;
 80070c8:	e14e      	b.n	8007368 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070ca:	2112      	movs	r1, #18
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f9ef 	bl	80074b0 <USBH_Get_DevDesc>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d103      	bne.n	80070e4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070e2:	e143      	b.n	800736c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	f040 8140 	bne.w	800736c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070f2:	3301      	adds	r3, #1
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007102:	2b03      	cmp	r3, #3
 8007104:	d903      	bls.n	800710e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	220d      	movs	r2, #13
 800710a:	701a      	strb	r2, [r3, #0]
      break;
 800710c:	e12e      	b.n	800736c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	795b      	ldrb	r3, [r3, #5]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f8cb 	bl	80082b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	791b      	ldrb	r3, [r3, #4]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f8c5 	bl	80082b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
      break;
 8007132:	e11b      	b.n	800736c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007134:	2101      	movs	r1, #1
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa79 	bl	800762e <USBH_SetAddress>
 800713c:	4603      	mov	r3, r0
 800713e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d130      	bne.n	80071a8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007146:	2002      	movs	r0, #2
 8007148:	f001 fbab 	bl	80088a2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2203      	movs	r2, #3
 8007158:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7919      	ldrb	r1, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800716e:	9202      	str	r2, [sp, #8]
 8007170:	2200      	movs	r2, #0
 8007172:	9201      	str	r2, [sp, #4]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4603      	mov	r3, r0
 8007178:	2280      	movs	r2, #128	@ 0x80
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f848 	bl	8008210 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7959      	ldrb	r1, [r3, #5]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007194:	9202      	str	r2, [sp, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	9201      	str	r2, [sp, #4]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4603      	mov	r3, r0
 800719e:	2200      	movs	r2, #0
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f835 	bl	8008210 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071a6:	e0e3      	b.n	8007370 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	f040 80e0 	bne.w	8007370 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	220d      	movs	r2, #13
 80071b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	705a      	strb	r2, [r3, #1]
      break;
 80071bc:	e0d8      	b.n	8007370 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071be:	2109      	movs	r1, #9
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f9a1 	bl	8007508 <USBH_Get_CfgDesc>
 80071c6:	4603      	mov	r3, r0
 80071c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2204      	movs	r2, #4
 80071d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071d6:	e0cd      	b.n	8007374 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b03      	cmp	r3, #3
 80071dc:	f040 80ca 	bne.w	8007374 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071e6:	3301      	adds	r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d903      	bls.n	8007202 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	220d      	movs	r2, #13
 80071fe:	701a      	strb	r2, [r3, #0]
      break;
 8007200:	e0b8      	b.n	8007374 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	795b      	ldrb	r3, [r3, #5]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f851 	bl	80082b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f84b 	bl	80082b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
      break;
 8007226:	e0a5      	b.n	8007374 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f969 	bl	8007508 <USBH_Get_CfgDesc>
 8007236:	4603      	mov	r3, r0
 8007238:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2205      	movs	r2, #5
 8007244:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007246:	e097      	b.n	8007378 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b03      	cmp	r3, #3
 800724c:	f040 8094 	bne.w	8007378 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007256:	3301      	adds	r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007266:	2b03      	cmp	r3, #3
 8007268:	d903      	bls.n	8007272 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	220d      	movs	r2, #13
 800726e:	701a      	strb	r2, [r3, #0]
      break;
 8007270:	e082      	b.n	8007378 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	795b      	ldrb	r3, [r3, #5]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f819 	bl	80082b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 f813 	bl	80082b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
      break;
 8007296:	e06f      	b.n	8007378 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d019      	beq.n	80072d6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072ae:	23ff      	movs	r3, #255	@ 0xff
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f953 	bl	800755c <USBH_Get_StringDesc>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d103      	bne.n	80072c8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2206      	movs	r2, #6
 80072c4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072c6:	e059      	b.n	800737c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d156      	bne.n	800737c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2206      	movs	r2, #6
 80072d2:	705a      	strb	r2, [r3, #1]
      break;
 80072d4:	e052      	b.n	800737c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2206      	movs	r2, #6
 80072da:	705a      	strb	r2, [r3, #1]
      break;
 80072dc:	e04e      	b.n	800737c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d019      	beq.n	800731c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072f4:	23ff      	movs	r3, #255	@ 0xff
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f930 	bl	800755c <USBH_Get_StringDesc>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2207      	movs	r2, #7
 800730a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800730c:	e038      	b.n	8007380 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b03      	cmp	r3, #3
 8007312:	d135      	bne.n	8007380 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2207      	movs	r2, #7
 8007318:	705a      	strb	r2, [r3, #1]
      break;
 800731a:	e031      	b.n	8007380 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2207      	movs	r2, #7
 8007320:	705a      	strb	r2, [r3, #1]
      break;
 8007322:	e02d      	b.n	8007380 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800732a:	2b00      	cmp	r3, #0
 800732c:	d017      	beq.n	800735e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800733a:	23ff      	movs	r3, #255	@ 0xff
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f90d 	bl	800755c <USBH_Get_StringDesc>
 8007342:	4603      	mov	r3, r0
 8007344:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007350:	e018      	b.n	8007384 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b03      	cmp	r3, #3
 8007356:	d115      	bne.n	8007384 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
      break;
 800735c:	e012      	b.n	8007384 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
      break;
 8007362:	e00f      	b.n	8007384 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007364:	bf00      	nop
 8007366:	e00e      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 8007368:	bf00      	nop
 800736a:	e00c      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 800736c:	bf00      	nop
 800736e:	e00a      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 8007370:	bf00      	nop
 8007372:	e008      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 8007374:	bf00      	nop
 8007376:	e006      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 8007378:	bf00      	nop
 800737a:	e004      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 800737c:	bf00      	nop
 800737e:	e002      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <USBH_HandleEnum+0x3b6>
      break;
 8007384:	bf00      	nop
  }
  return Status;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f804 	bl	80073d2 <USBH_HandleSof>
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b0b      	cmp	r3, #11
 80073e2:	d10a      	bne.n	80073fa <USBH_HandleSof+0x28>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
  }
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007412:	bf00      	nop
}
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800742e:	bf00      	nop
}
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 f8be 	bl	800860a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	791b      	ldrb	r3, [r3, #4]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 ff0b 	bl	80082b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	795b      	ldrb	r3, [r3, #5]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 ff05 	bl	80082b0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80074bc:	887b      	ldrh	r3, [r7, #2]
 80074be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c2:	d901      	bls.n	80074c8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e01b      	b.n	8007500 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074ce:	887b      	ldrh	r3, [r7, #2]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4613      	mov	r3, r2
 80074d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074d8:	2100      	movs	r1, #0
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f872 	bl	80075c4 <USBH_GetDescriptor>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074f0:	887a      	ldrh	r2, [r7, #2]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f929 	bl	800774c <USBH_ParseDevDesc>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af02      	add	r7, sp, #8
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	331c      	adds	r3, #28
 8007518:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800751a:	887b      	ldrh	r3, [r7, #2]
 800751c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007520:	d901      	bls.n	8007526 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007522:	2303      	movs	r3, #3
 8007524:	e016      	b.n	8007554 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007526:	887b      	ldrh	r3, [r7, #2]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007530:	2100      	movs	r1, #0
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f846 	bl	80075c4 <USBH_GetDescriptor>
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d107      	bne.n	8007552 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007542:	887b      	ldrh	r3, [r7, #2]
 8007544:	461a      	mov	r2, r3
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9af 	bl	80078ac <USBH_ParseCfgDesc>
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	607a      	str	r2, [r7, #4]
 8007566:	461a      	mov	r2, r3
 8007568:	460b      	mov	r3, r1
 800756a:	72fb      	strb	r3, [r7, #11]
 800756c:	4613      	mov	r3, r2
 800756e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007570:	893b      	ldrh	r3, [r7, #8]
 8007572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007576:	d802      	bhi.n	800757e <USBH_Get_StringDesc+0x22>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800757e:	2303      	movs	r3, #3
 8007580:	e01c      	b.n	80075bc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007582:	7afb      	ldrb	r3, [r7, #11]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800758a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007592:	893b      	ldrh	r3, [r7, #8]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	460b      	mov	r3, r1
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f812 	bl	80075c4 <USBH_GetDescriptor>
 80075a0:	4603      	mov	r3, r0
 80075a2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075b0:	893a      	ldrh	r2, [r7, #8]
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fb8d 	bl	8007cd4 <USBH_ParseStringDesc>
  }

  return status;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	72fb      	strb	r3, [r7, #11]
 80075d2:	4613      	mov	r3, r2
 80075d4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	789b      	ldrb	r3, [r3, #2]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d11c      	bne.n	8007618 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2206      	movs	r2, #6
 80075ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	893a      	ldrh	r2, [r7, #8]
 80075f4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075f6:	893b      	ldrh	r3, [r7, #8]
 80075f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007600:	d104      	bne.n	800760c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f240 4209 	movw	r2, #1033	@ 0x409
 8007608:	829a      	strh	r2, [r3, #20]
 800760a:	e002      	b.n	8007612 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8b3a      	ldrh	r2, [r7, #24]
 8007616:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007618:	8b3b      	ldrh	r3, [r7, #24]
 800761a:	461a      	mov	r2, r3
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 fba5 	bl	8007d6e <USBH_CtlReq>
 8007624:	4603      	mov	r3, r0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	460b      	mov	r3, r1
 8007638:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	789b      	ldrb	r3, [r3, #2]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d10f      	bne.n	8007662 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2205      	movs	r2, #5
 800764c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fb81 	bl	8007d6e <USBH_CtlReq>
 800766c:	4603      	mov	r3, r0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	460b      	mov	r3, r1
 8007680:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	789b      	ldrb	r3, [r3, #2]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d10e      	bne.n	80076a8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2209      	movs	r2, #9
 8007694:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	887a      	ldrh	r2, [r7, #2]
 800769a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076a8:	2200      	movs	r2, #0
 80076aa:	2100      	movs	r1, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fb5e 	bl	8007d6e <USBH_CtlReq>
 80076b2:	4603      	mov	r3, r0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	789b      	ldrb	r3, [r3, #2]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10f      	bne.n	80076f0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2203      	movs	r2, #3
 80076da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076f0:	2200      	movs	r2, #0
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fb3a 	bl	8007d6e <USBH_CtlReq>
 80076fa:	4603      	mov	r3, r0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	789b      	ldrb	r3, [r3, #2]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d10f      	bne.n	8007738 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	b29a      	uxth	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007738:	2200      	movs	r2, #0
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fb16 	bl	8007d6e <USBH_CtlReq>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007760:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800776c:	2302      	movs	r3, #2
 800776e:	e094      	b.n	800789a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	785a      	ldrb	r2, [r3, #1]
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3302      	adds	r3, #2
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	3303      	adds	r3, #3
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	b29a      	uxth	r2, r3
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	791a      	ldrb	r2, [r3, #4]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	795a      	ldrb	r2, [r3, #5]
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	799a      	ldrb	r2, [r3, #6]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	79da      	ldrb	r2, [r3, #7]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d11b      	bne.n	8007806 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	79db      	ldrb	r3, [r3, #7]
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	dc0f      	bgt.n	80077f6 <USBH_ParseDevDesc+0xaa>
 80077d6:	2b08      	cmp	r3, #8
 80077d8:	db0f      	blt.n	80077fa <USBH_ParseDevDesc+0xae>
 80077da:	3b08      	subs	r3, #8
 80077dc:	4a32      	ldr	r2, [pc, #200]	@ (80078a8 <USBH_ParseDevDesc+0x15c>)
 80077de:	fa22 f303 	lsr.w	r3, r2, r3
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bf14      	ite	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	2300      	moveq	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <USBH_ParseDevDesc+0xb6>
 80077f4:	e001      	b.n	80077fa <USBH_ParseDevDesc+0xae>
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d003      	beq.n	8007802 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2208      	movs	r2, #8
 80077fe:	71da      	strb	r2, [r3, #7]
        break;
 8007800:	e000      	b.n	8007804 <USBH_ParseDevDesc+0xb8>
        break;
 8007802:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007804:	e00e      	b.n	8007824 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800780c:	2b02      	cmp	r3, #2
 800780e:	d107      	bne.n	8007820 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	79db      	ldrb	r3, [r3, #7]
 8007814:	2b08      	cmp	r3, #8
 8007816:	d005      	beq.n	8007824 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2208      	movs	r2, #8
 800781c:	71da      	strb	r2, [r3, #7]
 800781e:	e001      	b.n	8007824 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007820:	2303      	movs	r3, #3
 8007822:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007824:	88fb      	ldrh	r3, [r7, #6]
 8007826:	2b08      	cmp	r3, #8
 8007828:	d936      	bls.n	8007898 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3308      	adds	r3, #8
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3309      	adds	r3, #9
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	b29b      	uxth	r3, r3
 800783c:	4313      	orrs	r3, r2
 800783e:	b29a      	uxth	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	330a      	adds	r3, #10
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	330b      	adds	r3, #11
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	b29b      	uxth	r3, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	b29a      	uxth	r2, r3
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	330c      	adds	r3, #12
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	330d      	adds	r3, #13
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b29b      	uxth	r3, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	7b9a      	ldrb	r2, [r3, #14]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	7bda      	ldrb	r2, [r3, #15]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	7c1a      	ldrb	r2, [r3, #16]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	7c5a      	ldrb	r2, [r3, #17]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
}
 800789a:	4618      	mov	r0, r3
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	01000101 	.word	0x01000101

080078ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08c      	sub	sp, #48	@ 0x30
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80078da:	2302      	movs	r3, #2
 80078dc:	e0da      	b.n	8007a94 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	785a      	ldrb	r2, [r3, #1]
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	3302      	adds	r3, #2
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	3303      	adds	r3, #3
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	b29b      	uxth	r3, r3
 8007904:	4313      	orrs	r3, r2
 8007906:	b29b      	uxth	r3, r3
 8007908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790c:	bf28      	it	cs
 800790e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007912:	b29a      	uxth	r2, r3
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	791a      	ldrb	r2, [r3, #4]
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	795a      	ldrb	r2, [r3, #5]
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	799a      	ldrb	r2, [r3, #6]
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	79da      	ldrb	r2, [r3, #7]
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	7a1a      	ldrb	r2, [r3, #8]
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b09      	cmp	r3, #9
 8007946:	d002      	beq.n	800794e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	2209      	movs	r2, #9
 800794c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	2b09      	cmp	r3, #9
 8007952:	f240 809d 	bls.w	8007a90 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007956:	2309      	movs	r3, #9
 8007958:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800795e:	e081      	b.n	8007a64 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007960:	f107 0316 	add.w	r3, r7, #22
 8007964:	4619      	mov	r1, r3
 8007966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007968:	f000 f9e7 	bl	8007d3a <USBH_GetNextDesc>
 800796c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	2b04      	cmp	r3, #4
 8007974:	d176      	bne.n	8007a64 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b09      	cmp	r3, #9
 800797c:	d002      	beq.n	8007984 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800797e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007980:	2209      	movs	r2, #9
 8007982:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007988:	221a      	movs	r2, #26
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	3308      	adds	r3, #8
 8007990:	6a3a      	ldr	r2, [r7, #32]
 8007992:	4413      	add	r3, r2
 8007994:	3302      	adds	r3, #2
 8007996:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800799a:	69f8      	ldr	r0, [r7, #28]
 800799c:	f000 f87e 	bl	8007a9c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079aa:	e043      	b.n	8007a34 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079ac:	f107 0316 	add.w	r3, r7, #22
 80079b0:	4619      	mov	r1, r3
 80079b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079b4:	f000 f9c1 	bl	8007d3a <USBH_GetNextDesc>
 80079b8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d138      	bne.n	8007a34 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	795b      	ldrb	r3, [r3, #5]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d113      	bne.n	80079f2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d003      	beq.n	80079da <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	799b      	ldrb	r3, [r3, #6]
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d10b      	bne.n	80079f2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	79db      	ldrb	r3, [r3, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10b      	bne.n	80079fa <USBH_ParseCfgDesc+0x14e>
 80079e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b09      	cmp	r3, #9
 80079e8:	d007      	beq.n	80079fa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80079ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ec:	2209      	movs	r2, #9
 80079ee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079f0:	e003      	b.n	80079fa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f4:	2207      	movs	r2, #7
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	e000      	b.n	80079fc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079fa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a00:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a04:	3201      	adds	r2, #1
 8007a06:	00d2      	lsls	r2, r2, #3
 8007a08:	211a      	movs	r1, #26
 8007a0a:	fb01 f303 	mul.w	r3, r1, r3
 8007a0e:	4413      	add	r3, r2
 8007a10:	3308      	adds	r3, #8
 8007a12:	6a3a      	ldr	r2, [r7, #32]
 8007a14:	4413      	add	r3, r2
 8007a16:	3304      	adds	r3, #4
 8007a18:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a1c:	69b9      	ldr	r1, [r7, #24]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 f870 	bl	8007b04 <USBH_ParseEPDesc>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a2e:	3301      	adds	r3, #1
 8007a30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	791b      	ldrb	r3, [r3, #4]
 8007a38:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d204      	bcs.n	8007a4a <USBH_ParseCfgDesc+0x19e>
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	885a      	ldrh	r2, [r3, #2]
 8007a44:	8afb      	ldrh	r3, [r7, #22]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d8b0      	bhi.n	80079ac <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	791b      	ldrb	r3, [r3, #4]
 8007a4e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d201      	bcs.n	8007a5a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e01c      	b.n	8007a94 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d805      	bhi.n	8007a78 <USBH_ParseCfgDesc+0x1cc>
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	885a      	ldrh	r2, [r3, #2]
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	f63f af74 	bhi.w	8007960 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	791b      	ldrb	r3, [r3, #4]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	bf28      	it	cs
 8007a80:	2302      	movcs	r3, #2
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d201      	bcs.n	8007a90 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e001      	b.n	8007a94 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007a90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3730      	adds	r7, #48	@ 0x30
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781a      	ldrb	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785a      	ldrb	r2, [r3, #1]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	789a      	ldrb	r2, [r3, #2]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	78da      	ldrb	r2, [r3, #3]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	bf28      	it	cs
 8007ad0:	2302      	movcs	r3, #2
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	795a      	ldrb	r2, [r3, #5]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	799a      	ldrb	r2, [r3, #6]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	79da      	ldrb	r2, [r3, #7]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	7a1a      	ldrb	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	721a      	strb	r2, [r3, #8]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	785a      	ldrb	r2, [r3, #1]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	789a      	ldrb	r2, [r3, #2]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	78da      	ldrb	r2, [r3, #3]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3304      	adds	r3, #4
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3305      	adds	r3, #5
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	799a      	ldrb	r2, [r3, #6]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	889b      	ldrh	r3, [r3, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b66:	d804      	bhi.n	8007b72 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b70:	d901      	bls.n	8007b76 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007b72:	2303      	movs	r3, #3
 8007b74:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d136      	bne.n	8007bee <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	78db      	ldrb	r3, [r3, #3]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d108      	bne.n	8007b9e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	889b      	ldrh	r3, [r3, #4]
 8007b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b94:	f240 8097 	bls.w	8007cc6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	75fb      	strb	r3, [r7, #23]
 8007b9c:	e093      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d107      	bne.n	8007bba <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	889b      	ldrh	r3, [r3, #4]
 8007bae:	2b40      	cmp	r3, #64	@ 0x40
 8007bb0:	f240 8089 	bls.w	8007cc6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	75fb      	strb	r3, [r7, #23]
 8007bb8:	e085      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	78db      	ldrb	r3, [r3, #3]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d005      	beq.n	8007bd2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	78db      	ldrb	r3, [r3, #3]
 8007bca:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d10a      	bne.n	8007be8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	799b      	ldrb	r3, [r3, #6]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <USBH_ParseEPDesc+0xde>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	799b      	ldrb	r3, [r3, #6]
 8007bde:	2b10      	cmp	r3, #16
 8007be0:	d970      	bls.n	8007cc4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007be2:	2303      	movs	r3, #3
 8007be4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007be6:	e06d      	b.n	8007cc4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007be8:	2303      	movs	r3, #3
 8007bea:	75fb      	strb	r3, [r7, #23]
 8007bec:	e06b      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d13c      	bne.n	8007c72 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	78db      	ldrb	r3, [r3, #3]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d005      	beq.n	8007c10 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	78db      	ldrb	r3, [r3, #3]
 8007c08:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	889b      	ldrh	r3, [r3, #4]
 8007c14:	2b40      	cmp	r3, #64	@ 0x40
 8007c16:	d956      	bls.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c1c:	e053      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	78db      	ldrb	r3, [r3, #3]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d10e      	bne.n	8007c48 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	799b      	ldrb	r3, [r3, #6]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d803      	bhi.n	8007c42 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	d941      	bls.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c42:	2303      	movs	r3, #3
 8007c44:	75fb      	strb	r3, [r7, #23]
 8007c46:	e03e      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	78db      	ldrb	r3, [r3, #3]
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d10b      	bne.n	8007c6c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	799b      	ldrb	r3, [r3, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <USBH_ParseEPDesc+0x162>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	889b      	ldrh	r3, [r3, #4]
 8007c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c64:	d32f      	bcc.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c66:	2303      	movs	r3, #3
 8007c68:	75fb      	strb	r3, [r7, #23]
 8007c6a:	e02c      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	75fb      	strb	r3, [r7, #23]
 8007c70:	e029      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d120      	bne.n	8007cbe <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	78db      	ldrb	r3, [r3, #3]
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	889b      	ldrh	r3, [r3, #4]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d01a      	beq.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c90:	2303      	movs	r3, #3
 8007c92:	75fb      	strb	r3, [r7, #23]
 8007c94:	e017      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	78db      	ldrb	r3, [r3, #3]
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d10a      	bne.n	8007cb8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	799b      	ldrb	r3, [r3, #6]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <USBH_ParseEPDesc+0x1ae>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	889b      	ldrh	r3, [r3, #4]
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d909      	bls.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	75fb      	strb	r3, [r7, #23]
 8007cb6:	e006      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	75fb      	strb	r3, [r7, #23]
 8007cbc:	e003      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	75fb      	strb	r3, [r7, #23]
 8007cc2:	e000      	b.n	8007cc6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cc4:	bf00      	nop
  }

  return status;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d120      	bne.n	8007d2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	1e9a      	subs	r2, r3, #2
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	bf28      	it	cs
 8007cf8:	4613      	movcs	r3, r2
 8007cfa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d02:	2300      	movs	r3, #0
 8007d04:	82fb      	strh	r3, [r7, #22]
 8007d06:	e00b      	b.n	8007d20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d08:	8afb      	ldrh	r3, [r7, #22]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d1a:	8afb      	ldrh	r3, [r7, #22]
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	82fb      	strh	r3, [r7, #22]
 8007d20:	8afa      	ldrh	r2, [r7, #22]
 8007d22:	8abb      	ldrh	r3, [r7, #20]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3ef      	bcc.n	8007d08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
  }
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d60:	68fb      	ldr	r3, [r7, #12]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	789b      	ldrb	r3, [r3, #2]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d002      	beq.n	8007d8e <USBH_CtlReq+0x20>
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d00f      	beq.n	8007dac <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d8c:	e027      	b.n	8007dde <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	88fa      	ldrh	r2, [r7, #6]
 8007d98:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2202      	movs	r2, #2
 8007da4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007da6:	2301      	movs	r3, #1
 8007da8:	75fb      	strb	r3, [r7, #23]
      break;
 8007daa:	e018      	b.n	8007dde <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f81b 	bl	8007de8 <USBH_HandleControl>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <USBH_CtlReq+0x54>
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d106      	bne.n	8007dd0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	761a      	strb	r2, [r3, #24]
      break;
 8007dce:	e005      	b.n	8007ddc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d102      	bne.n	8007ddc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	709a      	strb	r2, [r3, #2]
      break;
 8007ddc:	bf00      	nop
  }
  return status;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007df0:	2301      	movs	r3, #1
 8007df2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	7e1b      	ldrb	r3, [r3, #24]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	2b0a      	cmp	r3, #10
 8007e00:	f200 8156 	bhi.w	80080b0 <USBH_HandleControl+0x2c8>
 8007e04:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <USBH_HandleControl+0x24>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e39 	.word	0x08007e39
 8007e10:	08007e53 	.word	0x08007e53
 8007e14:	08007ebd 	.word	0x08007ebd
 8007e18:	08007ee3 	.word	0x08007ee3
 8007e1c:	08007f1b 	.word	0x08007f1b
 8007e20:	08007f45 	.word	0x08007f45
 8007e24:	08007f97 	.word	0x08007f97
 8007e28:	08007fb9 	.word	0x08007fb9
 8007e2c:	08007ff5 	.word	0x08007ff5
 8007e30:	0800801b 	.word	0x0800801b
 8007e34:	08008059 	.word	0x08008059
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f103 0110 	add.w	r1, r3, #16
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	795b      	ldrb	r3, [r3, #5]
 8007e42:	461a      	mov	r2, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f943 	bl	80080d0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	761a      	strb	r2, [r3, #24]
      break;
 8007e50:	e139      	b.n	80080c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	795b      	ldrb	r3, [r3, #5]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fcc5 	bl	80087e8 <USBH_LL_GetURBState>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d11e      	bne.n	8007ea6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7c1b      	ldrb	r3, [r3, #16]
 8007e6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e70:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8adb      	ldrh	r3, [r3, #22]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e7a:	7b7b      	ldrb	r3, [r7, #13]
 8007e7c:	2b80      	cmp	r3, #128	@ 0x80
 8007e7e:	d103      	bne.n	8007e88 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2203      	movs	r2, #3
 8007e84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e86:	e115      	b.n	80080b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2205      	movs	r2, #5
 8007e8c:	761a      	strb	r2, [r3, #24]
      break;
 8007e8e:	e111      	b.n	80080b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e90:	7b7b      	ldrb	r3, [r7, #13]
 8007e92:	2b80      	cmp	r3, #128	@ 0x80
 8007e94:	d103      	bne.n	8007e9e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2209      	movs	r2, #9
 8007e9a:	761a      	strb	r2, [r3, #24]
      break;
 8007e9c:	e10a      	b.n	80080b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	761a      	strb	r2, [r3, #24]
      break;
 8007ea4:	e106      	b.n	80080b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d003      	beq.n	8007eb4 <USBH_HandleControl+0xcc>
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	f040 8100 	bne.w	80080b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	220b      	movs	r2, #11
 8007eb8:	761a      	strb	r2, [r3, #24]
      break;
 8007eba:	e0fb      	b.n	80080b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6899      	ldr	r1, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	899a      	ldrh	r2, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f93a 	bl	800814e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2204      	movs	r2, #4
 8007ede:	761a      	strb	r2, [r3, #24]
      break;
 8007ee0:	e0f1      	b.n	80080c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	791b      	ldrb	r3, [r3, #4]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc7d 	bl	80087e8 <USBH_LL_GetURBState>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d102      	bne.n	8007efe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2209      	movs	r2, #9
 8007efc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b05      	cmp	r3, #5
 8007f02:	d102      	bne.n	8007f0a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f04:	2303      	movs	r3, #3
 8007f06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f08:	e0d6      	b.n	80080b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	f040 80d3 	bne.w	80080b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	220b      	movs	r2, #11
 8007f16:	761a      	strb	r2, [r3, #24]
      break;
 8007f18:	e0ce      	b.n	80080b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6899      	ldr	r1, [r3, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	899a      	ldrh	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	2001      	movs	r0, #1
 8007f28:	9000      	str	r0, [sp, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8ea 	bl	8008104 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2206      	movs	r2, #6
 8007f40:	761a      	strb	r2, [r3, #24]
      break;
 8007f42:	e0c0      	b.n	80080c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	795b      	ldrb	r3, [r3, #5]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fc4c 	bl	80087e8 <USBH_LL_GetURBState>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d103      	bne.n	8007f62 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f60:	e0ac      	b.n	80080bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b05      	cmp	r3, #5
 8007f66:	d105      	bne.n	8007f74 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	220c      	movs	r2, #12
 8007f6c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	73fb      	strb	r3, [r7, #15]
      break;
 8007f72:	e0a3      	b.n	80080bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d103      	bne.n	8007f82 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2205      	movs	r2, #5
 8007f7e:	761a      	strb	r2, [r3, #24]
      break;
 8007f80:	e09c      	b.n	80080bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	f040 8099 	bne.w	80080bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	220b      	movs	r2, #11
 8007f8e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f90:	2302      	movs	r3, #2
 8007f92:	73fb      	strb	r3, [r7, #15]
      break;
 8007f94:	e092      	b.n	80080bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	791b      	ldrb	r3, [r3, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f8d5 	bl	800814e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	761a      	strb	r2, [r3, #24]

      break;
 8007fb6:	e086      	b.n	80080c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	791b      	ldrb	r3, [r3, #4]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc12 	bl	80087e8 <USBH_LL_GetURBState>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d105      	bne.n	8007fda <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	220d      	movs	r2, #13
 8007fd2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fd8:	e072      	b.n	80080c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d103      	bne.n	8007fe8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	220b      	movs	r2, #11
 8007fe4:	761a      	strb	r2, [r3, #24]
      break;
 8007fe6:	e06b      	b.n	80080c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d168      	bne.n	80080c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff2:	e065      	b.n	80080c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	795b      	ldrb	r3, [r3, #5]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	9200      	str	r2, [sp, #0]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2100      	movs	r1, #0
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f87f 	bl	8008104 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	220a      	movs	r2, #10
 8008016:	761a      	strb	r2, [r3, #24]
      break;
 8008018:	e055      	b.n	80080c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	795b      	ldrb	r3, [r3, #5]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fbe1 	bl	80087e8 <USBH_LL_GetURBState>
 8008026:	4603      	mov	r3, r0
 8008028:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d105      	bne.n	800803c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	220d      	movs	r2, #13
 8008038:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800803a:	e043      	b.n	80080c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d103      	bne.n	800804a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2209      	movs	r2, #9
 8008046:	761a      	strb	r2, [r3, #24]
      break;
 8008048:	e03c      	b.n	80080c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b04      	cmp	r3, #4
 800804e:	d139      	bne.n	80080c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	220b      	movs	r2, #11
 8008054:	761a      	strb	r2, [r3, #24]
      break;
 8008056:	e035      	b.n	80080c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	7e5b      	ldrb	r3, [r3, #25]
 800805c:	3301      	adds	r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	765a      	strb	r2, [r3, #25]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	7e5b      	ldrb	r3, [r3, #25]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d806      	bhi.n	800807a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008078:	e025      	b.n	80080c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008080:	2106      	movs	r1, #6
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	795b      	ldrb	r3, [r3, #5]
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f90c 	bl	80082b0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	791b      	ldrb	r3, [r3, #4]
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f906 	bl	80082b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80080aa:	2302      	movs	r3, #2
 80080ac:	73fb      	strb	r3, [r7, #15]
      break;
 80080ae:	e00a      	b.n	80080c6 <USBH_HandleControl+0x2de>

    default:
      break;
 80080b0:	bf00      	nop
 80080b2:	e008      	b.n	80080c6 <USBH_HandleControl+0x2de>
      break;
 80080b4:	bf00      	nop
 80080b6:	e006      	b.n	80080c6 <USBH_HandleControl+0x2de>
      break;
 80080b8:	bf00      	nop
 80080ba:	e004      	b.n	80080c6 <USBH_HandleControl+0x2de>
      break;
 80080bc:	bf00      	nop
 80080be:	e002      	b.n	80080c6 <USBH_HandleControl+0x2de>
      break;
 80080c0:	bf00      	nop
 80080c2:	e000      	b.n	80080c6 <USBH_HandleControl+0x2de>
      break;
 80080c4:	bf00      	nop
  }

  return status;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080de:	79f9      	ldrb	r1, [r7, #7]
 80080e0:	2300      	movs	r3, #0
 80080e2:	9303      	str	r3, [sp, #12]
 80080e4:	2308      	movs	r3, #8
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	2300      	movs	r3, #0
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	2200      	movs	r2, #0
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 fb46 	bl	8008786 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af04      	add	r7, sp, #16
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4611      	mov	r1, r2
 8008110:	461a      	mov	r2, r3
 8008112:	460b      	mov	r3, r1
 8008114:	80fb      	strh	r3, [r7, #6]
 8008116:	4613      	mov	r3, r2
 8008118:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008128:	7979      	ldrb	r1, [r7, #5]
 800812a:	7e3b      	ldrb	r3, [r7, #24]
 800812c:	9303      	str	r3, [sp, #12]
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	9302      	str	r3, [sp, #8]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	2301      	movs	r3, #1
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	2300      	movs	r3, #0
 800813c:	2200      	movs	r2, #0
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fb21 	bl	8008786 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b088      	sub	sp, #32
 8008152:	af04      	add	r7, sp, #16
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	4611      	mov	r1, r2
 800815a:	461a      	mov	r2, r3
 800815c:	460b      	mov	r3, r1
 800815e:	80fb      	strh	r3, [r7, #6]
 8008160:	4613      	mov	r3, r2
 8008162:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008164:	7979      	ldrb	r1, [r7, #5]
 8008166:	2300      	movs	r3, #0
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	9302      	str	r3, [sp, #8]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	2301      	movs	r3, #1
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	2300      	movs	r3, #0
 8008178:	2201      	movs	r2, #1
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 fb03 	bl	8008786 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008180:	2300      	movs	r3, #0

}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b088      	sub	sp, #32
 800818e:	af04      	add	r7, sp, #16
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	4611      	mov	r1, r2
 8008196:	461a      	mov	r2, r3
 8008198:	460b      	mov	r3, r1
 800819a:	80fb      	strh	r3, [r7, #6]
 800819c:	4613      	mov	r3, r2
 800819e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081ae:	7979      	ldrb	r1, [r7, #5]
 80081b0:	7e3b      	ldrb	r3, [r7, #24]
 80081b2:	9303      	str	r3, [sp, #12]
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	9302      	str	r3, [sp, #8]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	2301      	movs	r3, #1
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	2302      	movs	r3, #2
 80081c2:	2200      	movs	r2, #0
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fade 	bl	8008786 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af04      	add	r7, sp, #16
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4611      	mov	r1, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	460b      	mov	r3, r1
 80081e4:	80fb      	strh	r3, [r7, #6]
 80081e6:	4613      	mov	r3, r2
 80081e8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081ea:	7979      	ldrb	r1, [r7, #5]
 80081ec:	2300      	movs	r3, #0
 80081ee:	9303      	str	r3, [sp, #12]
 80081f0:	88fb      	ldrh	r3, [r7, #6]
 80081f2:	9302      	str	r3, [sp, #8]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	2301      	movs	r3, #1
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	2302      	movs	r3, #2
 80081fe:	2201      	movs	r2, #1
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fac0 	bl	8008786 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af04      	add	r7, sp, #16
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	4608      	mov	r0, r1
 800821a:	4611      	mov	r1, r2
 800821c:	461a      	mov	r2, r3
 800821e:	4603      	mov	r3, r0
 8008220:	70fb      	strb	r3, [r7, #3]
 8008222:	460b      	mov	r3, r1
 8008224:	70bb      	strb	r3, [r7, #2]
 8008226:	4613      	mov	r3, r2
 8008228:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800822a:	7878      	ldrb	r0, [r7, #1]
 800822c:	78ba      	ldrb	r2, [r7, #2]
 800822e:	78f9      	ldrb	r1, [r7, #3]
 8008230:	8b3b      	ldrh	r3, [r7, #24]
 8008232:	9302      	str	r3, [sp, #8]
 8008234:	7d3b      	ldrb	r3, [r7, #20]
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	7c3b      	ldrb	r3, [r7, #16]
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	4603      	mov	r3, r0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa53 	bl	80086ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa72 	bl	8008748 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f836 	bl	80082ec <USBH_GetFreePipe>
 8008280:	4603      	mov	r3, r0
 8008282:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008284:	89fb      	ldrh	r3, [r7, #14]
 8008286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800828a:	4293      	cmp	r3, r2
 800828c:	d00a      	beq.n	80082a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	89fb      	ldrh	r3, [r7, #14]
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	33e0      	adds	r3, #224	@ 0xe0
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80082a4:	89fb      	ldrh	r3, [r7, #14]
 80082a6:	b2db      	uxtb	r3, r3
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	2b0f      	cmp	r3, #15
 80082c0:	d80d      	bhi.n	80082de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	33e0      	adds	r3, #224	@ 0xe0
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	33e0      	adds	r3, #224	@ 0xe0
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	440b      	add	r3, r1
 80082dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
 80082fc:	e00f      	b.n	800831e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	33e0      	adds	r3, #224	@ 0xe0
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	b29b      	uxth	r3, r3
 8008316:	e007      	b.n	8008328 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	3301      	adds	r3, #1
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b0f      	cmp	r3, #15
 8008322:	d9ec      	bls.n	80082fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008324:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008338:	2201      	movs	r2, #1
 800833a:	490e      	ldr	r1, [pc, #56]	@ (8008374 <MX_USB_HOST_Init+0x40>)
 800833c:	480e      	ldr	r0, [pc, #56]	@ (8008378 <MX_USB_HOST_Init+0x44>)
 800833e:	f7fe fb15 	bl	800696c <USBH_Init>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008348:	f7f8 fb5a 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800834c:	490b      	ldr	r1, [pc, #44]	@ (800837c <MX_USB_HOST_Init+0x48>)
 800834e:	480a      	ldr	r0, [pc, #40]	@ (8008378 <MX_USB_HOST_Init+0x44>)
 8008350:	f7fe fbb9 	bl	8006ac6 <USBH_RegisterClass>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800835a:	f7f8 fb51 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800835e:	4806      	ldr	r0, [pc, #24]	@ (8008378 <MX_USB_HOST_Init+0x44>)
 8008360:	f7fe fc3d 	bl	8006bde <USBH_Start>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800836a:	f7f8 fb49 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800836e:	bf00      	nop
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	08008395 	.word	0x08008395
 8008378:	20000198 	.word	0x20000198
 800837c:	20000010 	.word	0x20000010

08008380 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008384:	4802      	ldr	r0, [pc, #8]	@ (8008390 <MX_USB_HOST_Process+0x10>)
 8008386:	f7fe fc3b 	bl	8006c00 <USBH_Process>
}
 800838a:	bf00      	nop
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000198 	.word	0x20000198

08008394 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d819      	bhi.n	80083dc <USBH_UserProcess+0x48>
 80083a8:	a201      	add	r2, pc, #4	@ (adr r2, 80083b0 <USBH_UserProcess+0x1c>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	080083cd 	.word	0x080083cd
 80083b8:	080083dd 	.word	0x080083dd
 80083bc:	080083d5 	.word	0x080083d5
 80083c0:	080083c5 	.word	0x080083c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083c4:	4b09      	ldr	r3, [pc, #36]	@ (80083ec <USBH_UserProcess+0x58>)
 80083c6:	2203      	movs	r2, #3
 80083c8:	701a      	strb	r2, [r3, #0]
  break;
 80083ca:	e008      	b.n	80083de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083cc:	4b07      	ldr	r3, [pc, #28]	@ (80083ec <USBH_UserProcess+0x58>)
 80083ce:	2202      	movs	r2, #2
 80083d0:	701a      	strb	r2, [r3, #0]
  break;
 80083d2:	e004      	b.n	80083de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083d4:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <USBH_UserProcess+0x58>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	701a      	strb	r2, [r3, #0]
  break;
 80083da:	e000      	b.n	80083de <USBH_UserProcess+0x4a>

  default:
  break;
 80083dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	20000570 	.word	0x20000570

080083f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08a      	sub	sp, #40	@ 0x28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	605a      	str	r2, [r3, #4]
 8008402:	609a      	str	r2, [r3, #8]
 8008404:	60da      	str	r2, [r3, #12]
 8008406:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008410:	d147      	bne.n	80084a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008412:	2300      	movs	r3, #0
 8008414:	613b      	str	r3, [r7, #16]
 8008416:	4b25      	ldr	r3, [pc, #148]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 8008418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800841a:	4a24      	ldr	r2, [pc, #144]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 800841c:	f043 0301 	orr.w	r3, r3, #1
 8008420:	6313      	str	r3, [r2, #48]	@ 0x30
 8008422:	4b22      	ldr	r3, [pc, #136]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 8008424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800842e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008434:	2300      	movs	r3, #0
 8008436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008438:	2300      	movs	r3, #0
 800843a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	4619      	mov	r1, r3
 8008442:	481b      	ldr	r0, [pc, #108]	@ (80084b0 <HAL_HCD_MspInit+0xc0>)
 8008444:	f7f8 fe6e 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008448:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800844c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800844e:	2302      	movs	r3, #2
 8008450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008452:	2300      	movs	r3, #0
 8008454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008456:	2300      	movs	r3, #0
 8008458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800845a:	230a      	movs	r3, #10
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800845e:	f107 0314 	add.w	r3, r7, #20
 8008462:	4619      	mov	r1, r3
 8008464:	4812      	ldr	r0, [pc, #72]	@ (80084b0 <HAL_HCD_MspInit+0xc0>)
 8008466:	f7f8 fe5d 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800846a:	4b10      	ldr	r3, [pc, #64]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 800846c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800846e:	4a0f      	ldr	r2, [pc, #60]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 8008470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008474:	6353      	str	r3, [r2, #52]	@ 0x34
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	4b0c      	ldr	r3, [pc, #48]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 800847c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847e:	4a0b      	ldr	r2, [pc, #44]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 8008480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008484:	6453      	str	r3, [r2, #68]	@ 0x44
 8008486:	4b09      	ldr	r3, [pc, #36]	@ (80084ac <HAL_HCD_MspInit+0xbc>)
 8008488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008492:	2200      	movs	r2, #0
 8008494:	2100      	movs	r1, #0
 8008496:	2043      	movs	r0, #67	@ 0x43
 8008498:	f7f8 fe0d 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800849c:	2043      	movs	r0, #67	@ 0x43
 800849e:	f7f8 fe26 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084a2:	bf00      	nop
 80084a4:	3728      	adds	r7, #40	@ 0x28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	40023800 	.word	0x40023800
 80084b0:	40020000 	.word	0x40020000

080084b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe ff73 	bl	80073ae <USBH_LL_IncTimer>
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe ffab 	bl	800743a <USBH_LL_Connect>
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe ffb4 	bl	8007468 <USBH_LL_Disconnect>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
 8008514:	4613      	mov	r3, r2
 8008516:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe ff65 	bl	8007402 <USBH_LL_PortEnabled>
}
 8008538:	bf00      	nop
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe ff65 	bl	800741e <USBH_LL_PortDisabled>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800856a:	2b01      	cmp	r3, #1
 800856c:	d12a      	bne.n	80085c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800856e:	4a18      	ldr	r2, [pc, #96]	@ (80085d0 <USBH_LL_Init+0x74>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a15      	ldr	r2, [pc, #84]	@ (80085d0 <USBH_LL_Init+0x74>)
 800857a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800857e:	4b14      	ldr	r3, [pc, #80]	@ (80085d0 <USBH_LL_Init+0x74>)
 8008580:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008584:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008586:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <USBH_LL_Init+0x74>)
 8008588:	2208      	movs	r2, #8
 800858a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800858c:	4b10      	ldr	r3, [pc, #64]	@ (80085d0 <USBH_LL_Init+0x74>)
 800858e:	2201      	movs	r2, #1
 8008590:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008592:	4b0f      	ldr	r3, [pc, #60]	@ (80085d0 <USBH_LL_Init+0x74>)
 8008594:	2200      	movs	r2, #0
 8008596:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008598:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <USBH_LL_Init+0x74>)
 800859a:	2202      	movs	r2, #2
 800859c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800859e:	4b0c      	ldr	r3, [pc, #48]	@ (80085d0 <USBH_LL_Init+0x74>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085a4:	480a      	ldr	r0, [pc, #40]	@ (80085d0 <USBH_LL_Init+0x74>)
 80085a6:	f7f8 ff8a 	bl	80014be <HAL_HCD_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80085b0:	f7f8 fa26 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085b4:	4806      	ldr	r0, [pc, #24]	@ (80085d0 <USBH_LL_Init+0x74>)
 80085b6:	f7f9 fbeb 	bl	8001d90 <HAL_HCD_GetCurrentFrame>
 80085ba:	4603      	mov	r3, r0
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fe fee6 	bl	8007390 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000574 	.word	0x20000574

080085d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f9 fb58 	bl	8001ca0 <HAL_HCD_Start>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f95e 	bl	80088b8 <USBH_Get_USB_Status>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008600:	7bbb      	ldrb	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008620:	4618      	mov	r0, r3
 8008622:	f7f9 fb60 	bl	8001ce6 <HAL_HCD_Stop>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f943 	bl	80088b8 <USBH_Get_USB_Status>
 8008632:	4603      	mov	r3, r0
 8008634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008636:	7bbb      	ldrb	r3, [r7, #14]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008652:	4618      	mov	r0, r3
 8008654:	f7f9 fbaa 	bl	8001dac <HAL_HCD_GetCurrentSpeed>
 8008658:	4603      	mov	r3, r0
 800865a:	2b02      	cmp	r3, #2
 800865c:	d00c      	beq.n	8008678 <USBH_LL_GetSpeed+0x38>
 800865e:	2b02      	cmp	r3, #2
 8008660:	d80d      	bhi.n	800867e <USBH_LL_GetSpeed+0x3e>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <USBH_LL_GetSpeed+0x2c>
 8008666:	2b01      	cmp	r3, #1
 8008668:	d003      	beq.n	8008672 <USBH_LL_GetSpeed+0x32>
 800866a:	e008      	b.n	800867e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
    break;
 8008670:	e008      	b.n	8008684 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008672:	2301      	movs	r3, #1
 8008674:	73fb      	strb	r3, [r7, #15]
    break;
 8008676:	e005      	b.n	8008684 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008678:	2302      	movs	r3, #2
 800867a:	73fb      	strb	r3, [r7, #15]
    break;
 800867c:	e002      	b.n	8008684 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800867e:	2301      	movs	r3, #1
 8008680:	73fb      	strb	r3, [r7, #15]
    break;
 8008682:	bf00      	nop
  }
  return  speed;
 8008684:	7bfb      	ldrb	r3, [r7, #15]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7f9 fb3b 	bl	8001d20 <HAL_HCD_ResetPort>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 f901 	bl	80088b8 <USBH_Get_USB_Status>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086d6:	78fa      	ldrb	r2, [r7, #3]
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f9 fb43 	bl	8001d66 <HAL_HCD_HC_GetXferCount>
 80086e0:	4603      	mov	r3, r0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086ea:	b590      	push	{r4, r7, lr}
 80086ec:	b089      	sub	sp, #36	@ 0x24
 80086ee:	af04      	add	r7, sp, #16
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	461a      	mov	r2, r3
 80086f8:	4603      	mov	r3, r0
 80086fa:	70fb      	strb	r3, [r7, #3]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70bb      	strb	r3, [r7, #2]
 8008700:	4613      	mov	r3, r2
 8008702:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008712:	787c      	ldrb	r4, [r7, #1]
 8008714:	78ba      	ldrb	r2, [r7, #2]
 8008716:	78f9      	ldrb	r1, [r7, #3]
 8008718:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	4623      	mov	r3, r4
 800872a:	f7f8 ff2f 	bl	800158c <HAL_HCD_HC_Init>
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f8bf 	bl	80088b8 <USBH_Get_USB_Status>
 800873a:	4603      	mov	r3, r0
 800873c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	bd90      	pop	{r4, r7, pc}

08008748 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	4611      	mov	r1, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f7f8 ffc8 	bl	80016fc <HAL_HCD_HC_Halt>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	4618      	mov	r0, r3
 8008774:	f000 f8a0 	bl	80088b8 <USBH_Get_USB_Status>
 8008778:	4603      	mov	r3, r0
 800877a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800877c:	7bbb      	ldrb	r3, [r7, #14]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008786:	b590      	push	{r4, r7, lr}
 8008788:	b089      	sub	sp, #36	@ 0x24
 800878a:	af04      	add	r7, sp, #16
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	4608      	mov	r0, r1
 8008790:	4611      	mov	r1, r2
 8008792:	461a      	mov	r2, r3
 8008794:	4603      	mov	r3, r0
 8008796:	70fb      	strb	r3, [r7, #3]
 8008798:	460b      	mov	r3, r1
 800879a:	70bb      	strb	r3, [r7, #2]
 800879c:	4613      	mov	r3, r2
 800879e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80087ae:	787c      	ldrb	r4, [r7, #1]
 80087b0:	78ba      	ldrb	r2, [r7, #2]
 80087b2:	78f9      	ldrb	r1, [r7, #3]
 80087b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087b8:	9303      	str	r3, [sp, #12]
 80087ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087bc:	9302      	str	r3, [sp, #8]
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	4623      	mov	r3, r4
 80087ca:	f7f8 ffbb 	bl	8001744 <HAL_HCD_HC_SubmitRequest>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f86f 	bl	80088b8 <USBH_Get_USB_Status>
 80087da:	4603      	mov	r3, r0
 80087dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087de:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd90      	pop	{r4, r7, pc}

080087e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f7f9 fa9c 	bl	8001d3c <HAL_HCD_HC_GetURBState>
 8008804:	4603      	mov	r3, r0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008820:	2b01      	cmp	r3, #1
 8008822:	d103      	bne.n	800882c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f872 	bl	8008910 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800882c:	20c8      	movs	r0, #200	@ 0xc8
 800882e:	f7f8 fb43 	bl	8000eb8 <HAL_Delay>
  return USBH_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
 8008848:	4613      	mov	r3, r2
 800884a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008852:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	4613      	mov	r3, r2
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	3317      	adds	r3, #23
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800886a:	78fa      	ldrb	r2, [r7, #3]
 800886c:	68f9      	ldr	r1, [r7, #12]
 800886e:	4613      	mov	r3, r2
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	333c      	adds	r3, #60	@ 0x3c
 800887a:	78ba      	ldrb	r2, [r7, #2]
 800887c:	701a      	strb	r2, [r3, #0]
 800887e:	e009      	b.n	8008894 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	4613      	mov	r3, r2
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	333d      	adds	r3, #61	@ 0x3d
 8008890:	78ba      	ldrb	r2, [r7, #2]
 8008892:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7f8 fb04 	bl	8000eb8 <HAL_Delay>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d817      	bhi.n	80088fc <USBH_Get_USB_Status+0x44>
 80088cc:	a201      	add	r2, pc, #4	@ (adr r2, 80088d4 <USBH_Get_USB_Status+0x1c>)
 80088ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d2:	bf00      	nop
 80088d4:	080088e5 	.word	0x080088e5
 80088d8:	080088eb 	.word	0x080088eb
 80088dc:	080088f1 	.word	0x080088f1
 80088e0:	080088f7 	.word	0x080088f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
    break;
 80088e8:	e00b      	b.n	8008902 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088ea:	2302      	movs	r3, #2
 80088ec:	73fb      	strb	r3, [r7, #15]
    break;
 80088ee:	e008      	b.n	8008902 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
    break;
 80088f4:	e005      	b.n	8008902 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088f6:	2302      	movs	r3, #2
 80088f8:	73fb      	strb	r3, [r7, #15]
    break;
 80088fa:	e002      	b.n	8008902 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088fc:	2302      	movs	r3, #2
 80088fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008900:	bf00      	nop
  }
  return usb_status;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d102      	bne.n	800892a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]
 8008928:	e001      	b.n	800892e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	461a      	mov	r2, r3
 8008932:	2101      	movs	r1, #1
 8008934:	4803      	ldr	r0, [pc, #12]	@ (8008944 <MX_DriverVbusFS+0x34>)
 8008936:	f7f8 fda9 	bl	800148c <HAL_GPIO_WritePin>
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	40020800 	.word	0x40020800

08008948 <malloc>:
 8008948:	4b02      	ldr	r3, [pc, #8]	@ (8008954 <malloc+0xc>)
 800894a:	4601      	mov	r1, r0
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	f000 b82d 	b.w	80089ac <_malloc_r>
 8008952:	bf00      	nop
 8008954:	20000030 	.word	0x20000030

08008958 <free>:
 8008958:	4b02      	ldr	r3, [pc, #8]	@ (8008964 <free+0xc>)
 800895a:	4601      	mov	r1, r0
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f000 b8f5 	b.w	8008b4c <_free_r>
 8008962:	bf00      	nop
 8008964:	20000030 	.word	0x20000030

08008968 <sbrk_aligned>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4e0f      	ldr	r6, [pc, #60]	@ (80089a8 <sbrk_aligned+0x40>)
 800896c:	460c      	mov	r4, r1
 800896e:	6831      	ldr	r1, [r6, #0]
 8008970:	4605      	mov	r5, r0
 8008972:	b911      	cbnz	r1, 800897a <sbrk_aligned+0x12>
 8008974:	f000 f8ae 	bl	8008ad4 <_sbrk_r>
 8008978:	6030      	str	r0, [r6, #0]
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f000 f8a9 	bl	8008ad4 <_sbrk_r>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d103      	bne.n	800898e <sbrk_aligned+0x26>
 8008986:	f04f 34ff 	mov.w	r4, #4294967295
 800898a:	4620      	mov	r0, r4
 800898c:	bd70      	pop	{r4, r5, r6, pc}
 800898e:	1cc4      	adds	r4, r0, #3
 8008990:	f024 0403 	bic.w	r4, r4, #3
 8008994:	42a0      	cmp	r0, r4
 8008996:	d0f8      	beq.n	800898a <sbrk_aligned+0x22>
 8008998:	1a21      	subs	r1, r4, r0
 800899a:	4628      	mov	r0, r5
 800899c:	f000 f89a 	bl	8008ad4 <_sbrk_r>
 80089a0:	3001      	adds	r0, #1
 80089a2:	d1f2      	bne.n	800898a <sbrk_aligned+0x22>
 80089a4:	e7ef      	b.n	8008986 <sbrk_aligned+0x1e>
 80089a6:	bf00      	nop
 80089a8:	20000954 	.word	0x20000954

080089ac <_malloc_r>:
 80089ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b0:	1ccd      	adds	r5, r1, #3
 80089b2:	f025 0503 	bic.w	r5, r5, #3
 80089b6:	3508      	adds	r5, #8
 80089b8:	2d0c      	cmp	r5, #12
 80089ba:	bf38      	it	cc
 80089bc:	250c      	movcc	r5, #12
 80089be:	2d00      	cmp	r5, #0
 80089c0:	4606      	mov	r6, r0
 80089c2:	db01      	blt.n	80089c8 <_malloc_r+0x1c>
 80089c4:	42a9      	cmp	r1, r5
 80089c6:	d904      	bls.n	80089d2 <_malloc_r+0x26>
 80089c8:	230c      	movs	r3, #12
 80089ca:	6033      	str	r3, [r6, #0]
 80089cc:	2000      	movs	r0, #0
 80089ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008aa8 <_malloc_r+0xfc>
 80089d6:	f000 f869 	bl	8008aac <__malloc_lock>
 80089da:	f8d8 3000 	ldr.w	r3, [r8]
 80089de:	461c      	mov	r4, r3
 80089e0:	bb44      	cbnz	r4, 8008a34 <_malloc_r+0x88>
 80089e2:	4629      	mov	r1, r5
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff ffbf 	bl	8008968 <sbrk_aligned>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	4604      	mov	r4, r0
 80089ee:	d158      	bne.n	8008aa2 <_malloc_r+0xf6>
 80089f0:	f8d8 4000 	ldr.w	r4, [r8]
 80089f4:	4627      	mov	r7, r4
 80089f6:	2f00      	cmp	r7, #0
 80089f8:	d143      	bne.n	8008a82 <_malloc_r+0xd6>
 80089fa:	2c00      	cmp	r4, #0
 80089fc:	d04b      	beq.n	8008a96 <_malloc_r+0xea>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	4639      	mov	r1, r7
 8008a02:	4630      	mov	r0, r6
 8008a04:	eb04 0903 	add.w	r9, r4, r3
 8008a08:	f000 f864 	bl	8008ad4 <_sbrk_r>
 8008a0c:	4581      	cmp	r9, r0
 8008a0e:	d142      	bne.n	8008a96 <_malloc_r+0xea>
 8008a10:	6821      	ldr	r1, [r4, #0]
 8008a12:	1a6d      	subs	r5, r5, r1
 8008a14:	4629      	mov	r1, r5
 8008a16:	4630      	mov	r0, r6
 8008a18:	f7ff ffa6 	bl	8008968 <sbrk_aligned>
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d03a      	beq.n	8008a96 <_malloc_r+0xea>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	442b      	add	r3, r5
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	f8d8 3000 	ldr.w	r3, [r8]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	bb62      	cbnz	r2, 8008a88 <_malloc_r+0xdc>
 8008a2e:	f8c8 7000 	str.w	r7, [r8]
 8008a32:	e00f      	b.n	8008a54 <_malloc_r+0xa8>
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	1b52      	subs	r2, r2, r5
 8008a38:	d420      	bmi.n	8008a7c <_malloc_r+0xd0>
 8008a3a:	2a0b      	cmp	r2, #11
 8008a3c:	d917      	bls.n	8008a6e <_malloc_r+0xc2>
 8008a3e:	1961      	adds	r1, r4, r5
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	6025      	str	r5, [r4, #0]
 8008a44:	bf18      	it	ne
 8008a46:	6059      	strne	r1, [r3, #4]
 8008a48:	6863      	ldr	r3, [r4, #4]
 8008a4a:	bf08      	it	eq
 8008a4c:	f8c8 1000 	streq.w	r1, [r8]
 8008a50:	5162      	str	r2, [r4, r5]
 8008a52:	604b      	str	r3, [r1, #4]
 8008a54:	4630      	mov	r0, r6
 8008a56:	f000 f82f 	bl	8008ab8 <__malloc_unlock>
 8008a5a:	f104 000b 	add.w	r0, r4, #11
 8008a5e:	1d23      	adds	r3, r4, #4
 8008a60:	f020 0007 	bic.w	r0, r0, #7
 8008a64:	1ac2      	subs	r2, r0, r3
 8008a66:	bf1c      	itt	ne
 8008a68:	1a1b      	subne	r3, r3, r0
 8008a6a:	50a3      	strne	r3, [r4, r2]
 8008a6c:	e7af      	b.n	80089ce <_malloc_r+0x22>
 8008a6e:	6862      	ldr	r2, [r4, #4]
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	bf0c      	ite	eq
 8008a74:	f8c8 2000 	streq.w	r2, [r8]
 8008a78:	605a      	strne	r2, [r3, #4]
 8008a7a:	e7eb      	b.n	8008a54 <_malloc_r+0xa8>
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	6864      	ldr	r4, [r4, #4]
 8008a80:	e7ae      	b.n	80089e0 <_malloc_r+0x34>
 8008a82:	463c      	mov	r4, r7
 8008a84:	687f      	ldr	r7, [r7, #4]
 8008a86:	e7b6      	b.n	80089f6 <_malloc_r+0x4a>
 8008a88:	461a      	mov	r2, r3
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d1fb      	bne.n	8008a88 <_malloc_r+0xdc>
 8008a90:	2300      	movs	r3, #0
 8008a92:	6053      	str	r3, [r2, #4]
 8008a94:	e7de      	b.n	8008a54 <_malloc_r+0xa8>
 8008a96:	230c      	movs	r3, #12
 8008a98:	6033      	str	r3, [r6, #0]
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f80c 	bl	8008ab8 <__malloc_unlock>
 8008aa0:	e794      	b.n	80089cc <_malloc_r+0x20>
 8008aa2:	6005      	str	r5, [r0, #0]
 8008aa4:	e7d6      	b.n	8008a54 <_malloc_r+0xa8>
 8008aa6:	bf00      	nop
 8008aa8:	20000958 	.word	0x20000958

08008aac <__malloc_lock>:
 8008aac:	4801      	ldr	r0, [pc, #4]	@ (8008ab4 <__malloc_lock+0x8>)
 8008aae:	f000 b84b 	b.w	8008b48 <__retarget_lock_acquire_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	20000a98 	.word	0x20000a98

08008ab8 <__malloc_unlock>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	@ (8008ac0 <__malloc_unlock+0x8>)
 8008aba:	f000 b846 	b.w	8008b4a <__retarget_lock_release_recursive>
 8008abe:	bf00      	nop
 8008ac0:	20000a98 	.word	0x20000a98

08008ac4 <memset>:
 8008ac4:	4402      	add	r2, r0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d100      	bne.n	8008ace <memset+0xa>
 8008acc:	4770      	bx	lr
 8008ace:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad2:	e7f9      	b.n	8008ac8 <memset+0x4>

08008ad4 <_sbrk_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d06      	ldr	r5, [pc, #24]	@ (8008af0 <_sbrk_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7f8 f906 	bl	8000cf0 <_sbrk>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_sbrk_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_sbrk_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20000a94 	.word	0x20000a94

08008af4 <__errno>:
 8008af4:	4b01      	ldr	r3, [pc, #4]	@ (8008afc <__errno+0x8>)
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	20000030 	.word	0x20000030

08008b00 <__libc_init_array>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	4d0d      	ldr	r5, [pc, #52]	@ (8008b38 <__libc_init_array+0x38>)
 8008b04:	4c0d      	ldr	r4, [pc, #52]	@ (8008b3c <__libc_init_array+0x3c>)
 8008b06:	1b64      	subs	r4, r4, r5
 8008b08:	10a4      	asrs	r4, r4, #2
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	d109      	bne.n	8008b24 <__libc_init_array+0x24>
 8008b10:	4d0b      	ldr	r5, [pc, #44]	@ (8008b40 <__libc_init_array+0x40>)
 8008b12:	4c0c      	ldr	r4, [pc, #48]	@ (8008b44 <__libc_init_array+0x44>)
 8008b14:	f000 f864 	bl	8008be0 <_init>
 8008b18:	1b64      	subs	r4, r4, r5
 8008b1a:	10a4      	asrs	r4, r4, #2
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	42a6      	cmp	r6, r4
 8008b20:	d105      	bne.n	8008b2e <__libc_init_array+0x2e>
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b28:	4798      	blx	r3
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	e7ee      	b.n	8008b0c <__libc_init_array+0xc>
 8008b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b32:	4798      	blx	r3
 8008b34:	3601      	adds	r6, #1
 8008b36:	e7f2      	b.n	8008b1e <__libc_init_array+0x1e>
 8008b38:	08008c1c 	.word	0x08008c1c
 8008b3c:	08008c1c 	.word	0x08008c1c
 8008b40:	08008c1c 	.word	0x08008c1c
 8008b44:	08008c20 	.word	0x08008c20

08008b48 <__retarget_lock_acquire_recursive>:
 8008b48:	4770      	bx	lr

08008b4a <__retarget_lock_release_recursive>:
 8008b4a:	4770      	bx	lr

08008b4c <_free_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4605      	mov	r5, r0
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d041      	beq.n	8008bd8 <_free_r+0x8c>
 8008b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b58:	1f0c      	subs	r4, r1, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bfb8      	it	lt
 8008b5e:	18e4      	addlt	r4, r4, r3
 8008b60:	f7ff ffa4 	bl	8008aac <__malloc_lock>
 8008b64:	4a1d      	ldr	r2, [pc, #116]	@ (8008bdc <_free_r+0x90>)
 8008b66:	6813      	ldr	r3, [r2, #0]
 8008b68:	b933      	cbnz	r3, 8008b78 <_free_r+0x2c>
 8008b6a:	6063      	str	r3, [r4, #4]
 8008b6c:	6014      	str	r4, [r2, #0]
 8008b6e:	4628      	mov	r0, r5
 8008b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b74:	f7ff bfa0 	b.w	8008ab8 <__malloc_unlock>
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	d908      	bls.n	8008b8e <_free_r+0x42>
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	1821      	adds	r1, r4, r0
 8008b80:	428b      	cmp	r3, r1
 8008b82:	bf01      	itttt	eq
 8008b84:	6819      	ldreq	r1, [r3, #0]
 8008b86:	685b      	ldreq	r3, [r3, #4]
 8008b88:	1809      	addeq	r1, r1, r0
 8008b8a:	6021      	streq	r1, [r4, #0]
 8008b8c:	e7ed      	b.n	8008b6a <_free_r+0x1e>
 8008b8e:	461a      	mov	r2, r3
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	b10b      	cbz	r3, 8008b98 <_free_r+0x4c>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d9fa      	bls.n	8008b8e <_free_r+0x42>
 8008b98:	6811      	ldr	r1, [r2, #0]
 8008b9a:	1850      	adds	r0, r2, r1
 8008b9c:	42a0      	cmp	r0, r4
 8008b9e:	d10b      	bne.n	8008bb8 <_free_r+0x6c>
 8008ba0:	6820      	ldr	r0, [r4, #0]
 8008ba2:	4401      	add	r1, r0
 8008ba4:	1850      	adds	r0, r2, r1
 8008ba6:	4283      	cmp	r3, r0
 8008ba8:	6011      	str	r1, [r2, #0]
 8008baa:	d1e0      	bne.n	8008b6e <_free_r+0x22>
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	6053      	str	r3, [r2, #4]
 8008bb2:	4408      	add	r0, r1
 8008bb4:	6010      	str	r0, [r2, #0]
 8008bb6:	e7da      	b.n	8008b6e <_free_r+0x22>
 8008bb8:	d902      	bls.n	8008bc0 <_free_r+0x74>
 8008bba:	230c      	movs	r3, #12
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	e7d6      	b.n	8008b6e <_free_r+0x22>
 8008bc0:	6820      	ldr	r0, [r4, #0]
 8008bc2:	1821      	adds	r1, r4, r0
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf04      	itt	eq
 8008bc8:	6819      	ldreq	r1, [r3, #0]
 8008bca:	685b      	ldreq	r3, [r3, #4]
 8008bcc:	6063      	str	r3, [r4, #4]
 8008bce:	bf04      	itt	eq
 8008bd0:	1809      	addeq	r1, r1, r0
 8008bd2:	6021      	streq	r1, [r4, #0]
 8008bd4:	6054      	str	r4, [r2, #4]
 8008bd6:	e7ca      	b.n	8008b6e <_free_r+0x22>
 8008bd8:	bd38      	pop	{r3, r4, r5, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000958 	.word	0x20000958

08008be0 <_init>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr

08008bec <_fini>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr

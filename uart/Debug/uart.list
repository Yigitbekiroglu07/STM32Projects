
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009214  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b8  080093b8  0000b084  2**0
                  CONTENTS
  4 .ARM          00000008  080093b8  080093b8  0000a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c0  080093c0  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c0  080093c0  0000a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080093c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b084  2**0
                  CONTENTS
 10 .bss          00000a64  20000084  20000084  0000b084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae8  20000ae8  0000b084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d5c  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a82  00000000  00000000  00022e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00026898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecf  00000000  00000000  00027bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023785  00000000  00000000  00028a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a88b  00000000  00000000  0004c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd78  00000000  00000000  00066aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013481f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053f8  00000000  00000000  00134864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00139c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009384 	.word	0x08009384

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08009384 	.word	0x08009384

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc78 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f820 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f944 	bl	8000750 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f886 	bl	80005d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f8b2 	bl	8000634 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8de 	bl	8000690 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f008 fb24 	bl	8008b20 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f910 	bl	80006fc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004dc:	f008 fb46 	bl	8008b6c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);

    HAL_UART_Transmit(&huart2, data_tx, 10, 1000);
 80004e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004e4:	220a      	movs	r2, #10
 80004e6:	4905      	ldr	r1, [pc, #20]	@ (80004fc <main+0x44>)
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <main+0x48>)
 80004ea:	f004 fd70 	bl	8004fce <HAL_UART_Transmit>
    // HAL_Delay(1000);
    // HAL_UART_Receive(&huart2, data_rx, 8, 1000);
    HAL_Delay(1000);
 80004ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f2:	f000 fccf 	bl	8000e94 <HAL_Delay>
    MX_USB_HOST_Process();
 80004f6:	bf00      	nop
 80004f8:	e7f0      	b.n	80004dc <main+0x24>
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000194 	.word	0x20000194

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	@ 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	@ 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f008 fea8 	bl	8009268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	@ (80005d0 <SystemClock_Config+0xcc>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	@ 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	@ (80005d4 <SystemClock_Config+0xd0>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000568:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000574:	2308      	movs	r3, #8
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000578:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fe6c 	bl	8004268 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 f9d9 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2302      	movs	r3, #2
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2105      	movs	r1, #5
 80005b8:	4618      	mov	r0, r3
 80005ba:	f004 f8cd 	bl	8004758 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f9c2 	bl	800094c <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	@ 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	@ (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f003 f843 	bl	80036a0 <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f994 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000a0 	.word	0x200000a0
 800062c:	40005400 	.word	0x40005400
 8000630:	000186a0 	.word	0x000186a0

08000634 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_I2S3_Init+0x54>)
 800063a:	4a14      	ldr	r2, [pc, #80]	@ (800068c <MX_I2S3_Init+0x58>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_I2S3_Init+0x54>)
 8000640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000644:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <MX_I2S3_Init+0x54>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800064c:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_I2S3_Init+0x54>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000658:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_I2S3_Init+0x54>)
 800065c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000660:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_I2S3_Init+0x54>)
 8000676:	f003 f957 	bl	8003928 <HAL_I2S_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000680:	f000 f964 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000f4 	.word	0x200000f4
 800068c:	40003c00 	.word	0x40003c00

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f004 fb9b 	bl	8004e1c <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f92e 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000013c 	.word	0x2000013c
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f004 fbfb 	bl	8004f2e <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f905 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000194 	.word	0x20000194
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4b72      	ldr	r3, [pc, #456]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a71      	ldr	r2, [pc, #452]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b6f      	ldr	r3, [pc, #444]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b6b      	ldr	r3, [pc, #428]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a6a      	ldr	r2, [pc, #424]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b68      	ldr	r3, [pc, #416]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b64      	ldr	r3, [pc, #400]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a63      	ldr	r2, [pc, #396]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b61      	ldr	r3, [pc, #388]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b5d      	ldr	r3, [pc, #372]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a5c      	ldr	r2, [pc, #368]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b56      	ldr	r3, [pc, #344]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a55      	ldr	r2, [pc, #340]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b53      	ldr	r3, [pc, #332]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a4e      	ldr	r2, [pc, #312]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b4c      	ldr	r3, [pc, #304]	@ (8000934 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	4849      	ldr	r0, [pc, #292]	@ (8000938 <MX_GPIO_Init+0x1e8>)
 8000814:	f000 fe10 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4847      	ldr	r0, [pc, #284]	@ (800093c <MX_GPIO_Init+0x1ec>)
 800081e:	f000 fe0b 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000822:	2200      	movs	r2, #0
 8000824:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000828:	4845      	ldr	r0, [pc, #276]	@ (8000940 <MX_GPIO_Init+0x1f0>)
 800082a:	f000 fe05 	bl	8001438 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	483c      	ldr	r0, [pc, #240]	@ (8000938 <MX_GPIO_Init+0x1e8>)
 8000846:	f000 fc5b 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4836      	ldr	r0, [pc, #216]	@ (800093c <MX_GPIO_Init+0x1ec>)
 8000862:	f000 fc4d 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000876:	2305      	movs	r3, #5
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	482e      	ldr	r0, [pc, #184]	@ (800093c <MX_GPIO_Init+0x1ec>)
 8000882:	f000 fc3d 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	482a      	ldr	r0, [pc, #168]	@ (8000944 <MX_GPIO_Init+0x1f4>)
 800089c:	f000 fc30 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a0:	2304      	movs	r3, #4
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x1f8>)
 80008b4:	f000 fc24 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ca:	2305      	movs	r3, #5
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	481c      	ldr	r0, [pc, #112]	@ (8000948 <MX_GPIO_Init+0x1f8>)
 80008d6:	f000 fc13 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008de:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <MX_GPIO_Init+0x1f0>)
 80008f4:	f000 fc04 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f8:	2320      	movs	r3, #32
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <MX_GPIO_Init+0x1f0>)
 800090c:	f000 fbf8 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000914:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_GPIO_Init+0x1e8>)
 8000926:	f000 fbeb 	bl	8001100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	@ 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40021000 	.word	0x40021000
 800093c:	40020800 	.word	0x40020800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40020000 	.word	0x40020000
 8000948:	40020400 	.word	0x40020400

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	@ 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fb70 	bl	800107c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <HAL_I2C_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12c      	bne.n	8000a24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ec:	2312      	movs	r3, #18
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f8:	2304      	movs	r3, #4
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <HAL_I2C_MspInit+0x8c>)
 8000a04:	f000 fb7c 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	4a07      	ldr	r2, [pc, #28]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400

08000a38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	@ 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a31      	ldr	r2, [pc, #196]	@ (8000b28 <HAL_I2S_MspInit+0xf0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d15a      	bne.n	8000b1e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a6c:	23c0      	movs	r3, #192	@ 0xc0
 8000a6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 f88d 	bl	8004b98 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a84:	f7ff ff62 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a26      	ldr	r2, [pc, #152]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	4a1f      	ldr	r2, [pc, #124]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	4a18      	ldr	r2, [pc, #96]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000adc:	2310      	movs	r3, #16
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aec:	2306      	movs	r3, #6
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <HAL_I2S_MspInit+0xf8>)
 8000af8:	f000 fb02 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000afc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0e:	2306      	movs	r3, #6
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <HAL_I2S_MspInit+0xfc>)
 8000b1a:	f000 faf1 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b1e:	bf00      	nop
 8000b20:	3738      	adds	r7, #56	@ 0x38
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40003c00 	.word	0x40003c00
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020800 	.word	0x40020800

08000b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <HAL_SPI_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b92:	23e0      	movs	r3, #224	@ 0xe0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_SPI_MspInit+0x8c>)
 8000bae:	f000 faa7 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_UART_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12b      	bne.n	8000c42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a10      	ldr	r2, [pc, #64]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c22:	230c      	movs	r3, #12
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c32:	2307      	movs	r3, #7
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_UART_MspInit+0x8c>)
 8000c3e:	f000 fa5f 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f8d1 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <OTG_FS_IRQHandler+0x10>)
 8000cbe:	f000 feb5 	bl	8001a2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200005c0 	.word	0x200005c0

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f008 facc 	bl	8009298 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20020000 	.word	0x20020000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200001dc 	.word	0x200001dc
 8000d34:	20000ae8 	.word	0x20000ae8

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d60:	f7ff ffea 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f008 fa8b 	bl	80092a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fb93 	bl	80004b8 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000da0:	080093c8 	.word	0x080093c8
  ldr r2, =_sbss
 8000da4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000da8:	20000ae8 	.word	0x20000ae8

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f94f 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fdb8 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f967 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f92f 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	2000000c 	.word	0x2000000c

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000010 	.word	0x20000010
 8000e78:	200001e0 	.word	0x200001e0

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200001e0 	.word	0x200001e0

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000010 	.word	0x20000010

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	@ (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	@ 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e16b      	b.n	80013f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 815a 	bne.w	80013ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80b4 	beq.w	80013ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b60      	ldr	r3, [pc, #384]	@ (800140c <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	4a5f      	ldr	r2, [pc, #380]	@ (800140c <HAL_GPIO_Init+0x30c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001294:	6453      	str	r3, [r2, #68]	@ 0x44
 8001296:	4b5d      	ldr	r3, [pc, #372]	@ (800140c <HAL_GPIO_Init+0x30c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001410 <HAL_GPIO_Init+0x310>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	@ (8001414 <HAL_GPIO_Init+0x314>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	@ (8001418 <HAL_GPIO_Init+0x318>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	@ (800141c <HAL_GPIO_Init+0x31c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001420 <HAL_GPIO_Init+0x320>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001424 <HAL_GPIO_Init+0x324>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <HAL_GPIO_Init+0x328>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	@ (800142c <HAL_GPIO_Init+0x32c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	@ (8001430 <HAL_GPIO_Init+0x330>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x20a>
 8001306:	2307      	movs	r3, #7
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130a:	2308      	movs	r3, #8
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130e:	2306      	movs	r3, #6
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	@ (8001410 <HAL_GPIO_Init+0x310>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b3b      	ldr	r3, [pc, #236]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a32      	ldr	r2, [pc, #200]	@ (8001434 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a27      	ldr	r2, [pc, #156]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <HAL_GPIO_Init+0x334>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae90 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af02      	add	r7, sp, #8
 8001470:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e059      	b.n	8001530 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f007 fba0 	bl	8008bdc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2203      	movs	r2, #3
 80014a0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014aa:	d102      	bne.n	80014b2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 f9b9 	bl	800582e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7c1a      	ldrb	r2, [r3, #16]
 80014c4:	f88d 2000 	strb.w	r2, [sp]
 80014c8:	3304      	adds	r3, #4
 80014ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014cc:	f004 f93a 	bl	8005744 <USB_CoreInit>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2202      	movs	r2, #2
 80014da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e026      	b.n	8001530 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 f9b1 	bl	8005850 <USB_SetCurrentMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e017      	b.n	8001530 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7c1a      	ldrb	r2, [r3, #16]
 8001508:	f88d 2000 	strb.w	r2, [sp]
 800150c:	3304      	adds	r3, #4
 800150e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001510:	f004 fb54 	bl	8005bbc <USB_HostInit>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e004      	b.n	8001530 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b08b      	sub	sp, #44	@ 0x2c
 800153c:	af04      	add	r7, sp, #16
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	70fb      	strb	r3, [r7, #3]
 800154a:	460b      	mov	r3, r1
 800154c:	70bb      	strb	r3, [r7, #2]
 800154e:	4613      	mov	r3, r2
 8001550:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001552:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001554:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_HCD_HC_Init+0x2c>
 8001560:	2302      	movs	r3, #2
 8001562:	e09d      	b.n	80016a0 <HAL_HCD_HC_Init+0x168>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3319      	adds	r3, #25
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3314      	adds	r3, #20
 8001590:	787a      	ldrb	r2, [r7, #1]
 8001592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3315      	adds	r3, #21
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3326      	adds	r3, #38	@ 0x26
 80015b8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80015bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	78bb      	ldrb	r3, [r7, #2]
 80015c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015c6:	b2d8      	uxtb	r0, r3
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3316      	adds	r3, #22
 80015d6:	4602      	mov	r2, r0
 80015d8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fbc8 	bl	8001d74 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80015e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da0a      	bge.n	8001602 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3317      	adds	r3, #23
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e009      	b.n	8001616 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3317      	adds	r3, #23
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f004 fc32 	bl	8005e84 <USB_GetHostSpeed>
 8001620:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001622:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10b      	bne.n	8001642 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800162a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_HCD_HC_Init+0x10a>
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d104      	bne.n	8001642 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2bbc      	cmp	r3, #188	@ 0xbc
 800163c:	d901      	bls.n	8001642 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800163e:	23bc      	movs	r3, #188	@ 0xbc
 8001640:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3318      	adds	r3, #24
 8001652:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	b298      	uxth	r0, r3
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3328      	adds	r3, #40	@ 0x28
 800166c:	4602      	mov	r2, r0
 800166e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	b29b      	uxth	r3, r3
 8001678:	787c      	ldrb	r4, [r7, #1]
 800167a:	78ba      	ldrb	r2, [r7, #2]
 800167c:	78f9      	ldrb	r1, [r7, #3]
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	4623      	mov	r3, r4
 800168e:	f004 fc21 	bl	8005ed4 <USB_HC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}

080016a8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_HCD_HC_Halt+0x1e>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e00f      	b.n	80016e6 <HAL_HCD_HC_Halt+0x3e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 ffb3 	bl	8006642 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	460b      	mov	r3, r1
 8001704:	70bb      	strb	r3, [r7, #2]
 8001706:	4613      	mov	r3, r2
 8001708:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3317      	adds	r3, #23
 800171a:	78ba      	ldrb	r2, [r7, #2]
 800171c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3326      	adds	r3, #38	@ 0x26
 800172e:	787a      	ldrb	r2, [r7, #1]
 8001730:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001732:	7c3b      	ldrb	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d114      	bne.n	8001762 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	332a      	adds	r3, #42	@ 0x2a
 8001748:	2203      	movs	r2, #3
 800174a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3319      	adds	r3, #25
 800175c:	7f3a      	ldrb	r2, [r7, #28]
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e009      	b.n	8001776 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	332a      	adds	r3, #42	@ 0x2a
 8001772:	2202      	movs	r2, #2
 8001774:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001776:	787b      	ldrb	r3, [r7, #1]
 8001778:	2b03      	cmp	r3, #3
 800177a:	f200 8102 	bhi.w	8001982 <HAL_HCD_HC_SubmitRequest+0x292>
 800177e:	a201      	add	r2, pc, #4	@ (adr r2, 8001784 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	0800196d 	.word	0x0800196d
 800178c:	08001859 	.word	0x08001859
 8001790:	080018e3 	.word	0x080018e3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001794:	7c3b      	ldrb	r3, [r7, #16]
 8001796:	2b01      	cmp	r3, #1
 8001798:	f040 80f5 	bne.w	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800179c:	78bb      	ldrb	r3, [r7, #2]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d12d      	bne.n	80017fe <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	333d      	adds	r3, #61	@ 0x3d
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	333d      	adds	r3, #61	@ 0x3d
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	332a      	adds	r3, #42	@ 0x2a
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80017e6:	e0ce      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	332a      	adds	r3, #42	@ 0x2a
 80017f8:	2202      	movs	r2, #2
 80017fa:	701a      	strb	r2, [r3, #0]
      break;
 80017fc:	e0c3      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	331a      	adds	r3, #26
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	f040 80b8 	bne.w	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	333c      	adds	r3, #60	@ 0x3c
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	332a      	adds	r3, #42	@ 0x2a
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
      break;
 8001840:	e0a1      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	332a      	adds	r3, #42	@ 0x2a
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
      break;
 8001856:	e096      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d120      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	333d      	adds	r3, #61	@ 0x3d
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	332a      	adds	r3, #42	@ 0x2a
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001888:	e07e      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	332a      	adds	r3, #42	@ 0x2a
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e073      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	333c      	adds	r3, #60	@ 0x3c
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10a      	bne.n	80018cc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	332a      	adds	r3, #42	@ 0x2a
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
      break;
 80018ca:	e05d      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	@ 0x2a
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e052      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018e2:	78bb      	ldrb	r3, [r7, #2]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d120      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	333d      	adds	r3, #61	@ 0x3d
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	332a      	adds	r3, #42	@ 0x2a
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001912:	e039      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e02e      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	333c      	adds	r3, #60	@ 0x3c
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10a      	bne.n	8001956 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	332a      	adds	r3, #42	@ 0x2a
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
      break;
 8001954:	e018      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	@ 0x2a
 8001966:	2202      	movs	r2, #2
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e00d      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	@ 0x2a
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e002      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001982:	bf00      	nop
 8001984:	e000      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001986:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	332c      	adds	r3, #44	@ 0x2c
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	8b39      	ldrh	r1, [r7, #24]
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4403      	add	r3, r0
 80019ac:	3334      	adds	r3, #52	@ 0x34
 80019ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	334c      	adds	r3, #76	@ 0x4c
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3338      	adds	r3, #56	@ 0x38
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3315      	adds	r3, #21
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	334d      	adds	r3, #77	@ 0x4d
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	3310      	adds	r3, #16
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	1d19      	adds	r1, r3, #4
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	799b      	ldrb	r3, [r3, #6]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f004 fb86 	bl	800612c <USB_HC_StartXfer>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop

08001a2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 f87a 	bl	8005b3c <USB_GetMode>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	f040 80fb 	bne.w	8001c46 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 f83d 	bl	8005ad4 <USB_ReadInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80f1 	beq.w	8001c44 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 f834 	bl	8005ad4 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a76:	d104      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 f824 	bl	8005ad4 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a96:	d104      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 f814 	bl	8005ad4 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ab6:	d104      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 f804 	bl	8005ad4 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d103      	bne.n	8001ade <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fff6 	bl	8005ad4 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001af2:	d120      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001afc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d113      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b0e:	2110      	movs	r1, #16
 8001b10:	6938      	ldr	r0, [r7, #16]
 8001b12:	f003 fee9 	bl	80058e8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b16:	6938      	ldr	r0, [r7, #16]
 8001b18:	f003 ff18 	bl	800594c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7a5b      	ldrb	r3, [r3, #9]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d105      	bne.n	8001b30 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 f90a 	bl	8005d44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f007 f8d1 	bl	8008cd8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 ffca 	bl	8005ad4 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b4a:	d102      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f001 fd33 	bl	80035b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 ffbc 	bl	8005ad4 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d106      	bne.n	8001b74 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f007 f89a 	bl	8008ca0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2208      	movs	r2, #8
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 ffab 	bl	8005ad4 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b88:	d139      	bne.n	8001bfe <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fd46 	bl	8006620 <USB_HC_ReadInterrupt>
 8001b94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e025      	b.n	8001be8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d018      	beq.n	8001be2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f905 	bl	8001dde <HCD_HC_IN_IRQHandler>
 8001bd4:	e005      	b.n	8001be2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 ff67 	bl	8002ab0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	795b      	ldrb	r3, [r3, #5]
 8001bec:	461a      	mov	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d3d3      	bcc.n	8001b9c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 ff66 	bl	8005ad4 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d101      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x1ea>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_HCD_IRQHandler+0x1ec>
 8001c16:	2300      	movs	r3, #0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d014      	beq.n	8001c46 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0210 	bic.w	r2, r2, #16
 8001c2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f001 fbe4 	bl	80033fa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0210 	orr.w	r2, r2, #16
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	e000      	b.n	8001c46 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c44:	bf00      	nop
    }
  }
}
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_HCD_Start+0x16>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e013      	b.n	8001c8a <HAL_HCD_Start+0x3e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 f8ce 	bl	8005e12 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fdc6 	bl	800580c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_HCD_Stop+0x16>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e00d      	b.n	8001cc4 <HAL_HCD_Stop+0x32>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 fe21 	bl	80068fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 f870 	bl	8005dbe <USB_ResetPort>
 8001cde:	4603      	mov	r3, r0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	334c      	adds	r3, #76	@ 0x4c
 8001d04:	781b      	ldrb	r3, [r3, #0]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3338      	adds	r3, #56	@ 0x38
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 f8b2 	bl	8005eb2 <USB_GetCurrentFrame>
 8001d4e:	4603      	mov	r3, r0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f004 f88d 	bl	8005e84 <USB_GetHostSpeed>
 8001d6a:	4603      	mov	r3, r0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	331a      	adds	r3, #26
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	331b      	adds	r3, #27
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	3325      	adds	r3, #37	@ 0x25
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3324      	adds	r3, #36	@ 0x24
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fe7c 	bl	8005afa <USB_ReadChInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d11a      	bne.n	8001e42 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	334d      	adds	r3, #77	@ 0x4d
 8001e2e:	2207      	movs	r2, #7
 8001e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 fc01 	bl	8006642 <USB_HC_Halt>
 8001e40:	e09e      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fe55 	bl	8005afa <USB_ReadChInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e5a:	d11b      	bne.n	8001e94 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	334d      	adds	r3, #77	@ 0x4d
 8001e80:	2208      	movs	r2, #8
 8001e82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fbd8 	bl	8006642 <USB_HC_Halt>
 8001e92:	e075      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fe2c 	bl	8005afa <USB_ReadChInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d11a      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2308      	movs	r3, #8
 8001ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334d      	adds	r3, #77	@ 0x4d
 8001ece:	2206      	movs	r2, #6
 8001ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fbb1 	bl	8006642 <USB_HC_Halt>
 8001ee0:	e04e      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fe05 	bl	8005afa <USB_ReadChInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d11b      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	334d      	adds	r3, #77	@ 0x4d
 8001f20:	2209      	movs	r2, #9
 8001f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fb88 	bl	8006642 <USB_HC_Halt>
 8001f32:	e025      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fddc 	bl	8005afa <USB_ReadChInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f48:	2b80      	cmp	r3, #128	@ 0x80
 8001f4a:	d119      	bne.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	334d      	adds	r3, #77	@ 0x4d
 8001f6e:	2207      	movs	r2, #7
 8001f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 fb61 	bl	8006642 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fdb6 	bl	8005afa <USB_ReadChInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f98:	d112      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 fb4d 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	f000 bd75 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fd96 	bl	8005afa <USB_ReadChInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	f040 8128 	bne.w	800222a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2320      	movs	r3, #32
 8001fea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	331b      	adds	r3, #27
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d119      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	331b      	adds	r3, #27
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	0151      	lsls	r1, r2, #5
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	440a      	add	r2, r1
 800202c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	799b      	ldrb	r3, [r3, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01b      	beq.n	8002076 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3330      	adds	r3, #48	@ 0x30
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	1ac9      	subs	r1, r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4403      	add	r3, r0
 8002072:	3338      	adds	r3, #56	@ 0x38
 8002074:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	334d      	adds	r3, #77	@ 0x4d
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3344      	adds	r3, #68	@ 0x44
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	2301      	movs	r3, #1
 80020ae:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3326      	adds	r3, #38	@ 0x26
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3326      	adds	r3, #38	@ 0x26
 80020d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d110      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 faac 	bl	8006642 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	2310      	movs	r3, #16
 80020fa:	6093      	str	r3, [r2, #8]
 80020fc:	e03d      	b.n	800217a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3326      	adds	r3, #38	@ 0x26
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d00a      	beq.n	800212a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3326      	adds	r3, #38	@ 0x26
 8002124:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002126:	2b01      	cmp	r3, #1
 8002128:	d127      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	0151      	lsls	r1, r2, #5
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	440a      	add	r2, r1
 8002140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002144:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002148:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	334c      	adds	r3, #76	@ 0x4c
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334c      	adds	r3, #76	@ 0x4c
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f006 fdbd 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	799b      	ldrb	r3, [r3, #6]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d13b      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3338      	adds	r3, #56	@ 0x38
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4403      	add	r3, r0
 80021a2:	3328      	adds	r3, #40	@ 0x28
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	440b      	add	r3, r1
 80021a8:	1e59      	subs	r1, r3, #1
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4403      	add	r3, r0
 80021b8:	3328      	adds	r3, #40	@ 0x28
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8470 	beq.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	333c      	adds	r3, #60	@ 0x3c
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	f083 0301 	eor.w	r3, r3, #1
 80021e2:	b2d8      	uxtb	r0, r3
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	333c      	adds	r3, #60	@ 0x3c
 80021f2:	4602      	mov	r2, r0
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	f000 bc58 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	333c      	adds	r3, #60	@ 0x3c
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2d8      	uxtb	r0, r3
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	333c      	adds	r3, #60	@ 0x3c
 8002222:	4602      	mov	r2, r0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	f000 bc40 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fc61 	bl	8005afa <USB_ReadChInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b20      	cmp	r3, #32
 8002240:	d131      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2320      	movs	r3, #32
 8002252:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	331a      	adds	r3, #26
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	f040 841f 	bne.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	331b      	adds	r3, #27
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	334d      	adds	r3, #77	@ 0x4d
 8002290:	2203      	movs	r2, #3
 8002292:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f004 f9d0 	bl	8006642 <USB_HC_Halt>
 80022a2:	f000 bc02 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 fc23 	bl	8005afa <USB_ReadChInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	f040 8305 	bne.w	80028ca <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	2302      	movs	r3, #2
 80022d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	334d      	adds	r3, #77	@ 0x4d
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d114      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	334d      	adds	r3, #77	@ 0x4d
 80022f8:	2202      	movs	r2, #2
 80022fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	334c      	adds	r3, #76	@ 0x4c
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e2cc      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	334d      	adds	r3, #77	@ 0x4d
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b06      	cmp	r3, #6
 8002326:	d114      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	334d      	adds	r3, #77	@ 0x4d
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	@ 0x4c
 800234c:	2205      	movs	r2, #5
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e2ac      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	334d      	adds	r3, #77	@ 0x4d
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b07      	cmp	r3, #7
 8002366:	d00b      	beq.n	8002380 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334d      	adds	r3, #77	@ 0x4d
 8002378:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800237a:	2b09      	cmp	r3, #9
 800237c:	f040 80a6 	bne.w	80024cc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334d      	adds	r3, #77	@ 0x4d
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3344      	adds	r3, #68	@ 0x44
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1c59      	adds	r1, r3, #1
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4403      	add	r3, r0
 80023b4:	3344      	adds	r3, #68	@ 0x44
 80023b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3344      	adds	r3, #68	@ 0x44
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d943      	bls.n	8002456 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3344      	adds	r3, #68	@ 0x44
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	331a      	adds	r3, #26
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d123      	bne.n	8002440 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	331b      	adds	r3, #27
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	331c      	adds	r3, #28
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800243a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	334c      	adds	r3, #76	@ 0x4c
 8002450:	2204      	movs	r2, #4
 8002452:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002454:	e229      	b.n	80028aa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	334c      	adds	r3, #76	@ 0x4c
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3326      	adds	r3, #38	@ 0x26
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3326      	adds	r3, #38	@ 0x26
 8002490:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002492:	2b02      	cmp	r3, #2
 8002494:	f040 8209 	bne.w	80028aa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ca:	e1ee      	b.n	80028aa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334d      	adds	r3, #77	@ 0x4d
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	f040 80c8 	bne.w	8002674 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334d      	adds	r3, #77	@ 0x4d
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	331b      	adds	r3, #27
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 81ce 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3326      	adds	r3, #38	@ 0x26
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d16b      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3348      	adds	r3, #72	@ 0x48
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1c59      	adds	r1, r3, #1
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4403      	add	r3, r0
 8002546:	3348      	adds	r3, #72	@ 0x48
 8002548:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3348      	adds	r3, #72	@ 0x48
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d943      	bls.n	80025e8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3348      	adds	r3, #72	@ 0x48
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	331b      	adds	r3, #27
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3344      	adds	r3, #68	@ 0x44
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d809      	bhi.n	80025b2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	331c      	adds	r3, #28
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	0151      	lsls	r1, r2, #5
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	440a      	add	r2, r1
 80025c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	334c      	adds	r3, #76	@ 0x4c
 80025e2:	2204      	movs	r2, #4
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e014      	b.n	8002612 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	334c      	adds	r3, #76	@ 0x4c
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e009      	b.n	8002612 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	334c      	adds	r3, #76	@ 0x4c
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3326      	adds	r3, #38	@ 0x26
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3326      	adds	r3, #38	@ 0x26
 8002638:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800263a:	2b02      	cmp	r3, #2
 800263c:	f040 8136 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002656:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800265e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e11b      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334d      	adds	r3, #77	@ 0x4d
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b03      	cmp	r3, #3
 8002688:	f040 8081 	bne.w	800278e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	334d      	adds	r3, #77	@ 0x4d
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	331b      	adds	r3, #27
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	f040 80fa 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334c      	adds	r3, #76	@ 0x4c
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ea:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800270a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	0151      	lsls	r1, r2, #5
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	440a      	add	r2, r1
 8002722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002726:	f023 0320 	bic.w	r3, r3, #32
 800272a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3326      	adds	r3, #38	@ 0x26
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3326      	adds	r3, #38	@ 0x26
 8002752:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002754:	2b02      	cmp	r3, #2
 8002756:	f040 80a9 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002770:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002778:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e08e      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	334d      	adds	r3, #77	@ 0x4d
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d143      	bne.n	800282c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	334d      	adds	r3, #77	@ 0x4d
 80027b4:	2202      	movs	r2, #2
 80027b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334c      	adds	r3, #76	@ 0x4c
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3326      	adds	r3, #38	@ 0x26
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3326      	adds	r3, #38	@ 0x26
 80027f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d159      	bne.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800280e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002816:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e03f      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	334d      	adds	r3, #77	@ 0x4d
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d126      	bne.n	8002890 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	334d      	adds	r3, #77	@ 0x4d
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3344      	adds	r3, #68	@ 0x44
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	1c59      	adds	r1, r3, #1
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4403      	add	r3, r0
 8002876:	3344      	adds	r3, #68	@ 0x44
 8002878:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	334c      	adds	r3, #76	@ 0x4c
 800288a:	2204      	movs	r2, #4
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e00d      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	334d      	adds	r3, #77	@ 0x4d
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	f000 8100 	beq.w	8002aa8 <HCD_HC_IN_IRQHandler+0xcca>
 80028a8:	e000      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028aa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	334c      	adds	r3, #76	@ 0x4c
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f006 fa16 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028c8:	e0ef      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 f911 	bl	8005afa <USB_ReadChInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d12f      	bne.n	8002942 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	2340      	movs	r3, #64	@ 0x40
 80028f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	334d      	adds	r3, #77	@ 0x4d
 8002904:	2205      	movs	r2, #5
 8002906:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	331a      	adds	r3, #26
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3344      	adds	r3, #68	@ 0x44
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fe81 	bl	8006642 <USB_HC_Halt>
 8002940:	e0b3      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f003 f8d5 	bl	8005afa <USB_ReadChInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b10      	cmp	r3, #16
 8002958:	f040 80a7 	bne.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	3326      	adds	r3, #38	@ 0x26
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d11b      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3344      	adds	r3, #68	@ 0x44
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	334d      	adds	r3, #77	@ 0x4d
 8002996:	2204      	movs	r2, #4
 8002998:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fe4d 	bl	8006642 <USB_HC_Halt>
 80029a8:	e03f      	b.n	8002a2a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3326      	adds	r3, #38	@ 0x26
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3326      	adds	r3, #38	@ 0x26
 80029d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d129      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3344      	adds	r3, #68	@ 0x44
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	799b      	ldrb	r3, [r3, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HCD_HC_IN_IRQHandler+0xc2a>
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	331b      	adds	r3, #27
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d110      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334d      	adds	r3, #77	@ 0x4d
 8002a18:	2204      	movs	r2, #4
 8002a1a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fe0c 	bl	8006642 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	331b      	adds	r3, #27
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d129      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	331b      	adds	r3, #27
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a72:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	0151      	lsls	r1, r2, #5
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	440a      	add	r2, r1
 8002a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a8e:	f043 0320 	orr.w	r3, r3, #32
 8002a92:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	6093      	str	r3, [r2, #8]
 8002aa6:	e000      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002aa8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 f813 	bl	8005afa <USB_ReadChInterrupts>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d11b      	bne.n	8002b16 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	2304      	movs	r3, #4
 8002aee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2207      	movs	r2, #7
 8002b02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fd98 	bl	8006642 <USB_HC_Halt>
 8002b12:	f000 bc6f 	b.w	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 ffeb 	bl	8005afa <USB_ReadChInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 8082 	bne.w	8002c34 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2320      	movs	r3, #32
 8002b40:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3319      	adds	r3, #25
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d124      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3319      	adds	r3, #25
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	334c      	adds	r3, #76	@ 0x4c
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334d      	adds	r3, #77	@ 0x4d
 8002b90:	2203      	movs	r2, #3
 8002b92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 fd50 	bl	8006642 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	331a      	adds	r3, #26
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 841d 	bne.w	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	331b      	adds	r3, #27
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 8411 	bne.w	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3326      	adds	r3, #38	@ 0x26
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d009      	beq.n	8002bfc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	331b      	adds	r3, #27
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	@ 0x4d
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 fd12 	bl	8006642 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3344      	adds	r3, #68	@ 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e3df      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 ff5c 	bl	8005afa <USB_ReadChInterrupts>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c4c:	d111      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fce9 	bl	8006642 <USB_HC_Halt>
 8002c70:	e3c0      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 ff3d 	bl	8005afa <USB_ReadChInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d168      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3344      	adds	r3, #68	@ 0x44
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 ff27 	bl	8005afa <USB_ReadChInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b40      	cmp	r3, #64	@ 0x40
 8002cb4:	d112      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3319      	adds	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2340      	movs	r3, #64	@ 0x40
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	331b      	adds	r3, #27
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d019      	beq.n	8002d26 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	331b      	adds	r3, #27
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	0151      	lsls	r1, r2, #5
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	440a      	add	r2, r1
 8002d1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d24:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2301      	movs	r3, #1
 8002d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	334d      	adds	r3, #77	@ 0x4d
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 fc74 	bl	8006642 <USB_HC_Halt>
 8002d5a:	e34b      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fec8 	bl	8005afa <USB_ReadChInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d139      	bne.n	8002de8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	334d      	adds	r3, #77	@ 0x4d
 8002d84:	2205      	movs	r2, #5
 8002d86:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	331a      	adds	r3, #26
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3319      	adds	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3344      	adds	r3, #68	@ 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fc37 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2340      	movs	r3, #64	@ 0x40
 8002de4:	6093      	str	r3, [r2, #8]
 8002de6:	e305      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fe82 	bl	8005afa <USB_ReadChInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d11a      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2308      	movs	r3, #8
 8002e10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	334d      	adds	r3, #77	@ 0x4d
 8002e22:	2206      	movs	r2, #6
 8002e24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fc07 	bl	8006642 <USB_HC_Halt>
 8002e34:	e2de      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fe5b 	bl	8005afa <USB_ReadChInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d144      	bne.n	8002ed8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3344      	adds	r3, #68	@ 0x44
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	334d      	adds	r3, #77	@ 0x4d
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3319      	adds	r3, #25
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d114      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3319      	adds	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fbbf 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	e28d      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 fe0a 	bl	8005afa <USB_ReadChInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eec:	2b80      	cmp	r3, #128	@ 0x80
 8002eee:	d169      	bne.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	799b      	ldrb	r3, [r3, #6]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	@ 0x4d
 8002f08:	2207      	movs	r2, #7
 8002f0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fb94 	bl	8006642 <USB_HC_Halt>
 8002f1a:	e049      	b.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3344      	adds	r3, #68	@ 0x44
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4403      	add	r3, r0
 8002f3c:	3344      	adds	r3, #68	@ 0x44
 8002f3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3344      	adds	r3, #68	@ 0x44
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d922      	bls.n	8002f9c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3344      	adds	r3, #68	@ 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	334c      	adds	r3, #76	@ 0x4c
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334c      	adds	r3, #76	@ 0x4c
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f005 fead 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f9a:	e009      	b.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	334c      	adds	r3, #76	@ 0x4c
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2380      	movs	r3, #128	@ 0x80
 8002fc0:	6093      	str	r3, [r2, #8]
 8002fc2:	e217      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fd94 	bl	8005afa <USB_ReadChInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fdc:	d11b      	bne.n	8003016 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	334d      	adds	r3, #77	@ 0x4d
 8002fee:	2209      	movs	r2, #9
 8002ff0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fb21 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003012:	6093      	str	r3, [r2, #8]
 8003014:	e1ee      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f002 fd6b 	bl	8005afa <USB_ReadChInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	f040 81df 	bne.w	80033ee <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2302      	movs	r3, #2
 8003040:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	334d      	adds	r3, #77	@ 0x4d
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 8093 	bne.w	8003180 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	334d      	adds	r3, #77	@ 0x4d
 800306a:	2202      	movs	r2, #2
 800306c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	334c      	adds	r3, #76	@ 0x4c
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3326      	adds	r3, #38	@ 0x26
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d00b      	beq.n	80030b0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3326      	adds	r3, #38	@ 0x26
 80030a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	f040 8190 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	799b      	ldrb	r3, [r3, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d115      	bne.n	80030e4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	333d      	adds	r3, #61	@ 0x3d
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2d8      	uxtb	r0, r3
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	333d      	adds	r3, #61	@ 0x3d
 80030e0:	4602      	mov	r2, r0
 80030e2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	799b      	ldrb	r3, [r3, #6]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f040 8171 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3334      	adds	r3, #52	@ 0x34
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8165 	beq.w	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3334      	adds	r3, #52	@ 0x34
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3328      	adds	r3, #40	@ 0x28
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	440b      	add	r3, r1
 800312c:	1e59      	subs	r1, r3, #1
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4403      	add	r3, r0
 800313c:	3328      	adds	r3, #40	@ 0x28
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	fbb1 f3f3 	udiv	r3, r1, r3
 8003144:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 813f 	beq.w	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	333d      	adds	r3, #61	@ 0x3d
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	f083 0301 	eor.w	r3, r3, #1
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	333d      	adds	r3, #61	@ 0x3d
 800317a:	4602      	mov	r2, r0
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e127      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334d      	adds	r3, #77	@ 0x4d
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d120      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334d      	adds	r3, #77	@ 0x4d
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	331b      	adds	r3, #27
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f040 8107 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	334c      	adds	r3, #76	@ 0x4c
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e0fb      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334d      	adds	r3, #77	@ 0x4d
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d13a      	bne.n	8003264 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334d      	adds	r3, #77	@ 0x4d
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334c      	adds	r3, #76	@ 0x4c
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	331b      	adds	r3, #27
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	f040 80d1 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	331b      	adds	r3, #27
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	0151      	lsls	r1, r2, #5
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	440a      	add	r2, r1
 8003258:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800325c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003260:	6053      	str	r3, [r2, #4]
 8003262:	e0b5      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334d      	adds	r3, #77	@ 0x4d
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b05      	cmp	r3, #5
 8003278:	d114      	bne.n	80032a4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334d      	adds	r3, #77	@ 0x4d
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334c      	adds	r3, #76	@ 0x4c
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e095      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d114      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334d      	adds	r3, #77	@ 0x4d
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334c      	adds	r3, #76	@ 0x4c
 80032de:	2205      	movs	r2, #5
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e075      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334d      	adds	r3, #77	@ 0x4d
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b07      	cmp	r3, #7
 80032f8:	d00a      	beq.n	8003310 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334d      	adds	r3, #77	@ 0x4d
 800330a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800330c:	2b09      	cmp	r3, #9
 800330e:	d170      	bne.n	80033f2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334d      	adds	r3, #77	@ 0x4d
 8003320:	2202      	movs	r2, #2
 8003322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3344      	adds	r3, #68	@ 0x44
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c59      	adds	r1, r3, #1
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4403      	add	r3, r0
 8003344:	3344      	adds	r3, #68	@ 0x44
 8003346:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3344      	adds	r3, #68	@ 0x44
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d914      	bls.n	8003388 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3344      	adds	r3, #68	@ 0x44
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334c      	adds	r3, #76	@ 0x4c
 8003382:	2204      	movs	r2, #4
 8003384:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003386:	e022      	b.n	80033ce <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	@ 0x4c
 8003398:	2202      	movs	r2, #2
 800339a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334c      	adds	r3, #76	@ 0x4c
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f005 fc84 	bl	8008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033ec:	e002      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80033f2:	bf00      	nop
  }
}
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b08a      	sub	sp, #40	@ 0x28
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	0c5b      	lsrs	r3, r3, #17
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d004      	beq.n	8003440 <HCD_RXQLVL_IRQHandler+0x46>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b05      	cmp	r3, #5
 800343a:	f000 80b6 	beq.w	80035aa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800343e:	e0b7      	b.n	80035b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80b3 	beq.w	80035ae <HCD_RXQLVL_IRQHandler+0x1b4>
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	332c      	adds	r3, #44	@ 0x2c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a7 	beq.w	80035ae <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	3338      	adds	r3, #56	@ 0x38
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	18d1      	adds	r1, r2, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4403      	add	r3, r0
 8003484:	3334      	adds	r3, #52	@ 0x34
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4299      	cmp	r1, r3
 800348a:	f200 8083 	bhi.w	8003594 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	332c      	adds	r3, #44	@ 0x2c
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	b292      	uxth	r2, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	f002 fabb 	bl	8005a24 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	332c      	adds	r3, #44	@ 0x2c
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	18d1      	adds	r1, r2, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4403      	add	r3, r0
 80034d2:	332c      	adds	r3, #44	@ 0x2c
 80034d4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3338      	adds	r3, #56	@ 0x38
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	18d1      	adds	r1, r2, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4403      	add	r3, r0
 80034fa:	3338      	adds	r3, #56	@ 0x38
 80034fc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	0cdb      	lsrs	r3, r3, #19
 800350e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003512:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3328      	adds	r3, #40	@ 0x28
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4293      	cmp	r3, r2
 800352c:	d13f      	bne.n	80035ae <HCD_RXQLVL_IRQHandler+0x1b4>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03c      	beq.n	80035ae <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800354a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003552:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	333c      	adds	r3, #60	@ 0x3c
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f083 0301 	eor.w	r3, r3, #1
 800357c:	b2d8      	uxtb	r0, r3
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	333c      	adds	r3, #60	@ 0x3c
 800358e:	4602      	mov	r2, r0
 8003590:	701a      	strb	r2, [r3, #0]
      break;
 8003592:	e00c      	b.n	80035ae <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334c      	adds	r3, #76	@ 0x4c
 80035a4:	2204      	movs	r2, #4
 80035a6:	701a      	strb	r2, [r3, #0]
      break;
 80035a8:	e001      	b.n	80035ae <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80035ae:	bf00      	nop
  }
}
 80035b0:	bf00      	nop
 80035b2:	3728      	adds	r7, #40	@ 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80035e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d10b      	bne.n	8003608 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d102      	bne.n	8003600 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f005 fb5e 	bl	8008cbc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b08      	cmp	r3, #8
 8003610:	d132      	bne.n	8003678 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d126      	bne.n	8003672 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7a5b      	ldrb	r3, [r3, #9]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d113      	bne.n	8003654 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003636:	d106      	bne.n	8003646 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2102      	movs	r1, #2
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fb80 	bl	8005d44 <USB_InitFSLSPClkSel>
 8003644:	e011      	b.n	800366a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f002 fb79 	bl	8005d44 <USB_InitFSLSPClkSel>
 8003652:	e00a      	b.n	800366a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	79db      	ldrb	r3, [r3, #7]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003662:	461a      	mov	r2, r3
 8003664:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003668:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f005 fb50 	bl	8008d10 <HAL_HCD_PortEnabled_Callback>
 8003670:	e002      	b.n	8003678 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f005 fb5a 	bl	8008d2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d103      	bne.n	800368a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f043 0320 	orr.w	r3, r3, #32
 8003688:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e12b      	b.n	800390a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd f96e 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003704:	f001 fa20 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a81      	ldr	r2, [pc, #516]	@ (8003914 <HAL_I2C_Init+0x274>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d807      	bhi.n	8003724 <HAL_I2C_Init+0x84>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a80      	ldr	r2, [pc, #512]	@ (8003918 <HAL_I2C_Init+0x278>)
 8003718:	4293      	cmp	r3, r2
 800371a:	bf94      	ite	ls
 800371c:	2301      	movls	r3, #1
 800371e:	2300      	movhi	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e006      	b.n	8003732 <HAL_I2C_Init+0x92>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a7d      	ldr	r2, [pc, #500]	@ (800391c <HAL_I2C_Init+0x27c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	bf94      	ite	ls
 800372c:	2301      	movls	r3, #1
 800372e:	2300      	movhi	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0e7      	b.n	800390a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a78      	ldr	r2, [pc, #480]	@ (8003920 <HAL_I2C_Init+0x280>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0c9b      	lsrs	r3, r3, #18
 8003744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a6a      	ldr	r2, [pc, #424]	@ (8003914 <HAL_I2C_Init+0x274>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d802      	bhi.n	8003774 <HAL_I2C_Init+0xd4>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3301      	adds	r3, #1
 8003772:	e009      	b.n	8003788 <HAL_I2C_Init+0xe8>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	4a69      	ldr	r2, [pc, #420]	@ (8003924 <HAL_I2C_Init+0x284>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	3301      	adds	r3, #1
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	430b      	orrs	r3, r1
 800378e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800379a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	495c      	ldr	r1, [pc, #368]	@ (8003914 <HAL_I2C_Init+0x274>)
 80037a4:	428b      	cmp	r3, r1
 80037a6:	d819      	bhi.n	80037dc <HAL_I2C_Init+0x13c>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e59      	subs	r1, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037bc:	400b      	ands	r3, r1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_I2C_Init+0x138>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e59      	subs	r1, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d6:	e051      	b.n	800387c <HAL_I2C_Init+0x1dc>
 80037d8:	2304      	movs	r3, #4
 80037da:	e04f      	b.n	800387c <HAL_I2C_Init+0x1dc>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <HAL_I2C_Init+0x168>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e012      	b.n	800382e <HAL_I2C_Init+0x18e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	0099      	lsls	r1, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Init+0x196>
 8003832:	2301      	movs	r3, #1
 8003834:	e022      	b.n	800387c <HAL_I2C_Init+0x1dc>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10e      	bne.n	800385c <HAL_I2C_Init+0x1bc>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e58      	subs	r0, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	440b      	add	r3, r1
 800384c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800385a:	e00f      	b.n	800387c <HAL_I2C_Init+0x1dc>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	6809      	ldr	r1, [r1, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6911      	ldr	r1, [r2, #16]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	000186a0 	.word	0x000186a0
 8003918:	001e847f 	.word	0x001e847f
 800391c:	003d08ff 	.word	0x003d08ff
 8003920:	431bde83 	.word	0x431bde83
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e128      	b.n	8003b8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a90      	ldr	r2, [pc, #576]	@ (8003b94 <HAL_I2S_Init+0x26c>)
 8003952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd f86f 	bl	8000a38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003970:	f023 030f 	bic.w	r3, r3, #15
 8003974:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2202      	movs	r2, #2
 800397c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d060      	beq.n	8003a48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800398e:	2310      	movs	r3, #16
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e001      	b.n	8003998 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003994:	2320      	movs	r3, #32
 8003996:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b20      	cmp	r3, #32
 800399e:	d802      	bhi.n	80039a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f001 f9d8 	bl	8004d5c <HAL_RCCEx_GetPeriphCLKFreq>
 80039ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b6:	d125      	bne.n	8003a04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d010      	beq.n	80039e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	3305      	adds	r3, #5
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	e01f      	b.n	8003a22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	461a      	mov	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	3305      	adds	r3, #5
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e00e      	b.n	8003a22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	3305      	adds	r3, #5
 8003a20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4a5c      	ldr	r2, [pc, #368]	@ (8003b98 <HAL_I2S_Init+0x270>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	08db      	lsrs	r3, r3, #3
 8003a2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d902      	bls.n	8003a5c <HAL_I2S_Init+0x134>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2bff      	cmp	r3, #255	@ 0xff
 8003a5a:	d907      	bls.n	8003a6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e08f      	b.n	8003b8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	ea42 0103 	orr.w	r1, r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a8a:	f023 030f 	bic.w	r3, r3, #15
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6851      	ldr	r1, [r2, #4]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68d2      	ldr	r2, [r2, #12]
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6992      	ldr	r2, [r2, #24]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d161      	bne.n	8003b7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a38      	ldr	r2, [pc, #224]	@ (8003b9c <HAL_I2S_Init+0x274>)
 8003abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a37      	ldr	r2, [pc, #220]	@ (8003ba0 <HAL_I2S_Init+0x278>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_I2S_Init+0x1a4>
 8003ac8:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <HAL_I2S_Init+0x27c>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2S_Init+0x1a8>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4932      	ldr	r1, [pc, #200]	@ (8003ba0 <HAL_I2S_Init+0x278>)
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2S_Init+0x1b8>
 8003adc:	4a31      	ldr	r2, [pc, #196]	@ (8003ba4 <HAL_I2S_Init+0x27c>)
 8003ade:	e001      	b.n	8003ae4 <HAL_I2S_Init+0x1bc>
 8003ae0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ae4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ae8:	f023 030f 	bic.w	r3, r3, #15
 8003aec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <HAL_I2S_Init+0x278>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_I2S_Init+0x1d4>
 8003af8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba4 <HAL_I2S_Init+0x27c>)
 8003afa:	e001      	b.n	8003b00 <HAL_I2S_Init+0x1d8>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b00:	2202      	movs	r2, #2
 8003b02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <HAL_I2S_Init+0x278>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2S_Init+0x1ea>
 8003b0e:	4b25      	ldr	r3, [pc, #148]	@ (8003ba4 <HAL_I2S_Init+0x27c>)
 8003b10:	e001      	b.n	8003b16 <HAL_I2S_Init+0x1ee>
 8003b12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b22:	d003      	beq.n	8003b2c <HAL_I2S_Init+0x204>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e001      	b.n	8003b38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b42:	4313      	orrs	r3, r2
 8003b44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba0 <HAL_I2S_Init+0x278>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_I2S_Init+0x24c>
 8003b70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <HAL_I2S_Init+0x27c>)
 8003b72:	e001      	b.n	8003b78 <HAL_I2S_Init+0x250>
 8003b74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b78:	897a      	ldrh	r2, [r7, #10]
 8003b7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	08003c9f 	.word	0x08003c9f
 8003b98:	cccccccd 	.word	0xcccccccd
 8003b9c:	08003db5 	.word	0x08003db5
 8003ba0:	40003800 	.word	0x40003800
 8003ba4:	40003400 	.word	0x40003400

08003ba8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10e      	bne.n	8003c38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffb8 	bl	8003ba8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	b292      	uxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10e      	bne.n	8003c96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff93 	bl	8003bbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d13a      	bne.n	8003d30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d109      	bne.n	8003cd8 <I2S_IRQHandler+0x3a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cce:	2b40      	cmp	r3, #64	@ 0x40
 8003cd0:	d102      	bne.n	8003cd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffb4 	bl	8003c40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	d126      	bne.n	8003d30 <I2S_IRQHandler+0x92>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d11f      	bne.n	8003d30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff50 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d136      	bne.n	8003daa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d109      	bne.n	8003d5a <I2S_IRQHandler+0xbc>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d50:	2b80      	cmp	r3, #128	@ 0x80
 8003d52:	d102      	bne.n	8003d5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff45 	bl	8003be4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d122      	bne.n	8003daa <I2S_IRQHandler+0x10c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d11b      	bne.n	8003daa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff13 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a92      	ldr	r2, [pc, #584]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003dce:	4b92      	ldr	r3, [pc, #584]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd0:	e001      	b.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a8b      	ldr	r2, [pc, #556]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d101      	bne.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003dec:	4b8a      	ldr	r3, [pc, #552]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dee:	e001      	b.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e00:	d004      	beq.n	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 8099 	bne.w	8003f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f925 	bl	8004070 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9c8 	bl	80041d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b40      	cmp	r3, #64	@ 0x40
 8003e48:	d13a      	bne.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d035      	beq.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a6e      	ldr	r2, [pc, #440]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e60:	e001      	b.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4969      	ldr	r1, [pc, #420]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6e:	428b      	cmp	r3, r1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e72:	4b69      	ldr	r3, [pc, #420]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fe88 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	f040 80c3 	bne.w	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80bd 	beq.w	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a49      	ldr	r2, [pc, #292]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ef2:	4b49      	ldr	r3, [pc, #292]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef4:	e001      	b.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ef6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4944      	ldr	r1, [pc, #272]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f02:	428b      	cmp	r3, r1
 8003f04:	d101      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f06:	4b44      	ldr	r3, [pc, #272]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f08:	e001      	b.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fe4a 	bl	8003bd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f3c:	e089      	b.n	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d107      	bne.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8be 	bl	80040d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8fd 	bl	800416c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d12f      	bne.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02a      	beq.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fa4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4919      	ldr	r1, [pc, #100]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fb4:	4b18      	ldr	r3, [pc, #96]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb6:	e001      	b.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fbc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fdfa 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d136      	bne.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d031      	beq.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a07      	ldr	r2, [pc, #28]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ffa:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffc:	e001      	b.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4902      	ldr	r1, [pc, #8]	@ (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	428b      	cmp	r3, r1
 800400c:	d106      	bne.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800400e:	4b02      	ldr	r3, [pc, #8]	@ (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e006      	b.n	8004020 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004012:	bf00      	nop
 8004014:	40003800 	.word	0x40003800
 8004018:	40003400 	.word	0x40003400
 800401c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004020:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004024:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004034:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fdc0 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004050:	e000      	b.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004052:	bf00      	nop
}
 8004054:	bf00      	nop
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	1c99      	adds	r1, r3, #2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6251      	str	r1, [r2, #36]	@ 0x24
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d113      	bne.n	80040ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ffc9 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	1c99      	adds	r1, r3, #2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80040e6:	8819      	ldrh	r1, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <I2SEx_TxISR_I2SExt+0x90>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <I2SEx_TxISR_I2SExt+0x22>
 80040f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <I2SEx_TxISR_I2SExt+0x94>)
 80040f4:	e001      	b.n	80040fa <I2SEx_TxISR_I2SExt+0x26>
 80040f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040fa:	460a      	mov	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d121      	bne.n	800415a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a12      	ldr	r2, [pc, #72]	@ (8004164 <I2SEx_TxISR_I2SExt+0x90>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <I2SEx_TxISR_I2SExt+0x50>
 8004120:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <I2SEx_TxISR_I2SExt+0x94>)
 8004122:	e001      	b.n	8004128 <I2SEx_TxISR_I2SExt+0x54>
 8004124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	490d      	ldr	r1, [pc, #52]	@ (8004164 <I2SEx_TxISR_I2SExt+0x90>)
 8004130:	428b      	cmp	r3, r1
 8004132:	d101      	bne.n	8004138 <I2SEx_TxISR_I2SExt+0x64>
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <I2SEx_TxISR_I2SExt+0x94>)
 8004136:	e001      	b.n	800413c <I2SEx_TxISR_I2SExt+0x68>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004140:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff81 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40003800 	.word	0x40003800
 8004168:	40003400 	.word	0x40003400

0800416c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68d8      	ldr	r0, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	1c99      	adds	r1, r3, #2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004184:	b282      	uxth	r2, r0
 8004186:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d113      	bne.n	80041c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff4a 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <I2SEx_RxISR_I2SExt+0x90>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <I2SEx_RxISR_I2SExt+0x16>
 80041e2:	4b20      	ldr	r3, [pc, #128]	@ (8004264 <I2SEx_RxISR_I2SExt+0x94>)
 80041e4:	e001      	b.n	80041ea <I2SEx_RxISR_I2SExt+0x1a>
 80041e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ea:	68d8      	ldr	r0, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	1c99      	adds	r1, r3, #2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041f6:	b282      	uxth	r2, r0
 80041f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d121      	bne.n	8004256 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <I2SEx_RxISR_I2SExt+0x90>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <I2SEx_RxISR_I2SExt+0x50>
 800421c:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <I2SEx_RxISR_I2SExt+0x94>)
 800421e:	e001      	b.n	8004224 <I2SEx_RxISR_I2SExt+0x54>
 8004220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	490d      	ldr	r1, [pc, #52]	@ (8004260 <I2SEx_RxISR_I2SExt+0x90>)
 800422c:	428b      	cmp	r3, r1
 800422e:	d101      	bne.n	8004234 <I2SEx_RxISR_I2SExt+0x64>
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <I2SEx_RxISR_I2SExt+0x94>)
 8004232:	e001      	b.n	8004238 <I2SEx_RxISR_I2SExt+0x68>
 8004234:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004238:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800423c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff03 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40003800 	.word	0x40003800
 8004264:	40003400 	.word	0x40003400

08004268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e267      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d075      	beq.n	8004372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004286:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b04      	cmp	r3, #4
 8004290:	d00c      	beq.n	80042ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004292:	4b85      	ldr	r3, [pc, #532]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800429a:	2b08      	cmp	r3, #8
 800429c:	d112      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429e:	4b82      	ldr	r3, [pc, #520]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ac:	4b7e      	ldr	r3, [pc, #504]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d05b      	beq.n	8004370 <HAL_RCC_OscConfig+0x108>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d157      	bne.n	8004370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e242      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042cc:	d106      	bne.n	80042dc <HAL_RCC_OscConfig+0x74>
 80042ce:	4b76      	ldr	r3, [pc, #472]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a75      	ldr	r2, [pc, #468]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e01d      	b.n	8004318 <HAL_RCC_OscConfig+0xb0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x98>
 80042e6:	4b70      	ldr	r3, [pc, #448]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6f      	ldr	r2, [pc, #444]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b6d      	ldr	r3, [pc, #436]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6c      	ldr	r2, [pc, #432]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0xb0>
 8004300:	4b69      	ldr	r3, [pc, #420]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a68      	ldr	r2, [pc, #416]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b66      	ldr	r3, [pc, #408]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a65      	ldr	r2, [pc, #404]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fc fdac 	bl	8000e7c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004328:	f7fc fda8 	bl	8000e7c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	@ 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e207      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	4b5b      	ldr	r3, [pc, #364]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0xc0>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fc fd98 	bl	8000e7c <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004350:	f7fc fd94 	bl	8000e7c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	@ 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1f3      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	4b51      	ldr	r3, [pc, #324]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0xe8>
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d063      	beq.n	8004446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437e:	4b4a      	ldr	r3, [pc, #296]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004392:	2b08      	cmp	r3, #8
 8004394:	d11c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b44      	ldr	r3, [pc, #272]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d116      	bne.n	80043d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a2:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_RCC_OscConfig+0x152>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d001      	beq.n	80043ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e1c7      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ba:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4937      	ldr	r1, [pc, #220]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ce:	e03a      	b.n	8004446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d8:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <HAL_RCC_OscConfig+0x244>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fc fd4d 	bl	8000e7c <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e6:	f7fc fd49 	bl	8000e7c <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1a8      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004404:	4b28      	ldr	r3, [pc, #160]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4925      	ldr	r1, [pc, #148]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
 8004418:	e015      	b.n	8004446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441a:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <HAL_RCC_OscConfig+0x244>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fc fd2c 	bl	8000e7c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004428:	f7fc fd28 	bl	8000e7c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e187      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d036      	beq.n	80044c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d016      	beq.n	8004488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445a:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <HAL_RCC_OscConfig+0x248>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fc fd0c 	bl	8000e7c <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004468:	f7fc fd08 	bl	8000e7c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e167      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800447c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x200>
 8004486:	e01b      	b.n	80044c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_RCC_OscConfig+0x248>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448e:	f7fc fcf5 	bl	8000e7c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	e00e      	b.n	80044b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004496:	f7fc fcf1 	bl	8000e7c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d907      	bls.n	80044b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e150      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	42470000 	.word	0x42470000
 80044b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	4b88      	ldr	r3, [pc, #544]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ea      	bne.n	8004496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8097 	beq.w	80045fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b81      	ldr	r3, [pc, #516]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b7d      	ldr	r3, [pc, #500]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	4a7c      	ldr	r2, [pc, #496]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ee:	4b7a      	ldr	r3, [pc, #488]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b77      	ldr	r3, [pc, #476]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d118      	bne.n	800453c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800450a:	4b74      	ldr	r3, [pc, #464]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a73      	ldr	r2, [pc, #460]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004516:	f7fc fcb1 	bl	8000e7c <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451e:	f7fc fcad 	bl	8000e7c <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e10c      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	4b6a      	ldr	r3, [pc, #424]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x2ea>
 8004544:	4b64      	ldr	r3, [pc, #400]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004548:	4a63      	ldr	r2, [pc, #396]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004550:	e01c      	b.n	800458c <HAL_RCC_OscConfig+0x324>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b05      	cmp	r3, #5
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x30c>
 800455a:	4b5f      	ldr	r3, [pc, #380]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	4a5e      	ldr	r2, [pc, #376]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004560:	f043 0304 	orr.w	r3, r3, #4
 8004564:	6713      	str	r3, [r2, #112]	@ 0x70
 8004566:	4b5c      	ldr	r3, [pc, #368]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	4a5b      	ldr	r2, [pc, #364]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	6713      	str	r3, [r2, #112]	@ 0x70
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0x324>
 8004574:	4b58      	ldr	r3, [pc, #352]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	4a57      	ldr	r2, [pc, #348]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004580:	4b55      	ldr	r3, [pc, #340]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a54      	ldr	r2, [pc, #336]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004586:	f023 0304 	bic.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fc fc72 	bl	8000e7c <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fc fc6e 	bl	8000e7c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0cb      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b2:	4b49      	ldr	r3, [pc, #292]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0ee      	beq.n	800459c <HAL_RCC_OscConfig+0x334>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c0:	f7fc fc5c 	bl	8000e7c <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c6:	e00a      	b.n	80045de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fc fc58 	bl	8000e7c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0b5      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045de:	4b3e      	ldr	r3, [pc, #248]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ee      	bne.n	80045c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f0:	4b39      	ldr	r3, [pc, #228]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80a1 	beq.w	8004748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004606:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b08      	cmp	r3, #8
 8004610:	d05c      	beq.n	80046cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d141      	bne.n	800469e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_RCC_OscConfig+0x478>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fc fc2c 	bl	8000e7c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004628:	f7fc fc28 	bl	8000e7c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e087      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	491b      	ldr	r1, [pc, #108]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x478>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fc fc01 	bl	8000e7c <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467e:	f7fc fbfd 	bl	8000e7c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e05c      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x416>
 800469c:	e054      	b.n	8004748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <HAL_RCC_OscConfig+0x478>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fc fbea 	bl	8000e7c <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fc fbe6 	bl	8000e7c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e045      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x444>
 80046ca:	e03d      	b.n	8004748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e038      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <HAL_RCC_OscConfig+0x4ec>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d028      	beq.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d121      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d11a      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004714:	4013      	ands	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800471a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471c:	4293      	cmp	r3, r2
 800471e:	d111      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	3b01      	subs	r3, #1
 800472e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d107      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800

08004758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0cc      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800476c:	4b68      	ldr	r3, [pc, #416]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d90c      	bls.n	8004794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b65      	ldr	r3, [pc, #404]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b63      	ldr	r3, [pc, #396]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b8      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ac:	4b59      	ldr	r3, [pc, #356]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a58      	ldr	r2, [pc, #352]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c4:	4b53      	ldr	r3, [pc, #332]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a52      	ldr	r2, [pc, #328]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b50      	ldr	r3, [pc, #320]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	494d      	ldr	r1, [pc, #308]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d044      	beq.n	8004878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b47      	ldr	r3, [pc, #284]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d119      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d003      	beq.n	8004816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004812:	2b03      	cmp	r3, #3
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	4b3f      	ldr	r3, [pc, #252]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e06f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004826:	4b3b      	ldr	r3, [pc, #236]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e067      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004836:	4b37      	ldr	r3, [pc, #220]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 0203 	bic.w	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4934      	ldr	r1, [pc, #208]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004848:	f7fc fb18 	bl	8000e7c <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	e00a      	b.n	8004866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004850:	f7fc fb14 	bl	8000e7c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e04f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	4b2b      	ldr	r3, [pc, #172]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 020c 	and.w	r2, r3, #12
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	429a      	cmp	r2, r3
 8004876:	d1eb      	bne.n	8004850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004878:	4b25      	ldr	r3, [pc, #148]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d20c      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e032      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	4b19      	ldr	r3, [pc, #100]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4916      	ldr	r1, [pc, #88]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ca:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	490e      	ldr	r1, [pc, #56]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048de:	f000 f821 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490a      	ldr	r1, [pc, #40]	@ (8004918 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fa78 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023c00 	.word	0x40023c00
 8004914:	40023800 	.word	0x40023800
 8004918:	080093a0 	.word	0x080093a0
 800491c:	20000008 	.word	0x20000008
 8004920:	2000000c 	.word	0x2000000c

08004924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b094      	sub	sp, #80	@ 0x50
 800492a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004930:	2300      	movs	r3, #0
 8004932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004934:	2300      	movs	r3, #0
 8004936:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493c:	4b79      	ldr	r3, [pc, #484]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d00d      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x40>
 8004948:	2b08      	cmp	r3, #8
 800494a:	f200 80e1 	bhi.w	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x34>
 8004952:	2b04      	cmp	r3, #4
 8004954:	d003      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x3a>
 8004956:	e0db      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b73      	ldr	r3, [pc, #460]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800495c:	e0db      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4b73      	ldr	r3, [pc, #460]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004960:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004962:	e0d8      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b6f      	ldr	r3, [pc, #444]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	2200      	movs	r2, #0
 8004982:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004984:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34
 8004992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	0159      	lsls	r1, r3, #5
 80049a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a8:	0150      	lsls	r0, r2, #5
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4621      	mov	r1, r4
 80049b0:	1a51      	subs	r1, r2, r1
 80049b2:	6139      	str	r1, [r7, #16]
 80049b4:	4629      	mov	r1, r5
 80049b6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c8:	4659      	mov	r1, fp
 80049ca:	018b      	lsls	r3, r1, #6
 80049cc:	4651      	mov	r1, sl
 80049ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d2:	4651      	mov	r1, sl
 80049d4:	018a      	lsls	r2, r1, #6
 80049d6:	4651      	mov	r1, sl
 80049d8:	ebb2 0801 	subs.w	r8, r2, r1
 80049dc:	4659      	mov	r1, fp
 80049de:	eb63 0901 	sbc.w	r9, r3, r1
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f6:	4690      	mov	r8, r2
 80049f8:	4699      	mov	r9, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	eb18 0303 	adds.w	r3, r8, r3
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	462b      	mov	r3, r5
 8004a04:	eb49 0303 	adc.w	r3, r9, r3
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a16:	4629      	mov	r1, r5
 8004a18:	024b      	lsls	r3, r1, #9
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a20:	4621      	mov	r1, r4
 8004a22:	024a      	lsls	r2, r1, #9
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a34:	f7fb fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a40:	e058      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0159      	lsls	r1, r3, #5
 8004a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6e:	0150      	lsls	r0, r2, #5
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4641      	mov	r1, r8
 8004a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a94:	ebb2 040a 	subs.w	r4, r2, sl
 8004a98:	eb63 050b 	sbc.w	r5, r3, fp
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	00eb      	lsls	r3, r5, #3
 8004aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aaa:	00e2      	lsls	r2, r4, #3
 8004aac:	4614      	mov	r4, r2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	18e3      	adds	r3, r4, r3
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb45 0303 	adc.w	r3, r5, r3
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aca:	4629      	mov	r1, r5
 8004acc:	028b      	lsls	r3, r1, #10
 8004ace:	4621      	mov	r1, r4
 8004ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	028a      	lsls	r2, r1, #10
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	61fa      	str	r2, [r7, #28]
 8004ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae8:	f7fb fb6e 	bl	80001c8 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3750      	adds	r7, #80	@ 0x50
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	007a1200 	.word	0x007a1200

08004b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000008 	.word	0x20000008

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a9b      	lsrs	r3, r3, #10
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4903      	ldr	r1, [pc, #12]	@ (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	080093b0 	.word	0x080093b0

08004b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b74:	f7ff ffdc 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0b5b      	lsrs	r3, r3, #13
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4903      	ldr	r1, [pc, #12]	@ (8004b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	080093b0 	.word	0x080093b0

08004b98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d035      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bc0:	4b62      	ldr	r3, [pc, #392]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc f959 	bl	8000e7c <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bce:	f7fc f955 	bl	8000e7c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0b0      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004be0:	4b5b      	ldr	r3, [pc, #364]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	019a      	lsls	r2, r3, #6
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	071b      	lsls	r3, r3, #28
 8004bf8:	4955      	ldr	r1, [pc, #340]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c00:	4b52      	ldr	r3, [pc, #328]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c06:	f7fc f939 	bl	8000e7c <HAL_GetTick>
 8004c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c0e:	f7fc f935 	bl	8000e7c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e090      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c20:	4b4b      	ldr	r3, [pc, #300]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8083 	beq.w	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	4b44      	ldr	r3, [pc, #272]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	4a43      	ldr	r2, [pc, #268]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c4a:	4b41      	ldr	r3, [pc, #260]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c56:	4b3f      	ldr	r3, [pc, #252]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c62:	f7fc f90b 	bl	8000e7c <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fc f907 	bl	8000e7c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e062      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c7c:	4b35      	ldr	r3, [pc, #212]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c88:	4b31      	ldr	r3, [pc, #196]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02f      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d028      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cb0:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb6:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cbc:	4a24      	ldr	r2, [pc, #144]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cc2:	4b23      	ldr	r3, [pc, #140]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d114      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fc f8d5 	bl	8000e7c <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7fc f8d1 	bl	8000e7c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e02a      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	4b18      	ldr	r3, [pc, #96]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ee      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d06:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1a:	490d      	ldr	r1, [pc, #52]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d22:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4a0a      	ldr	r2, [pc, #40]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d28:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d2c:	6093      	str	r3, [r2, #8]
 8004d2e:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3a:	4905      	ldr	r1, [pc, #20]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	42470068 	.word	0x42470068
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40007000 	.word	0x40007000
 8004d58:	42470e40 	.word	0x42470e40

08004d5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d13f      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d7a:	4b24      	ldr	r3, [pc, #144]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d90:	d12f      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d92:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d94:	617b      	str	r3, [r7, #20]
          break;
 8004d96:	e02f      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d98:	4b1c      	ldr	r3, [pc, #112]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da4:	d108      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004da6:	4b19      	ldr	r3, [pc, #100]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dae:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	e007      	b.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004db8:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc0:	4a15      	ldr	r2, [pc, #84]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004dc8:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004de2:	0f1b      	lsrs	r3, r3, #28
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	617b      	str	r3, [r7, #20]
          break;
 8004df0:	e002      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
          break;
 8004df6:	bf00      	nop
        }
      }
      break;
 8004df8:	e000      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004dfa:	bf00      	nop
    }
  }
  return frequency;
 8004dfc:	697b      	ldr	r3, [r7, #20]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00bb8000 	.word	0x00bb8000
 8004e14:	007a1200 	.word	0x007a1200
 8004e18:	00f42400 	.word	0x00f42400

08004e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07b      	b.n	8004f26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d108      	bne.n	8004e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e3e:	d009      	beq.n	8004e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	61da      	str	r2, [r3, #28]
 8004e46:	e005      	b.n	8004e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fb fe62 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed8:	ea42 0103 	orr.w	r1, r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	f003 0104 	and.w	r1, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	f003 0210 	and.w	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e042      	b.n	8004fc6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7fb fe37 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2224      	movs	r2, #36	@ 0x24
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f972 	bl	800525c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f96:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08a      	sub	sp, #40	@ 0x28
 8004fd2:	af02      	add	r7, sp, #8
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d175      	bne.n	80050da <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_UART_Transmit+0x2c>
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06e      	b.n	80050dc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2221      	movs	r2, #33	@ 0x21
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800500c:	f7fb ff36 	bl	8000e7c <HAL_GetTick>
 8005010:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	d108      	bne.n	800503a <HAL_UART_Transmit+0x6c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e003      	b.n	8005042 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005042:	e02e      	b.n	80050a2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2180      	movs	r1, #128	@ 0x80
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f848 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e03a      	b.n	80050dc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10b      	bne.n	8005084 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800507a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	3302      	adds	r3, #2
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e007      	b.n	8005094 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3301      	adds	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1cb      	bne.n	8005044 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2200      	movs	r2, #0
 80050b4:	2140      	movs	r1, #64	@ 0x40
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f814 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e006      	b.n	80050dc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e03b      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d037      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fe:	f7fb febd 	bl	8000e7c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e03a      	b.n	800518e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d023      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b80      	cmp	r3, #128	@ 0x80
 800512a:	d020      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x8a>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b40      	cmp	r3, #64	@ 0x40
 8005130:	d01d      	beq.n	800516e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b08      	cmp	r3, #8
 800513e:	d116      	bne.n	800516e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f81d 	bl	8005196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2208      	movs	r2, #8
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e00f      	b.n	800518e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4013      	ands	r3, r2
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	429a      	cmp	r2, r3
 800518a:	d0b4      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005196:	b480      	push	{r7}
 8005198:	b095      	sub	sp, #84	@ 0x54
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051be:	643a      	str	r2, [r7, #64]	@ 0x40
 80051c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e5      	bne.n	800519e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3314      	adds	r3, #20
 80051d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e5      	bne.n	80051d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	2b01      	cmp	r3, #1
 800520c:	d119      	bne.n	8005242 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	60bb      	str	r3, [r7, #8]
   return(result);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f023 0310 	bic.w	r3, r3, #16
 8005224:	647b      	str	r3, [r7, #68]	@ 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800522e:	61ba      	str	r2, [r7, #24]
 8005230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6979      	ldr	r1, [r7, #20]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	613b      	str	r3, [r7, #16]
   return(result);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e5      	bne.n	800520e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005250:	bf00      	nop
 8005252:	3754      	adds	r7, #84	@ 0x54
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800525c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005260:	b0c0      	sub	sp, #256	@ 0x100
 8005262:	af00      	add	r7, sp, #0
 8005264:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	68d9      	ldr	r1, [r3, #12]
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	ea40 0301 	orr.w	r3, r0, r1
 8005284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052b4:	f021 010c 	bic.w	r1, r1, #12
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052c2:	430b      	orrs	r3, r1
 80052c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	6999      	ldr	r1, [r3, #24]
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	ea40 0301 	orr.w	r3, r0, r1
 80052e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005528 <UART_SetConfig+0x2cc>)
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d005      	beq.n	80052fc <UART_SetConfig+0xa0>
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b8d      	ldr	r3, [pc, #564]	@ (800552c <UART_SetConfig+0x2d0>)
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d104      	bne.n	8005306 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052fc:	f7ff fc38 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8005300:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005304:	e003      	b.n	800530e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005306:	f7ff fc1f 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 800530a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005318:	f040 810c 	bne.w	8005534 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800531c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005326:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800532a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800532e:	4622      	mov	r2, r4
 8005330:	462b      	mov	r3, r5
 8005332:	1891      	adds	r1, r2, r2
 8005334:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005336:	415b      	adcs	r3, r3
 8005338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800533a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800533e:	4621      	mov	r1, r4
 8005340:	eb12 0801 	adds.w	r8, r2, r1
 8005344:	4629      	mov	r1, r5
 8005346:	eb43 0901 	adc.w	r9, r3, r1
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800535a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800535e:	4690      	mov	r8, r2
 8005360:	4699      	mov	r9, r3
 8005362:	4623      	mov	r3, r4
 8005364:	eb18 0303 	adds.w	r3, r8, r3
 8005368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800536c:	462b      	mov	r3, r5
 800536e:	eb49 0303 	adc.w	r3, r9, r3
 8005372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005382:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800538a:	460b      	mov	r3, r1
 800538c:	18db      	adds	r3, r3, r3
 800538e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005390:	4613      	mov	r3, r2
 8005392:	eb42 0303 	adc.w	r3, r2, r3
 8005396:	657b      	str	r3, [r7, #84]	@ 0x54
 8005398:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800539c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053a0:	f7fa ff12 	bl	80001c8 <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4b61      	ldr	r3, [pc, #388]	@ (8005530 <UART_SetConfig+0x2d4>)
 80053aa:	fba3 2302 	umull	r2, r3, r3, r2
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	011c      	lsls	r4, r3, #4
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053cc:	415b      	adcs	r3, r3
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053d4:	4641      	mov	r1, r8
 80053d6:	eb12 0a01 	adds.w	sl, r2, r1
 80053da:	4649      	mov	r1, r9
 80053dc:	eb43 0b01 	adc.w	fp, r3, r1
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f4:	4692      	mov	sl, r2
 80053f6:	469b      	mov	fp, r3
 80053f8:	4643      	mov	r3, r8
 80053fa:	eb1a 0303 	adds.w	r3, sl, r3
 80053fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005402:	464b      	mov	r3, r9
 8005404:	eb4b 0303 	adc.w	r3, fp, r3
 8005408:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005418:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800541c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005420:	460b      	mov	r3, r1
 8005422:	18db      	adds	r3, r3, r3
 8005424:	643b      	str	r3, [r7, #64]	@ 0x40
 8005426:	4613      	mov	r3, r2
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	647b      	str	r3, [r7, #68]	@ 0x44
 800542e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005432:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005436:	f7fa fec7 	bl	80001c8 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4611      	mov	r1, r2
 8005440:	4b3b      	ldr	r3, [pc, #236]	@ (8005530 <UART_SetConfig+0x2d4>)
 8005442:	fba3 2301 	umull	r2, r3, r3, r1
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2264      	movs	r2, #100	@ 0x64
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	1acb      	subs	r3, r1, r3
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005456:	4b36      	ldr	r3, [pc, #216]	@ (8005530 <UART_SetConfig+0x2d4>)
 8005458:	fba3 2302 	umull	r2, r3, r3, r2
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005464:	441c      	add	r4, r3
 8005466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800546a:	2200      	movs	r2, #0
 800546c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005470:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005474:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005478:	4642      	mov	r2, r8
 800547a:	464b      	mov	r3, r9
 800547c:	1891      	adds	r1, r2, r2
 800547e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005480:	415b      	adcs	r3, r3
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005488:	4641      	mov	r1, r8
 800548a:	1851      	adds	r1, r2, r1
 800548c:	6339      	str	r1, [r7, #48]	@ 0x30
 800548e:	4649      	mov	r1, r9
 8005490:	414b      	adcs	r3, r1
 8005492:	637b      	str	r3, [r7, #52]	@ 0x34
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054a0:	4659      	mov	r1, fp
 80054a2:	00cb      	lsls	r3, r1, #3
 80054a4:	4651      	mov	r1, sl
 80054a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054aa:	4651      	mov	r1, sl
 80054ac:	00ca      	lsls	r2, r1, #3
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	4642      	mov	r2, r8
 80054b6:	189b      	adds	r3, r3, r2
 80054b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054bc:	464b      	mov	r3, r9
 80054be:	460a      	mov	r2, r1
 80054c0:	eb42 0303 	adc.w	r3, r2, r3
 80054c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054dc:	460b      	mov	r3, r1
 80054de:	18db      	adds	r3, r3, r3
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e2:	4613      	mov	r3, r2
 80054e4:	eb42 0303 	adc.w	r3, r2, r3
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054f2:	f7fa fe69 	bl	80001c8 <__aeabi_uldivmod>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <UART_SetConfig+0x2d4>)
 80054fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	2164      	movs	r1, #100	@ 0x64
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	3332      	adds	r3, #50	@ 0x32
 800550e:	4a08      	ldr	r2, [pc, #32]	@ (8005530 <UART_SetConfig+0x2d4>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	f003 0207 	and.w	r2, r3, #7
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4422      	add	r2, r4
 8005522:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005524:	e106      	b.n	8005734 <UART_SetConfig+0x4d8>
 8005526:	bf00      	nop
 8005528:	40011000 	.word	0x40011000
 800552c:	40011400 	.word	0x40011400
 8005530:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005538:	2200      	movs	r2, #0
 800553a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800553e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005542:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005546:	4642      	mov	r2, r8
 8005548:	464b      	mov	r3, r9
 800554a:	1891      	adds	r1, r2, r2
 800554c:	6239      	str	r1, [r7, #32]
 800554e:	415b      	adcs	r3, r3
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
 8005552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005556:	4641      	mov	r1, r8
 8005558:	1854      	adds	r4, r2, r1
 800555a:	4649      	mov	r1, r9
 800555c:	eb43 0501 	adc.w	r5, r3, r1
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	00eb      	lsls	r3, r5, #3
 800556a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800556e:	00e2      	lsls	r2, r4, #3
 8005570:	4614      	mov	r4, r2
 8005572:	461d      	mov	r5, r3
 8005574:	4643      	mov	r3, r8
 8005576:	18e3      	adds	r3, r4, r3
 8005578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800557c:	464b      	mov	r3, r9
 800557e:	eb45 0303 	adc.w	r3, r5, r3
 8005582:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005592:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055a2:	4629      	mov	r1, r5
 80055a4:	008b      	lsls	r3, r1, #2
 80055a6:	4621      	mov	r1, r4
 80055a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ac:	4621      	mov	r1, r4
 80055ae:	008a      	lsls	r2, r1, #2
 80055b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055b4:	f7fa fe08 	bl	80001c8 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4b60      	ldr	r3, [pc, #384]	@ (8005740 <UART_SetConfig+0x4e4>)
 80055be:	fba3 2302 	umull	r2, r3, r3, r2
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	011c      	lsls	r4, r3, #4
 80055c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	1891      	adds	r1, r2, r2
 80055de:	61b9      	str	r1, [r7, #24]
 80055e0:	415b      	adcs	r3, r3
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e8:	4641      	mov	r1, r8
 80055ea:	1851      	adds	r1, r2, r1
 80055ec:	6139      	str	r1, [r7, #16]
 80055ee:	4649      	mov	r1, r9
 80055f0:	414b      	adcs	r3, r1
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005600:	4659      	mov	r1, fp
 8005602:	00cb      	lsls	r3, r1, #3
 8005604:	4651      	mov	r1, sl
 8005606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560a:	4651      	mov	r1, sl
 800560c:	00ca      	lsls	r2, r1, #3
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	4603      	mov	r3, r0
 8005614:	4642      	mov	r2, r8
 8005616:	189b      	adds	r3, r3, r2
 8005618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800561c:	464b      	mov	r3, r9
 800561e:	460a      	mov	r2, r1
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005632:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005640:	4649      	mov	r1, r9
 8005642:	008b      	lsls	r3, r1, #2
 8005644:	4641      	mov	r1, r8
 8005646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564a:	4641      	mov	r1, r8
 800564c:	008a      	lsls	r2, r1, #2
 800564e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005652:	f7fa fdb9 	bl	80001c8 <__aeabi_uldivmod>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4611      	mov	r1, r2
 800565c:	4b38      	ldr	r3, [pc, #224]	@ (8005740 <UART_SetConfig+0x4e4>)
 800565e:	fba3 2301 	umull	r2, r3, r3, r1
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	2264      	movs	r2, #100	@ 0x64
 8005666:	fb02 f303 	mul.w	r3, r2, r3
 800566a:	1acb      	subs	r3, r1, r3
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	3332      	adds	r3, #50	@ 0x32
 8005670:	4a33      	ldr	r2, [pc, #204]	@ (8005740 <UART_SetConfig+0x4e4>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800567c:	441c      	add	r4, r3
 800567e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005682:	2200      	movs	r2, #0
 8005684:	673b      	str	r3, [r7, #112]	@ 0x70
 8005686:	677a      	str	r2, [r7, #116]	@ 0x74
 8005688:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	1891      	adds	r1, r2, r2
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	415b      	adcs	r3, r3
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800569c:	4641      	mov	r1, r8
 800569e:	1851      	adds	r1, r2, r1
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	4649      	mov	r1, r9
 80056a4:	414b      	adcs	r3, r1
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056b4:	4659      	mov	r1, fp
 80056b6:	00cb      	lsls	r3, r1, #3
 80056b8:	4651      	mov	r1, sl
 80056ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056be:	4651      	mov	r1, sl
 80056c0:	00ca      	lsls	r2, r1, #3
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	4642      	mov	r2, r8
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ce:	464b      	mov	r3, r9
 80056d0:	460a      	mov	r2, r1
 80056d2:	eb42 0303 	adc.w	r3, r2, r3
 80056d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056f0:	4649      	mov	r1, r9
 80056f2:	008b      	lsls	r3, r1, #2
 80056f4:	4641      	mov	r1, r8
 80056f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fa:	4641      	mov	r1, r8
 80056fc:	008a      	lsls	r2, r1, #2
 80056fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005702:	f7fa fd61 	bl	80001c8 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <UART_SetConfig+0x4e4>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	@ 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	3332      	adds	r3, #50	@ 0x32
 800571e:	4a08      	ldr	r2, [pc, #32]	@ (8005740 <UART_SetConfig+0x4e4>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4422      	add	r2, r4
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800573a:	46bd      	mov	sp, r7
 800573c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005740:	51eb851f 	.word	0x51eb851f

08005744 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005744:	b084      	sub	sp, #16
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	f107 001c 	add.w	r0, r7, #28
 8005752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005756:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800575a:	2b01      	cmp	r3, #1
 800575c:	d123      	bne.n	80057a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005762:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005786:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800578a:	2b01      	cmp	r3, #1
 800578c:	d105      	bne.n	800579a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9dc 	bl	8005b58 <USB_CoreReset>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e01b      	b.n	80057de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9d0 	bl	8005b58 <USB_CoreReset>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80057d0:	e005      	b.n	80057de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057de:	7fbb      	ldrb	r3, [r7, #30]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d10b      	bne.n	80057fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f043 0206 	orr.w	r2, r3, #6
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005808:	b004      	add	sp, #16
 800580a:	4770      	bx	lr

0800580c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f043 0201 	orr.w	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f023 0201 	bic.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d115      	bne.n	800589e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800587e:	200a      	movs	r0, #10
 8005880:	f7fb fb08 	bl	8000e94 <HAL_Delay>
      ms += 10U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	330a      	adds	r3, #10
 8005888:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f956 	bl	8005b3c <USB_GetMode>
 8005890:	4603      	mov	r3, r0
 8005892:	2b01      	cmp	r3, #1
 8005894:	d01e      	beq.n	80058d4 <USB_SetCurrentMode+0x84>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2bc7      	cmp	r3, #199	@ 0xc7
 800589a:	d9f0      	bls.n	800587e <USB_SetCurrentMode+0x2e>
 800589c:	e01a      	b.n	80058d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d115      	bne.n	80058d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058b0:	200a      	movs	r0, #10
 80058b2:	f7fb faef 	bl	8000e94 <HAL_Delay>
      ms += 10U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	330a      	adds	r3, #10
 80058ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f93d 	bl	8005b3c <USB_GetMode>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <USB_SetCurrentMode+0x84>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80058cc:	d9f0      	bls.n	80058b0 <USB_SetCurrentMode+0x60>
 80058ce:	e001      	b.n	80058d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e005      	b.n	80058e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80058d8:	d101      	bne.n	80058de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005902:	d901      	bls.n	8005908 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e01b      	b.n	8005940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	daf2      	bge.n	80058f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	019b      	lsls	r3, r3, #6
 8005918:	f043 0220 	orr.w	r2, r3, #32
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800592c:	d901      	bls.n	8005932 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e006      	b.n	8005940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b20      	cmp	r3, #32
 800593c:	d0f0      	beq.n	8005920 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005964:	d901      	bls.n	800596a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e018      	b.n	800599c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	daf2      	bge.n	8005958 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2210      	movs	r2, #16
 800597a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005988:	d901      	bls.n	800598e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e006      	b.n	800599c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b10      	cmp	r3, #16
 8005998:	d0f0      	beq.n	800597c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b089      	sub	sp, #36	@ 0x24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4611      	mov	r1, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	460b      	mov	r3, r1
 80059b8:	71fb      	strb	r3, [r7, #7]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d123      	bne.n	8005a16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059ce:	88bb      	ldrh	r3, [r7, #4]
 80059d0:	3303      	adds	r3, #3
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e018      	b.n	8005a0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	031a      	lsls	r2, r3, #12
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e8:	461a      	mov	r2, r3
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3301      	adds	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3301      	adds	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3e2      	bcc.n	80059dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3724      	adds	r7, #36	@ 0x24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b08b      	sub	sp, #44	@ 0x2c
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	089b      	lsrs	r3, r3, #2
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	e014      	b.n	8005a7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	3301      	adds	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	3301      	adds	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	3301      	adds	r3, #1
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	3301      	adds	r3, #1
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d3e6      	bcc.n	8005a50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a82:	8bfb      	ldrh	r3, [r7, #30]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01e      	beq.n	8005ac6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a92:	461a      	mov	r2, r3
 8005a94:	f107 0310 	add.w	r3, r7, #16
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	701a      	strb	r2, [r3, #0]
      i++;
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005aba:	8bfb      	ldrh	r3, [r7, #30]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ac0:	8bfb      	ldrh	r3, [r7, #30]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1ea      	bne.n	8005a9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	372c      	adds	r7, #44	@ 0x2c
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0301 	and.w	r3, r3, #1
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b70:	d901      	bls.n	8005b76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e01b      	b.n	8005bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	daf2      	bge.n	8005b64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b9a:	d901      	bls.n	8005ba0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e006      	b.n	8005bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d0f0      	beq.n	8005b8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2300      	movs	r3, #0
 8005be0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d119      	bne.n	8005c46 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10a      	bne.n	8005c30 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c28:	f043 0304 	orr.w	r3, r3, #4
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e014      	b.n	8005c5a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c3e:	f023 0304 	bic.w	r3, r3, #4
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	e009      	b.n	8005c5a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c5a:	2110      	movs	r1, #16
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fe43 	bl	80058e8 <USB_FlushTxFifo>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fe6d 	bl	800594c <USB_FlushRxFifo>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	e015      	b.n	8005cae <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295
 8005c94:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	3301      	adds	r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d3e3      	bcc.n	8005c82 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a18      	ldr	r2, [pc, #96]	@ (8005d2c <USB_HostInit+0x170>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d10b      	bne.n	8005ce8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a15      	ldr	r2, [pc, #84]	@ (8005d30 <USB_HostInit+0x174>)
 8005cdc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a14      	ldr	r2, [pc, #80]	@ (8005d34 <USB_HostInit+0x178>)
 8005ce2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005ce6:	e009      	b.n	8005cfc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2280      	movs	r2, #128	@ 0x80
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a11      	ldr	r2, [pc, #68]	@ (8005d38 <USB_HostInit+0x17c>)
 8005cf2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	@ (8005d3c <USB_HostInit+0x180>)
 8005cf8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f043 0210 	orr.w	r2, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <USB_HostInit+0x184>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d28:	b004      	add	sp, #16
 8005d2a:	4770      	bx	lr
 8005d2c:	40040000 	.word	0x40040000
 8005d30:	01000200 	.word	0x01000200
 8005d34:	00e00300 	.word	0x00e00300
 8005d38:	00600080 	.word	0x00600080
 8005d3c:	004000e0 	.word	0x004000e0
 8005d40:	a3200008 	.word	0xa3200008

08005d44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d107      	bne.n	8005d96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005d92:	6053      	str	r3, [r2, #4]
 8005d94:	e00c      	b.n	8005db0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d107      	bne.n	8005dac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005da2:	461a      	mov	r2, r3
 8005da4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005da8:	6053      	str	r3, [r2, #4]
 8005daa:	e001      	b.n	8005db0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005dde:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dec:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005dee:	2064      	movs	r0, #100	@ 0x64
 8005df0:	f7fb f850 	bl	8000e94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e00:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e02:	200a      	movs	r0, #10
 8005e04:	f7fb f846 	bl	8000e94 <HAL_Delay>

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e36:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <USB_DriveVbus+0x44>
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d106      	bne.n	8005e56 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e54:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e60:	d109      	bne.n	8005e76 <USB_DriveVbus+0x64>
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e74:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	0c5b      	lsrs	r3, r3, #17
 8005ea2:	f003 0303 	and.w	r3, r3, #3
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	b29b      	uxth	r3, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	70fb      	strb	r3, [r7, #3]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70bb      	strb	r3, [r7, #2]
 8005eea:	4613      	mov	r3, r2
 8005eec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f02:	461a      	mov	r2, r3
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d87c      	bhi.n	800600c <USB_HC_Init+0x138>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <USB_HC_Init+0x44>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005fcf 	.word	0x08005fcf
 8005f20:	08005f29 	.word	0x08005f29
 8005f24:	08005f91 	.word	0x08005f91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f34:	461a      	mov	r2, r3
 8005f36:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005f3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	da10      	bge.n	8005f66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f62:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005f64:	e055      	b.n	8006012 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a6f      	ldr	r2, [pc, #444]	@ (8006128 <USB_HC_Init+0x254>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d151      	bne.n	8006012 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f88:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f8c:	60d3      	str	r3, [r2, #12]
      break;
 8005f8e:	e040      	b.n	8006012 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005fa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	da34      	bge.n	8006016 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	78fa      	ldrb	r2, [r7, #3]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fcc:	e023      	b.n	8006016 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f240 2325 	movw	r3, #549	@ 0x225
 8005fe0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fe2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da17      	bge.n	800601a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006004:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006008:	60d3      	str	r3, [r2, #12]
      }
      break;
 800600a:	e006      	b.n	800601a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
      break;
 8006010:	e004      	b.n	800601c <USB_HC_Init+0x148>
      break;
 8006012:	bf00      	nop
 8006014:	e002      	b.n	800601c <USB_HC_Init+0x148>
      break;
 8006016:	bf00      	nop
 8006018:	e000      	b.n	800601c <USB_HC_Init+0x148>
      break;
 800601a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006028:	461a      	mov	r2, r3
 800602a:	2300      	movs	r3, #0
 800602c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006048:	f043 0302 	orr.w	r3, r3, #2
 800604c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	6939      	ldr	r1, [r7, #16]
 8006064:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006068:	4313      	orrs	r3, r2
 800606a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800607c:	2b00      	cmp	r3, #0
 800607e:	da03      	bge.n	8006088 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006080:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	e001      	b.n	800608c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff fef9 	bl	8005e84 <USB_GetHostSpeed>
 8006092:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006094:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006098:	2b02      	cmp	r3, #2
 800609a:	d106      	bne.n	80060aa <USB_HC_Init+0x1d6>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d003      	beq.n	80060aa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e001      	b.n	80060ae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060ae:	787b      	ldrb	r3, [r7, #1]
 80060b0:	059b      	lsls	r3, r3, #22
 80060b2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060b6:	78bb      	ldrb	r3, [r7, #2]
 80060b8:	02db      	lsls	r3, r3, #11
 80060ba:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060c4:	049b      	lsls	r3, r3, #18
 80060c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80060cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80060ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060d2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80060e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060ec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d003      	beq.n	80060fe <USB_HC_Init+0x22a>
 80060f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d10f      	bne.n	800611e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	440a      	add	r2, r1
 8006114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006118:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800611c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800611e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40040000 	.word	0x40040000

0800612c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	@ 0x30
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4613      	mov	r3, r2
 8006138:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006148:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a5d      	ldr	r2, [pc, #372]	@ (80062c4 <USB_HC_StartXfer+0x198>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d12f      	bne.n	80061b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d11c      	bne.n	8006192 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	7c9b      	ldrb	r3, [r3, #18]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <USB_HC_StartXfer+0x3c>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	7c9b      	ldrb	r3, [r3, #18]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d124      	bne.n	80061b2 <USB_HC_StartXfer+0x86>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	799b      	ldrb	r3, [r3, #6]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d120      	bne.n	80061b2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	6a3a      	ldr	r2, [r7, #32]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800618a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618e:	60d3      	str	r3, [r2, #12]
 8006190:	e00f      	b.n	80061b2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	791b      	ldrb	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <USB_HC_StartXfer+0x86>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	795b      	ldrb	r3, [r3, #5]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d107      	bne.n	80061b2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	4619      	mov	r1, r3
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fb6b 	bl	8006884 <USB_DoPing>
        return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e232      	b.n	8006618 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	799b      	ldrb	r3, [r3, #6]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d158      	bne.n	800626c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80061ba:	2301      	movs	r3, #1
 80061bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	78db      	ldrb	r3, [r3, #3]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	8a92      	ldrh	r2, [r2, #20]
 80061cc:	fb03 f202 	mul.w	r2, r3, r2
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61da      	str	r2, [r3, #28]
 80061d4:	e07c      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	7c9b      	ldrb	r3, [r3, #18]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d130      	bne.n	8006240 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80061e4:	d918      	bls.n	8006218 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	8a9b      	ldrh	r3, [r3, #20]
 80061ea:	461a      	mov	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d003      	beq.n	8006208 <USB_HC_StartXfer+0xdc>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d103      	bne.n	8006210 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2202      	movs	r2, #2
 800620c:	60da      	str	r2, [r3, #12]
 800620e:	e05f      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2201      	movs	r2, #1
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	e05b      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d007      	beq.n	8006238 <USB_HC_StartXfer+0x10c>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d003      	beq.n	8006238 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2204      	movs	r2, #4
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	e04b      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2203      	movs	r2, #3
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	e047      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d10d      	bne.n	8006262 <USB_HC_StartXfer+0x136>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	8a92      	ldrh	r2, [r2, #20]
 800624e:	4293      	cmp	r3, r2
 8006250:	d907      	bls.n	8006262 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006252:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	8a92      	ldrh	r2, [r2, #20]
 8006258:	fb03 f202 	mul.w	r2, r3, r2
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	61da      	str	r2, [r3, #28]
 8006260:	e036      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6a1a      	ldr	r2, [r3, #32]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	61da      	str	r2, [r3, #28]
 800626a:	e031      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d018      	beq.n	80062a6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	8a92      	ldrh	r2, [r2, #20]
 800627c:	4413      	add	r3, r2
 800627e:	3b01      	subs	r3, #1
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	8a92      	ldrh	r2, [r2, #20]
 8006284:	fbb3 f3f2 	udiv	r3, r3, r2
 8006288:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800628a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800628c:	8b7b      	ldrh	r3, [r7, #26]
 800628e:	429a      	cmp	r2, r3
 8006290:	d90b      	bls.n	80062aa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006292:	8b7b      	ldrh	r3, [r7, #26]
 8006294:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	8a92      	ldrh	r2, [r2, #20]
 800629c:	fb03 f202 	mul.w	r2, r3, r2
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	61da      	str	r2, [r3, #28]
 80062a4:	e001      	b.n	80062aa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80062a6:	2301      	movs	r3, #1
 80062a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	78db      	ldrb	r3, [r3, #3]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	8a92      	ldrh	r2, [r2, #20]
 80062b8:	fb03 f202 	mul.w	r2, r3, r2
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	61da      	str	r2, [r3, #28]
 80062c0:	e006      	b.n	80062d0 <USB_HC_StartXfer+0x1a4>
 80062c2:	bf00      	nop
 80062c4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062da:	04d9      	lsls	r1, r3, #19
 80062dc:	4ba3      	ldr	r3, [pc, #652]	@ (800656c <USB_HC_StartXfer+0x440>)
 80062de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	7d9b      	ldrb	r3, [r3, #22]
 80062e6:	075b      	lsls	r3, r3, #29
 80062e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062ec:	69f9      	ldr	r1, [r7, #28]
 80062ee:	0148      	lsls	r0, r1, #5
 80062f0:	6a39      	ldr	r1, [r7, #32]
 80062f2:	4401      	add	r1, r0
 80062f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6999      	ldr	r1, [r3, #24]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006312:	460a      	mov	r2, r1
 8006314:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf0c      	ite	eq
 8006326:	2301      	moveq	r3, #1
 8006328:	2300      	movne	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006348:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800634c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	7e7b      	ldrb	r3, [r7, #25]
 800635e:	075b      	lsls	r3, r3, #29
 8006360:	69f9      	ldr	r1, [r7, #28]
 8006362:	0148      	lsls	r0, r1, #5
 8006364:	6a39      	ldr	r1, [r7, #32]
 8006366:	4401      	add	r1, r0
 8006368:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800636c:	4313      	orrs	r3, r2
 800636e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	799b      	ldrb	r3, [r3, #6]
 8006374:	2b01      	cmp	r3, #1
 8006376:	f040 80c3 	bne.w	8006500 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	7c5b      	ldrb	r3, [r3, #17]
 800637e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006384:	4313      	orrs	r3, r2
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	6a3a      	ldr	r2, [r7, #32]
 800638c:	440a      	add	r2, r1
 800638e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006392:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006396:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	79db      	ldrb	r3, [r3, #7]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d123      	bne.n	8006408 <USB_HC_StartXfer+0x2dc>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	78db      	ldrb	r3, [r3, #3]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d11f      	bne.n	8006408 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	6a3a      	ldr	r2, [r7, #32]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006406:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	7c9b      	ldrb	r3, [r3, #18]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d003      	beq.n	8006418 <USB_HC_StartXfer+0x2ec>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	7c9b      	ldrb	r3, [r3, #18]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d117      	bne.n	8006448 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800641c:	2b01      	cmp	r3, #1
 800641e:	d113      	bne.n	8006448 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	78db      	ldrb	r3, [r3, #3]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d10f      	bne.n	8006448 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	440a      	add	r2, r1
 800643e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006446:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	7c9b      	ldrb	r3, [r3, #18]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d162      	bne.n	8006516 <USB_HC_StartXfer+0x3ea>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	78db      	ldrb	r3, [r3, #3]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d15e      	bne.n	8006516 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	3b01      	subs	r3, #1
 800645e:	2b03      	cmp	r3, #3
 8006460:	d858      	bhi.n	8006514 <USB_HC_StartXfer+0x3e8>
 8006462:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <USB_HC_StartXfer+0x33c>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	08006479 	.word	0x08006479
 800646c:	0800649b 	.word	0x0800649b
 8006470:	080064bd 	.word	0x080064bd
 8006474:	080064df 	.word	0x080064df
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	6a3a      	ldr	r2, [r7, #32]
 800648c:	440a      	add	r2, r1
 800648e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006496:	6053      	str	r3, [r2, #4]
          break;
 8006498:	e03d      	b.n	8006516 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	6a3a      	ldr	r2, [r7, #32]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064b4:	f043 030e 	orr.w	r3, r3, #14
 80064b8:	6053      	str	r3, [r2, #4]
          break;
 80064ba:	e02c      	b.n	8006516 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064da:	6053      	str	r3, [r2, #4]
          break;
 80064dc:	e01b      	b.n	8006516 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064fc:	6053      	str	r3, [r2, #4]
          break;
 80064fe:	e00a      	b.n	8006516 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650c:	461a      	mov	r2, r3
 800650e:	2300      	movs	r3, #0
 8006510:	6053      	str	r3, [r2, #4]
 8006512:	e000      	b.n	8006516 <USB_HC_StartXfer+0x3ea>
          break;
 8006514:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800652c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	78db      	ldrb	r3, [r3, #3]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e003      	b.n	8006548 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006546:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800654e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655c:	461a      	mov	r2, r3
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e055      	b.n	8006618 <USB_HC_StartXfer+0x4ec>
 800656c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	78db      	ldrb	r3, [r3, #3]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d14e      	bne.n	8006616 <USB_HC_StartXfer+0x4ea>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d04a      	beq.n	8006616 <USB_HC_StartXfer+0x4ea>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	79db      	ldrb	r3, [r3, #7]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d146      	bne.n	8006616 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	7c9b      	ldrb	r3, [r3, #18]
 800658c:	2b03      	cmp	r3, #3
 800658e:	d831      	bhi.n	80065f4 <USB_HC_StartXfer+0x4c8>
 8006590:	a201      	add	r2, pc, #4	@ (adr r2, 8006598 <USB_HC_StartXfer+0x46c>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065cd 	.word	0x080065cd
 80065a0:	080065a9 	.word	0x080065a9
 80065a4:	080065cd 	.word	0x080065cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	3303      	adds	r3, #3
 80065ae:	089b      	lsrs	r3, r3, #2
 80065b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065b2:	8afa      	ldrh	r2, [r7, #22]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d91c      	bls.n	80065f8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80065ca:	e015      	b.n	80065f8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	3303      	adds	r3, #3
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065d6:	8afa      	ldrh	r2, [r7, #22]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d90a      	bls.n	80065fc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80065f2:	e003      	b.n	80065fc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80065f4:	bf00      	nop
 80065f6:	e002      	b.n	80065fe <USB_HC_StartXfer+0x4d2>
        break;
 80065f8:	bf00      	nop
 80065fa:	e000      	b.n	80065fe <USB_HC_StartXfer+0x4d2>
        break;
 80065fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6999      	ldr	r1, [r3, #24]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	785a      	ldrb	r2, [r3, #1]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	b29b      	uxth	r3, r3
 800660c:	2000      	movs	r0, #0
 800660e:	9000      	str	r0, [sp, #0]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff f9c9 	bl	80059a8 <USB_WritePacket>
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3728      	adds	r7, #40	@ 0x28
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	b29b      	uxth	r3, r3
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006642:	b480      	push	{r7}
 8006644:	b089      	sub	sp, #36	@ 0x24
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0c9b      	lsrs	r3, r3, #18
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	0fdb      	lsrs	r3, r3, #31
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	0fdb      	lsrs	r3, r3, #31
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d10d      	bne.n	80066c4 <USB_HC_Halt+0x82>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <USB_HC_Halt+0x82>
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d002      	beq.n	80066c0 <USB_HC_Halt+0x7e>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d101      	bne.n	80066c4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e0d8      	b.n	8006876 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <USB_HC_Halt+0x8e>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d173      	bne.n	80067b8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d14a      	bne.n	8006792 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d133      	bne.n	8006770 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	440a      	add	r2, r1
 800671e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006722:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006726:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	440a      	add	r2, r1
 800673e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006746:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	3301      	adds	r3, #1
 800674c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006754:	d82e      	bhi.n	80067b4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800676c:	d0ec      	beq.n	8006748 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800676e:	e081      	b.n	8006874 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	440a      	add	r2, r1
 8006786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800678a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800678e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006790:	e070      	b.n	8006874 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067b2:	e05f      	b.n	8006874 <USB_HC_Halt+0x232>
            break;
 80067b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067b6:	e05d      	b.n	8006874 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d133      	bne.n	8006850 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006802:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006806:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	4413      	add	r3, r2
 8006810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	440a      	add	r2, r1
 800681e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006822:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006826:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3301      	adds	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006834:	d81d      	bhi.n	8006872 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800684c:	d0ec      	beq.n	8006828 <USB_HC_Halt+0x1e6>
 800684e:	e011      	b.n	8006874 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800686a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e000      	b.n	8006874 <USB_HC_Halt+0x232>
          break;
 8006872:	bf00      	nop
    }
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3724      	adds	r7, #36	@ 0x24
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006898:	2301      	movs	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	04da      	lsls	r2, r3, #19
 80068a0:	4b15      	ldr	r3, [pc, #84]	@ (80068f8 <USB_DoPing+0x74>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	0151      	lsls	r1, r2, #5
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	440a      	add	r2, r1
 80068ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e2:	461a      	mov	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	1ff80000 	.word	0x1ff80000

080068fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fe ff8c 	bl	800582e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006916:	2110      	movs	r1, #16
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe ffe5 	bl	80058e8 <USB_FlushTxFifo>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff f80f 	bl	800594c <USB_FlushRxFifo>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
 800693c:	e01f      	b.n	800697e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006954:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800695c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006964:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006972:	461a      	mov	r2, r3
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	3301      	adds	r3, #1
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b0f      	cmp	r3, #15
 8006982:	d9dc      	bls.n	800693e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006984:	2300      	movs	r3, #0
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	e034      	b.n	80069f4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069be:	461a      	mov	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069d0:	d80c      	bhi.n	80069ec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e8:	d0ec      	beq.n	80069c4 <USB_StopHost+0xc8>
 80069ea:	e000      	b.n	80069ee <USB_StopHost+0xf2>
        break;
 80069ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	3301      	adds	r3, #1
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b0f      	cmp	r3, #15
 80069f8:	d9c7      	bls.n	800698a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a00:	461a      	mov	r2, r3
 8006a02:	f04f 33ff 	mov.w	r3, #4294967295
 8006a06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fe fefb 	bl	800580c <USB_EnableGlobalInt>

  return ret;
 8006a16:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b089      	sub	sp, #36	@ 0x24
 8006a24:	af04      	add	r7, sp, #16
 8006a26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a28:	2301      	movs	r3, #1
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	2102      	movs	r1, #2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fc85 	bl	800733e <USBH_FindInterface>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	2bff      	cmp	r3, #255	@ 0xff
 8006a3c:	d002      	beq.n	8006a44 <USBH_CDC_InterfaceInit+0x24>
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d901      	bls.n	8006a48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a44:	2302      	movs	r3, #2
 8006a46:	e13d      	b.n	8006cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc5a 	bl	8007306 <USBH_SelectInterface>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e131      	b.n	8006cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006a66:	2050      	movs	r0, #80	@ 0x50
 8006a68:	f002 fb40 	bl	80090ec <malloc>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	e11f      	b.n	8006cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a84:	2250      	movs	r2, #80	@ 0x50
 8006a86:	2100      	movs	r1, #0
 8006a88:	68b8      	ldr	r0, [r7, #8]
 8006a8a:	f002 fbed 	bl	8009268 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	211a      	movs	r1, #26
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	b25b      	sxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da15      	bge.n	8006ad2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	211a      	movs	r1, #26
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	211a      	movs	r1, #26
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006acc:	881a      	ldrh	r2, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 ffbe 	bl	8008a5a <USBH_AllocPipe>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	7819      	ldrb	r1, [r3, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	7858      	ldrb	r0, [r3, #1]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	8952      	ldrh	r2, [r2, #10]
 8006afe:	9202      	str	r2, [sp, #8]
 8006b00:	2203      	movs	r2, #3
 8006b02:	9201      	str	r2, [sp, #4]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	4623      	mov	r3, r4
 8006b08:	4602      	mov	r2, r0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 ff76 	bl	80089fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2200      	movs	r2, #0
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f002 fa7c 	bl	8009016 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2200      	movs	r2, #0
 8006b22:	210a      	movs	r1, #10
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fc0a 	bl	800733e <USBH_FindInterface>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	2bff      	cmp	r3, #255	@ 0xff
 8006b32:	d002      	beq.n	8006b3a <USBH_CDC_InterfaceInit+0x11a>
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d901      	bls.n	8006b3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e0c2      	b.n	8006cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	211a      	movs	r1, #26
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	4413      	add	r3, r2
 8006b4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	b25b      	sxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da16      	bge.n	8006b84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	211a      	movs	r1, #26
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	4413      	add	r3, r2
 8006b62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	211a      	movs	r1, #26
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b7c:	881a      	ldrh	r2, [r3, #0]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	835a      	strh	r2, [r3, #26]
 8006b82:	e015      	b.n	8006bb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	211a      	movs	r1, #26
 8006b8a:	fb01 f303 	mul.w	r3, r1, r3
 8006b8e:	4413      	add	r3, r2
 8006b90:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	211a      	movs	r1, #26
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006baa:	881a      	ldrh	r2, [r3, #0]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	211a      	movs	r1, #26
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b25b      	sxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da16      	bge.n	8006bf6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	211a      	movs	r1, #26
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	211a      	movs	r1, #26
 8006be4:	fb01 f303 	mul.w	r3, r1, r3
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006bee:	881a      	ldrh	r2, [r3, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	835a      	strh	r2, [r3, #26]
 8006bf4:	e015      	b.n	8006c22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	211a      	movs	r1, #26
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006c06:	781a      	ldrb	r2, [r3, #0]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	211a      	movs	r1, #26
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006c1c:	881a      	ldrh	r2, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	7b9b      	ldrb	r3, [r3, #14]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 ff16 	bl	8008a5a <USBH_AllocPipe>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	461a      	mov	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	7bdb      	ldrb	r3, [r3, #15]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 ff0c 	bl	8008a5a <USBH_AllocPipe>
 8006c42:	4603      	mov	r3, r0
 8006c44:	461a      	mov	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	7b59      	ldrb	r1, [r3, #13]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	7b98      	ldrb	r0, [r3, #14]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	8b12      	ldrh	r2, [r2, #24]
 8006c62:	9202      	str	r2, [sp, #8]
 8006c64:	2202      	movs	r2, #2
 8006c66:	9201      	str	r2, [sp, #4]
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4623      	mov	r3, r4
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fec4 	bl	80089fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	7b19      	ldrb	r1, [r3, #12]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	7bd8      	ldrb	r0, [r3, #15]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	8b52      	ldrh	r2, [r2, #26]
 8006c8c:	9202      	str	r2, [sp, #8]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	9201      	str	r2, [sp, #4]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	4623      	mov	r3, r4
 8006c96:	4602      	mov	r2, r0
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 feaf 	bl	80089fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	7b5b      	ldrb	r3, [r3, #13]
 8006caa:	2200      	movs	r2, #0
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f002 f9b1 	bl	8009016 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	7b1b      	ldrb	r3, [r3, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f002 f9aa 	bl	8009016 <USBH_LL_SetToggle>

  return USBH_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd90      	pop	{r4, r7, pc}

08006ccc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00e      	beq.n	8006d04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fea4 	bl	8008a3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fecf 	bl	8008a9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	7b1b      	ldrb	r3, [r3, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00e      	beq.n	8006d2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	7b1b      	ldrb	r3, [r3, #12]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fe91 	bl	8008a3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	7b1b      	ldrb	r3, [r3, #12]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 febc 	bl	8008a9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	7b5b      	ldrb	r3, [r3, #13]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	7b5b      	ldrb	r3, [r3, #13]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fe7e 	bl	8008a3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	7b5b      	ldrb	r3, [r3, #13]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 fea9 	bl	8008a9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f002 f9c9 	bl	80090fc <free>
    phost->pActiveClass->pData = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d70:	2200      	movs	r2, #0
 8006d72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3340      	adds	r3, #64	@ 0x40
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f8b1 	bl	8006efe <GetLineCoding>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006da0:	7afb      	ldrb	r3, [r7, #11]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d105      	bne.n	8006db2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dac:	2102      	movs	r1, #2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006db2:	7afb      	ldrb	r3, [r7, #11]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d877      	bhi.n	8006ed0 <USBH_CDC_Process+0x114>
 8006de0:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <USBH_CDC_Process+0x2c>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006dfd 	.word	0x08006dfd
 8006dec:	08006e03 	.word	0x08006e03
 8006df0:	08006e33 	.word	0x08006e33
 8006df4:	08006ea7 	.word	0x08006ea7
 8006df8:	08006eb5 	.word	0x08006eb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	e06d      	b.n	8006ede <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f897 	bl	8006f3c <SetLineCoding>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e20:	e058      	b.n	8006ed4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d055      	beq.n	8006ed4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006e30:	e050      	b.n	8006ed4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	3340      	adds	r3, #64	@ 0x40
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f860 	bl	8006efe <GetLineCoding>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d126      	bne.n	8006e96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5a:	791b      	ldrb	r3, [r3, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d13b      	bne.n	8006ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d133      	bne.n	8006ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d12b      	bne.n	8006ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d124      	bne.n	8006ed8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f958 	bl	8007144 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e94:	e020      	b.n	8006ed8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d01d      	beq.n	8006ed8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006ea4:	e018      	b.n	8006ed8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f867 	bl	8006f7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f8da 	bl	8007066 <CDC_ProcessReception>
      break;
 8006eb2:	e014      	b.n	8006ede <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f81a 	bl	8007ef0 <USBH_ClrFeature>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006ece:	e005      	b.n	8006edc <USBH_CDC_Process+0x120>

    default:
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e004      	b.n	8006ede <USBH_CDC_Process+0x122>
      break;
 8006ed4:	bf00      	nop
 8006ed6:	e002      	b.n	8006ede <USBH_CDC_Process+0x122>
      break;
 8006ed8:	bf00      	nop
 8006eda:	e000      	b.n	8006ede <USBH_CDC_Process+0x122>
      break;
 8006edc:	bf00      	nop

  }

  return status;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	22a1      	movs	r2, #161	@ 0xa1
 8006f0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2221      	movs	r2, #33	@ 0x21
 8006f12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2207      	movs	r2, #7
 8006f24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2207      	movs	r2, #7
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fb14 	bl	800855a <USBH_CtlReq>
 8006f32:	4603      	mov	r3, r0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2221      	movs	r2, #33	@ 0x21
 8006f4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2207      	movs	r2, #7
 8006f62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2207      	movs	r2, #7
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 faf5 	bl	800855a <USBH_CtlReq>
 8006f70:	4603      	mov	r3, r0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af02      	add	r7, sp, #8
 8006f80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d002      	beq.n	8006fa0 <CDC_ProcessTransmission+0x26>
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d023      	beq.n	8006fe6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f9e:	e05e      	b.n	800705e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	8b12      	ldrh	r2, [r2, #24]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d90b      	bls.n	8006fc4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	69d9      	ldr	r1, [r3, #28]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8b1a      	ldrh	r2, [r3, #24]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	7b5b      	ldrb	r3, [r3, #13]
 8006fb8:	2001      	movs	r0, #1
 8006fba:	9000      	str	r0, [sp, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fcda 	bl	8008976 <USBH_BulkSendData>
 8006fc2:	e00b      	b.n	8006fdc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	7b5b      	ldrb	r3, [r3, #13]
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	9000      	str	r0, [sp, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fccd 	bl	8008976 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006fe4:	e03b      	b.n	800705e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	7b5b      	ldrb	r3, [r3, #13]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 fff1 	bl	8008fd4 <USBH_LL_GetURBState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d128      	bne.n	800704e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	8b12      	ldrh	r2, [r2, #24]
 8007004:	4293      	cmp	r3, r2
 8007006:	d90e      	bls.n	8007026 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	8b12      	ldrh	r2, [r2, #24]
 8007010:	1a9a      	subs	r2, r3, r2
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	8b12      	ldrh	r2, [r2, #24]
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	61da      	str	r2, [r3, #28]
 8007024:	e002      	b.n	800702c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800703c:	e00e      	b.n	800705c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f868 	bl	800711c <USBH_CDC_TransmitCallback>
      break;
 800704c:	e006      	b.n	800705c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d103      	bne.n	800705c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800705c:	bf00      	nop
  }
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b086      	sub	sp, #24
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007078:	2300      	movs	r3, #0
 800707a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007082:	2b03      	cmp	r3, #3
 8007084:	d002      	beq.n	800708c <CDC_ProcessReception+0x26>
 8007086:	2b04      	cmp	r3, #4
 8007088:	d00e      	beq.n	80070a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800708a:	e043      	b.n	8007114 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	6a19      	ldr	r1, [r3, #32]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	8b5a      	ldrh	r2, [r3, #26]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	7b1b      	ldrb	r3, [r3, #12]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fc91 	bl	80089c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2204      	movs	r2, #4
 80070a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80070a6:	e035      	b.n	8007114 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	7b1b      	ldrb	r3, [r3, #12]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 ff90 	bl	8008fd4 <USBH_LL_GetURBState>
 80070b4:	4603      	mov	r3, r0
 80070b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d129      	bne.n	8007112 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	7b1b      	ldrb	r3, [r3, #12]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fef3 	bl	8008eb0 <USBH_LL_GetLastXferSize>
 80070ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d016      	beq.n	8007104 <CDC_ProcessReception+0x9e>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	8b5b      	ldrh	r3, [r3, #26]
 80070da:	461a      	mov	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4293      	cmp	r3, r2
 80070e0:	d910      	bls.n	8007104 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1ad2      	subs	r2, r2, r3
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6a1a      	ldr	r2, [r3, #32]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	441a      	add	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2203      	movs	r2, #3
 80070fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007102:	e006      	b.n	8007112 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f80f 	bl	8007130 <USBH_CDC_ReceiveCallback>
      break;
 8007112:	bf00      	nop
  }
}
 8007114:	bf00      	nop
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800716c:	2302      	movs	r3, #2
 800716e:	e029      	b.n	80071c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	79fa      	ldrb	r2, [r7, #7]
 8007174:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f81f 	bl	80071cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f001 fdc3 	bl	8008d48 <USBH_LL_Init>

  return USBH_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e009      	b.n	80071f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	33e0      	adds	r3, #224	@ 0xe0
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	2200      	movs	r2, #0
 80071ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b0f      	cmp	r3, #15
 80071f6:	d9f2      	bls.n	80071de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e009      	b.n	8007212 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007218:	d3f1      	bcc.n	80071fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2240      	movs	r2, #64	@ 0x40
 800723e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	331c      	adds	r3, #28
 800726a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800726e:	2100      	movs	r1, #0
 8007270:	4618      	mov	r0, r3
 8007272:	f001 fff9 	bl	8009268 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800727c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fff0 	bl	8009268 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800728e:	2212      	movs	r2, #18
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f001 ffe8 	bl	8009268 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800729e:	223e      	movs	r2, #62	@ 0x3e
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 ffe0 	bl	8009268 <memset>

  return USBH_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10e      	bne.n	80072ee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072d6:	1c59      	adds	r1, r3, #1
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	33de      	adds	r3, #222	@ 0xde
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	73fb      	strb	r3, [r7, #15]
 80072ec:	e004      	b.n	80072f8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072ee:	2302      	movs	r3, #2
 80072f0:	73fb      	strb	r3, [r7, #15]
 80072f2:	e001      	b.n	80072f8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072f4:	2302      	movs	r3, #2
 80072f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800731c:	78fa      	ldrb	r2, [r7, #3]
 800731e:	429a      	cmp	r2, r3
 8007320:	d204      	bcs.n	800732c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800732a:	e001      	b.n	8007330 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800732c:	2302      	movs	r3, #2
 800732e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800733e:	b480      	push	{r7}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	4608      	mov	r0, r1
 8007348:	4611      	mov	r1, r2
 800734a:	461a      	mov	r2, r3
 800734c:	4603      	mov	r3, r0
 800734e:	70fb      	strb	r3, [r7, #3]
 8007350:	460b      	mov	r3, r1
 8007352:	70bb      	strb	r3, [r7, #2]
 8007354:	4613      	mov	r3, r2
 8007356:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800735c:	2300      	movs	r3, #0
 800735e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007366:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007368:	e025      	b.n	80073b6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	221a      	movs	r2, #26
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	3308      	adds	r3, #8
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	3302      	adds	r3, #2
 800737a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	795b      	ldrb	r3, [r3, #5]
 8007380:	78fa      	ldrb	r2, [r7, #3]
 8007382:	429a      	cmp	r2, r3
 8007384:	d002      	beq.n	800738c <USBH_FindInterface+0x4e>
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	2bff      	cmp	r3, #255	@ 0xff
 800738a:	d111      	bne.n	80073b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007390:	78ba      	ldrb	r2, [r7, #2]
 8007392:	429a      	cmp	r2, r3
 8007394:	d002      	beq.n	800739c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007396:	78bb      	ldrb	r3, [r7, #2]
 8007398:	2bff      	cmp	r3, #255	@ 0xff
 800739a:	d109      	bne.n	80073b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073a0:	787a      	ldrb	r2, [r7, #1]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d002      	beq.n	80073ac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073a6:	787b      	ldrb	r3, [r7, #1]
 80073a8:	2bff      	cmp	r3, #255	@ 0xff
 80073aa:	d101      	bne.n	80073b0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	e006      	b.n	80073be <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	3301      	adds	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d9d6      	bls.n	800736a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073bc:	23ff      	movs	r3, #255	@ 0xff
}
 80073be:	4618      	mov	r0, r3
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fcf4 	bl	8008dc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073d8:	2101      	movs	r1, #1
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fe0d 	bl	8008ffa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af04      	add	r7, sp, #16
 80073f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073f4:	2302      	movs	r3, #2
 80073f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	d102      	bne.n	800740e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2203      	movs	r2, #3
 800740c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b0b      	cmp	r3, #11
 8007416:	f200 81bb 	bhi.w	8007790 <USBH_Process+0x3a4>
 800741a:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <USBH_Process+0x34>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007451 	.word	0x08007451
 8007424:	08007483 	.word	0x08007483
 8007428:	080074eb 	.word	0x080074eb
 800742c:	0800772b 	.word	0x0800772b
 8007430:	08007791 	.word	0x08007791
 8007434:	0800758b 	.word	0x0800758b
 8007438:	080076d1 	.word	0x080076d1
 800743c:	080075c1 	.word	0x080075c1
 8007440:	080075e1 	.word	0x080075e1
 8007444:	080075ff 	.word	0x080075ff
 8007448:	08007643 	.word	0x08007643
 800744c:	08007713 	.word	0x08007713
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 819b 	beq.w	8007794 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007464:	20c8      	movs	r0, #200	@ 0xc8
 8007466:	f001 fe09 	bl	800907c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fd05 	bl	8008e7a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007480:	e188      	b.n	8007794 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007488:	2b01      	cmp	r3, #1
 800748a:	d107      	bne.n	800749c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800749a:	e18a      	b.n	80077b2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80074a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074a6:	d914      	bls.n	80074d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074ae:	3301      	adds	r3, #1
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d903      	bls.n	80074ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	220d      	movs	r2, #13
 80074c6:	701a      	strb	r2, [r3, #0]
      break;
 80074c8:	e173      	b.n	80077b2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
      break;
 80074d0:	e16f      	b.n	80077b2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80074d8:	f103 020a 	add.w	r2, r3, #10
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80074e2:	200a      	movs	r0, #10
 80074e4:	f001 fdca 	bl	800907c <USBH_Delay>
      break;
 80074e8:	e163      	b.n	80077b2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074fa:	2104      	movs	r1, #4
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007500:	2064      	movs	r0, #100	@ 0x64
 8007502:	f001 fdbb 	bl	800907c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fc90 	bl	8008e2c <USBH_LL_GetSpeed>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2205      	movs	r2, #5
 800751a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fa9b 	bl	8008a5a <USBH_AllocPipe>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800752c:	2180      	movs	r1, #128	@ 0x80
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 fa93 	bl	8008a5a <USBH_AllocPipe>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7919      	ldrb	r1, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007550:	9202      	str	r2, [sp, #8]
 8007552:	2200      	movs	r2, #0
 8007554:	9201      	str	r2, [sp, #4]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4603      	mov	r3, r0
 800755a:	2280      	movs	r2, #128	@ 0x80
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fa4d 	bl	80089fc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7959      	ldrb	r1, [r3, #5]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007576:	9202      	str	r2, [sp, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	9201      	str	r2, [sp, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4603      	mov	r3, r0
 8007580:	2200      	movs	r2, #0
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fa3a 	bl	80089fc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007588:	e113      	b.n	80077b2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f916 	bl	80077bc <USBH_HandleEnum>
 8007590:	4603      	mov	r3, r0
 8007592:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 80fd 	bne.w	8007798 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d103      	bne.n	80075b8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2208      	movs	r2, #8
 80075b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075b6:	e0ef      	b.n	8007798 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2207      	movs	r2, #7
 80075bc:	701a      	strb	r2, [r3, #0]
      break;
 80075be:	e0eb      	b.n	8007798 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80e8 	beq.w	800779c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2208      	movs	r2, #8
 80075dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80075de:	e0dd      	b.n	800779c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fc3a 	bl	8007e62 <USBH_SetCfg>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f040 80d5 	bne.w	80077a0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2209      	movs	r2, #9
 80075fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075fc:	e0d0      	b.n	80077a0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d016      	beq.n	800763a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800760c:	2101      	movs	r1, #1
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fc4a 	bl	8007ea8 <USBH_SetFeature>
 8007614:	4603      	mov	r3, r0
 8007616:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	220a      	movs	r2, #10
 8007624:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007626:	e0bd      	b.n	80077a4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b03      	cmp	r3, #3
 800762e:	f040 80b9 	bne.w	80077a4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	220a      	movs	r2, #10
 8007636:	701a      	strb	r2, [r3, #0]
      break;
 8007638:	e0b4      	b.n	80077a4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	220a      	movs	r2, #10
 800763e:	701a      	strb	r2, [r3, #0]
      break;
 8007640:	e0b0      	b.n	80077a4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80ad 	beq.w	80077a8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
 800765a:	e016      	b.n	800768a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800765c:	7bfa      	ldrb	r2, [r7, #15]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32de      	adds	r2, #222	@ 0xde
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	791a      	ldrb	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800766e:	429a      	cmp	r2, r3
 8007670:	d108      	bne.n	8007684 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007672:	7bfa      	ldrb	r2, [r7, #15]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	32de      	adds	r2, #222	@ 0xde
 8007678:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007682:	e005      	b.n	8007690 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	3301      	adds	r3, #1
 8007688:	73fb      	strb	r3, [r7, #15]
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0e5      	beq.n	800765c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d016      	beq.n	80076c8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d109      	bne.n	80076c0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2206      	movs	r2, #6
 80076b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076b8:	2103      	movs	r1, #3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076be:	e073      	b.n	80077a8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	220d      	movs	r2, #13
 80076c4:	701a      	strb	r2, [r3, #0]
      break;
 80076c6:	e06f      	b.n	80077a8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	220d      	movs	r2, #13
 80076cc:	701a      	strb	r2, [r3, #0]
      break;
 80076ce:	e06b      	b.n	80077a8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d017      	beq.n	800770a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	220b      	movs	r2, #11
 80076f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076f8:	e058      	b.n	80077ac <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d154      	bne.n	80077ac <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	220d      	movs	r2, #13
 8007706:	701a      	strb	r2, [r3, #0]
      break;
 8007708:	e050      	b.n	80077ac <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	220d      	movs	r2, #13
 800770e:	701a      	strb	r2, [r3, #0]
      break;
 8007710:	e04c      	b.n	80077ac <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d049      	beq.n	80077b0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
      }
      break;
 8007728:	e042      	b.n	80077b0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fd4a 	bl	80071cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007766:	2105      	movs	r1, #5
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b01      	cmp	r3, #1
 8007776:	d107      	bne.n	8007788 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff fe22 	bl	80073ca <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007786:	e014      	b.n	80077b2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fb19 	bl	8008dc0 <USBH_LL_Start>
      break;
 800778e:	e010      	b.n	80077b2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007790:	bf00      	nop
 8007792:	e00e      	b.n	80077b2 <USBH_Process+0x3c6>
      break;
 8007794:	bf00      	nop
 8007796:	e00c      	b.n	80077b2 <USBH_Process+0x3c6>
      break;
 8007798:	bf00      	nop
 800779a:	e00a      	b.n	80077b2 <USBH_Process+0x3c6>
    break;
 800779c:	bf00      	nop
 800779e:	e008      	b.n	80077b2 <USBH_Process+0x3c6>
      break;
 80077a0:	bf00      	nop
 80077a2:	e006      	b.n	80077b2 <USBH_Process+0x3c6>
      break;
 80077a4:	bf00      	nop
 80077a6:	e004      	b.n	80077b2 <USBH_Process+0x3c6>
      break;
 80077a8:	bf00      	nop
 80077aa:	e002      	b.n	80077b2 <USBH_Process+0x3c6>
      break;
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <USBH_Process+0x3c6>
      break;
 80077b0:	bf00      	nop
  }
  return USBH_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af04      	add	r7, sp, #16
 80077c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	f200 81bd 	bhi.w	8007b50 <USBH_HandleEnum+0x394>
 80077d6:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <USBH_HandleEnum+0x20>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	080077fd 	.word	0x080077fd
 80077e0:	080078b7 	.word	0x080078b7
 80077e4:	08007921 	.word	0x08007921
 80077e8:	080079ab 	.word	0x080079ab
 80077ec:	08007a15 	.word	0x08007a15
 80077f0:	08007a85 	.word	0x08007a85
 80077f4:	08007acb 	.word	0x08007acb
 80077f8:	08007b11 	.word	0x08007b11
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077fc:	2108      	movs	r1, #8
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa4c 	bl	8007c9c <USBH_Get_DevDesc>
 8007804:	4603      	mov	r3, r0
 8007806:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d12e      	bne.n	800786c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7919      	ldrb	r1, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007832:	9202      	str	r2, [sp, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	9201      	str	r2, [sp, #4]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	4603      	mov	r3, r0
 800783c:	2280      	movs	r2, #128	@ 0x80
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 f8dc 	bl	80089fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7959      	ldrb	r1, [r3, #5]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007858:	9202      	str	r2, [sp, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	9201      	str	r2, [sp, #4]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	4603      	mov	r3, r0
 8007862:	2200      	movs	r2, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f8c9 	bl	80089fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800786a:	e173      	b.n	8007b54 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b03      	cmp	r3, #3
 8007870:	f040 8170 	bne.w	8007b54 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800787a:	3301      	adds	r3, #1
 800787c:	b2da      	uxtb	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800788a:	2b03      	cmp	r3, #3
 800788c:	d903      	bls.n	8007896 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	220d      	movs	r2, #13
 8007892:	701a      	strb	r2, [r3, #0]
      break;
 8007894:	e15e      	b.n	8007b54 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	795b      	ldrb	r3, [r3, #5]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f8fd 	bl	8008a9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	791b      	ldrb	r3, [r3, #4]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f8f7 	bl	8008a9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
      break;
 80078b4:	e14e      	b.n	8007b54 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078b6:	2112      	movs	r1, #18
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f9ef 	bl	8007c9c <USBH_Get_DevDesc>
 80078be:	4603      	mov	r3, r0
 80078c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d103      	bne.n	80078d0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078ce:	e143      	b.n	8007b58 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	f040 8140 	bne.w	8007b58 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078de:	3301      	adds	r3, #1
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d903      	bls.n	80078fa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	220d      	movs	r2, #13
 80078f6:	701a      	strb	r2, [r3, #0]
      break;
 80078f8:	e12e      	b.n	8007b58 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	795b      	ldrb	r3, [r3, #5]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 f8cb 	bl	8008a9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	791b      	ldrb	r3, [r3, #4]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f8c5 	bl	8008a9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
      break;
 800791e:	e11b      	b.n	8007b58 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007920:	2101      	movs	r1, #1
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa79 	bl	8007e1a <USBH_SetAddress>
 8007928:	4603      	mov	r3, r0
 800792a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d130      	bne.n	8007994 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007932:	2002      	movs	r0, #2
 8007934:	f001 fba2 	bl	800907c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2203      	movs	r2, #3
 8007944:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7919      	ldrb	r1, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800795a:	9202      	str	r2, [sp, #8]
 800795c:	2200      	movs	r2, #0
 800795e:	9201      	str	r2, [sp, #4]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	4603      	mov	r3, r0
 8007964:	2280      	movs	r2, #128	@ 0x80
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 f848 	bl	80089fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7959      	ldrb	r1, [r3, #5]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007980:	9202      	str	r2, [sp, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	9201      	str	r2, [sp, #4]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4603      	mov	r3, r0
 800798a:	2200      	movs	r2, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f835 	bl	80089fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007992:	e0e3      	b.n	8007b5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b03      	cmp	r3, #3
 8007998:	f040 80e0 	bne.w	8007b5c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	220d      	movs	r2, #13
 80079a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	705a      	strb	r2, [r3, #1]
      break;
 80079a8:	e0d8      	b.n	8007b5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80079aa:	2109      	movs	r1, #9
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f9a1 	bl	8007cf4 <USBH_Get_CfgDesc>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2204      	movs	r2, #4
 80079c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079c2:	e0cd      	b.n	8007b60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	f040 80ca 	bne.w	8007b60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079d2:	3301      	adds	r3, #1
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d903      	bls.n	80079ee <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	220d      	movs	r2, #13
 80079ea:	701a      	strb	r2, [r3, #0]
      break;
 80079ec:	e0b8      	b.n	8007b60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	795b      	ldrb	r3, [r3, #5]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f851 	bl	8008a9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	791b      	ldrb	r3, [r3, #4]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 f84b 	bl	8008a9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
      break;
 8007a12:	e0a5      	b.n	8007b60 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f969 	bl	8007cf4 <USBH_Get_CfgDesc>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2205      	movs	r2, #5
 8007a30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a32:	e097      	b.n	8007b64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	f040 8094 	bne.w	8007b64 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a42:	3301      	adds	r3, #1
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d903      	bls.n	8007a5e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	220d      	movs	r2, #13
 8007a5a:	701a      	strb	r2, [r3, #0]
      break;
 8007a5c:	e082      	b.n	8007b64 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	795b      	ldrb	r3, [r3, #5]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f819 	bl	8008a9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	791b      	ldrb	r3, [r3, #4]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f813 	bl	8008a9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	701a      	strb	r2, [r3, #0]
      break;
 8007a82:	e06f      	b.n	8007b64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d019      	beq.n	8007ac2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a9a:	23ff      	movs	r3, #255	@ 0xff
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f953 	bl	8007d48 <USBH_Get_StringDesc>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d103      	bne.n	8007ab4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2206      	movs	r2, #6
 8007ab0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ab2:	e059      	b.n	8007b68 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d156      	bne.n	8007b68 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2206      	movs	r2, #6
 8007abe:	705a      	strb	r2, [r3, #1]
      break;
 8007ac0:	e052      	b.n	8007b68 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	705a      	strb	r2, [r3, #1]
      break;
 8007ac8:	e04e      	b.n	8007b68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d019      	beq.n	8007b08 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ae0:	23ff      	movs	r3, #255	@ 0xff
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f930 	bl	8007d48 <USBH_Get_StringDesc>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2207      	movs	r2, #7
 8007af6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007af8:	e038      	b.n	8007b6c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d135      	bne.n	8007b6c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2207      	movs	r2, #7
 8007b04:	705a      	strb	r2, [r3, #1]
      break;
 8007b06:	e031      	b.n	8007b6c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2207      	movs	r2, #7
 8007b0c:	705a      	strb	r2, [r3, #1]
      break;
 8007b0e:	e02d      	b.n	8007b6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d017      	beq.n	8007b4a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b26:	23ff      	movs	r3, #255	@ 0xff
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f90d 	bl	8007d48 <USBH_Get_StringDesc>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d102      	bne.n	8007b3e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b3c:	e018      	b.n	8007b70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d115      	bne.n	8007b70 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
      break;
 8007b48:	e012      	b.n	8007b70 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4e:	e00f      	b.n	8007b70 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007b50:	bf00      	nop
 8007b52:	e00e      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b54:	bf00      	nop
 8007b56:	e00c      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b58:	bf00      	nop
 8007b5a:	e00a      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e008      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b60:	bf00      	nop
 8007b62:	e006      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b64:	bf00      	nop
 8007b66:	e004      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e002      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e000      	b.n	8007b72 <USBH_HandleEnum+0x3b6>
      break;
 8007b70:	bf00      	nop
  }
  return Status;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f804 	bl	8007bbe <USBH_HandleSof>
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b0b      	cmp	r3, #11
 8007bce:	d10a      	bne.n	8007be6 <USBH_HandleSof+0x28>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	4798      	blx	r3
  }
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bfe:	bf00      	nop
}
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007c1a:	bf00      	nop
}
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 f8be 	bl	8008df6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 ff0b 	bl	8008a9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	795b      	ldrb	r3, [r3, #5]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 ff05 	bl	8008a9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007ca8:	887b      	ldrh	r3, [r7, #2]
 8007caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cae:	d901      	bls.n	8007cb4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e01b      	b.n	8007cec <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007cba:	887b      	ldrh	r3, [r7, #2]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f872 	bl	8007db0 <USBH_GetDescriptor>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d109      	bne.n	8007cea <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cdc:	887a      	ldrh	r2, [r7, #2]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f929 	bl	8007f38 <USBH_ParseDevDesc>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	331c      	adds	r3, #28
 8007d04:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007d06:	887b      	ldrh	r3, [r7, #2]
 8007d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0c:	d901      	bls.n	8007d12 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e016      	b.n	8007d40 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d12:	887b      	ldrh	r3, [r7, #2]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f846 	bl	8007db0 <USBH_GetDescriptor>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d107      	bne.n	8007d3e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007d2e:	887b      	ldrh	r3, [r7, #2]
 8007d30:	461a      	mov	r2, r3
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9af 	bl	8008098 <USBH_ParseCfgDesc>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	461a      	mov	r2, r3
 8007d54:	460b      	mov	r3, r1
 8007d56:	72fb      	strb	r3, [r7, #11]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007d5c:	893b      	ldrh	r3, [r7, #8]
 8007d5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d62:	d802      	bhi.n	8007d6a <USBH_Get_StringDesc+0x22>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e01c      	b.n	8007da8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007d76:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	460b      	mov	r3, r1
 8007d84:	2100      	movs	r1, #0
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f812 	bl	8007db0 <USBH_GetDescriptor>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d107      	bne.n	8007da6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d9c:	893a      	ldrh	r2, [r7, #8]
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fb8d 	bl	80084c0 <USBH_ParseStringDesc>
  }

  return status;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	72fb      	strb	r3, [r7, #11]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	789b      	ldrb	r3, [r3, #2]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d11c      	bne.n	8007e04 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007dca:	7afb      	ldrb	r3, [r7, #11]
 8007dcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2206      	movs	r2, #6
 8007dda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	893a      	ldrh	r2, [r7, #8]
 8007de0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007de2:	893b      	ldrh	r3, [r7, #8]
 8007de4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dec:	d104      	bne.n	8007df8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f240 4209 	movw	r2, #1033	@ 0x409
 8007df4:	829a      	strh	r2, [r3, #20]
 8007df6:	e002      	b.n	8007dfe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8b3a      	ldrh	r2, [r7, #24]
 8007e02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e04:	8b3b      	ldrh	r3, [r7, #24]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 fba5 	bl	800855a <USBH_CtlReq>
 8007e10:	4603      	mov	r3, r0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	789b      	ldrb	r3, [r3, #2]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10f      	bne.n	8007e4e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2205      	movs	r2, #5
 8007e38:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2100      	movs	r1, #0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fb81 	bl	800855a <USBH_CtlReq>
 8007e58:	4603      	mov	r3, r0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	789b      	ldrb	r3, [r3, #2]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d10e      	bne.n	8007e94 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2209      	movs	r2, #9
 8007e80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	887a      	ldrh	r2, [r7, #2]
 8007e86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fb5e 	bl	800855a <USBH_CtlReq>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	789b      	ldrb	r3, [r3, #2]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10f      	bne.n	8007edc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007edc:	2200      	movs	r2, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb3a 	bl	800855a <USBH_CtlReq>
 8007ee6:	4603      	mov	r3, r0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	789b      	ldrb	r3, [r3, #2]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10f      	bne.n	8007f24 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb16 	bl	800855a <USBH_CtlReq>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007f4c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e094      	b.n	8008086 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	785a      	ldrb	r2, [r3, #1]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	3302      	adds	r3, #2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3303      	adds	r3, #3
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	791a      	ldrb	r2, [r3, #4]
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	795a      	ldrb	r2, [r3, #5]
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	799a      	ldrb	r2, [r3, #6]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	79da      	ldrb	r2, [r3, #7]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d11b      	bne.n	8007ff2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	79db      	ldrb	r3, [r3, #7]
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	dc0f      	bgt.n	8007fe2 <USBH_ParseDevDesc+0xaa>
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	db0f      	blt.n	8007fe6 <USBH_ParseDevDesc+0xae>
 8007fc6:	3b08      	subs	r3, #8
 8007fc8:	4a32      	ldr	r2, [pc, #200]	@ (8008094 <USBH_ParseDevDesc+0x15c>)
 8007fca:	fa22 f303 	lsr.w	r3, r2, r3
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bf14      	ite	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	2300      	moveq	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <USBH_ParseDevDesc+0xb6>
 8007fe0:	e001      	b.n	8007fe6 <USBH_ParseDevDesc+0xae>
 8007fe2:	2b40      	cmp	r3, #64	@ 0x40
 8007fe4:	d003      	beq.n	8007fee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2208      	movs	r2, #8
 8007fea:	71da      	strb	r2, [r3, #7]
        break;
 8007fec:	e000      	b.n	8007ff0 <USBH_ParseDevDesc+0xb8>
        break;
 8007fee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007ff0:	e00e      	b.n	8008010 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d107      	bne.n	800800c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	79db      	ldrb	r3, [r3, #7]
 8008000:	2b08      	cmp	r3, #8
 8008002:	d005      	beq.n	8008010 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2208      	movs	r2, #8
 8008008:	71da      	strb	r2, [r3, #7]
 800800a:	e001      	b.n	8008010 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800800c:	2303      	movs	r3, #3
 800800e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008010:	88fb      	ldrh	r3, [r7, #6]
 8008012:	2b08      	cmp	r3, #8
 8008014:	d936      	bls.n	8008084 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	3308      	adds	r3, #8
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	3309      	adds	r3, #9
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	b29b      	uxth	r3, r3
 8008028:	4313      	orrs	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	330a      	adds	r3, #10
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	330b      	adds	r3, #11
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	b29b      	uxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b29a      	uxth	r2, r3
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	330c      	adds	r3, #12
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	330d      	adds	r3, #13
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	b29b      	uxth	r3, r3
 800805c:	4313      	orrs	r3, r2
 800805e:	b29a      	uxth	r2, r3
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	7b9a      	ldrb	r2, [r3, #14]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	7bda      	ldrb	r2, [r3, #15]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	7c1a      	ldrb	r2, [r3, #16]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	7c5a      	ldrb	r2, [r3, #17]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
}
 8008086:	4618      	mov	r0, r3
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	01000101 	.word	0x01000101

08008098 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08c      	sub	sp, #48	@ 0x30
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	4613      	mov	r3, r2
 80080a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80080ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	e0da      	b.n	8008280 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	785a      	ldrb	r2, [r3, #1]
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	3302      	adds	r3, #2
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	3303      	adds	r3, #3
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f8:	bf28      	it	cs
 80080fa:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80080fe:	b29a      	uxth	r2, r3
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	791a      	ldrb	r2, [r3, #4]
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	795a      	ldrb	r2, [r3, #5]
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	799a      	ldrb	r2, [r3, #6]
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	79da      	ldrb	r2, [r3, #7]
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	7a1a      	ldrb	r2, [r3, #8]
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2b09      	cmp	r3, #9
 8008132:	d002      	beq.n	800813a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	2209      	movs	r2, #9
 8008138:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	2b09      	cmp	r3, #9
 800813e:	f240 809d 	bls.w	800827c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008142:	2309      	movs	r3, #9
 8008144:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800814a:	e081      	b.n	8008250 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800814c:	f107 0316 	add.w	r3, r7, #22
 8008150:	4619      	mov	r1, r3
 8008152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008154:	f000 f9e7 	bl	8008526 <USBH_GetNextDesc>
 8008158:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b04      	cmp	r3, #4
 8008160:	d176      	bne.n	8008250 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b09      	cmp	r3, #9
 8008168:	d002      	beq.n	8008170 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	2209      	movs	r2, #9
 800816e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008174:	221a      	movs	r2, #26
 8008176:	fb02 f303 	mul.w	r3, r2, r3
 800817a:	3308      	adds	r3, #8
 800817c:	6a3a      	ldr	r2, [r7, #32]
 800817e:	4413      	add	r3, r2
 8008180:	3302      	adds	r3, #2
 8008182:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008186:	69f8      	ldr	r0, [r7, #28]
 8008188:	f000 f87e 	bl	8008288 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008196:	e043      	b.n	8008220 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008198:	f107 0316 	add.w	r3, r7, #22
 800819c:	4619      	mov	r1, r3
 800819e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081a0:	f000 f9c1 	bl	8008526 <USBH_GetNextDesc>
 80081a4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	785b      	ldrb	r3, [r3, #1]
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	d138      	bne.n	8008220 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	795b      	ldrb	r3, [r3, #5]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d113      	bne.n	80081de <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d003      	beq.n	80081c6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	799b      	ldrb	r3, [r3, #6]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d10b      	bne.n	80081de <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	79db      	ldrb	r3, [r3, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10b      	bne.n	80081e6 <USBH_ParseCfgDesc+0x14e>
 80081ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	d007      	beq.n	80081e6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	2209      	movs	r2, #9
 80081da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081dc:	e003      	b.n	80081e6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80081de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e0:	2207      	movs	r2, #7
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	e000      	b.n	80081e8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081e6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80081e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80081f0:	3201      	adds	r2, #1
 80081f2:	00d2      	lsls	r2, r2, #3
 80081f4:	211a      	movs	r1, #26
 80081f6:	fb01 f303 	mul.w	r3, r1, r3
 80081fa:	4413      	add	r3, r2
 80081fc:	3308      	adds	r3, #8
 80081fe:	6a3a      	ldr	r2, [r7, #32]
 8008200:	4413      	add	r3, r2
 8008202:	3304      	adds	r3, #4
 8008204:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008208:	69b9      	ldr	r1, [r7, #24]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 f870 	bl	80082f0 <USBH_ParseEPDesc>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008216:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800821a:	3301      	adds	r3, #1
 800821c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008228:	429a      	cmp	r2, r3
 800822a:	d204      	bcs.n	8008236 <USBH_ParseCfgDesc+0x19e>
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	885a      	ldrh	r2, [r3, #2]
 8008230:	8afb      	ldrh	r3, [r7, #22]
 8008232:	429a      	cmp	r2, r3
 8008234:	d8b0      	bhi.n	8008198 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800823e:	429a      	cmp	r2, r3
 8008240:	d201      	bcs.n	8008246 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008242:	2303      	movs	r3, #3
 8008244:	e01c      	b.n	8008280 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800824a:	3301      	adds	r3, #1
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008254:	2b01      	cmp	r3, #1
 8008256:	d805      	bhi.n	8008264 <USBH_ParseCfgDesc+0x1cc>
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	885a      	ldrh	r2, [r3, #2]
 800825c:	8afb      	ldrh	r3, [r7, #22]
 800825e:	429a      	cmp	r2, r3
 8008260:	f63f af74 	bhi.w	800814c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	791b      	ldrb	r3, [r3, #4]
 8008268:	2b02      	cmp	r3, #2
 800826a:	bf28      	it	cs
 800826c:	2302      	movcs	r3, #2
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008274:	429a      	cmp	r2, r3
 8008276:	d201      	bcs.n	800827c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008278:	2303      	movs	r3, #3
 800827a:	e001      	b.n	8008280 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800827c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008280:	4618      	mov	r0, r3
 8008282:	3730      	adds	r7, #48	@ 0x30
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781a      	ldrb	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	785a      	ldrb	r2, [r3, #1]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	789a      	ldrb	r2, [r3, #2]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	78da      	ldrb	r2, [r3, #3]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	3304      	adds	r3, #4
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	bf28      	it	cs
 80082bc:	2302      	movcs	r3, #2
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	795a      	ldrb	r2, [r3, #5]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	799a      	ldrb	r2, [r3, #6]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	79da      	ldrb	r2, [r3, #7]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	7a1a      	ldrb	r2, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	721a      	strb	r2, [r3, #8]
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	785a      	ldrb	r2, [r3, #1]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	789a      	ldrb	r2, [r3, #2]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	78da      	ldrb	r2, [r3, #3]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3305      	adds	r3, #5
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	b29b      	uxth	r3, r3
 8008332:	4313      	orrs	r3, r2
 8008334:	b29a      	uxth	r2, r3
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	799a      	ldrb	r2, [r3, #6]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	889b      	ldrh	r3, [r3, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d009      	beq.n	800835e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800834e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008352:	d804      	bhi.n	800835e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800835c:	d901      	bls.n	8008362 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800835e:	2303      	movs	r3, #3
 8008360:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008368:	2b00      	cmp	r3, #0
 800836a:	d136      	bne.n	80083da <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	78db      	ldrb	r3, [r3, #3]
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d108      	bne.n	800838a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	889b      	ldrh	r3, [r3, #4]
 800837c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008380:	f240 8097 	bls.w	80084b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008384:	2303      	movs	r3, #3
 8008386:	75fb      	strb	r3, [r7, #23]
 8008388:	e093      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	78db      	ldrb	r3, [r3, #3]
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	889b      	ldrh	r3, [r3, #4]
 800839a:	2b40      	cmp	r3, #64	@ 0x40
 800839c:	f240 8089 	bls.w	80084b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083a0:	2303      	movs	r3, #3
 80083a2:	75fb      	strb	r3, [r7, #23]
 80083a4:	e085      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	78db      	ldrb	r3, [r3, #3]
 80083aa:	f003 0303 	and.w	r3, r3, #3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d005      	beq.n	80083be <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	78db      	ldrb	r3, [r3, #3]
 80083b6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d10a      	bne.n	80083d4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	799b      	ldrb	r3, [r3, #6]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <USBH_ParseEPDesc+0xde>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	799b      	ldrb	r3, [r3, #6]
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d970      	bls.n	80084b0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80083ce:	2303      	movs	r3, #3
 80083d0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80083d2:	e06d      	b.n	80084b0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80083d4:	2303      	movs	r3, #3
 80083d6:	75fb      	strb	r3, [r7, #23]
 80083d8:	e06b      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d13c      	bne.n	800845e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	78db      	ldrb	r3, [r3, #3]
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d005      	beq.n	80083fc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	78db      	ldrb	r3, [r3, #3]
 80083f4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	889b      	ldrh	r3, [r3, #4]
 8008400:	2b40      	cmp	r3, #64	@ 0x40
 8008402:	d956      	bls.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008404:	2303      	movs	r3, #3
 8008406:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008408:	e053      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	78db      	ldrb	r3, [r3, #3]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	2b01      	cmp	r3, #1
 8008414:	d10e      	bne.n	8008434 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	799b      	ldrb	r3, [r3, #6]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008422:	2b10      	cmp	r3, #16
 8008424:	d803      	bhi.n	800842e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800842a:	2b40      	cmp	r3, #64	@ 0x40
 800842c:	d941      	bls.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800842e:	2303      	movs	r3, #3
 8008430:	75fb      	strb	r3, [r7, #23]
 8008432:	e03e      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	78db      	ldrb	r3, [r3, #3]
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	2b03      	cmp	r3, #3
 800843e:	d10b      	bne.n	8008458 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	799b      	ldrb	r3, [r3, #6]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <USBH_ParseEPDesc+0x162>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	889b      	ldrh	r3, [r3, #4]
 800844c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008450:	d32f      	bcc.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008452:	2303      	movs	r3, #3
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	e02c      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008458:	2303      	movs	r3, #3
 800845a:	75fb      	strb	r3, [r7, #23]
 800845c:	e029      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008464:	2b02      	cmp	r3, #2
 8008466:	d120      	bne.n	80084aa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	78db      	ldrb	r3, [r3, #3]
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	889b      	ldrh	r3, [r3, #4]
 8008478:	2b08      	cmp	r3, #8
 800847a:	d01a      	beq.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800847c:	2303      	movs	r3, #3
 800847e:	75fb      	strb	r3, [r7, #23]
 8008480:	e017      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	78db      	ldrb	r3, [r3, #3]
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d10a      	bne.n	80084a4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	799b      	ldrb	r3, [r3, #6]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <USBH_ParseEPDesc+0x1ae>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	889b      	ldrh	r3, [r3, #4]
 800849a:	2b08      	cmp	r3, #8
 800849c:	d909      	bls.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800849e:	2303      	movs	r3, #3
 80084a0:	75fb      	strb	r3, [r7, #23]
 80084a2:	e006      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084a4:	2303      	movs	r3, #3
 80084a6:	75fb      	strb	r3, [r7, #23]
 80084a8:	e003      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80084aa:	2303      	movs	r3, #3
 80084ac:	75fb      	strb	r3, [r7, #23]
 80084ae:	e000      	b.n	80084b2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084b0:	bf00      	nop
  }

  return status;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d120      	bne.n	800851a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	1e9a      	subs	r2, r3, #2
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bf28      	it	cs
 80084e4:	4613      	movcs	r3, r2
 80084e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3302      	adds	r3, #2
 80084ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084ee:	2300      	movs	r3, #0
 80084f0:	82fb      	strh	r3, [r7, #22]
 80084f2:	e00b      	b.n	800850c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084f4:	8afb      	ldrh	r3, [r7, #22]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	781a      	ldrb	r2, [r3, #0]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	3301      	adds	r3, #1
 8008504:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008506:	8afb      	ldrh	r3, [r7, #22]
 8008508:	3302      	adds	r3, #2
 800850a:	82fb      	strh	r3, [r7, #22]
 800850c:	8afa      	ldrh	r2, [r7, #22]
 800850e:	8abb      	ldrh	r3, [r7, #20]
 8008510:	429a      	cmp	r2, r3
 8008512:	d3ef      	bcc.n	80084f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
  }
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008526:	b480      	push	{r7}
 8008528:	b085      	sub	sp, #20
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7812      	ldrb	r2, [r2, #0]
 8008538:	4413      	add	r3, r2
 800853a:	b29a      	uxth	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4413      	add	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800854c:	68fb      	ldr	r3, [r7, #12]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b086      	sub	sp, #24
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008568:	2301      	movs	r3, #1
 800856a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	789b      	ldrb	r3, [r3, #2]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d002      	beq.n	800857a <USBH_CtlReq+0x20>
 8008574:	2b02      	cmp	r3, #2
 8008576:	d00f      	beq.n	8008598 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008578:	e027      	b.n	80085ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2202      	movs	r2, #2
 8008590:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008592:	2301      	movs	r3, #1
 8008594:	75fb      	strb	r3, [r7, #23]
      break;
 8008596:	e018      	b.n	80085ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f81b 	bl	80085d4 <USBH_HandleControl>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <USBH_CtlReq+0x54>
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d106      	bne.n	80085bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	761a      	strb	r2, [r3, #24]
      break;
 80085ba:	e005      	b.n	80085c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d102      	bne.n	80085c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2201      	movs	r2, #1
 80085c6:	709a      	strb	r2, [r3, #2]
      break;
 80085c8:	bf00      	nop
  }
  return status;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af02      	add	r7, sp, #8
 80085da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7e1b      	ldrb	r3, [r3, #24]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	2b0a      	cmp	r3, #10
 80085ec:	f200 8156 	bhi.w	800889c <USBH_HandleControl+0x2c8>
 80085f0:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <USBH_HandleControl+0x24>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	08008625 	.word	0x08008625
 80085fc:	0800863f 	.word	0x0800863f
 8008600:	080086a9 	.word	0x080086a9
 8008604:	080086cf 	.word	0x080086cf
 8008608:	08008707 	.word	0x08008707
 800860c:	08008731 	.word	0x08008731
 8008610:	08008783 	.word	0x08008783
 8008614:	080087a5 	.word	0x080087a5
 8008618:	080087e1 	.word	0x080087e1
 800861c:	08008807 	.word	0x08008807
 8008620:	08008845 	.word	0x08008845
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f103 0110 	add.w	r1, r3, #16
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	795b      	ldrb	r3, [r3, #5]
 800862e:	461a      	mov	r2, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f943 	bl	80088bc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	761a      	strb	r2, [r3, #24]
      break;
 800863c:	e139      	b.n	80088b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	795b      	ldrb	r3, [r3, #5]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fcc5 	bl	8008fd4 <USBH_LL_GetURBState>
 800864a:	4603      	mov	r3, r0
 800864c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d11e      	bne.n	8008692 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7c1b      	ldrb	r3, [r3, #16]
 8008658:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800865c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8adb      	ldrh	r3, [r3, #22]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008666:	7b7b      	ldrb	r3, [r7, #13]
 8008668:	2b80      	cmp	r3, #128	@ 0x80
 800866a:	d103      	bne.n	8008674 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2203      	movs	r2, #3
 8008670:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008672:	e115      	b.n	80088a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2205      	movs	r2, #5
 8008678:	761a      	strb	r2, [r3, #24]
      break;
 800867a:	e111      	b.n	80088a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800867c:	7b7b      	ldrb	r3, [r7, #13]
 800867e:	2b80      	cmp	r3, #128	@ 0x80
 8008680:	d103      	bne.n	800868a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2209      	movs	r2, #9
 8008686:	761a      	strb	r2, [r3, #24]
      break;
 8008688:	e10a      	b.n	80088a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2207      	movs	r2, #7
 800868e:	761a      	strb	r2, [r3, #24]
      break;
 8008690:	e106      	b.n	80088a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b04      	cmp	r3, #4
 8008696:	d003      	beq.n	80086a0 <USBH_HandleControl+0xcc>
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b02      	cmp	r3, #2
 800869c:	f040 8100 	bne.w	80088a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	220b      	movs	r2, #11
 80086a4:	761a      	strb	r2, [r3, #24]
      break;
 80086a6:	e0fb      	b.n	80088a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6899      	ldr	r1, [r3, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	899a      	ldrh	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	791b      	ldrb	r3, [r3, #4]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f93a 	bl	800893a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2204      	movs	r2, #4
 80086ca:	761a      	strb	r2, [r3, #24]
      break;
 80086cc:	e0f1      	b.n	80088b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	791b      	ldrb	r3, [r3, #4]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fc7d 	bl	8008fd4 <USBH_LL_GetURBState>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d102      	bne.n	80086ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2209      	movs	r2, #9
 80086e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b05      	cmp	r3, #5
 80086ee:	d102      	bne.n	80086f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086f0:	2303      	movs	r3, #3
 80086f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086f4:	e0d6      	b.n	80088a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	f040 80d3 	bne.w	80088a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	220b      	movs	r2, #11
 8008702:	761a      	strb	r2, [r3, #24]
      break;
 8008704:	e0ce      	b.n	80088a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6899      	ldr	r1, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	899a      	ldrh	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	795b      	ldrb	r3, [r3, #5]
 8008712:	2001      	movs	r0, #1
 8008714:	9000      	str	r0, [sp, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f8ea 	bl	80088f0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008722:	b29a      	uxth	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2206      	movs	r2, #6
 800872c:	761a      	strb	r2, [r3, #24]
      break;
 800872e:	e0c0      	b.n	80088b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	795b      	ldrb	r3, [r3, #5]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fc4c 	bl	8008fd4 <USBH_LL_GetURBState>
 800873c:	4603      	mov	r3, r0
 800873e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d103      	bne.n	800874e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2207      	movs	r2, #7
 800874a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800874c:	e0ac      	b.n	80088a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b05      	cmp	r3, #5
 8008752:	d105      	bne.n	8008760 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	220c      	movs	r2, #12
 8008758:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800875a:	2303      	movs	r3, #3
 800875c:	73fb      	strb	r3, [r7, #15]
      break;
 800875e:	e0a3      	b.n	80088a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d103      	bne.n	800876e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2205      	movs	r2, #5
 800876a:	761a      	strb	r2, [r3, #24]
      break;
 800876c:	e09c      	b.n	80088a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b04      	cmp	r3, #4
 8008772:	f040 8099 	bne.w	80088a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	220b      	movs	r2, #11
 800877a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800877c:	2302      	movs	r3, #2
 800877e:	73fb      	strb	r3, [r7, #15]
      break;
 8008780:	e092      	b.n	80088a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	791b      	ldrb	r3, [r3, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	2100      	movs	r1, #0
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f8d5 	bl	800893a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008796:	b29a      	uxth	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2208      	movs	r2, #8
 80087a0:	761a      	strb	r2, [r3, #24]

      break;
 80087a2:	e086      	b.n	80088b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	791b      	ldrb	r3, [r3, #4]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc12 	bl	8008fd4 <USBH_LL_GetURBState>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d105      	bne.n	80087c6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	220d      	movs	r2, #13
 80087be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087c4:	e072      	b.n	80088ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d103      	bne.n	80087d4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	220b      	movs	r2, #11
 80087d0:	761a      	strb	r2, [r3, #24]
      break;
 80087d2:	e06b      	b.n	80088ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d168      	bne.n	80088ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087da:	2303      	movs	r3, #3
 80087dc:	73fb      	strb	r3, [r7, #15]
      break;
 80087de:	e065      	b.n	80088ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	795b      	ldrb	r3, [r3, #5]
 80087e4:	2201      	movs	r2, #1
 80087e6:	9200      	str	r2, [sp, #0]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f87f 	bl	80088f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	220a      	movs	r2, #10
 8008802:	761a      	strb	r2, [r3, #24]
      break;
 8008804:	e055      	b.n	80088b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	795b      	ldrb	r3, [r3, #5]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fbe1 	bl	8008fd4 <USBH_LL_GetURBState>
 8008812:	4603      	mov	r3, r0
 8008814:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d105      	bne.n	8008828 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220d      	movs	r2, #13
 8008824:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008826:	e043      	b.n	80088b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d103      	bne.n	8008836 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2209      	movs	r2, #9
 8008832:	761a      	strb	r2, [r3, #24]
      break;
 8008834:	e03c      	b.n	80088b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d139      	bne.n	80088b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	220b      	movs	r2, #11
 8008840:	761a      	strb	r2, [r3, #24]
      break;
 8008842:	e035      	b.n	80088b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7e5b      	ldrb	r3, [r3, #25]
 8008848:	3301      	adds	r3, #1
 800884a:	b2da      	uxtb	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	765a      	strb	r2, [r3, #25]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	7e5b      	ldrb	r3, [r3, #25]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d806      	bhi.n	8008866 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008864:	e025      	b.n	80088b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800886c:	2106      	movs	r1, #6
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	795b      	ldrb	r3, [r3, #5]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f90c 	bl	8008a9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	791b      	ldrb	r3, [r3, #4]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f906 	bl	8008a9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008896:	2302      	movs	r3, #2
 8008898:	73fb      	strb	r3, [r7, #15]
      break;
 800889a:	e00a      	b.n	80088b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800889c:	bf00      	nop
 800889e:	e008      	b.n	80088b2 <USBH_HandleControl+0x2de>
      break;
 80088a0:	bf00      	nop
 80088a2:	e006      	b.n	80088b2 <USBH_HandleControl+0x2de>
      break;
 80088a4:	bf00      	nop
 80088a6:	e004      	b.n	80088b2 <USBH_HandleControl+0x2de>
      break;
 80088a8:	bf00      	nop
 80088aa:	e002      	b.n	80088b2 <USBH_HandleControl+0x2de>
      break;
 80088ac:	bf00      	nop
 80088ae:	e000      	b.n	80088b2 <USBH_HandleControl+0x2de>
      break;
 80088b0:	bf00      	nop
  }

  return status;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af04      	add	r7, sp, #16
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088ca:	79f9      	ldrb	r1, [r7, #7]
 80088cc:	2300      	movs	r3, #0
 80088ce:	9303      	str	r3, [sp, #12]
 80088d0:	2308      	movs	r3, #8
 80088d2:	9302      	str	r3, [sp, #8]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	2300      	movs	r3, #0
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	2300      	movs	r3, #0
 80088de:	2200      	movs	r2, #0
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 fb46 	bl	8008f72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af04      	add	r7, sp, #16
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4611      	mov	r1, r2
 80088fc:	461a      	mov	r2, r3
 80088fe:	460b      	mov	r3, r1
 8008900:	80fb      	strh	r3, [r7, #6]
 8008902:	4613      	mov	r3, r2
 8008904:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008914:	7979      	ldrb	r1, [r7, #5]
 8008916:	7e3b      	ldrb	r3, [r7, #24]
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	9302      	str	r3, [sp, #8]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	2301      	movs	r3, #1
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	2300      	movs	r3, #0
 8008928:	2200      	movs	r2, #0
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fb21 	bl	8008f72 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b088      	sub	sp, #32
 800893e:	af04      	add	r7, sp, #16
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	4611      	mov	r1, r2
 8008946:	461a      	mov	r2, r3
 8008948:	460b      	mov	r3, r1
 800894a:	80fb      	strh	r3, [r7, #6]
 800894c:	4613      	mov	r3, r2
 800894e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008950:	7979      	ldrb	r1, [r7, #5]
 8008952:	2300      	movs	r3, #0
 8008954:	9303      	str	r3, [sp, #12]
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	2301      	movs	r3, #1
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	2201      	movs	r2, #1
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 fb03 	bl	8008f72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800896c:	2300      	movs	r3, #0

}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b088      	sub	sp, #32
 800897a:	af04      	add	r7, sp, #16
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	4611      	mov	r1, r2
 8008982:	461a      	mov	r2, r3
 8008984:	460b      	mov	r3, r1
 8008986:	80fb      	strh	r3, [r7, #6]
 8008988:	4613      	mov	r3, r2
 800898a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800899a:	7979      	ldrb	r1, [r7, #5]
 800899c:	7e3b      	ldrb	r3, [r7, #24]
 800899e:	9303      	str	r3, [sp, #12]
 80089a0:	88fb      	ldrh	r3, [r7, #6]
 80089a2:	9302      	str	r3, [sp, #8]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	2301      	movs	r3, #1
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2302      	movs	r3, #2
 80089ae:	2200      	movs	r2, #0
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fade 	bl	8008f72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af04      	add	r7, sp, #16
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	4611      	mov	r1, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	460b      	mov	r3, r1
 80089d0:	80fb      	strh	r3, [r7, #6]
 80089d2:	4613      	mov	r3, r2
 80089d4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d6:	7979      	ldrb	r1, [r7, #5]
 80089d8:	2300      	movs	r3, #0
 80089da:	9303      	str	r3, [sp, #12]
 80089dc:	88fb      	ldrh	r3, [r7, #6]
 80089de:	9302      	str	r3, [sp, #8]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	2301      	movs	r3, #1
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	2302      	movs	r3, #2
 80089ea:	2201      	movs	r2, #1
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 fac0 	bl	8008f72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af04      	add	r7, sp, #16
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	4608      	mov	r0, r1
 8008a06:	4611      	mov	r1, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	70fb      	strb	r3, [r7, #3]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	70bb      	strb	r3, [r7, #2]
 8008a12:	4613      	mov	r3, r2
 8008a14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a16:	7878      	ldrb	r0, [r7, #1]
 8008a18:	78ba      	ldrb	r2, [r7, #2]
 8008a1a:	78f9      	ldrb	r1, [r7, #3]
 8008a1c:	8b3b      	ldrh	r3, [r7, #24]
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	7d3b      	ldrb	r3, [r7, #20]
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	7c3b      	ldrb	r3, [r7, #16]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4603      	mov	r3, r0
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa53 	bl	8008ed6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa72 	bl	8008f34 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f836 	bl	8008ad8 <USBH_GetFreePipe>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a70:	89fb      	ldrh	r3, [r7, #14]
 8008a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00a      	beq.n	8008a90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	89fb      	ldrh	r3, [r7, #14]
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	33e0      	adds	r3, #224	@ 0xe0
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a90:	89fb      	ldrh	r3, [r7, #14]
 8008a92:	b2db      	uxtb	r3, r3
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	2b0f      	cmp	r3, #15
 8008aac:	d80d      	bhi.n	8008aca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	33e0      	adds	r3, #224	@ 0xe0
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	33e0      	adds	r3, #224	@ 0xe0
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
 8008ae8:	e00f      	b.n	8008b0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	33e0      	adds	r3, #224	@ 0xe0
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d102      	bne.n	8008b04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	e007      	b.n	8008b14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	3301      	adds	r3, #1
 8008b08:	73fb      	strb	r3, [r7, #15]
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	2b0f      	cmp	r3, #15
 8008b0e:	d9ec      	bls.n	8008aea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b24:	2201      	movs	r2, #1
 8008b26:	490e      	ldr	r1, [pc, #56]	@ (8008b60 <MX_USB_HOST_Init+0x40>)
 8008b28:	480e      	ldr	r0, [pc, #56]	@ (8008b64 <MX_USB_HOST_Init+0x44>)
 8008b2a:	f7fe fb15 	bl	8007158 <USBH_Init>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b34:	f7f7 ff0a 	bl	800094c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b38:	490b      	ldr	r1, [pc, #44]	@ (8008b68 <MX_USB_HOST_Init+0x48>)
 8008b3a:	480a      	ldr	r0, [pc, #40]	@ (8008b64 <MX_USB_HOST_Init+0x44>)
 8008b3c:	f7fe fbb9 	bl	80072b2 <USBH_RegisterClass>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b46:	f7f7 ff01 	bl	800094c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b4a:	4806      	ldr	r0, [pc, #24]	@ (8008b64 <MX_USB_HOST_Init+0x44>)
 8008b4c:	f7fe fc3d 	bl	80073ca <USBH_Start>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b56:	f7f7 fef9 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b5a:	bf00      	nop
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	08008b81 	.word	0x08008b81
 8008b64:	200001e4 	.word	0x200001e4
 8008b68:	20000014 	.word	0x20000014

08008b6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b70:	4802      	ldr	r0, [pc, #8]	@ (8008b7c <MX_USB_HOST_Process+0x10>)
 8008b72:	f7fe fc3b 	bl	80073ec <USBH_Process>
}
 8008b76:	bf00      	nop
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200001e4 	.word	0x200001e4

08008b80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d819      	bhi.n	8008bc8 <USBH_UserProcess+0x48>
 8008b94:	a201      	add	r2, pc, #4	@ (adr r2, 8008b9c <USBH_UserProcess+0x1c>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008bc9 	.word	0x08008bc9
 8008ba0:	08008bb9 	.word	0x08008bb9
 8008ba4:	08008bc9 	.word	0x08008bc9
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bb1 	.word	0x08008bb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008bb0:	4b09      	ldr	r3, [pc, #36]	@ (8008bd8 <USBH_UserProcess+0x58>)
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	701a      	strb	r2, [r3, #0]
  break;
 8008bb6:	e008      	b.n	8008bca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008bb8:	4b07      	ldr	r3, [pc, #28]	@ (8008bd8 <USBH_UserProcess+0x58>)
 8008bba:	2202      	movs	r2, #2
 8008bbc:	701a      	strb	r2, [r3, #0]
  break;
 8008bbe:	e004      	b.n	8008bca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <USBH_UserProcess+0x58>)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]
  break;
 8008bc6:	e000      	b.n	8008bca <USBH_UserProcess+0x4a>

  default:
  break;
 8008bc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	200005bc 	.word	0x200005bc

08008bdc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	@ 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	605a      	str	r2, [r3, #4]
 8008bee:	609a      	str	r2, [r3, #8]
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bfc:	d147      	bne.n	8008c8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bfe:	2300      	movs	r3, #0
 8008c00:	613b      	str	r3, [r7, #16]
 8008c02:	4b25      	ldr	r3, [pc, #148]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c06:	4a24      	ldr	r2, [pc, #144]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c08:	f043 0301 	orr.w	r3, r3, #1
 8008c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c0e:	4b22      	ldr	r3, [pc, #136]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c28:	f107 0314 	add.w	r3, r7, #20
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	481b      	ldr	r0, [pc, #108]	@ (8008c9c <HAL_HCD_MspInit+0xc0>)
 8008c30:	f7f8 fa66 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c34:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c42:	2300      	movs	r3, #0
 8008c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c46:	230a      	movs	r3, #10
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c4a:	f107 0314 	add.w	r3, r7, #20
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4812      	ldr	r0, [pc, #72]	@ (8008c9c <HAL_HCD_MspInit+0xc0>)
 8008c52:	f7f8 fa55 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c56:	4b10      	ldr	r3, [pc, #64]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c60:	6353      	str	r3, [r2, #52]	@ 0x34
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	4b0c      	ldr	r3, [pc, #48]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c72:	4b09      	ldr	r3, [pc, #36]	@ (8008c98 <HAL_HCD_MspInit+0xbc>)
 8008c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2100      	movs	r1, #0
 8008c82:	2043      	movs	r0, #67	@ 0x43
 8008c84:	f7f8 fa05 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c88:	2043      	movs	r0, #67	@ 0x43
 8008c8a:	f7f8 fa1e 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3728      	adds	r7, #40	@ 0x28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40023800 	.word	0x40023800
 8008c9c:	40020000 	.word	0x40020000

08008ca0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe ff73 	bl	8007b9a <USBH_LL_IncTimer>
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe ffab 	bl	8007c26 <USBH_LL_Connect>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe ffb4 	bl	8007c54 <USBH_LL_Disconnect>
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
 8008d00:	4613      	mov	r3, r2
 8008d02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe ff65 	bl	8007bee <USBH_LL_PortEnabled>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe ff65 	bl	8007c0a <USBH_LL_PortDisabled>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d12a      	bne.n	8008db0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d5a:	4a18      	ldr	r2, [pc, #96]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a15      	ldr	r2, [pc, #84]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d66:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d6a:	4b14      	ldr	r3, [pc, #80]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008d70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d72:	4b12      	ldr	r3, [pc, #72]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d74:	2208      	movs	r2, #8
 8008d76:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d78:	4b10      	ldr	r3, [pc, #64]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d84:	4b0d      	ldr	r3, [pc, #52]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d86:	2202      	movs	r2, #2
 8008d88:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d90:	480a      	ldr	r0, [pc, #40]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008d92:	f7f8 fb6a 	bl	800146a <HAL_HCD_Init>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d9c:	f7f7 fdd6 	bl	800094c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008da0:	4806      	ldr	r0, [pc, #24]	@ (8008dbc <USBH_LL_Init+0x74>)
 8008da2:	f7f8 ffcb 	bl	8001d3c <HAL_HCD_GetCurrentFrame>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fe fee6 	bl	8007b7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	200005c0 	.word	0x200005c0

08008dc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7f8 ff38 	bl	8001c4c <HAL_HCD_Start>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f956 	bl	8009094 <USBH_Get_USB_Status>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f8 ff40 	bl	8001c92 <HAL_HCD_Stop>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 f93b 	bl	8009094 <USBH_Get_USB_Status>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e34:	2301      	movs	r3, #1
 8008e36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f8 ff8a 	bl	8001d58 <HAL_HCD_GetCurrentSpeed>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d00c      	beq.n	8008e64 <USBH_LL_GetSpeed+0x38>
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d80d      	bhi.n	8008e6a <USBH_LL_GetSpeed+0x3e>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <USBH_LL_GetSpeed+0x2c>
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d003      	beq.n	8008e5e <USBH_LL_GetSpeed+0x32>
 8008e56:	e008      	b.n	8008e6a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5c:	e008      	b.n	8008e70 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	73fb      	strb	r3, [r7, #15]
    break;
 8008e62:	e005      	b.n	8008e70 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e64:	2302      	movs	r3, #2
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	e002      	b.n	8008e70 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6e:	bf00      	nop
  }
  return  speed;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f8 ff1b 	bl	8001ccc <HAL_HCD_ResetPort>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 f8f9 	bl	8009094 <USBH_Get_USB_Status>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ec2:	78fa      	ldrb	r2, [r7, #3]
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7f8 ff23 	bl	8001d12 <HAL_HCD_HC_GetXferCount>
 8008ecc:	4603      	mov	r3, r0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ed6:	b590      	push	{r4, r7, lr}
 8008ed8:	b089      	sub	sp, #36	@ 0x24
 8008eda:	af04      	add	r7, sp, #16
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	70fb      	strb	r3, [r7, #3]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70bb      	strb	r3, [r7, #2]
 8008eec:	4613      	mov	r3, r2
 8008eee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008efe:	787c      	ldrb	r4, [r7, #1]
 8008f00:	78ba      	ldrb	r2, [r7, #2]
 8008f02:	78f9      	ldrb	r1, [r7, #3]
 8008f04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f06:	9302      	str	r3, [sp, #8]
 8008f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	4623      	mov	r3, r4
 8008f16:	f7f8 fb0f 	bl	8001538 <HAL_HCD_HC_Init>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 f8b7 	bl	8009094 <USBH_Get_USB_Status>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd90      	pop	{r4, r7, pc}

08008f34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f4e:	78fa      	ldrb	r2, [r7, #3]
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7f8 fba8 	bl	80016a8 <HAL_HCD_HC_Halt>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 f898 	bl	8009094 <USBH_Get_USB_Status>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f72:	b590      	push	{r4, r7, lr}
 8008f74:	b089      	sub	sp, #36	@ 0x24
 8008f76:	af04      	add	r7, sp, #16
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	4608      	mov	r0, r1
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4603      	mov	r3, r0
 8008f82:	70fb      	strb	r3, [r7, #3]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70bb      	strb	r3, [r7, #2]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008f9a:	787c      	ldrb	r4, [r7, #1]
 8008f9c:	78ba      	ldrb	r2, [r7, #2]
 8008f9e:	78f9      	ldrb	r1, [r7, #3]
 8008fa0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fa4:	9303      	str	r3, [sp, #12]
 8008fa6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008fa8:	9302      	str	r3, [sp, #8]
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	f7f8 fb9b 	bl	80016f0 <HAL_HCD_HC_SubmitRequest>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f867 	bl	8009094 <USBH_Get_USB_Status>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd90      	pop	{r4, r7, pc}

08008fd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fe6:	78fa      	ldrb	r2, [r7, #3]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f8 fe7c 	bl	8001ce8 <HAL_HCD_HC_GetURBState>
 8008ff0:	4603      	mov	r3, r0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8009006:	20c8      	movs	r0, #200	@ 0xc8
 8009008:	f7f7 ff44 	bl	8000e94 <HAL_Delay>
  return USBH_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009016:	b480      	push	{r7}
 8009018:	b085      	sub	sp, #20
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
 8009022:	4613      	mov	r3, r2
 8009024:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800902c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	68f9      	ldr	r1, [r7, #12]
 8009032:	4613      	mov	r3, r2
 8009034:	011b      	lsls	r3, r3, #4
 8009036:	1a9b      	subs	r3, r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	440b      	add	r3, r1
 800903c:	3317      	adds	r3, #23
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00a      	beq.n	800905a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009044:	78fa      	ldrb	r2, [r7, #3]
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	4613      	mov	r3, r2
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	1a9b      	subs	r3, r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	333c      	adds	r3, #60	@ 0x3c
 8009054:	78ba      	ldrb	r2, [r7, #2]
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e009      	b.n	800906e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800905a:	78fa      	ldrb	r2, [r7, #3]
 800905c:	68f9      	ldr	r1, [r7, #12]
 800905e:	4613      	mov	r3, r2
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	1a9b      	subs	r3, r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	440b      	add	r3, r1
 8009068:	333d      	adds	r3, #61	@ 0x3d
 800906a:	78ba      	ldrb	r2, [r7, #2]
 800906c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7f7 ff05 	bl	8000e94 <HAL_Delay>
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d817      	bhi.n	80090d8 <USBH_Get_USB_Status+0x44>
 80090a8:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <USBH_Get_USB_Status+0x1c>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090c1 	.word	0x080090c1
 80090b4:	080090c7 	.word	0x080090c7
 80090b8:	080090cd 	.word	0x080090cd
 80090bc:	080090d3 	.word	0x080090d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
    break;
 80090c4:	e00b      	b.n	80090de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090c6:	2302      	movs	r3, #2
 80090c8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ca:	e008      	b.n	80090de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090cc:	2301      	movs	r3, #1
 80090ce:	73fb      	strb	r3, [r7, #15]
    break;
 80090d0:	e005      	b.n	80090de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090d2:	2302      	movs	r3, #2
 80090d4:	73fb      	strb	r3, [r7, #15]
    break;
 80090d6:	e002      	b.n	80090de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090d8:	2302      	movs	r3, #2
 80090da:	73fb      	strb	r3, [r7, #15]
    break;
 80090dc:	bf00      	nop
  }
  return usb_status;
 80090de:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <malloc>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	@ (80090f8 <malloc+0xc>)
 80090ee:	4601      	mov	r1, r0
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	f000 b82d 	b.w	8009150 <_malloc_r>
 80090f6:	bf00      	nop
 80090f8:	20000034 	.word	0x20000034

080090fc <free>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	@ (8009108 <free+0xc>)
 80090fe:	4601      	mov	r1, r0
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f000 b8f5 	b.w	80092f0 <_free_r>
 8009106:	bf00      	nop
 8009108:	20000034 	.word	0x20000034

0800910c <sbrk_aligned>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4e0f      	ldr	r6, [pc, #60]	@ (800914c <sbrk_aligned+0x40>)
 8009110:	460c      	mov	r4, r1
 8009112:	6831      	ldr	r1, [r6, #0]
 8009114:	4605      	mov	r5, r0
 8009116:	b911      	cbnz	r1, 800911e <sbrk_aligned+0x12>
 8009118:	f000 f8ae 	bl	8009278 <_sbrk_r>
 800911c:	6030      	str	r0, [r6, #0]
 800911e:	4621      	mov	r1, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f000 f8a9 	bl	8009278 <_sbrk_r>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d103      	bne.n	8009132 <sbrk_aligned+0x26>
 800912a:	f04f 34ff 	mov.w	r4, #4294967295
 800912e:	4620      	mov	r0, r4
 8009130:	bd70      	pop	{r4, r5, r6, pc}
 8009132:	1cc4      	adds	r4, r0, #3
 8009134:	f024 0403 	bic.w	r4, r4, #3
 8009138:	42a0      	cmp	r0, r4
 800913a:	d0f8      	beq.n	800912e <sbrk_aligned+0x22>
 800913c:	1a21      	subs	r1, r4, r0
 800913e:	4628      	mov	r0, r5
 8009140:	f000 f89a 	bl	8009278 <_sbrk_r>
 8009144:	3001      	adds	r0, #1
 8009146:	d1f2      	bne.n	800912e <sbrk_aligned+0x22>
 8009148:	e7ef      	b.n	800912a <sbrk_aligned+0x1e>
 800914a:	bf00      	nop
 800914c:	200009a0 	.word	0x200009a0

08009150 <_malloc_r>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	1ccd      	adds	r5, r1, #3
 8009156:	f025 0503 	bic.w	r5, r5, #3
 800915a:	3508      	adds	r5, #8
 800915c:	2d0c      	cmp	r5, #12
 800915e:	bf38      	it	cc
 8009160:	250c      	movcc	r5, #12
 8009162:	2d00      	cmp	r5, #0
 8009164:	4606      	mov	r6, r0
 8009166:	db01      	blt.n	800916c <_malloc_r+0x1c>
 8009168:	42a9      	cmp	r1, r5
 800916a:	d904      	bls.n	8009176 <_malloc_r+0x26>
 800916c:	230c      	movs	r3, #12
 800916e:	6033      	str	r3, [r6, #0]
 8009170:	2000      	movs	r0, #0
 8009172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800924c <_malloc_r+0xfc>
 800917a:	f000 f869 	bl	8009250 <__malloc_lock>
 800917e:	f8d8 3000 	ldr.w	r3, [r8]
 8009182:	461c      	mov	r4, r3
 8009184:	bb44      	cbnz	r4, 80091d8 <_malloc_r+0x88>
 8009186:	4629      	mov	r1, r5
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff ffbf 	bl	800910c <sbrk_aligned>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	4604      	mov	r4, r0
 8009192:	d158      	bne.n	8009246 <_malloc_r+0xf6>
 8009194:	f8d8 4000 	ldr.w	r4, [r8]
 8009198:	4627      	mov	r7, r4
 800919a:	2f00      	cmp	r7, #0
 800919c:	d143      	bne.n	8009226 <_malloc_r+0xd6>
 800919e:	2c00      	cmp	r4, #0
 80091a0:	d04b      	beq.n	800923a <_malloc_r+0xea>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	4639      	mov	r1, r7
 80091a6:	4630      	mov	r0, r6
 80091a8:	eb04 0903 	add.w	r9, r4, r3
 80091ac:	f000 f864 	bl	8009278 <_sbrk_r>
 80091b0:	4581      	cmp	r9, r0
 80091b2:	d142      	bne.n	800923a <_malloc_r+0xea>
 80091b4:	6821      	ldr	r1, [r4, #0]
 80091b6:	1a6d      	subs	r5, r5, r1
 80091b8:	4629      	mov	r1, r5
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ffa6 	bl	800910c <sbrk_aligned>
 80091c0:	3001      	adds	r0, #1
 80091c2:	d03a      	beq.n	800923a <_malloc_r+0xea>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	442b      	add	r3, r5
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	f8d8 3000 	ldr.w	r3, [r8]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	bb62      	cbnz	r2, 800922c <_malloc_r+0xdc>
 80091d2:	f8c8 7000 	str.w	r7, [r8]
 80091d6:	e00f      	b.n	80091f8 <_malloc_r+0xa8>
 80091d8:	6822      	ldr	r2, [r4, #0]
 80091da:	1b52      	subs	r2, r2, r5
 80091dc:	d420      	bmi.n	8009220 <_malloc_r+0xd0>
 80091de:	2a0b      	cmp	r2, #11
 80091e0:	d917      	bls.n	8009212 <_malloc_r+0xc2>
 80091e2:	1961      	adds	r1, r4, r5
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	6025      	str	r5, [r4, #0]
 80091e8:	bf18      	it	ne
 80091ea:	6059      	strne	r1, [r3, #4]
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	bf08      	it	eq
 80091f0:	f8c8 1000 	streq.w	r1, [r8]
 80091f4:	5162      	str	r2, [r4, r5]
 80091f6:	604b      	str	r3, [r1, #4]
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 f82f 	bl	800925c <__malloc_unlock>
 80091fe:	f104 000b 	add.w	r0, r4, #11
 8009202:	1d23      	adds	r3, r4, #4
 8009204:	f020 0007 	bic.w	r0, r0, #7
 8009208:	1ac2      	subs	r2, r0, r3
 800920a:	bf1c      	itt	ne
 800920c:	1a1b      	subne	r3, r3, r0
 800920e:	50a3      	strne	r3, [r4, r2]
 8009210:	e7af      	b.n	8009172 <_malloc_r+0x22>
 8009212:	6862      	ldr	r2, [r4, #4]
 8009214:	42a3      	cmp	r3, r4
 8009216:	bf0c      	ite	eq
 8009218:	f8c8 2000 	streq.w	r2, [r8]
 800921c:	605a      	strne	r2, [r3, #4]
 800921e:	e7eb      	b.n	80091f8 <_malloc_r+0xa8>
 8009220:	4623      	mov	r3, r4
 8009222:	6864      	ldr	r4, [r4, #4]
 8009224:	e7ae      	b.n	8009184 <_malloc_r+0x34>
 8009226:	463c      	mov	r4, r7
 8009228:	687f      	ldr	r7, [r7, #4]
 800922a:	e7b6      	b.n	800919a <_malloc_r+0x4a>
 800922c:	461a      	mov	r2, r3
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	42a3      	cmp	r3, r4
 8009232:	d1fb      	bne.n	800922c <_malloc_r+0xdc>
 8009234:	2300      	movs	r3, #0
 8009236:	6053      	str	r3, [r2, #4]
 8009238:	e7de      	b.n	80091f8 <_malloc_r+0xa8>
 800923a:	230c      	movs	r3, #12
 800923c:	6033      	str	r3, [r6, #0]
 800923e:	4630      	mov	r0, r6
 8009240:	f000 f80c 	bl	800925c <__malloc_unlock>
 8009244:	e794      	b.n	8009170 <_malloc_r+0x20>
 8009246:	6005      	str	r5, [r0, #0]
 8009248:	e7d6      	b.n	80091f8 <_malloc_r+0xa8>
 800924a:	bf00      	nop
 800924c:	200009a4 	.word	0x200009a4

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	@ (8009258 <__malloc_lock+0x8>)
 8009252:	f000 b84b 	b.w	80092ec <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	20000ae4 	.word	0x20000ae4

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	@ (8009264 <__malloc_unlock+0x8>)
 800925e:	f000 b846 	b.w	80092ee <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	20000ae4 	.word	0x20000ae4

08009268 <memset>:
 8009268:	4402      	add	r2, r0
 800926a:	4603      	mov	r3, r0
 800926c:	4293      	cmp	r3, r2
 800926e:	d100      	bne.n	8009272 <memset+0xa>
 8009270:	4770      	bx	lr
 8009272:	f803 1b01 	strb.w	r1, [r3], #1
 8009276:	e7f9      	b.n	800926c <memset+0x4>

08009278 <_sbrk_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d06      	ldr	r5, [pc, #24]	@ (8009294 <_sbrk_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7f7 fd22 	bl	8000ccc <_sbrk>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_sbrk_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_sbrk_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000ae0 	.word	0x20000ae0

08009298 <__errno>:
 8009298:	4b01      	ldr	r3, [pc, #4]	@ (80092a0 <__errno+0x8>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000034 	.word	0x20000034

080092a4 <__libc_init_array>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4d0d      	ldr	r5, [pc, #52]	@ (80092dc <__libc_init_array+0x38>)
 80092a8:	4c0d      	ldr	r4, [pc, #52]	@ (80092e0 <__libc_init_array+0x3c>)
 80092aa:	1b64      	subs	r4, r4, r5
 80092ac:	10a4      	asrs	r4, r4, #2
 80092ae:	2600      	movs	r6, #0
 80092b0:	42a6      	cmp	r6, r4
 80092b2:	d109      	bne.n	80092c8 <__libc_init_array+0x24>
 80092b4:	4d0b      	ldr	r5, [pc, #44]	@ (80092e4 <__libc_init_array+0x40>)
 80092b6:	4c0c      	ldr	r4, [pc, #48]	@ (80092e8 <__libc_init_array+0x44>)
 80092b8:	f000 f864 	bl	8009384 <_init>
 80092bc:	1b64      	subs	r4, r4, r5
 80092be:	10a4      	asrs	r4, r4, #2
 80092c0:	2600      	movs	r6, #0
 80092c2:	42a6      	cmp	r6, r4
 80092c4:	d105      	bne.n	80092d2 <__libc_init_array+0x2e>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092cc:	4798      	blx	r3
 80092ce:	3601      	adds	r6, #1
 80092d0:	e7ee      	b.n	80092b0 <__libc_init_array+0xc>
 80092d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d6:	4798      	blx	r3
 80092d8:	3601      	adds	r6, #1
 80092da:	e7f2      	b.n	80092c2 <__libc_init_array+0x1e>
 80092dc:	080093c0 	.word	0x080093c0
 80092e0:	080093c0 	.word	0x080093c0
 80092e4:	080093c0 	.word	0x080093c0
 80092e8:	080093c4 	.word	0x080093c4

080092ec <__retarget_lock_acquire_recursive>:
 80092ec:	4770      	bx	lr

080092ee <__retarget_lock_release_recursive>:
 80092ee:	4770      	bx	lr

080092f0 <_free_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4605      	mov	r5, r0
 80092f4:	2900      	cmp	r1, #0
 80092f6:	d041      	beq.n	800937c <_free_r+0x8c>
 80092f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092fc:	1f0c      	subs	r4, r1, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bfb8      	it	lt
 8009302:	18e4      	addlt	r4, r4, r3
 8009304:	f7ff ffa4 	bl	8009250 <__malloc_lock>
 8009308:	4a1d      	ldr	r2, [pc, #116]	@ (8009380 <_free_r+0x90>)
 800930a:	6813      	ldr	r3, [r2, #0]
 800930c:	b933      	cbnz	r3, 800931c <_free_r+0x2c>
 800930e:	6063      	str	r3, [r4, #4]
 8009310:	6014      	str	r4, [r2, #0]
 8009312:	4628      	mov	r0, r5
 8009314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009318:	f7ff bfa0 	b.w	800925c <__malloc_unlock>
 800931c:	42a3      	cmp	r3, r4
 800931e:	d908      	bls.n	8009332 <_free_r+0x42>
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	1821      	adds	r1, r4, r0
 8009324:	428b      	cmp	r3, r1
 8009326:	bf01      	itttt	eq
 8009328:	6819      	ldreq	r1, [r3, #0]
 800932a:	685b      	ldreq	r3, [r3, #4]
 800932c:	1809      	addeq	r1, r1, r0
 800932e:	6021      	streq	r1, [r4, #0]
 8009330:	e7ed      	b.n	800930e <_free_r+0x1e>
 8009332:	461a      	mov	r2, r3
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	b10b      	cbz	r3, 800933c <_free_r+0x4c>
 8009338:	42a3      	cmp	r3, r4
 800933a:	d9fa      	bls.n	8009332 <_free_r+0x42>
 800933c:	6811      	ldr	r1, [r2, #0]
 800933e:	1850      	adds	r0, r2, r1
 8009340:	42a0      	cmp	r0, r4
 8009342:	d10b      	bne.n	800935c <_free_r+0x6c>
 8009344:	6820      	ldr	r0, [r4, #0]
 8009346:	4401      	add	r1, r0
 8009348:	1850      	adds	r0, r2, r1
 800934a:	4283      	cmp	r3, r0
 800934c:	6011      	str	r1, [r2, #0]
 800934e:	d1e0      	bne.n	8009312 <_free_r+0x22>
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	6053      	str	r3, [r2, #4]
 8009356:	4408      	add	r0, r1
 8009358:	6010      	str	r0, [r2, #0]
 800935a:	e7da      	b.n	8009312 <_free_r+0x22>
 800935c:	d902      	bls.n	8009364 <_free_r+0x74>
 800935e:	230c      	movs	r3, #12
 8009360:	602b      	str	r3, [r5, #0]
 8009362:	e7d6      	b.n	8009312 <_free_r+0x22>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	1821      	adds	r1, r4, r0
 8009368:	428b      	cmp	r3, r1
 800936a:	bf04      	itt	eq
 800936c:	6819      	ldreq	r1, [r3, #0]
 800936e:	685b      	ldreq	r3, [r3, #4]
 8009370:	6063      	str	r3, [r4, #4]
 8009372:	bf04      	itt	eq
 8009374:	1809      	addeq	r1, r1, r0
 8009376:	6021      	streq	r1, [r4, #0]
 8009378:	6054      	str	r4, [r2, #4]
 800937a:	e7ca      	b.n	8009312 <_free_r+0x22>
 800937c:	bd38      	pop	{r3, r4, r5, pc}
 800937e:	bf00      	nop
 8009380:	200009a4 	.word	0x200009a4

08009384 <_init>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr

08009390 <_fini>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

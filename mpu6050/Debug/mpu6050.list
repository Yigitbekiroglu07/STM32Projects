
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cfc  08009cfc  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  08009cfc  08009cfc  0000acfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d04  08009d04  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d08  08009d08  0000ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08009d0c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          00000a20  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa8  20000aa8  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154c7  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b02  00000000  00000000  0002057f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00024088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d99  00000000  00000000  00025270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002498d  00000000  00000000  00026009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ddf  00000000  00000000  0004a996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd37b  00000000  00000000  00063775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130af0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005090  00000000  00000000  00130b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  00135bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c30 	.word	0x08009c30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08009c30 	.word	0x08009c30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d013      	beq.n	80004f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00b      	beq.n	80004f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004e0:	e000      	b.n	80004e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004ee:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc99 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f843 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f93f 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f8a9 	bl	8000670 <MX_I2C1_Init>
  MX_I2S3_Init();
 800051e:	f000 f8d5 	bl	80006cc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000522:	f000 f903 	bl	800072c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000526:	f008 fbbd 	bl	8008ca4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,0b11010000, 1, 100);
 800052a:	2364      	movs	r3, #100	@ 0x64
 800052c:	2201      	movs	r2, #1
 800052e:	21d0      	movs	r1, #208	@ 0xd0
 8000530:	4815      	ldr	r0, [pc, #84]	@ (8000588 <main+0x80>)
 8000532:	f003 fb3d 	bl	8003bb0 <HAL_I2C_IsDeviceReady>
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
if(ret==HAL_OK){
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <main+0x40>
	printf("MPU6050'den Merhaba\n");
 8000540:	4812      	ldr	r0, [pc, #72]	@ (800058c <main+0x84>)
 8000542:	f009 f88f 	bl	8009664 <puts>
 8000546:	e002      	b.n	800054e <main+0x46>
}
else{
	printf("Cihazi ya da kablolari kontrol edin\n");
 8000548:	4811      	ldr	r0, [pc, #68]	@ (8000590 <main+0x88>)
 800054a:	f009 f88b 	bl	8009664 <puts>
}
uint8_t temp_data = 0b00001000;
 800054e:	2308      	movs	r3, #8
 8000550:	71bb      	strb	r3, [r7, #6]
ret = HAL_I2C_Mem_Write(&hi2c1, 0b11010001, 27, 1, &temp_data, 1, 100);
 8000552:	2364      	movs	r3, #100	@ 0x64
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	1dbb      	adds	r3, r7, #6
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	221b      	movs	r2, #27
 8000562:	21d1      	movs	r1, #209	@ 0xd1
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0x80>)
 8000566:	f003 fa29 	bl	80039bc <HAL_I2C_Mem_Write>
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
if(ret==HAL_OK){
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d103      	bne.n	800057c <main+0x74>
	printf("27.Registera cihaz başarıyla yazıldı ve konfigüre oldu.\n");
 8000574:	4807      	ldr	r0, [pc, #28]	@ (8000594 <main+0x8c>)
 8000576:	f009 f875 	bl	8009664 <puts>
 800057a:	e002      	b.n	8000582 <main+0x7a>
}
else{
	printf("Registera basariyla yazilamadi.\n");
 800057c:	4806      	ldr	r0, [pc, #24]	@ (8000598 <main+0x90>)
 800057e:	f009 f871 	bl	8009664 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000582:	f008 fbb5 	bl	8008cf0 <MX_USB_HOST_Process>
 8000586:	e7fc      	b.n	8000582 <main+0x7a>
 8000588:	200000a4 	.word	0x200000a4
 800058c:	08009c48 	.word	0x08009c48
 8000590:	08009c5c 	.word	0x08009c5c
 8000594:	08009c80 	.word	0x08009c80
 8000598:	08009cc0 	.word	0x08009cc0

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	@ 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f009 f93a 	bl	8009824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fb02 	bl	8004c2c <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062e:	f000 f9cd 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f004 fd63 	bl	800511c <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800065c:	f000 f9b6 	bl	80009cc <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	@ 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f003 f841 	bl	8003734 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f988 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000a4 	.word	0x200000a4
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <MX_I2S3_Init+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <MX_I2S3_Init+0x5c>)
 80006f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_I2S3_Init+0x54>)
 800070c:	f003 fdee 	bl	80042ec <HAL_I2S_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000716:	f000 f959 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000f8 	.word	0x200000f8
 8000724:	40003c00 	.word	0x40003c00
 8000728:	00017700 	.word	0x00017700

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f005 f81b 	bl	80057b8 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f920 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000140 	.word	0x20000140
 8000794:	40013000 	.word	0x40013000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b72      	ldr	r3, [pc, #456]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a71      	ldr	r2, [pc, #452]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b6f      	ldr	r3, [pc, #444]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b6b      	ldr	r3, [pc, #428]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a6a      	ldr	r2, [pc, #424]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b68      	ldr	r3, [pc, #416]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b64      	ldr	r3, [pc, #400]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a63      	ldr	r2, [pc, #396]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b5d      	ldr	r3, [pc, #372]	@ (800097c <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a5c      	ldr	r2, [pc, #368]	@ (800097c <MX_GPIO_Init+0x1e4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b5a      	ldr	r3, [pc, #360]	@ (800097c <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b56      	ldr	r3, [pc, #344]	@ (800097c <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a55      	ldr	r2, [pc, #340]	@ (800097c <MX_GPIO_Init+0x1e4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b53      	ldr	r3, [pc, #332]	@ (800097c <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b4f      	ldr	r3, [pc, #316]	@ (800097c <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a4e      	ldr	r2, [pc, #312]	@ (800097c <MX_GPIO_Init+0x1e4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b4c      	ldr	r3, [pc, #304]	@ (800097c <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4849      	ldr	r0, [pc, #292]	@ (8000980 <MX_GPIO_Init+0x1e8>)
 800085c:	f000 fe36 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4847      	ldr	r0, [pc, #284]	@ (8000984 <MX_GPIO_Init+0x1ec>)
 8000866:	f000 fe31 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000870:	4845      	ldr	r0, [pc, #276]	@ (8000988 <MX_GPIO_Init+0x1f0>)
 8000872:	f000 fe2b 	bl	80014cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	483c      	ldr	r0, [pc, #240]	@ (8000980 <MX_GPIO_Init+0x1e8>)
 800088e:	f000 fc81 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4836      	ldr	r0, [pc, #216]	@ (8000984 <MX_GPIO_Init+0x1ec>)
 80008aa:	f000 fc73 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	482e      	ldr	r0, [pc, #184]	@ (8000984 <MX_GPIO_Init+0x1ec>)
 80008ca:	f000 fc63 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	482a      	ldr	r0, [pc, #168]	@ (800098c <MX_GPIO_Init+0x1f4>)
 80008e4:	f000 fc56 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e8:	2304      	movs	r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4825      	ldr	r0, [pc, #148]	@ (8000990 <MX_GPIO_Init+0x1f8>)
 80008fc:	f000 fc4a 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <MX_GPIO_Init+0x1f8>)
 800091e:	f000 fc39 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000922:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000926:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4813      	ldr	r0, [pc, #76]	@ (8000988 <MX_GPIO_Init+0x1f0>)
 800093c:	f000 fc2a 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000940:	2320      	movs	r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_GPIO_Init+0x1f0>)
 8000954:	f000 fc1e 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_GPIO_Init+0x1e8>)
 800096e:	f000 fc11 	bl	8001194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	@ 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400

08000994 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e009      	b.n	80009ba <_write+0x26>
 {
   ITM_SendChar(*ptr++);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	60ba      	str	r2, [r7, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fd82 	bl	80004b8 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	429a      	cmp	r2, r3
 80009c0:	dbf1      	blt.n	80009a6 <_write+0x12>
 }
 return len;
 80009c2:	687b      	ldr	r3, [r7, #4]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a16:	2007      	movs	r0, #7
 8000a18:	f000 fb7a 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <HAL_I2C_MspInit+0x84>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12c      	bne.n	8000aa4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000a66:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <HAL_I2C_MspInit+0x8c>)
 8000a84:	f000 fb86 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a07      	ldr	r2, [pc, #28]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	@ 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a31      	ldr	r2, [pc, #196]	@ (8000ba8 <HAL_I2S_MspInit+0xf0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d15a      	bne.n	8000b9e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aec:	23c0      	movs	r3, #192	@ 0xc0
 8000aee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 fd1b 	bl	8005534 <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b04:	f7ff ff62 	bl	80009cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	4a26      	ldr	r2, [pc, #152]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b18:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a18      	ldr	r2, [pc, #96]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <HAL_I2S_MspInit+0xf4>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	480e      	ldr	r0, [pc, #56]	@ (8000bb0 <HAL_I2S_MspInit+0xf8>)
 8000b78:	f000 fb0c 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b7c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <HAL_I2S_MspInit+0xfc>)
 8000b9a:	f000 fafb 	bl	8001194 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3738      	adds	r7, #56	@ 0x38
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40003c00 	.word	0x40003c00
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <HAL_SPI_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_SPI_MspInit+0x88>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_SPI_MspInit+0x88>)
 8000be4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_SPI_MspInit+0x88>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	@ (8000c40 <HAL_SPI_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_SPI_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c12:	23e0      	movs	r3, #224	@ 0xe0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c22:	2305      	movs	r3, #5
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <HAL_SPI_MspInit+0x8c>)
 8000c2e:	f000 fab1 	bl	8001194 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <NMI_Handler+0x4>

08000c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9e:	f000 f923 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <OTG_FS_IRQHandler+0x10>)
 8000cae:	f000 ff07 	bl	8001ac0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000057c 	.word	0x2000057c

08000cbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e00a      	b.n	8000ce4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cce:	f3af 8000 	nop.w
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf0      	blt.n	8000cce <_read+0x12>
  }

  return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f008 fda6 	bl	80098e0 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000198 	.word	0x20000198
 8000dc8:	20000aa8 	.word	0x20000aa8

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df4:	f7ff ffea 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f008 fd65 	bl	80098ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fb71 	bl	8000508 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e34:	08009d0c 	.word	0x08009d0c
  ldr r2, =_sbss
 8000e38:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e3c:	20000aa8 	.word	0x20000aa8

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f94f 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fdae 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f967 	bl	800117a <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f92f 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	2000019c 	.word	0x2000019c

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000019c 	.word	0x2000019c

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff3e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff8e 	bl	8001064 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff31 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e16b      	b.n	8001488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 815a 	bne.w	8001482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80b4 	beq.w	8001482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b60      	ldr	r3, [pc, #384]	@ (80014a0 <HAL_GPIO_Init+0x30c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a5f      	ldr	r2, [pc, #380]	@ (80014a0 <HAL_GPIO_Init+0x30c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b5d      	ldr	r3, [pc, #372]	@ (80014a0 <HAL_GPIO_Init+0x30c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a5b      	ldr	r2, [pc, #364]	@ (80014a4 <HAL_GPIO_Init+0x310>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	@ (80014a8 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02b      	beq.n	80013ba <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	@ (80014ac <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	@ (80014b0 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	@ (80014b4 <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	@ (80014b8 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4d      	ldr	r2, [pc, #308]	@ (80014bc <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4c      	ldr	r2, [pc, #304]	@ (80014c0 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4b      	ldr	r2, [pc, #300]	@ (80014c4 <HAL_GPIO_Init+0x330>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x20a>
 800139a:	2307      	movs	r3, #7
 800139c:	e00e      	b.n	80013bc <HAL_GPIO_Init+0x228>
 800139e:	2308      	movs	r3, #8
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	@ (80014a4 <HAL_GPIO_Init+0x310>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a32      	ldr	r2, [pc, #200]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <HAL_GPIO_Init+0x334>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae90 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af02      	add	r7, sp, #8
 8001504:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e059      	b.n	80015c4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f007 fc18 	bl	8008d60 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2203      	movs	r2, #3
 8001534:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800153e:	d102      	bne.n	8001546 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fa32 	bl	80059b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7c1a      	ldrb	r2, [r3, #16]
 8001558:	f88d 2000 	strb.w	r2, [sp]
 800155c:	3304      	adds	r3, #4
 800155e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001560:	f004 f9b3 	bl	80058ca <USB_CoreInit>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2202      	movs	r2, #2
 800156e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e026      	b.n	80015c4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fa2a 	bl	80059d6 <USB_SetCurrentMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e017      	b.n	80015c4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7c1a      	ldrb	r2, [r3, #16]
 800159c:	f88d 2000 	strb.w	r2, [sp]
 80015a0:	3304      	adds	r3, #4
 80015a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a4:	f004 fbcc 	bl	8005d40 <USB_HostInit>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2202      	movs	r2, #2
 80015b2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e004      	b.n	80015c4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b08b      	sub	sp, #44	@ 0x2c
 80015d0:	af04      	add	r7, sp, #16
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	4608      	mov	r0, r1
 80015d6:	4611      	mov	r1, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	70fb      	strb	r3, [r7, #3]
 80015de:	460b      	mov	r3, r1
 80015e0:	70bb      	strb	r3, [r7, #2]
 80015e2:	4613      	mov	r3, r2
 80015e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015e6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015e8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_HCD_HC_Init+0x2c>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e09d      	b.n	8001734 <HAL_HCD_HC_Init+0x168>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3319      	adds	r3, #25
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3314      	adds	r3, #20
 8001624:	787a      	ldrb	r2, [r7, #1]
 8001626:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3315      	adds	r3, #21
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3326      	adds	r3, #38	@ 0x26
 800164c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001650:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001652:	78fa      	ldrb	r2, [r7, #3]
 8001654:	78bb      	ldrb	r3, [r7, #2]
 8001656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800165a:	b2d8      	uxtb	r0, r3
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3316      	adds	r3, #22
 800166a:	4602      	mov	r2, r0
 800166c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fbc8 	bl	8001e08 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001678:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da0a      	bge.n	8001696 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	3317      	adds	r3, #23
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e009      	b.n	80016aa <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3317      	adds	r3, #23
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 fcaa 	bl	8006008 <USB_GetHostSpeed>
 80016b4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10b      	bne.n	80016d6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_HCD_HC_Init+0x10a>
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d104      	bne.n	80016d6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2bbc      	cmp	r3, #188	@ 0xbc
 80016d0:	d901      	bls.n	80016d6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016d2:	23bc      	movs	r3, #188	@ 0xbc
 80016d4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3318      	adds	r3, #24
 80016e6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	b298      	uxth	r0, r3
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	3328      	adds	r3, #40	@ 0x28
 8001700:	4602      	mov	r2, r0
 8001702:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	b29b      	uxth	r3, r3
 800170c:	787c      	ldrb	r4, [r7, #1]
 800170e:	78ba      	ldrb	r2, [r7, #2]
 8001710:	78f9      	ldrb	r1, [r7, #3]
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4623      	mov	r3, r4
 8001722:	f004 fc99 	bl	8006058 <USB_HC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}

0800173c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_HCD_HC_Halt+0x1e>
 8001756:	2302      	movs	r3, #2
 8001758:	e00f      	b.n	800177a <HAL_HCD_HC_Halt+0x3e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f005 f82b 	bl	80067c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4603      	mov	r3, r0
 8001794:	70fb      	strb	r3, [r7, #3]
 8001796:	460b      	mov	r3, r1
 8001798:	70bb      	strb	r3, [r7, #2]
 800179a:	4613      	mov	r3, r2
 800179c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3317      	adds	r3, #23
 80017ae:	78ba      	ldrb	r2, [r7, #2]
 80017b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	3326      	adds	r3, #38	@ 0x26
 80017c2:	787a      	ldrb	r2, [r7, #1]
 80017c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017c6:	7c3b      	ldrb	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d114      	bne.n	80017f6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	332a      	adds	r3, #42	@ 0x2a
 80017dc:	2203      	movs	r2, #3
 80017de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3319      	adds	r3, #25
 80017f0:	7f3a      	ldrb	r2, [r7, #28]
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e009      	b.n	800180a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	332a      	adds	r3, #42	@ 0x2a
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800180a:	787b      	ldrb	r3, [r7, #1]
 800180c:	2b03      	cmp	r3, #3
 800180e:	f200 8102 	bhi.w	8001a16 <HAL_HCD_HC_SubmitRequest+0x292>
 8001812:	a201      	add	r2, pc, #4	@ (adr r2, 8001818 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001829 	.word	0x08001829
 800181c:	08001a01 	.word	0x08001a01
 8001820:	080018ed 	.word	0x080018ed
 8001824:	08001977 	.word	0x08001977
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001828:	7c3b      	ldrb	r3, [r7, #16]
 800182a:	2b01      	cmp	r3, #1
 800182c:	f040 80f5 	bne.w	8001a1a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001830:	78bb      	ldrb	r3, [r7, #2]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d12d      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001836:	8b3b      	ldrh	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	333d      	adds	r3, #61	@ 0x3d
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	333d      	adds	r3, #61	@ 0x3d
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	332a      	adds	r3, #42	@ 0x2a
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800187a:	e0ce      	b.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	332a      	adds	r3, #42	@ 0x2a
 800188c:	2202      	movs	r2, #2
 800188e:	701a      	strb	r2, [r3, #0]
      break;
 8001890:	e0c3      	b.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	331a      	adds	r3, #26
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	f040 80b8 	bne.w	8001a1a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	333c      	adds	r3, #60	@ 0x3c
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	332a      	adds	r3, #42	@ 0x2a
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
      break;
 80018d4:	e0a1      	b.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	332a      	adds	r3, #42	@ 0x2a
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
      break;
 80018ea:	e096      	b.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d120      	bne.n	8001934 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	333d      	adds	r3, #61	@ 0x3d
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10a      	bne.n	800191e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	332a      	adds	r3, #42	@ 0x2a
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800191c:	e07e      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	332a      	adds	r3, #42	@ 0x2a
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e073      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	333c      	adds	r3, #60	@ 0x3c
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	332a      	adds	r3, #42	@ 0x2a
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
      break;
 800195e:	e05d      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	332a      	adds	r3, #42	@ 0x2a
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
      break;
 8001974:	e052      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001976:	78bb      	ldrb	r3, [r7, #2]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d120      	bne.n	80019be <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	333d      	adds	r3, #61	@ 0x3d
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	332a      	adds	r3, #42	@ 0x2a
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019a6:	e039      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	332a      	adds	r3, #42	@ 0x2a
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
      break;
 80019bc:	e02e      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	333c      	adds	r3, #60	@ 0x3c
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10a      	bne.n	80019ea <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	332a      	adds	r3, #42	@ 0x2a
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
      break;
 80019e8:	e018      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	332a      	adds	r3, #42	@ 0x2a
 80019fa:	2202      	movs	r2, #2
 80019fc:	701a      	strb	r2, [r3, #0]
      break;
 80019fe:	e00d      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	332a      	adds	r3, #42	@ 0x2a
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
      break;
 8001a14:	e002      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a1a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	332c      	adds	r3, #44	@ 0x2c
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	8b39      	ldrh	r1, [r7, #24]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4403      	add	r3, r0
 8001a40:	3334      	adds	r3, #52	@ 0x34
 8001a42:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	334c      	adds	r3, #76	@ 0x4c
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	3338      	adds	r3, #56	@ 0x38
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	3315      	adds	r3, #21
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	334d      	adds	r3, #77	@ 0x4d
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	3310      	adds	r3, #16
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	1d19      	adds	r1, r3, #4
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	799b      	ldrb	r3, [r3, #6]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f004 fbfe 	bl	80062b0 <USB_HC_StartXfer>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop

08001ac0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 f8f3 	bl	8005cc2 <USB_GetMode>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f040 80fb 	bne.w	8001cda <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 f8b6 	bl	8005c5a <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80f1 	beq.w	8001cd8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f004 f8ad 	bl	8005c5a <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b0a:	d104      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f89d 	bl	8005c5a <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b2a:	d104      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 f88d 	bl	8005c5a <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 f87d 	bl	8005c5a <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d103      	bne.n	8001b72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 f86f 	bl	8005c5a <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b86:	d120      	bne.n	8001bca <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d113      	bne.n	8001bca <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ba2:	2110      	movs	r1, #16
 8001ba4:	6938      	ldr	r0, [r7, #16]
 8001ba6:	f003 ff62 	bl	8005a6e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001baa:	6938      	ldr	r0, [r7, #16]
 8001bac:	f003 ff91 	bl	8005ad2 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7a5b      	ldrb	r3, [r3, #9]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d105      	bne.n	8001bc4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f982 	bl	8005ec8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f007 f949 	bl	8008e5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 f843 	bl	8005c5a <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bde:	d102      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f001 fd33 	bl	800364c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 f835 	bl	8005c5a <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d106      	bne.n	8001c08 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f007 f912 	bl	8008e24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2208      	movs	r2, #8
 8001c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 f824 	bl	8005c5a <USB_ReadInterrupts>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c1c:	d139      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fdbe 	bl	80067a4 <USB_HC_ReadInterrupt>
 8001c28:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e025      	b.n	8001c7c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d018      	beq.n	8001c76 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c5a:	d106      	bne.n	8001c6a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f905 	bl	8001e72 <HCD_HC_IN_IRQHandler>
 8001c68:	e005      	b.n	8001c76 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 ff67 	bl	8002b44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	795b      	ldrb	r3, [r3, #5]
 8001c80:	461a      	mov	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d3d3      	bcc.n	8001c30 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 ffdf 	bl	8005c5a <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d101      	bne.n	8001caa <HAL_HCD_IRQHandler+0x1ea>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_HCD_IRQHandler+0x1ec>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0210 	bic.w	r2, r2, #16
 8001cbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 fbe4 	bl	800348e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0210 	orr.w	r2, r2, #16
 8001cd4:	619a      	str	r2, [r3, #24]
 8001cd6:	e000      	b.n	8001cda <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cd8:	bf00      	nop
    }
  }
}
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_HCD_Start+0x16>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e013      	b.n	8001d1e <HAL_HCD_Start+0x3e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	4618      	mov	r0, r3
 8001d06:	f004 f946 	bl	8005f96 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fe3f 	bl	8005992 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_HCD_Stop+0x16>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e00d      	b.n	8001d58 <HAL_HCD_Stop+0x32>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 fe99 	bl	8006a80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 f8e8 	bl	8005f42 <USB_ResetPort>
 8001d72:	4603      	mov	r3, r0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	334c      	adds	r3, #76	@ 0x4c
 8001d98:	781b      	ldrb	r3, [r3, #0]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3338      	adds	r3, #56	@ 0x38
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 f92a 	bl	8006036 <USB_GetCurrentFrame>
 8001de2:	4603      	mov	r3, r0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f004 f905 	bl	8006008 <USB_GetHostSpeed>
 8001dfe:	4603      	mov	r3, r0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	331a      	adds	r3, #26
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	331b      	adds	r3, #27
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3325      	adds	r3, #37	@ 0x25
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3324      	adds	r3, #36	@ 0x24
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fef5 	bl	8005c80 <USB_ReadChInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d11a      	bne.n	8001ed6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eac:	461a      	mov	r2, r3
 8001eae:	2304      	movs	r3, #4
 8001eb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	334d      	adds	r3, #77	@ 0x4d
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 fc79 	bl	80067c6 <USB_HC_Halt>
 8001ed4:	e09e      	b.n	8002014 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fece 	bl	8005c80 <USB_ReadChInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eee:	d11b      	bne.n	8001f28 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001efc:	461a      	mov	r2, r3
 8001efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	334d      	adds	r3, #77	@ 0x4d
 8001f14:	2208      	movs	r2, #8
 8001f16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fc50 	bl	80067c6 <USB_HC_Halt>
 8001f26:	e075      	b.n	8002014 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fea5 	bl	8005c80 <USB_ReadChInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d11a      	bne.n	8001f76 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2308      	movs	r3, #8
 8001f50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	334d      	adds	r3, #77	@ 0x4d
 8001f62:	2206      	movs	r2, #6
 8001f64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fc29 	bl	80067c6 <USB_HC_Halt>
 8001f74:	e04e      	b.n	8002014 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fe7e 	bl	8005c80 <USB_ReadChInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8e:	d11b      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	334d      	adds	r3, #77	@ 0x4d
 8001fb4:	2209      	movs	r2, #9
 8001fb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fc00 	bl	80067c6 <USB_HC_Halt>
 8001fc6:	e025      	b.n	8002014 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fe55 	bl	8005c80 <USB_ReadChInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fdc:	2b80      	cmp	r3, #128	@ 0x80
 8001fde:	d119      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fec:	461a      	mov	r2, r3
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	334d      	adds	r3, #77	@ 0x4d
 8002002:	2207      	movs	r2, #7
 8002004:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fbd9 	bl	80067c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fe2f 	bl	8005c80 <USB_ReadChInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800202c:	d112      	bne.n	8002054 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fbc5 	bl	80067c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002048:	461a      	mov	r2, r3
 800204a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800204e:	6093      	str	r3, [r2, #8]
 8002050:	f000 bd75 	b.w	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fe0f 	bl	8005c80 <USB_ReadChInterrupts>
 8002062:	4603      	mov	r3, r0
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 8128 	bne.w	80022be <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800207a:	461a      	mov	r2, r3
 800207c:	2320      	movs	r3, #32
 800207e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	331b      	adds	r3, #27
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d119      	bne.n	80020ca <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	331b      	adds	r3, #27
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	799b      	ldrb	r3, [r3, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01b      	beq.n	800210a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3330      	adds	r3, #48	@ 0x30
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	1ac9      	subs	r1, r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4403      	add	r3, r0
 8002106:	3338      	adds	r3, #56	@ 0x38
 8002108:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	334d      	adds	r3, #77	@ 0x4d
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3344      	adds	r3, #68	@ 0x44
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2301      	movs	r3, #1
 8002142:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3326      	adds	r3, #38	@ 0x26
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3326      	adds	r3, #38	@ 0x26
 800216a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800216c:	2b02      	cmp	r3, #2
 800216e:	d110      	bne.n	8002192 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f004 fb24 	bl	80067c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218a:	461a      	mov	r2, r3
 800218c:	2310      	movs	r3, #16
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	e03d      	b.n	800220e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3326      	adds	r3, #38	@ 0x26
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d00a      	beq.n	80021be <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3326      	adds	r3, #38	@ 0x26
 80021b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d127      	bne.n	800220e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	0151      	lsls	r1, r2, #5
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	440a      	add	r2, r1
 80021d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	334c      	adds	r3, #76	@ 0x4c
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	334c      	adds	r3, #76	@ 0x4c
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f006 fe35 	bl	8008e78 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	799b      	ldrb	r3, [r3, #6]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d13b      	bne.n	800228e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3338      	adds	r3, #56	@ 0x38
 8002226:	6819      	ldr	r1, [r3, #0]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4403      	add	r3, r0
 8002236:	3328      	adds	r3, #40	@ 0x28
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	440b      	add	r3, r1
 800223c:	1e59      	subs	r1, r3, #1
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4403      	add	r3, r0
 800224c:	3328      	adds	r3, #40	@ 0x28
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	fbb1 f3f3 	udiv	r3, r1, r3
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8470 	beq.w	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	333c      	adds	r3, #60	@ 0x3c
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2d8      	uxtb	r0, r3
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	333c      	adds	r3, #60	@ 0x3c
 8002286:	4602      	mov	r2, r0
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	f000 bc58 	b.w	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	333c      	adds	r3, #60	@ 0x3c
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2d8      	uxtb	r0, r3
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	333c      	adds	r3, #60	@ 0x3c
 80022b6:	4602      	mov	r2, r0
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	f000 bc40 	b.w	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 fcda 	bl	8005c80 <USB_ReadChInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d131      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e2:	461a      	mov	r2, r3
 80022e4:	2320      	movs	r3, #32
 80022e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	331a      	adds	r3, #26
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	f040 841f 	bne.w	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	331b      	adds	r3, #27
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334d      	adds	r3, #77	@ 0x4d
 8002324:	2203      	movs	r2, #3
 8002326:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f004 fa48 	bl	80067c6 <USB_HC_Halt>
 8002336:	f000 bc02 	b.w	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fc9c 	bl	8005c80 <USB_ReadChInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	f040 8305 	bne.w	800295e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2302      	movs	r3, #2
 8002364:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	334d      	adds	r3, #77	@ 0x4d
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d114      	bne.n	80023a6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334d      	adds	r3, #77	@ 0x4d
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	334c      	adds	r3, #76	@ 0x4c
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e2cc      	b.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334d      	adds	r3, #77	@ 0x4d
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b06      	cmp	r3, #6
 80023ba:	d114      	bne.n	80023e6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	334d      	adds	r3, #77	@ 0x4d
 80023cc:	2202      	movs	r2, #2
 80023ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	334c      	adds	r3, #76	@ 0x4c
 80023e0:	2205      	movs	r2, #5
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e2ac      	b.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	334d      	adds	r3, #77	@ 0x4d
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d00b      	beq.n	8002414 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334d      	adds	r3, #77	@ 0x4d
 800240c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800240e:	2b09      	cmp	r3, #9
 8002410:	f040 80a6 	bne.w	8002560 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	334d      	adds	r3, #77	@ 0x4d
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3344      	adds	r3, #68	@ 0x44
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1c59      	adds	r1, r3, #1
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4403      	add	r3, r0
 8002448:	3344      	adds	r3, #68	@ 0x44
 800244a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3344      	adds	r3, #68	@ 0x44
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d943      	bls.n	80024ea <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3344      	adds	r3, #68	@ 0x44
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	331a      	adds	r3, #26
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d123      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	331b      	adds	r3, #27
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	331c      	adds	r3, #28
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	0151      	lsls	r1, r2, #5
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	440a      	add	r2, r1
 80024ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	334c      	adds	r3, #76	@ 0x4c
 80024e4:	2204      	movs	r2, #4
 80024e6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024e8:	e229      	b.n	800293e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	334c      	adds	r3, #76	@ 0x4c
 80024fa:	2202      	movs	r2, #2
 80024fc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3326      	adds	r3, #38	@ 0x26
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3326      	adds	r3, #38	@ 0x26
 8002524:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002526:	2b02      	cmp	r3, #2
 8002528:	f040 8209 	bne.w	800293e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002542:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800254a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800255e:	e1ee      	b.n	800293e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	334d      	adds	r3, #77	@ 0x4d
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b05      	cmp	r3, #5
 8002574:	f040 80c8 	bne.w	8002708 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	334d      	adds	r3, #77	@ 0x4d
 8002588:	2202      	movs	r2, #2
 800258a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	331b      	adds	r3, #27
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 81ce 	bne.w	8002940 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3326      	adds	r3, #38	@ 0x26
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d16b      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3348      	adds	r3, #72	@ 0x48
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	1c59      	adds	r1, r3, #1
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4403      	add	r3, r0
 80025da:	3348      	adds	r3, #72	@ 0x48
 80025dc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3348      	adds	r3, #72	@ 0x48
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d943      	bls.n	800267c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3348      	adds	r3, #72	@ 0x48
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	331b      	adds	r3, #27
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	3344      	adds	r3, #68	@ 0x44
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d809      	bhi.n	8002646 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	331c      	adds	r3, #28
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	0151      	lsls	r1, r2, #5
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	440a      	add	r2, r1
 800265c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002664:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	334c      	adds	r3, #76	@ 0x4c
 8002676:	2204      	movs	r2, #4
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e014      	b.n	80026a6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	334c      	adds	r3, #76	@ 0x4c
 800268c:	2202      	movs	r2, #2
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e009      	b.n	80026a6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	334c      	adds	r3, #76	@ 0x4c
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3326      	adds	r3, #38	@ 0x26
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3326      	adds	r3, #38	@ 0x26
 80026cc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	f040 8136 	bne.w	8002940 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026ea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026f2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e11b      	b.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	334d      	adds	r3, #77	@ 0x4d
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b03      	cmp	r3, #3
 800271c:	f040 8081 	bne.w	8002822 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	334d      	adds	r3, #77	@ 0x4d
 8002730:	2202      	movs	r2, #2
 8002732:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	331b      	adds	r3, #27
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	f040 80fa 	bne.w	8002940 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334c      	adds	r3, #76	@ 0x4c
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800277a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	0151      	lsls	r1, r2, #5
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	440a      	add	r2, r1
 8002796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800279a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800279e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ba:	f023 0320 	bic.w	r3, r3, #32
 80027be:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3326      	adds	r3, #38	@ 0x26
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	3326      	adds	r3, #38	@ 0x26
 80027e6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	f040 80a9 	bne.w	8002940 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002804:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800280c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e08e      	b.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	334d      	adds	r3, #77	@ 0x4d
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d143      	bne.n	80028c0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	334d      	adds	r3, #77	@ 0x4d
 8002848:	2202      	movs	r2, #2
 800284a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334c      	adds	r3, #76	@ 0x4c
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3326      	adds	r3, #38	@ 0x26
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3326      	adds	r3, #38	@ 0x26
 8002886:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002888:	2b02      	cmp	r3, #2
 800288a:	d159      	bne.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b8:	461a      	mov	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e03f      	b.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	334d      	adds	r3, #77	@ 0x4d
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d126      	bne.n	8002924 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	334d      	adds	r3, #77	@ 0x4d
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3344      	adds	r3, #68	@ 0x44
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	1c59      	adds	r1, r3, #1
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4403      	add	r3, r0
 800290a:	3344      	adds	r3, #68	@ 0x44
 800290c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	334c      	adds	r3, #76	@ 0x4c
 800291e:	2204      	movs	r2, #4
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e00d      	b.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334d      	adds	r3, #77	@ 0x4d
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	f000 8100 	beq.w	8002b3c <HCD_HC_IN_IRQHandler+0xcca>
 800293c:	e000      	b.n	8002940 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800293e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334c      	adds	r3, #76	@ 0x4c
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f006 fa8e 	bl	8008e78 <HAL_HCD_HC_NotifyURBChange_Callback>
 800295c:	e0ef      	b.n	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f003 f98a 	bl	8005c80 <USB_ReadChInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d12f      	bne.n	80029d6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2340      	movs	r3, #64	@ 0x40
 8002986:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334d      	adds	r3, #77	@ 0x4d
 8002998:	2205      	movs	r2, #5
 800299a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	331a      	adds	r3, #26
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	3344      	adds	r3, #68	@ 0x44
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fef9 	bl	80067c6 <USB_HC_Halt>
 80029d4:	e0b3      	b.n	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 f94e 	bl	8005c80 <USB_ReadChInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	f040 80a7 	bne.w	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	3326      	adds	r3, #38	@ 0x26
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d11b      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3344      	adds	r3, #68	@ 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	334d      	adds	r3, #77	@ 0x4d
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fec5 	bl	80067c6 <USB_HC_Halt>
 8002a3c:	e03f      	b.n	8002abe <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3326      	adds	r3, #38	@ 0x26
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	3326      	adds	r3, #38	@ 0x26
 8002a64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d129      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3344      	adds	r3, #68	@ 0x44
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	799b      	ldrb	r3, [r3, #6]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HCD_HC_IN_IRQHandler+0xc2a>
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	331b      	adds	r3, #27
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d110      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334d      	adds	r3, #77	@ 0x4d
 8002aac:	2204      	movs	r2, #4
 8002aae:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fe84 	bl	80067c6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	331b      	adds	r3, #27
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d129      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	331b      	adds	r3, #27
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	0151      	lsls	r1, r2, #5
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	440a      	add	r2, r1
 8002afe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b06:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	0151      	lsls	r1, r2, #5
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b22:	f043 0320 	orr.w	r3, r3, #32
 8002b26:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b34:	461a      	mov	r2, r3
 8002b36:	2310      	movs	r3, #16
 8002b38:	6093      	str	r3, [r2, #8]
 8002b3a:	e000      	b.n	8002b3e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b3c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 f88c 	bl	8005c80 <USB_ReadChInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d11b      	bne.n	8002baa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2304      	movs	r3, #4
 8002b82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	334d      	adds	r3, #77	@ 0x4d
 8002b94:	2207      	movs	r2, #7
 8002b96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fe10 	bl	80067c6 <USB_HC_Halt>
 8002ba6:	f000 bc6f 	b.w	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 f864 	bl	8005c80 <USB_ReadChInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	f040 8082 	bne.w	8002cc8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3319      	adds	r3, #25
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d124      	bne.n	8002c36 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3319      	adds	r3, #25
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	334c      	adds	r3, #76	@ 0x4c
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334d      	adds	r3, #77	@ 0x4d
 8002c24:	2203      	movs	r2, #3
 8002c26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fdc8 	bl	80067c6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	331a      	adds	r3, #26
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	f040 841d 	bne.w	8003488 <HCD_HC_OUT_IRQHandler+0x944>
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	331b      	adds	r3, #27
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 8411 	bne.w	8003488 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3326      	adds	r3, #38	@ 0x26
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d009      	beq.n	8002c90 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	331b      	adds	r3, #27
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334d      	adds	r3, #77	@ 0x4d
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fd8a 	bl	80067c6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3344      	adds	r3, #68	@ 0x44
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e3df      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 ffd5 	bl	8005c80 <USB_ReadChInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce0:	d111      	bne.n	8002d06 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cf4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fd61 	bl	80067c6 <USB_HC_Halt>
 8002d04:	e3c0      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f002 ffb6 	bl	8005c80 <USB_ReadChInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d168      	bne.n	8002df0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3344      	adds	r3, #68	@ 0x44
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 ffa0 	bl	8005c80 <USB_ReadChInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d46:	2b40      	cmp	r3, #64	@ 0x40
 8002d48:	d112      	bne.n	8002d70 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3319      	adds	r3, #25
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2340      	movs	r3, #64	@ 0x40
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	331b      	adds	r3, #27
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d019      	beq.n	8002dba <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	331b      	adds	r3, #27
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	0151      	lsls	r1, r2, #5
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	440a      	add	r2, r1
 8002db0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2301      	movs	r3, #1
 8002dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	@ 0x4d
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fcec 	bl	80067c6 <USB_HC_Halt>
 8002dee:	e34b      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 ff41 	bl	8005c80 <USB_ReadChInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b40      	cmp	r3, #64	@ 0x40
 8002e06:	d139      	bne.n	8002e7c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334d      	adds	r3, #77	@ 0x4d
 8002e18:	2205      	movs	r2, #5
 8002e1a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	331a      	adds	r3, #26
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3319      	adds	r3, #25
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3344      	adds	r3, #68	@ 0x44
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fcaf 	bl	80067c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	2340      	movs	r3, #64	@ 0x40
 8002e78:	6093      	str	r3, [r2, #8]
 8002e7a:	e305      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 fefb 	bl	8005c80 <USB_ReadChInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d11a      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334d      	adds	r3, #77	@ 0x4d
 8002eb6:	2206      	movs	r2, #6
 8002eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 fc7f 	bl	80067c6 <USB_HC_Halt>
 8002ec8:	e2de      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 fed4 	bl	8005c80 <USB_ReadChInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d144      	bne.n	8002f6c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3344      	adds	r3, #68	@ 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	334d      	adds	r3, #77	@ 0x4d
 8002f06:	2204      	movs	r2, #4
 8002f08:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3319      	adds	r3, #25
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d114      	bne.n	8002f4a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3318      	adds	r3, #24
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3319      	adds	r3, #25
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fc37 	bl	80067c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	2310      	movs	r3, #16
 8002f68:	6093      	str	r3, [r2, #8]
 8002f6a:	e28d      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fe83 	bl	8005c80 <USB_ReadChInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f80:	2b80      	cmp	r3, #128	@ 0x80
 8002f82:	d169      	bne.n	8003058 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	799b      	ldrb	r3, [r3, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	334d      	adds	r3, #77	@ 0x4d
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fc0c 	bl	80067c6 <USB_HC_Halt>
 8002fae:	e049      	b.n	8003044 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3344      	adds	r3, #68	@ 0x44
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4403      	add	r3, r0
 8002fd0:	3344      	adds	r3, #68	@ 0x44
 8002fd2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3344      	adds	r3, #68	@ 0x44
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d922      	bls.n	8003030 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3344      	adds	r3, #68	@ 0x44
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	334c      	adds	r3, #76	@ 0x4c
 800300e:	2204      	movs	r2, #4
 8003010:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	334c      	adds	r3, #76	@ 0x4c
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f005 ff25 	bl	8008e78 <HAL_HCD_HC_NotifyURBChange_Callback>
 800302e:	e009      	b.n	8003044 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	334c      	adds	r3, #76	@ 0x4c
 8003040:	2202      	movs	r2, #2
 8003042:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	e217      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f002 fe0d 	bl	8005c80 <USB_ReadChInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003070:	d11b      	bne.n	80030aa <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334d      	adds	r3, #77	@ 0x4d
 8003082:	2209      	movs	r2, #9
 8003084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fb99 	bl	80067c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	e1ee      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 fde4 	bl	8005c80 <USB_ReadChInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	f040 81df 	bne.w	8003482 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	2302      	movs	r3, #2
 80030d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	334d      	adds	r3, #77	@ 0x4d
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f040 8093 	bne.w	8003214 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	334d      	adds	r3, #77	@ 0x4d
 80030fe:	2202      	movs	r2, #2
 8003100:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	334c      	adds	r3, #76	@ 0x4c
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3326      	adds	r3, #38	@ 0x26
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d00b      	beq.n	8003144 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3326      	adds	r3, #38	@ 0x26
 800313c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	f040 8190 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	799b      	ldrb	r3, [r3, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d115      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	333d      	adds	r3, #61	@ 0x3d
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	f083 0301 	eor.w	r3, r3, #1
 8003164:	b2d8      	uxtb	r0, r3
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	333d      	adds	r3, #61	@ 0x3d
 8003174:	4602      	mov	r2, r0
 8003176:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	799b      	ldrb	r3, [r3, #6]
 800317c:	2b01      	cmp	r3, #1
 800317e:	f040 8171 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x920>
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3334      	adds	r3, #52	@ 0x34
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8165 	beq.w	8003464 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3334      	adds	r3, #52	@ 0x34
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4403      	add	r3, r0
 80031ba:	3328      	adds	r3, #40	@ 0x28
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	440b      	add	r3, r1
 80031c0:	1e59      	subs	r1, r3, #1
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4403      	add	r3, r0
 80031d0:	3328      	adds	r3, #40	@ 0x28
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 813f 	beq.w	8003464 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	333d      	adds	r3, #61	@ 0x3d
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	f083 0301 	eor.w	r3, r3, #1
 80031fe:	b2d8      	uxtb	r0, r3
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	333d      	adds	r3, #61	@ 0x3d
 800320e:	4602      	mov	r2, r0
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e127      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	334d      	adds	r3, #77	@ 0x4d
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b03      	cmp	r3, #3
 8003228:	d120      	bne.n	800326c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334d      	adds	r3, #77	@ 0x4d
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	331b      	adds	r3, #27
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 8107 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	@ 0x4c
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e0fb      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b04      	cmp	r3, #4
 8003280:	d13a      	bne.n	80032f8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334d      	adds	r3, #77	@ 0x4d
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334c      	adds	r3, #76	@ 0x4c
 80032a6:	2202      	movs	r2, #2
 80032a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	331b      	adds	r3, #27
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 80d1 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	331b      	adds	r3, #27
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	0151      	lsls	r1, r2, #5
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	440a      	add	r2, r1
 80032ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f4:	6053      	str	r3, [r2, #4]
 80032f6:	e0b5      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d114      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334c      	adds	r3, #76	@ 0x4c
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e095      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	334d      	adds	r3, #77	@ 0x4d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b06      	cmp	r3, #6
 800334c:	d114      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	@ 0x4d
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	334c      	adds	r3, #76	@ 0x4c
 8003372:	2205      	movs	r2, #5
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e075      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334d      	adds	r3, #77	@ 0x4d
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b07      	cmp	r3, #7
 800338c:	d00a      	beq.n	80033a4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334d      	adds	r3, #77	@ 0x4d
 800339e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033a0:	2b09      	cmp	r3, #9
 80033a2:	d170      	bne.n	8003486 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334d      	adds	r3, #77	@ 0x4d
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3344      	adds	r3, #68	@ 0x44
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	3344      	adds	r3, #68	@ 0x44
 80033da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3344      	adds	r3, #68	@ 0x44
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d914      	bls.n	800341c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3344      	adds	r3, #68	@ 0x44
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	334c      	adds	r3, #76	@ 0x4c
 8003416:	2204      	movs	r2, #4
 8003418:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800341a:	e022      	b.n	8003462 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	334c      	adds	r3, #76	@ 0x4c
 800342c:	2202      	movs	r2, #2
 800342e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003446:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800344e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003462:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334c      	adds	r3, #76	@ 0x4c
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f005 fcfc 	bl	8008e78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003480:	e002      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003486:	bf00      	nop
  }
}
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08a      	sub	sp, #40	@ 0x28
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	0c5b      	lsrs	r3, r3, #17
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d004      	beq.n	80034d4 <HCD_RXQLVL_IRQHandler+0x46>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	f000 80b6 	beq.w	800363e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034d2:	e0b7      	b.n	8003644 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80b3 	beq.w	8003642 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	332c      	adds	r3, #44	@ 0x2c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80a7 	beq.w	8003642 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3338      	adds	r3, #56	@ 0x38
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	18d1      	adds	r1, r2, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4403      	add	r3, r0
 8003518:	3334      	adds	r3, #52	@ 0x34
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4299      	cmp	r1, r3
 800351e:	f200 8083 	bhi.w	8003628 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	332c      	adds	r3, #44	@ 0x2c
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	b292      	uxth	r2, r2
 800353c:	4619      	mov	r1, r3
 800353e:	f002 fb34 	bl	8005baa <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	332c      	adds	r3, #44	@ 0x2c
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	18d1      	adds	r1, r2, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	332c      	adds	r3, #44	@ 0x2c
 8003568:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3338      	adds	r3, #56	@ 0x38
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	18d1      	adds	r1, r2, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4403      	add	r3, r0
 800358e:	3338      	adds	r3, #56	@ 0x38
 8003590:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	0cdb      	lsrs	r3, r3, #19
 80035a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3328      	adds	r3, #40	@ 0x28
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4293      	cmp	r3, r2
 80035c0:	d13f      	bne.n	8003642 <HCD_RXQLVL_IRQHandler+0x1b4>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	333c      	adds	r3, #60	@ 0x3c
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2d8      	uxtb	r0, r3
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	333c      	adds	r3, #60	@ 0x3c
 8003622:	4602      	mov	r2, r0
 8003624:	701a      	strb	r2, [r3, #0]
      break;
 8003626:	e00c      	b.n	8003642 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334c      	adds	r3, #76	@ 0x4c
 8003638:	2204      	movs	r2, #4
 800363a:	701a      	strb	r2, [r3, #0]
      break;
 800363c:	e001      	b.n	8003642 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003642:	bf00      	nop
  }
}
 8003644:	bf00      	nop
 8003646:	3728      	adds	r7, #40	@ 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003678:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d10b      	bne.n	800369c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f005 fbd6 	bl	8008e40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d132      	bne.n	800370c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f043 0308 	orr.w	r3, r3, #8
 80036ac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d126      	bne.n	8003706 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7a5b      	ldrb	r3, [r3, #9]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d113      	bne.n	80036e8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036ca:	d106      	bne.n	80036da <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2102      	movs	r1, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fbf8 	bl	8005ec8 <USB_InitFSLSPClkSel>
 80036d8:	e011      	b.n	80036fe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 fbf1 	bl	8005ec8 <USB_InitFSLSPClkSel>
 80036e6:	e00a      	b.n	80036fe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	79db      	ldrb	r3, [r3, #7]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036f6:	461a      	mov	r2, r3
 80036f8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036fc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f005 fbc8 	bl	8008e94 <HAL_HCD_PortEnabled_Callback>
 8003704:	e002      	b.n	800370c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f005 fbd2 	bl	8008eb0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b20      	cmp	r3, #32
 8003714:	d103      	bne.n	800371e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f043 0320 	orr.w	r3, r3, #32
 800371c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6013      	str	r3, [r2, #0]
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e12b      	b.n	800399e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd f964 	bl	8000a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	@ 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003798:	f001 feb8 	bl	800550c <HAL_RCC_GetPCLK1Freq>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4a81      	ldr	r2, [pc, #516]	@ (80039a8 <HAL_I2C_Init+0x274>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d807      	bhi.n	80037b8 <HAL_I2C_Init+0x84>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a80      	ldr	r2, [pc, #512]	@ (80039ac <HAL_I2C_Init+0x278>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bf94      	ite	ls
 80037b0:	2301      	movls	r3, #1
 80037b2:	2300      	movhi	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e006      	b.n	80037c6 <HAL_I2C_Init+0x92>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a7d      	ldr	r2, [pc, #500]	@ (80039b0 <HAL_I2C_Init+0x27c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0e7      	b.n	800399e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a78      	ldr	r2, [pc, #480]	@ (80039b4 <HAL_I2C_Init+0x280>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0c9b      	lsrs	r3, r3, #18
 80037d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a6a      	ldr	r2, [pc, #424]	@ (80039a8 <HAL_I2C_Init+0x274>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d802      	bhi.n	8003808 <HAL_I2C_Init+0xd4>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	e009      	b.n	800381c <HAL_I2C_Init+0xe8>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a69      	ldr	r2, [pc, #420]	@ (80039b8 <HAL_I2C_Init+0x284>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	3301      	adds	r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	430b      	orrs	r3, r1
 8003822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800382e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	495c      	ldr	r1, [pc, #368]	@ (80039a8 <HAL_I2C_Init+0x274>)
 8003838:	428b      	cmp	r3, r1
 800383a:	d819      	bhi.n	8003870 <HAL_I2C_Init+0x13c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e59      	subs	r1, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fbb1 f3f3 	udiv	r3, r1, r3
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003850:	400b      	ands	r3, r1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_I2C_Init+0x138>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e59      	subs	r1, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fbb1 f3f3 	udiv	r3, r1, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	e051      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 800386c:	2304      	movs	r3, #4
 800386e:	e04f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <HAL_I2C_Init+0x168>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e012      	b.n	80038c2 <HAL_I2C_Init+0x18e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	0099      	lsls	r1, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Init+0x196>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e022      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10e      	bne.n	80038f0 <HAL_I2C_Init+0x1bc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e58      	subs	r0, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	440b      	add	r3, r1
 80038e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	6809      	ldr	r1, [r1, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800393e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6911      	ldr	r1, [r2, #16]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	000186a0 	.word	0x000186a0
 80039ac:	001e847f 	.word	0x001e847f
 80039b0:	003d08ff 	.word	0x003d08ff
 80039b4:	431bde83 	.word	0x431bde83
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d6:	f7fd fa9b 	bl	8000f10 <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	f040 80d9 	bne.w	8003b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2319      	movs	r3, #25
 80039f0:	2201      	movs	r2, #1
 80039f2:	496d      	ldr	r1, [pc, #436]	@ (8003ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fa9f 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0cc      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Mem_Write+0x56>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0c5      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d007      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	@ 0x21
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	@ 0x40
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a4d      	ldr	r2, [pc, #308]	@ (8003bac <HAL_I2C_Mem_Write+0x1f0>)
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7a:	88f8      	ldrh	r0, [r7, #6]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4603      	mov	r3, r0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9be 	bl	8003e0c <I2C_RequestMemoryWrite>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d052      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e081      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fb64 	bl	800416c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_I2C_Mem_Write+0x180>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1aa      	bne.n	8003a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fb57 	bl	80041fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d107      	bne.n	8003b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e016      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	00100002 	.word	0x00100002
 8003bac:	ffff0000 	.word	0xffff0000

08003bb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	@ 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7fd f9a6 	bl	8000f10 <HAL_GetTick>
 8003bc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	f040 8111 	bne.w	8003dfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2319      	movs	r3, #25
 8003bde:	2201      	movs	r2, #1
 8003be0:	4988      	ldr	r1, [pc, #544]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f9a8 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e104      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2C_IsDeviceReady+0x50>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0fd      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d007      	beq.n	8003c26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2224      	movs	r2, #36	@ 0x24
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a70      	ldr	r2, [pc, #448]	@ (8003e08 <HAL_I2C_IsDeviceReady+0x258>)
 8003c48:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f966 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c80:	d103      	bne.n	8003c8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c88:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0b6      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fd f937 	bl	8000f10 <HAL_GetTick>
 8003ca2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cd2:	e025      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fd f91c 	bl	8000f10 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <HAL_I2C_IsDeviceReady+0x13a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22a0      	movs	r2, #160	@ 0xa0
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d2a:	d005      	beq.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d32:	7dbb      	ldrb	r3, [r7, #22]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0cd      	beq.n	8003cd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d129      	bne.n	8003da2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4921      	ldr	r1, [pc, #132]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f8da 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e036      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e02c      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2319      	movs	r3, #25
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	490f      	ldr	r1, [pc, #60]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f8b6 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e012      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f4ff af32 	bcc.w	8003c4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00100002 	.word	0x00100002
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f878 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5c:	d103      	bne.n	8003e66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e05f      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	492d      	ldr	r1, [pc, #180]	@ (8003f34 <I2C_RequestMemoryWrite+0x128>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f8d3 	bl	800402c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e04c      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	6a39      	ldr	r1, [r7, #32]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f95e 	bl	800416c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d107      	bne.n	8003ece <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02b      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed8:	893b      	ldrh	r3, [r7, #8]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e021      	b.n	8003f28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f938 	bl	800416c <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e005      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1e:	893b      	ldrh	r3, [r7, #8]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	00010002 	.word	0x00010002

08003f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f48:	e048      	b.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d044      	beq.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fc ffdd 	bl	8000f10 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d139      	bne.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10d      	bne.n	8003f8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	e00c      	b.n	8003fa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d116      	bne.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e023      	b.n	8004024 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10d      	bne.n	8004002 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	43da      	mvns	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	e00c      	b.n	800401c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	43da      	mvns	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	d093      	beq.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800403a:	e071      	b.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404a:	d123      	bne.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e067      	b.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d041      	beq.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7fc ff38 	bl	8000f10 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d136      	bne.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10c      	bne.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4013      	ands	r3, r2
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e00b      	b.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	43da      	mvns	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4013      	ands	r3, r2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d016      	beq.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e021      	b.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10c      	bne.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e00b      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f af6d 	bne.w	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004178:	e034      	b.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f886 	bl	800428c <I2C_IsAcknowledgeFailed>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e034      	b.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d028      	beq.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fc febd 	bl	8000f10 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b80      	cmp	r3, #128	@ 0x80
 80041b4:	d016      	beq.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e007      	b.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ee:	2b80      	cmp	r3, #128	@ 0x80
 80041f0:	d1c3      	bne.n	800417a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004208:	e034      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f83e 	bl	800428c <I2C_IsAcknowledgeFailed>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e034      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d028      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fc fe75 	bl	8000f10 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11d      	bne.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d016      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d1c3      	bne.n	800420a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a2:	d11b      	bne.n	80042dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e128      	b.n	8004550 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a90      	ldr	r2, [pc, #576]	@ (8004558 <HAL_I2S_Init+0x26c>)
 8004316:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc fbcd 	bl	8000ab8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004334:	f023 030f 	bic.w	r3, r3, #15
 8004338:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2202      	movs	r2, #2
 8004340:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d060      	beq.n	800440c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004352:	2310      	movs	r3, #16
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e001      	b.n	800435c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004358:	2320      	movs	r3, #32
 800435a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b20      	cmp	r3, #32
 8004362:	d802      	bhi.n	800436a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800436a:	2001      	movs	r0, #1
 800436c:	f001 f9c4 	bl	80056f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004370:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800437a:	d125      	bne.n	80043c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	fbb2 f2f3 	udiv	r2, r2, r3
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	3305      	adds	r3, #5
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e01f      	b.n	80043e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	3305      	adds	r3, #5
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e00e      	b.n	80043e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	461a      	mov	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	3305      	adds	r3, #5
 80043e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4a5c      	ldr	r2, [pc, #368]	@ (800455c <HAL_I2S_Init+0x270>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	08db      	lsrs	r3, r3, #3
 80043f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	e003      	b.n	8004414 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800440c:	2302      	movs	r3, #2
 800440e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d902      	bls.n	8004420 <HAL_I2S_Init+0x134>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2bff      	cmp	r3, #255	@ 0xff
 800441e:	d907      	bls.n	8004430 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	f043 0210 	orr.w	r2, r3, #16
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e08f      	b.n	8004550 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	ea42 0103 	orr.w	r1, r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	430a      	orrs	r2, r1
 8004442:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800444e:	f023 030f 	bic.w	r3, r3, #15
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6851      	ldr	r1, [r2, #4]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6892      	ldr	r2, [r2, #8]
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68d2      	ldr	r2, [r2, #12]
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6992      	ldr	r2, [r2, #24]
 8004466:	430a      	orrs	r2, r1
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004472:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d161      	bne.n	8004540 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a38      	ldr	r2, [pc, #224]	@ (8004560 <HAL_I2S_Init+0x274>)
 8004480:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a37      	ldr	r2, [pc, #220]	@ (8004564 <HAL_I2S_Init+0x278>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_I2S_Init+0x1a4>
 800448c:	4b36      	ldr	r3, [pc, #216]	@ (8004568 <HAL_I2S_Init+0x27c>)
 800448e:	e001      	b.n	8004494 <HAL_I2S_Init+0x1a8>
 8004490:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	4932      	ldr	r1, [pc, #200]	@ (8004564 <HAL_I2S_Init+0x278>)
 800449c:	428a      	cmp	r2, r1
 800449e:	d101      	bne.n	80044a4 <HAL_I2S_Init+0x1b8>
 80044a0:	4a31      	ldr	r2, [pc, #196]	@ (8004568 <HAL_I2S_Init+0x27c>)
 80044a2:	e001      	b.n	80044a8 <HAL_I2S_Init+0x1bc>
 80044a4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80044a8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044ac:	f023 030f 	bic.w	r3, r3, #15
 80044b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004564 <HAL_I2S_Init+0x278>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_I2S_Init+0x1d4>
 80044bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <HAL_I2S_Init+0x27c>)
 80044be:	e001      	b.n	80044c4 <HAL_I2S_Init+0x1d8>
 80044c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044c4:	2202      	movs	r2, #2
 80044c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a25      	ldr	r2, [pc, #148]	@ (8004564 <HAL_I2S_Init+0x278>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_I2S_Init+0x1ea>
 80044d2:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <HAL_I2S_Init+0x27c>)
 80044d4:	e001      	b.n	80044da <HAL_I2S_Init+0x1ee>
 80044d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e6:	d003      	beq.n	80044f0 <HAL_I2S_Init+0x204>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80044f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	e001      	b.n	80044fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004506:	4313      	orrs	r3, r2
 8004508:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004510:	4313      	orrs	r3, r2
 8004512:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800451a:	4313      	orrs	r3, r2
 800451c:	b29a      	uxth	r2, r3
 800451e:	897b      	ldrh	r3, [r7, #10]
 8004520:	4313      	orrs	r3, r2
 8004522:	b29b      	uxth	r3, r3
 8004524:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004528:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <HAL_I2S_Init+0x278>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_I2S_Init+0x24c>
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <HAL_I2S_Init+0x27c>)
 8004536:	e001      	b.n	800453c <HAL_I2S_Init+0x250>
 8004538:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800453c:	897a      	ldrh	r2, [r7, #10]
 800453e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	08004663 	.word	0x08004663
 800455c:	cccccccd 	.word	0xcccccccd
 8004560:	08004779 	.word	0x08004779
 8004564:	40003800 	.word	0x40003800
 8004568:	40003400 	.word	0x40003400

0800456c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10e      	bne.n	80045fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff ffb8 	bl	800456c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	b292      	uxth	r2, r2
 8004618:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10e      	bne.n	800465a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800464a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff93 	bl	8004580 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b04      	cmp	r3, #4
 800467c:	d13a      	bne.n	80046f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d109      	bne.n	800469c <I2S_IRQHandler+0x3a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d102      	bne.n	800469c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ffb4 	bl	8004604 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a2:	2b40      	cmp	r3, #64	@ 0x40
 80046a4:	d126      	bne.n	80046f4 <I2S_IRQHandler+0x92>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d11f      	bne.n	80046f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	f043 0202 	orr.w	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff50 	bl	8004594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d136      	bne.n	800476e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d109      	bne.n	800471e <I2S_IRQHandler+0xbc>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004714:	2b80      	cmp	r3, #128	@ 0x80
 8004716:	d102      	bne.n	800471e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff45 	bl	80045a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d122      	bne.n	800476e <I2S_IRQHandler+0x10c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b20      	cmp	r3, #32
 8004734:	d11b      	bne.n	800476e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004744:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff13 	bl	8004594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a92      	ldr	r2, [pc, #584]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004792:	4b92      	ldr	r3, [pc, #584]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004794:	e001      	b.n	800479a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004796:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a8b      	ldr	r2, [pc, #556]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d101      	bne.n	80047b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047b0:	4b8a      	ldr	r3, [pc, #552]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047b2:	e001      	b.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c4:	d004      	beq.n	80047d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f040 8099 	bne.w	8004902 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d107      	bne.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f925 	bl	8004a34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d107      	bne.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f9c8 	bl	8004b94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	2b40      	cmp	r3, #64	@ 0x40
 800480c:	d13a      	bne.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d035      	beq.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6e      	ldr	r2, [pc, #440]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004822:	4b6e      	ldr	r3, [pc, #440]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004824:	e001      	b.n	800482a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004826:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4969      	ldr	r1, [pc, #420]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004832:	428b      	cmp	r3, r1
 8004834:	d101      	bne.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004836:	4b69      	ldr	r3, [pc, #420]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004838:	e001      	b.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800483a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800483e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004842:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004852:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f043 0202 	orr.w	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fe88 	bl	8004594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	f040 80c3 	bne.w	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80bd 	beq.w	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a49      	ldr	r2, [pc, #292]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048b6:	4b49      	ldr	r3, [pc, #292]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048b8:	e001      	b.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4944      	ldr	r1, [pc, #272]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048c6:	428b      	cmp	r3, r1
 80048c8:	d101      	bne.n	80048ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80048ca:	4b44      	ldr	r3, [pc, #272]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048cc:	e001      	b.n	80048d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80048ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f043 0204 	orr.w	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fe4a 	bl	8004594 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004900:	e089      	b.n	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	d107      	bne.n	800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8be 	bl	8004a98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8fd 	bl	8004b30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493c:	2b40      	cmp	r3, #64	@ 0x40
 800493e:	d12f      	bne.n	80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d02a      	beq.n	80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004958:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1e      	ldr	r2, [pc, #120]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004964:	4b1d      	ldr	r3, [pc, #116]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004966:	e001      	b.n	800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004968:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4919      	ldr	r1, [pc, #100]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004974:	428b      	cmp	r3, r1
 8004976:	d101      	bne.n	800497c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004978:	4b18      	ldr	r3, [pc, #96]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800497a:	e001      	b.n	8004980 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800497c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004980:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004984:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff fdfa 	bl	8004594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d136      	bne.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d031      	beq.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a07      	ldr	r2, [pc, #28]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049be:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049c0:	e001      	b.n	80049c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4902      	ldr	r1, [pc, #8]	@ (80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ce:	428b      	cmp	r3, r1
 80049d0:	d106      	bne.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80049d2:	4b02      	ldr	r3, [pc, #8]	@ (80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049d4:	e006      	b.n	80049e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80049d6:	bf00      	nop
 80049d8:	40003800 	.word	0x40003800
 80049dc:	40003400 	.word	0x40003400
 80049e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f043 0204 	orr.w	r2, r3, #4
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fdc0 	bl	8004594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a14:	e000      	b.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a16:	bf00      	nop
}
 8004a18:	bf00      	nop
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	1c99      	adds	r1, r3, #2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a46:	881a      	ldrh	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d113      	bne.n	8004a8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ffc9 	bl	8004a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	1c99      	adds	r1, r3, #2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6251      	str	r1, [r2, #36]	@ 0x24
 8004aaa:	8819      	ldrh	r1, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <I2SEx_TxISR_I2SExt+0x90>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d101      	bne.n	8004aba <I2SEx_TxISR_I2SExt+0x22>
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <I2SEx_TxISR_I2SExt+0x94>)
 8004ab8:	e001      	b.n	8004abe <I2SEx_TxISR_I2SExt+0x26>
 8004aba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004abe:	460a      	mov	r2, r1
 8004ac0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d121      	bne.n	8004b1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a12      	ldr	r2, [pc, #72]	@ (8004b28 <I2SEx_TxISR_I2SExt+0x90>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <I2SEx_TxISR_I2SExt+0x50>
 8004ae4:	4b11      	ldr	r3, [pc, #68]	@ (8004b2c <I2SEx_TxISR_I2SExt+0x94>)
 8004ae6:	e001      	b.n	8004aec <I2SEx_TxISR_I2SExt+0x54>
 8004ae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	490d      	ldr	r1, [pc, #52]	@ (8004b28 <I2SEx_TxISR_I2SExt+0x90>)
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d101      	bne.n	8004afc <I2SEx_TxISR_I2SExt+0x64>
 8004af8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <I2SEx_TxISR_I2SExt+0x94>)
 8004afa:	e001      	b.n	8004b00 <I2SEx_TxISR_I2SExt+0x68>
 8004afc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff81 	bl	8004a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40003800 	.word	0x40003800
 8004b2c:	40003400 	.word	0x40003400

08004b30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68d8      	ldr	r0, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	1c99      	adds	r1, r3, #2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b48:	b282      	uxth	r2, r0
 8004b4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d113      	bne.n	8004b8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff ff4a 	bl	8004a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a20      	ldr	r2, [pc, #128]	@ (8004c24 <I2SEx_RxISR_I2SExt+0x90>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <I2SEx_RxISR_I2SExt+0x16>
 8004ba6:	4b20      	ldr	r3, [pc, #128]	@ (8004c28 <I2SEx_RxISR_I2SExt+0x94>)
 8004ba8:	e001      	b.n	8004bae <I2SEx_RxISR_I2SExt+0x1a>
 8004baa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bae:	68d8      	ldr	r0, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	1c99      	adds	r1, r3, #2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004bba:	b282      	uxth	r2, r0
 8004bbc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d121      	bne.n	8004c1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a12      	ldr	r2, [pc, #72]	@ (8004c24 <I2SEx_RxISR_I2SExt+0x90>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d101      	bne.n	8004be4 <I2SEx_RxISR_I2SExt+0x50>
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <I2SEx_RxISR_I2SExt+0x94>)
 8004be2:	e001      	b.n	8004be8 <I2SEx_RxISR_I2SExt+0x54>
 8004be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	490d      	ldr	r1, [pc, #52]	@ (8004c24 <I2SEx_RxISR_I2SExt+0x90>)
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	d101      	bne.n	8004bf8 <I2SEx_RxISR_I2SExt+0x64>
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c28 <I2SEx_RxISR_I2SExt+0x94>)
 8004bf6:	e001      	b.n	8004bfc <I2SEx_RxISR_I2SExt+0x68>
 8004bf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bfc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff03 	bl	8004a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40003800 	.word	0x40003800
 8004c28:	40003400 	.word	0x40003400

08004c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e267      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d075      	beq.n	8004d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c4a:	4b88      	ldr	r3, [pc, #544]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d00c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c56:	4b85      	ldr	r3, [pc, #532]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d112      	bne.n	8004c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c62:	4b82      	ldr	r3, [pc, #520]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	4b7e      	ldr	r3, [pc, #504]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d05b      	beq.n	8004d34 <HAL_RCC_OscConfig+0x108>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d157      	bne.n	8004d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e242      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x74>
 8004c92:	4b76      	ldr	r3, [pc, #472]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a75      	ldr	r2, [pc, #468]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e01d      	b.n	8004cdc <HAL_RCC_OscConfig+0xb0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x98>
 8004caa:	4b70      	ldr	r3, [pc, #448]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6f      	ldr	r2, [pc, #444]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6c      	ldr	r2, [pc, #432]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_OscConfig+0xb0>
 8004cc4:	4b69      	ldr	r3, [pc, #420]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a68      	ldr	r2, [pc, #416]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	4b66      	ldr	r3, [pc, #408]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a65      	ldr	r2, [pc, #404]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d013      	beq.n	8004d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fc f914 	bl	8000f10 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fc f910 	bl	8000f10 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	@ 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e207      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0xc0>
 8004d0a:	e014      	b.n	8004d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fc f900 	bl	8000f10 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fc f8fc 	bl	8000f10 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	@ 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e1f3      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d26:	4b51      	ldr	r3, [pc, #324]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0xe8>
 8004d32:	e000      	b.n	8004d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d063      	beq.n	8004e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d42:	4b4a      	ldr	r3, [pc, #296]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4e:	4b47      	ldr	r3, [pc, #284]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d11c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b44      	ldr	r3, [pc, #272]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d66:	4b41      	ldr	r3, [pc, #260]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_RCC_OscConfig+0x152>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d001      	beq.n	8004d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e1c7      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4937      	ldr	r1, [pc, #220]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	e03a      	b.n	8004e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9c:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fc f8b5 	bl	8000f10 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fc f8b1 	bl	8000f10 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e1a8      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b28      	ldr	r3, [pc, #160]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4925      	ldr	r1, [pc, #148]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	e015      	b.n	8004e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dde:	4b24      	ldr	r3, [pc, #144]	@ (8004e70 <HAL_RCC_OscConfig+0x244>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fc f894 	bl	8000f10 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fc f890 	bl	8000f10 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e187      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d036      	beq.n	8004e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <HAL_RCC_OscConfig+0x248>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fc f874 	bl	8000f10 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fc f870 	bl	8000f10 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e167      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x200>
 8004e4a:	e01b      	b.n	8004e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RCC_OscConfig+0x248>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e52:	f7fc f85d 	bl	8000f10 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	e00e      	b.n	8004e78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5a:	f7fc f859 	bl	8000f10 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d907      	bls.n	8004e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e150      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	42470000 	.word	0x42470000
 8004e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e78:	4b88      	ldr	r3, [pc, #544]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ea      	bne.n	8004e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8097 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b81      	ldr	r3, [pc, #516]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	4b7d      	ldr	r3, [pc, #500]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	4a7c      	ldr	r2, [pc, #496]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b77      	ldr	r3, [pc, #476]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d118      	bne.n	8004f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ece:	4b74      	ldr	r3, [pc, #464]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a73      	ldr	r2, [pc, #460]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fc f819 	bl	8000f10 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fc f815 	bl	8000f10 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e10c      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <HAL_RCC_OscConfig+0x2ea>
 8004f08:	4b64      	ldr	r3, [pc, #400]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	4a63      	ldr	r2, [pc, #396]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f14:	e01c      	b.n	8004f50 <HAL_RCC_OscConfig+0x324>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x30c>
 8004f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f22:	4a5e      	ldr	r2, [pc, #376]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0x324>
 8004f38:	4b58      	ldr	r3, [pc, #352]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3c:	4a57      	ldr	r2, [pc, #348]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f44:	4b55      	ldr	r3, [pc, #340]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f48:	4a54      	ldr	r2, [pc, #336]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fb ffda 	bl	8000f10 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fb ffd6 	bl	8000f10 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0cb      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4b49      	ldr	r3, [pc, #292]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ee      	beq.n	8004f60 <HAL_RCC_OscConfig+0x334>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f84:	f7fb ffc4 	bl	8000f10 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fb ffc0 	bl	8000f10 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0b5      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ee      	bne.n	8004f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb4:	4b39      	ldr	r3, [pc, #228]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	4a38      	ldr	r2, [pc, #224]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80a1 	beq.w	800510c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fca:	4b34      	ldr	r3, [pc, #208]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d05c      	beq.n	8005090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d141      	bne.n	8005062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b31      	ldr	r3, [pc, #196]	@ (80050a4 <HAL_RCC_OscConfig+0x478>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fb ff94 	bl	8000f10 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fb ff90 	bl	8000f10 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e087      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b27      	ldr	r3, [pc, #156]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	3b01      	subs	r3, #1
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	491b      	ldr	r1, [pc, #108]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_RCC_OscConfig+0x478>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fb ff69 	bl	8000f10 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005042:	f7fb ff65 	bl	8000f10 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e05c      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005054:	4b11      	ldr	r3, [pc, #68]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x416>
 8005060:	e054      	b.n	800510c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005062:	4b10      	ldr	r3, [pc, #64]	@ (80050a4 <HAL_RCC_OscConfig+0x478>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fb ff52 	bl	8000f10 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fb ff4e 	bl	8000f10 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e045      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005082:	4b06      	ldr	r3, [pc, #24]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x444>
 800508e:	e03d      	b.n	800510c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e038      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
 800509c:	40023800 	.word	0x40023800
 80050a0:	40007000 	.word	0x40007000
 80050a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <HAL_RCC_OscConfig+0x4ec>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d028      	beq.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d121      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d11a      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d111      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	3b01      	subs	r3, #1
 80050f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0cc      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005130:	4b68      	ldr	r3, [pc, #416]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d90c      	bls.n	8005158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513e:	4b65      	ldr	r3, [pc, #404]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b63      	ldr	r3, [pc, #396]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0b8      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005170:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4a58      	ldr	r2, [pc, #352]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800517a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005188:	4b53      	ldr	r3, [pc, #332]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a52      	ldr	r2, [pc, #328]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b50      	ldr	r3, [pc, #320]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	494d      	ldr	r1, [pc, #308]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d044      	beq.n	800523c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	4b47      	ldr	r3, [pc, #284]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d119      	bne.n	80051fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d003      	beq.n	80051da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d107      	bne.n	80051ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051da:	4b3f      	ldr	r3, [pc, #252]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e06f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ea:	4b3b      	ldr	r3, [pc, #236]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e067      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051fa:	4b37      	ldr	r3, [pc, #220]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f023 0203 	bic.w	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4934      	ldr	r1, [pc, #208]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800520c:	f7fb fe80 	bl	8000f10 <HAL_GetTick>
 8005210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	e00a      	b.n	800522a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005214:	f7fb fe7c 	bl	8000f10 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e04f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522a:	4b2b      	ldr	r3, [pc, #172]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 020c 	and.w	r2, r3, #12
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	429a      	cmp	r2, r3
 800523a:	d1eb      	bne.n	8005214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d20c      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b22      	ldr	r3, [pc, #136]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b20      	ldr	r3, [pc, #128]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e032      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005270:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4916      	ldr	r1, [pc, #88]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528e:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	490e      	ldr	r1, [pc, #56]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052a2:	f000 f821 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 80052a6:	4602      	mov	r2, r0
 80052a8:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	490a      	ldr	r1, [pc, #40]	@ (80052dc <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	5ccb      	ldrb	r3, [r1, r3]
 80052b6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ba:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052be:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fb fde0 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023c00 	.word	0x40023c00
 80052d8:	40023800 	.word	0x40023800
 80052dc:	08009ce4 	.word	0x08009ce4
 80052e0:	20000000 	.word	0x20000000
 80052e4:	20000004 	.word	0x20000004

080052e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ec:	b094      	sub	sp, #80	@ 0x50
 80052ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052f4:	2300      	movs	r3, #0
 80052f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f8:	2300      	movs	r3, #0
 80052fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005300:	4b79      	ldr	r3, [pc, #484]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b08      	cmp	r3, #8
 800530a:	d00d      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x40>
 800530c:	2b08      	cmp	r3, #8
 800530e:	f200 80e1 	bhi.w	80054d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x34>
 8005316:	2b04      	cmp	r3, #4
 8005318:	d003      	beq.n	8005322 <HAL_RCC_GetSysClockFreq+0x3a>
 800531a:	e0db      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b73      	ldr	r3, [pc, #460]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x204>)
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005320:	e0db      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005322:	4b73      	ldr	r3, [pc, #460]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005324:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005326:	e0d8      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005328:	4b6f      	ldr	r3, [pc, #444]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005330:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005332:	4b6d      	ldr	r3, [pc, #436]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d063      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533e:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	2200      	movs	r2, #0
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005348:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005350:	633b      	str	r3, [r7, #48]	@ 0x30
 8005352:	2300      	movs	r3, #0
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
 8005356:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	f04f 0000 	mov.w	r0, #0
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	0159      	lsls	r1, r3, #5
 8005368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800536c:	0150      	lsls	r0, r2, #5
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4621      	mov	r1, r4
 8005374:	1a51      	subs	r1, r2, r1
 8005376:	6139      	str	r1, [r7, #16]
 8005378:	4629      	mov	r1, r5
 800537a:	eb63 0301 	sbc.w	r3, r3, r1
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800538c:	4659      	mov	r1, fp
 800538e:	018b      	lsls	r3, r1, #6
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005396:	4651      	mov	r1, sl
 8005398:	018a      	lsls	r2, r1, #6
 800539a:	4651      	mov	r1, sl
 800539c:	ebb2 0801 	subs.w	r8, r2, r1
 80053a0:	4659      	mov	r1, fp
 80053a2:	eb63 0901 	sbc.w	r9, r3, r1
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ba:	4690      	mov	r8, r2
 80053bc:	4699      	mov	r9, r3
 80053be:	4623      	mov	r3, r4
 80053c0:	eb18 0303 	adds.w	r3, r8, r3
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	462b      	mov	r3, r5
 80053c8:	eb49 0303 	adc.w	r3, r9, r3
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053da:	4629      	mov	r1, r5
 80053dc:	024b      	lsls	r3, r1, #9
 80053de:	4621      	mov	r1, r4
 80053e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053e4:	4621      	mov	r1, r4
 80053e6:	024a      	lsls	r2, r1, #9
 80053e8:	4610      	mov	r0, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ee:	2200      	movs	r2, #0
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053f8:	f7fa fee6 	bl	80001c8 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4613      	mov	r3, r2
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005404:	e058      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005406:	4b38      	ldr	r3, [pc, #224]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	2200      	movs	r2, #0
 800540e:	4618      	mov	r0, r3
 8005410:	4611      	mov	r1, r2
 8005412:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005416:	623b      	str	r3, [r7, #32]
 8005418:	2300      	movs	r3, #0
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
 800541c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	0159      	lsls	r1, r3, #5
 800542e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005432:	0150      	lsls	r0, r2, #5
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4641      	mov	r1, r8
 800543a:	ebb2 0a01 	subs.w	sl, r2, r1
 800543e:	4649      	mov	r1, r9
 8005440:	eb63 0b01 	sbc.w	fp, r3, r1
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005458:	ebb2 040a 	subs.w	r4, r2, sl
 800545c:	eb63 050b 	sbc.w	r5, r3, fp
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	00eb      	lsls	r3, r5, #3
 800546a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546e:	00e2      	lsls	r2, r4, #3
 8005470:	4614      	mov	r4, r2
 8005472:	461d      	mov	r5, r3
 8005474:	4643      	mov	r3, r8
 8005476:	18e3      	adds	r3, r4, r3
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	464b      	mov	r3, r9
 800547c:	eb45 0303 	adc.w	r3, r5, r3
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548e:	4629      	mov	r1, r5
 8005490:	028b      	lsls	r3, r1, #10
 8005492:	4621      	mov	r1, r4
 8005494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005498:	4621      	mov	r1, r4
 800549a:	028a      	lsls	r2, r1, #10
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a2:	2200      	movs	r2, #0
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	61fa      	str	r2, [r7, #28]
 80054a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054ac:	f7fa fe8c 	bl	80001c8 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	3301      	adds	r3, #1
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80054c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d2:	e002      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d4:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x204>)
 80054d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3750      	adds	r7, #80	@ 0x50
 80054e0:	46bd      	mov	sp, r7
 80054e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800
 80054ec:	00f42400 	.word	0x00f42400
 80054f0:	007a1200 	.word	0x007a1200

080054f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f8:	4b03      	ldr	r3, [pc, #12]	@ (8005508 <HAL_RCC_GetHCLKFreq+0x14>)
 80054fa:	681b      	ldr	r3, [r3, #0]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000000 	.word	0x20000000

0800550c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005510:	f7ff fff0 	bl	80054f4 <HAL_RCC_GetHCLKFreq>
 8005514:	4602      	mov	r2, r0
 8005516:	4b05      	ldr	r3, [pc, #20]	@ (800552c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	0a9b      	lsrs	r3, r3, #10
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	4903      	ldr	r1, [pc, #12]	@ (8005530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005522:	5ccb      	ldrb	r3, [r1, r3]
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023800 	.word	0x40023800
 8005530:	08009cf4 	.word	0x08009cf4

08005534 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005558:	2b00      	cmp	r3, #0
 800555a:	d035      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800555c:	4b62      	ldr	r3, [pc, #392]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005562:	f7fb fcd5 	bl	8000f10 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005568:	e008      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800556a:	f7fb fcd1 	bl	8000f10 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0b0      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800557c:	4b5b      	ldr	r3, [pc, #364]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	019a      	lsls	r2, r3, #6
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	071b      	lsls	r3, r3, #28
 8005594:	4955      	ldr	r1, [pc, #340]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800559c:	4b52      	ldr	r3, [pc, #328]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055a2:	f7fb fcb5 	bl	8000f10 <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055a8:	e008      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055aa:	f7fb fcb1 	bl	8000f10 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e090      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055bc:	4b4b      	ldr	r3, [pc, #300]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0f0      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8083 	beq.w	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b44      	ldr	r3, [pc, #272]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	4a43      	ldr	r2, [pc, #268]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055e6:	4b41      	ldr	r3, [pc, #260]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055f2:	4b3f      	ldr	r3, [pc, #252]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a3e      	ldr	r2, [pc, #248]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055fe:	f7fb fc87 	bl	8000f10 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fb fc83 	bl	8000f10 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e062      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005618:	4b35      	ldr	r3, [pc, #212]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005624:	4b31      	ldr	r3, [pc, #196]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	d028      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005642:	4b2a      	ldr	r3, [pc, #168]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800564c:	4b29      	ldr	r3, [pc, #164]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005652:	4b28      	ldr	r3, [pc, #160]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005658:	4a24      	ldr	r2, [pc, #144]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800565e:	4b23      	ldr	r3, [pc, #140]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d114      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800566a:	f7fb fc51 	bl	8000f10 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	e00a      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fb fc4d 	bl	8000f10 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e02a      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005688:	4b18      	ldr	r3, [pc, #96]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ee      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800569c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056a0:	d10d      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80056a2:	4b12      	ldr	r3, [pc, #72]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80056b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b6:	490d      	ldr	r1, [pc, #52]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]
 80056bc:	e005      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80056be:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	4a0a      	ldr	r2, [pc, #40]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80056c8:	6093      	str	r3, [r2, #8]
 80056ca:	4b08      	ldr	r3, [pc, #32]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d6:	4905      	ldr	r1, [pc, #20]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	42470068 	.word	0x42470068
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40007000 	.word	0x40007000
 80056f4:	42470e40 	.word	0x42470e40

080056f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d13f      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005716:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800572c:	d12f      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800572e:	4b1f      	ldr	r3, [pc, #124]	@ (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005730:	617b      	str	r3, [r7, #20]
          break;
 8005732:	e02f      	b.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005734:	4b1c      	ldr	r3, [pc, #112]	@ (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005740:	d108      	bne.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005742:	4b19      	ldr	r3, [pc, #100]	@ (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800574a:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	e007      	b.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005754:	4b14      	ldr	r3, [pc, #80]	@ (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800575c:	4a15      	ldr	r2, [pc, #84]	@ (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005764:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005778:	4b0b      	ldr	r3, [pc, #44]	@ (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800577e:	0f1b      	lsrs	r3, r3, #28
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	617b      	str	r3, [r7, #20]
          break;
 800578c:	e002      	b.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
          break;
 8005792:	bf00      	nop
        }
      }
      break;
 8005794:	e000      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005796:	bf00      	nop
    }
  }
  return frequency;
 8005798:	697b      	ldr	r3, [r7, #20]
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00bb8000 	.word	0x00bb8000
 80057b0:	007a1200 	.word	0x007a1200
 80057b4:	00f42400 	.word	0x00f42400

080057b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e07b      	b.n	80058c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d108      	bne.n	80057e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057da:	d009      	beq.n	80057f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	61da      	str	r2, [r3, #28]
 80057e2:	e005      	b.n	80057f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fb f9d4 	bl	8000bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005826:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005874:	ea42 0103 	orr.w	r1, r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	f003 0104 	and.w	r1, r3, #4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	f003 0210 	and.w	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058ca:	b084      	sub	sp, #16
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	f107 001c 	add.w	r0, r7, #28
 80058d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058dc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d123      	bne.n	800592c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80058f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800590c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f9dc 	bl	8005cde <USB_CoreReset>
 8005926:	4603      	mov	r3, r0
 8005928:	73fb      	strb	r3, [r7, #15]
 800592a:	e01b      	b.n	8005964 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f9d0 	bl	8005cde <USB_CoreReset>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005942:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	639a      	str	r2, [r3, #56]	@ 0x38
 8005956:	e005      	b.n	8005964 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005964:	7fbb      	ldrb	r3, [r7, #30]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d10b      	bne.n	8005982 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f043 0206 	orr.w	r2, r3, #6
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f043 0220 	orr.w	r2, r3, #32
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800598e:	b004      	add	sp, #16
 8005990:	4770      	bx	lr

08005992 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f043 0201 	orr.w	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f023 0201 	bic.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d115      	bne.n	8005a24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a04:	200a      	movs	r0, #10
 8005a06:	f7fb fa8f 	bl	8000f28 <HAL_Delay>
      ms += 10U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	330a      	adds	r3, #10
 8005a0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f956 	bl	8005cc2 <USB_GetMode>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d01e      	beq.n	8005a5a <USB_SetCurrentMode+0x84>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a20:	d9f0      	bls.n	8005a04 <USB_SetCurrentMode+0x2e>
 8005a22:	e01a      	b.n	8005a5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d115      	bne.n	8005a56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a36:	200a      	movs	r0, #10
 8005a38:	f7fb fa76 	bl	8000f28 <HAL_Delay>
      ms += 10U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	330a      	adds	r3, #10
 8005a40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f93d 	bl	8005cc2 <USB_GetMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <USB_SetCurrentMode+0x84>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a52:	d9f0      	bls.n	8005a36 <USB_SetCurrentMode+0x60>
 8005a54:	e001      	b.n	8005a5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e005      	b.n	8005a66 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a5e:	d101      	bne.n	8005a64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a88:	d901      	bls.n	8005a8e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e01b      	b.n	8005ac6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	daf2      	bge.n	8005a7c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	f043 0220 	orr.w	r2, r3, #32
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ab2:	d901      	bls.n	8005ab8 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d0f0      	beq.n	8005aa6 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aea:	d901      	bls.n	8005af0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e018      	b.n	8005b22 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	daf2      	bge.n	8005ade <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2210      	movs	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b0e:	d901      	bls.n	8005b14 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d0f0      	beq.n	8005b02 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b089      	sub	sp, #36	@ 0x24
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	71fb      	strb	r3, [r7, #7]
 8005b40:	4613      	mov	r3, r2
 8005b42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d123      	bne.n	8005b9c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b54:	88bb      	ldrh	r3, [r7, #4]
 8005b56:	3303      	adds	r3, #3
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	e018      	b.n	8005b94 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	031a      	lsls	r2, r3, #12
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b6e:	461a      	mov	r2, r3
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	3301      	adds	r3, #1
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d3e2      	bcc.n	8005b62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3724      	adds	r7, #36	@ 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b08b      	sub	sp, #44	@ 0x2c
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	089b      	lsrs	r3, r3, #2
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	623b      	str	r3, [r7, #32]
 8005bd4:	e014      	b.n	8005c00 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	3301      	adds	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	3301      	adds	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	623b      	str	r3, [r7, #32]
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d3e6      	bcc.n	8005bd6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c08:	8bfb      	ldrh	r3, [r7, #30]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01e      	beq.n	8005c4c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f107 0310 	add.w	r3, r7, #16
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	701a      	strb	r2, [r3, #0]
      i++;
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	3301      	adds	r3, #1
 8005c38:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c40:	8bfb      	ldrh	r3, [r7, #30]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c46:	8bfb      	ldrh	r3, [r7, #30]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ea      	bne.n	8005c22 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	372c      	adds	r7, #44	@ 0x2c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c72:	68fb      	ldr	r3, [r7, #12]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0301 	and.w	r3, r3, #1
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cf6:	d901      	bls.n	8005cfc <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e01b      	b.n	8005d34 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	daf2      	bge.n	8005cea <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d20:	d901      	bls.n	8005d26 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e006      	b.n	8005d34 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d0f0      	beq.n	8005d14 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d40:	b084      	sub	sp, #16
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d60:	461a      	mov	r2, r3
 8005d62:	2300      	movs	r3, #0
 8005d64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d119      	bne.n	8005dca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10a      	bne.n	8005db4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dac:	f043 0304 	orr.w	r3, r3, #4
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e014      	b.n	8005dde <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dc2:	f023 0304 	bic.w	r3, r3, #4
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	e009      	b.n	8005dde <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dd8:	f023 0304 	bic.w	r3, r3, #4
 8005ddc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dde:	2110      	movs	r1, #16
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fe44 	bl	8005a6e <USB_FlushTxFifo>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff fe6e 	bl	8005ad2 <USB_FlushRxFifo>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e015      	b.n	8005e32 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e12:	461a      	mov	r2, r3
 8005e14:	f04f 33ff 	mov.w	r3, #4294967295
 8005e18:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e26:	461a      	mov	r2, r3
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e36:	461a      	mov	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d3e3      	bcc.n	8005e06 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <USB_HostInit+0x170>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10b      	bne.n	8005e6c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <USB_HostInit+0x174>)
 8005e60:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a14      	ldr	r2, [pc, #80]	@ (8005eb8 <USB_HostInit+0x178>)
 8005e66:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005e6a:	e009      	b.n	8005e80 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2280      	movs	r2, #128	@ 0x80
 8005e70:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a11      	ldr	r2, [pc, #68]	@ (8005ebc <USB_HostInit+0x17c>)
 8005e76:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a11      	ldr	r2, [pc, #68]	@ (8005ec0 <USB_HostInit+0x180>)
 8005e7c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f043 0210 	orr.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <USB_HostInit+0x184>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eac:	b004      	add	sp, #16
 8005eae:	4770      	bx	lr
 8005eb0:	40040000 	.word	0x40040000
 8005eb4:	01000200 	.word	0x01000200
 8005eb8:	00e00300 	.word	0x00e00300
 8005ebc:	00600080 	.word	0x00600080
 8005ec0:	004000e0 	.word	0x004000e0
 8005ec4:	a3200008 	.word	0xa3200008

08005ec8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f00:	4313      	orrs	r3, r2
 8005f02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d107      	bne.n	8005f1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f10:	461a      	mov	r2, r3
 8005f12:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f16:	6053      	str	r3, [r2, #4]
 8005f18:	e00c      	b.n	8005f34 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d107      	bne.n	8005f30 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f26:	461a      	mov	r2, r3
 8005f28:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f2c:	6053      	str	r3, [r2, #4]
 8005f2e:	e001      	b.n	8005f34 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f62:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f70:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f72:	2064      	movs	r0, #100	@ 0x64
 8005f74:	f7fa ffd8 	bl	8000f28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f84:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f86:	200a      	movs	r0, #10
 8005f88:	f7fa ffce 	bl	8000f28 <HAL_Delay>

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005fba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <USB_DriveVbus+0x44>
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d106      	bne.n	8005fda <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fd8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe4:	d109      	bne.n	8005ffa <USB_DriveVbus+0x64>
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	0c5b      	lsrs	r3, r3, #17
 8006026:	f003 0303 	and.w	r3, r3, #3
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	b29b      	uxth	r3, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	70fb      	strb	r3, [r7, #3]
 800606a:	460b      	mov	r3, r1
 800606c:	70bb      	strb	r3, [r7, #2]
 800606e:	4613      	mov	r3, r2
 8006070:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006086:	461a      	mov	r2, r3
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
 800608c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800608e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006092:	2b03      	cmp	r3, #3
 8006094:	d87c      	bhi.n	8006190 <USB_HC_Init+0x138>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <USB_HC_Init+0x44>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	08006153 	.word	0x08006153
 80060a4:	080060ad 	.word	0x080060ad
 80060a8:	08006115 	.word	0x08006115
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b8:	461a      	mov	r2, r3
 80060ba:	f240 439d 	movw	r3, #1181	@ 0x49d
 80060be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	da10      	bge.n	80060ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80060e8:	e055      	b.n	8006196 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a6f      	ldr	r2, [pc, #444]	@ (80062ac <USB_HC_Init+0x254>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d151      	bne.n	8006196 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	440a      	add	r2, r1
 8006108:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800610c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006110:	60d3      	str	r3, [r2, #12]
      break;
 8006112:	e040      	b.n	8006196 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006120:	461a      	mov	r2, r3
 8006122:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006126:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006128:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800612c:	2b00      	cmp	r3, #0
 800612e:	da34      	bge.n	800619a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	440a      	add	r2, r1
 8006146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800614a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800614e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006150:	e023      	b.n	800619a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615e:	461a      	mov	r2, r3
 8006160:	f240 2325 	movw	r3, #549	@ 0x225
 8006164:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006166:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800616a:	2b00      	cmp	r3, #0
 800616c:	da17      	bge.n	800619e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	440a      	add	r2, r1
 8006184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006188:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800618c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800618e:	e006      	b.n	800619e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	77fb      	strb	r3, [r7, #31]
      break;
 8006194:	e004      	b.n	80061a0 <USB_HC_Init+0x148>
      break;
 8006196:	bf00      	nop
 8006198:	e002      	b.n	80061a0 <USB_HC_Init+0x148>
      break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <USB_HC_Init+0x148>
      break;
 800619e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ac:	461a      	mov	r2, r3
 80061ae:	2300      	movs	r3, #0
 80061b0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	78fa      	ldrb	r2, [r7, #3]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	2101      	movs	r1, #1
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	6939      	ldr	r1, [r7, #16]
 80061e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061ec:	4313      	orrs	r3, r2
 80061ee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80061fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006200:	2b00      	cmp	r3, #0
 8006202:	da03      	bge.n	800620c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e001      	b.n	8006210 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fef9 	bl	8006008 <USB_GetHostSpeed>
 8006216:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006218:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800621c:	2b02      	cmp	r3, #2
 800621e:	d106      	bne.n	800622e <USB_HC_Init+0x1d6>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d003      	beq.n	800622e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006226:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e001      	b.n	8006232 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006232:	787b      	ldrb	r3, [r7, #1]
 8006234:	059b      	lsls	r3, r3, #22
 8006236:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800623a:	78bb      	ldrb	r3, [r7, #2]
 800623c:	02db      	lsls	r3, r3, #11
 800623e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006242:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006244:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006248:	049b      	lsls	r3, r3, #18
 800624a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800624e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006250:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006252:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006256:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	431a      	orrs	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	440a      	add	r2, r1
 8006268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800626c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006270:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006272:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006276:	2b03      	cmp	r3, #3
 8006278:	d003      	beq.n	8006282 <USB_HC_Init+0x22a>
 800627a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d10f      	bne.n	80062a2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	440a      	add	r2, r1
 8006298:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800629c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40040000 	.word	0x40040000

080062b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08c      	sub	sp, #48	@ 0x30
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80062c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062cc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006448 <USB_HC_StartXfer+0x198>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d12f      	bne.n	8006336 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d11c      	bne.n	8006316 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	7c9b      	ldrb	r3, [r3, #18]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <USB_HC_StartXfer+0x3c>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	7c9b      	ldrb	r3, [r3, #18]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d124      	bne.n	8006336 <USB_HC_StartXfer+0x86>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	799b      	ldrb	r3, [r3, #6]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d120      	bne.n	8006336 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	440a      	add	r2, r1
 800630a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	60d3      	str	r3, [r2, #12]
 8006314:	e00f      	b.n	8006336 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	791b      	ldrb	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <USB_HC_StartXfer+0x86>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	795b      	ldrb	r3, [r3, #5]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d107      	bne.n	8006336 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fb6b 	bl	8006a08 <USB_DoPing>
        return HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	e232      	b.n	800679c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	799b      	ldrb	r3, [r3, #6]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d158      	bne.n	80063f0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800633e:	2301      	movs	r3, #1
 8006340:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	78db      	ldrb	r3, [r3, #3]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800634a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	8a92      	ldrh	r2, [r2, #20]
 8006350:	fb03 f202 	mul.w	r2, r3, r2
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	61da      	str	r2, [r3, #28]
 8006358:	e07c      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	7c9b      	ldrb	r3, [r3, #18]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d130      	bne.n	80063c4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	2bbc      	cmp	r3, #188	@ 0xbc
 8006368:	d918      	bls.n	800639c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	8a9b      	ldrh	r3, [r3, #20]
 800636e:	461a      	mov	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d003      	beq.n	800638c <USB_HC_StartXfer+0xdc>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d103      	bne.n	8006394 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2202      	movs	r2, #2
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	e05f      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2201      	movs	r2, #1
 8006398:	60da      	str	r2, [r3, #12]
 800639a:	e05b      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6a1a      	ldr	r2, [r3, #32]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d007      	beq.n	80063bc <USB_HC_StartXfer+0x10c>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d003      	beq.n	80063bc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2204      	movs	r2, #4
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e04b      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2203      	movs	r2, #3
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e047      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10d      	bne.n	80063e6 <USB_HC_StartXfer+0x136>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	8a92      	ldrh	r2, [r2, #20]
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d907      	bls.n	80063e6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	8a92      	ldrh	r2, [r2, #20]
 80063dc:	fb03 f202 	mul.w	r2, r3, r2
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61da      	str	r2, [r3, #28]
 80063e4:	e036      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	61da      	str	r2, [r3, #28]
 80063ee:	e031      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d018      	beq.n	800642a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	8a92      	ldrh	r2, [r2, #20]
 8006400:	4413      	add	r3, r2
 8006402:	3b01      	subs	r3, #1
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	8a92      	ldrh	r2, [r2, #20]
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800640e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006410:	8b7b      	ldrh	r3, [r7, #26]
 8006412:	429a      	cmp	r2, r3
 8006414:	d90b      	bls.n	800642e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006416:	8b7b      	ldrh	r3, [r7, #26]
 8006418:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800641a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	8a92      	ldrh	r2, [r2, #20]
 8006420:	fb03 f202 	mul.w	r2, r3, r2
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61da      	str	r2, [r3, #28]
 8006428:	e001      	b.n	800642e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800642a:	2301      	movs	r3, #1
 800642c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	78db      	ldrb	r3, [r3, #3]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006436:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	8a92      	ldrh	r2, [r2, #20]
 800643c:	fb03 f202 	mul.w	r2, r3, r2
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	61da      	str	r2, [r3, #28]
 8006444:	e006      	b.n	8006454 <USB_HC_StartXfer+0x1a4>
 8006446:	bf00      	nop
 8006448:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800645c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800645e:	04d9      	lsls	r1, r3, #19
 8006460:	4ba3      	ldr	r3, [pc, #652]	@ (80066f0 <USB_HC_StartXfer+0x440>)
 8006462:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006464:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7d9b      	ldrb	r3, [r3, #22]
 800646a:	075b      	lsls	r3, r3, #29
 800646c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006470:	69f9      	ldr	r1, [r7, #28]
 8006472:	0148      	lsls	r0, r1, #5
 8006474:	6a39      	ldr	r1, [r7, #32]
 8006476:	4401      	add	r1, r0
 8006478:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800647c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800647e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	460a      	mov	r2, r1
 8006498:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	7e7b      	ldrb	r3, [r7, #25]
 80064e2:	075b      	lsls	r3, r3, #29
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	0148      	lsls	r0, r1, #5
 80064e8:	6a39      	ldr	r1, [r7, #32]
 80064ea:	4401      	add	r1, r0
 80064ec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80064f0:	4313      	orrs	r3, r2
 80064f2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	799b      	ldrb	r3, [r3, #6]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	f040 80c3 	bne.w	8006684 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	7c5b      	ldrb	r3, [r3, #17]
 8006502:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006508:	4313      	orrs	r3, r2
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	6a3a      	ldr	r2, [r7, #32]
 8006510:	440a      	add	r2, r1
 8006512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006516:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800651a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	6a3a      	ldr	r2, [r7, #32]
 8006530:	440a      	add	r2, r1
 8006532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006536:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800653a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	79db      	ldrb	r3, [r3, #7]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d123      	bne.n	800658c <USB_HC_StartXfer+0x2dc>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11f      	bne.n	800658c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	6a3a      	ldr	r2, [r7, #32]
 8006560:	440a      	add	r2, r1
 8006562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800656a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	440a      	add	r2, r1
 8006582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	7c9b      	ldrb	r3, [r3, #18]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d003      	beq.n	800659c <USB_HC_StartXfer+0x2ec>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	7c9b      	ldrb	r3, [r3, #18]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d117      	bne.n	80065cc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d113      	bne.n	80065cc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	78db      	ldrb	r3, [r3, #3]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10f      	bne.n	80065cc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	6a3a      	ldr	r2, [r7, #32]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ca:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	7c9b      	ldrb	r3, [r3, #18]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d162      	bne.n	800669a <USB_HC_StartXfer+0x3ea>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d15e      	bne.n	800669a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d858      	bhi.n	8006698 <USB_HC_StartXfer+0x3e8>
 80065e6:	a201      	add	r2, pc, #4	@ (adr r2, 80065ec <USB_HC_StartXfer+0x33c>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	0800661f 	.word	0x0800661f
 80065f4:	08006641 	.word	0x08006641
 80065f8:	08006663 	.word	0x08006663
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	440a      	add	r2, r1
 8006612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661a:	6053      	str	r3, [r2, #4]
          break;
 800661c:	e03d      	b.n	800669a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	6a3a      	ldr	r2, [r7, #32]
 8006632:	440a      	add	r2, r1
 8006634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006638:	f043 030e 	orr.w	r3, r3, #14
 800663c:	6053      	str	r3, [r2, #4]
          break;
 800663e:	e02c      	b.n	800669a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800665e:	6053      	str	r3, [r2, #4]
          break;
 8006660:	e01b      	b.n	800669a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	440a      	add	r2, r1
 8006678:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800667c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006680:	6053      	str	r3, [r2, #4]
          break;
 8006682:	e00a      	b.n	800669a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006690:	461a      	mov	r2, r3
 8006692:	2300      	movs	r3, #0
 8006694:	6053      	str	r3, [r2, #4]
 8006696:	e000      	b.n	800669a <USB_HC_StartXfer+0x3ea>
          break;
 8006698:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066b0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	e003      	b.n	80066cc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066ca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066d2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e0:	461a      	mov	r2, r3
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e055      	b.n	800679c <USB_HC_StartXfer+0x4ec>
 80066f0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	78db      	ldrb	r3, [r3, #3]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d14e      	bne.n	800679a <USB_HC_StartXfer+0x4ea>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d04a      	beq.n	800679a <USB_HC_StartXfer+0x4ea>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	79db      	ldrb	r3, [r3, #7]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d146      	bne.n	800679a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	7c9b      	ldrb	r3, [r3, #18]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d831      	bhi.n	8006778 <USB_HC_StartXfer+0x4c8>
 8006714:	a201      	add	r2, pc, #4	@ (adr r2, 800671c <USB_HC_StartXfer+0x46c>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	0800672d 	.word	0x0800672d
 8006720:	08006751 	.word	0x08006751
 8006724:	0800672d 	.word	0x0800672d
 8006728:	08006751 	.word	0x08006751
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	3303      	adds	r3, #3
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006736:	8afa      	ldrh	r2, [r7, #22]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	b29b      	uxth	r3, r3
 800673e:	429a      	cmp	r2, r3
 8006740:	d91c      	bls.n	800677c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f043 0220 	orr.w	r2, r3, #32
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	619a      	str	r2, [r3, #24]
        }
        break;
 800674e:	e015      	b.n	800677c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	3303      	adds	r3, #3
 8006756:	089b      	lsrs	r3, r3, #2
 8006758:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800675a:	8afa      	ldrh	r2, [r7, #22]
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	b29b      	uxth	r3, r3
 8006766:	429a      	cmp	r2, r3
 8006768:	d90a      	bls.n	8006780 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	619a      	str	r2, [r3, #24]
        }
        break;
 8006776:	e003      	b.n	8006780 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006778:	bf00      	nop
 800677a:	e002      	b.n	8006782 <USB_HC_StartXfer+0x4d2>
        break;
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <USB_HC_StartXfer+0x4d2>
        break;
 8006780:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6999      	ldr	r1, [r3, #24]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	785a      	ldrb	r2, [r3, #1]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	b29b      	uxth	r3, r3
 8006790:	2000      	movs	r0, #0
 8006792:	9000      	str	r0, [sp, #0]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff f9ca 	bl	8005b2e <USB_WritePacket>
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3728      	adds	r7, #40	@ 0x28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	b29b      	uxth	r3, r3
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b089      	sub	sp, #36	@ 0x24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	0c9b      	lsrs	r3, r3, #18
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	0fdb      	lsrs	r3, r3, #31
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	0fdb      	lsrs	r3, r3, #31
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b20      	cmp	r3, #32
 800682a:	d10d      	bne.n	8006848 <USB_HC_Halt+0x82>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <USB_HC_Halt+0x82>
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d002      	beq.n	8006844 <USB_HC_Halt+0x7e>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d101      	bne.n	8006848 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e0d8      	b.n	80069fa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <USB_HC_Halt+0x8e>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d173      	bne.n	800693c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	440a      	add	r2, r1
 800686a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800686e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006872:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	d14a      	bne.n	8006916 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d133      	bne.n	80068f4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068aa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068ca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068d8:	d82e      	bhi.n	8006938 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068f0:	d0ec      	beq.n	80068cc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068f2:	e081      	b.n	80069f8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	440a      	add	r2, r1
 800690a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800690e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006912:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006914:	e070      	b.n	80069f8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	440a      	add	r2, r1
 800692c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006930:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006934:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006936:	e05f      	b.n	80069f8 <USB_HC_Halt+0x232>
            break;
 8006938:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800693a:	e05d      	b.n	80069f8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	440a      	add	r2, r1
 8006952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006956:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800695a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d133      	bne.n	80069d4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	440a      	add	r2, r1
 8006982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006986:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800698a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b8:	d81d      	bhi.n	80069f6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069d0:	d0ec      	beq.n	80069ac <USB_HC_Halt+0x1e6>
 80069d2:	e011      	b.n	80069f8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	e000      	b.n	80069f8 <USB_HC_Halt+0x232>
          break;
 80069f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3724      	adds	r7, #36	@ 0x24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
	...

08006a08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	04da      	lsls	r2, r3, #19
 8006a24:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <USB_DoPing+0x74>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a66:	461a      	mov	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	1ff80000 	.word	0x1ff80000

08006a80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fe ff8d 	bl	80059b4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a9a:	2110      	movs	r1, #16
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7fe ffe6 	bl	8005a6e <USB_FlushTxFifo>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff f810 	bl	8005ad2 <USB_FlushRxFifo>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e01f      	b.n	8006b02 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ad8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ae0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ae8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af6:	461a      	mov	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	3301      	adds	r3, #1
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b0f      	cmp	r3, #15
 8006b06:	d9dc      	bls.n	8006ac2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	e034      	b.n	8006b78 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b42:	461a      	mov	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b54:	d80c      	bhi.n	8006b70 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b6c:	d0ec      	beq.n	8006b48 <USB_StopHost+0xc8>
 8006b6e:	e000      	b.n	8006b72 <USB_StopHost+0xf2>
        break;
 8006b70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	3301      	adds	r3, #1
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b0f      	cmp	r3, #15
 8006b7c:	d9c7      	bls.n	8006b0e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b84:	461a      	mov	r2, r3
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7fe fefc 	bl	8005992 <USB_EnableGlobalInt>

  return ret;
 8006b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b089      	sub	sp, #36	@ 0x24
 8006ba8:	af04      	add	r7, sp, #16
 8006baa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006bac:	2301      	movs	r3, #1
 8006bae:	2202      	movs	r2, #2
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fc85 	bl	80074c2 <USBH_FindInterface>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2bff      	cmp	r3, #255	@ 0xff
 8006bc0:	d002      	beq.n	8006bc8 <USBH_CDC_InterfaceInit+0x24>
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d901      	bls.n	8006bcc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e13d      	b.n	8006e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fc5a 	bl	800748a <USBH_SelectInterface>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	e131      	b.n	8006e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006bea:	2050      	movs	r0, #80	@ 0x50
 8006bec:	f002 fb64 	bl	80092b8 <malloc>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c04:	2302      	movs	r3, #2
 8006c06:	e11f      	b.n	8006e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c08:	2250      	movs	r2, #80	@ 0x50
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	68b8      	ldr	r0, [r7, #8]
 8006c0e:	f002 fe09 	bl	8009824 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	211a      	movs	r1, #26
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	b25b      	sxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	da15      	bge.n	8006c56 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	211a      	movs	r1, #26
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	4413      	add	r3, r2
 8006c36:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	211a      	movs	r1, #26
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	785b      	ldrb	r3, [r3, #1]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 ffbe 	bl	8008bde <USBH_AllocPipe>
 8006c62:	4603      	mov	r3, r0
 8006c64:	461a      	mov	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	7819      	ldrb	r1, [r3, #0]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	7858      	ldrb	r0, [r3, #1]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	8952      	ldrh	r2, [r2, #10]
 8006c82:	9202      	str	r2, [sp, #8]
 8006c84:	2203      	movs	r2, #3
 8006c86:	9201      	str	r2, [sp, #4]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 ff76 	bl	8008b80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f002 fa85 	bl	80091ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	210a      	movs	r1, #10
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fc0a 	bl	80074c2 <USBH_FindInterface>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	2bff      	cmp	r3, #255	@ 0xff
 8006cb6:	d002      	beq.n	8006cbe <USBH_CDC_InterfaceInit+0x11a>
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d901      	bls.n	8006cc2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e0c2      	b.n	8006e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	211a      	movs	r1, #26
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	4413      	add	r3, r2
 8006cce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	b25b      	sxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	da16      	bge.n	8006d08 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	211a      	movs	r1, #26
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	211a      	movs	r1, #26
 8006cf6:	fb01 f303 	mul.w	r3, r1, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d00:	881a      	ldrh	r2, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	835a      	strh	r2, [r3, #26]
 8006d06:	e015      	b.n	8006d34 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	211a      	movs	r1, #26
 8006d0e:	fb01 f303 	mul.w	r3, r1, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	211a      	movs	r1, #26
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d2e:	881a      	ldrh	r2, [r3, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	211a      	movs	r1, #26
 8006d3a:	fb01 f303 	mul.w	r3, r1, r3
 8006d3e:	4413      	add	r3, r2
 8006d40:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	b25b      	sxtb	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da16      	bge.n	8006d7a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	211a      	movs	r1, #26
 8006d52:	fb01 f303 	mul.w	r3, r1, r3
 8006d56:	4413      	add	r3, r2
 8006d58:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	211a      	movs	r1, #26
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	835a      	strh	r2, [r3, #26]
 8006d78:	e015      	b.n	8006da6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	211a      	movs	r1, #26
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	211a      	movs	r1, #26
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006da0:	881a      	ldrh	r2, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	7b9b      	ldrb	r3, [r3, #14]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 ff16 	bl	8008bde <USBH_AllocPipe>
 8006db2:	4603      	mov	r3, r0
 8006db4:	461a      	mov	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7bdb      	ldrb	r3, [r3, #15]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 ff0c 	bl	8008bde <USBH_AllocPipe>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	7b59      	ldrb	r1, [r3, #13]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	7b98      	ldrb	r0, [r3, #14]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	8b12      	ldrh	r2, [r2, #24]
 8006de6:	9202      	str	r2, [sp, #8]
 8006de8:	2202      	movs	r2, #2
 8006dea:	9201      	str	r2, [sp, #4]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	4623      	mov	r3, r4
 8006df0:	4602      	mov	r2, r0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fec4 	bl	8008b80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	7b19      	ldrb	r1, [r3, #12]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	7bd8      	ldrb	r0, [r3, #15]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	8b52      	ldrh	r2, [r2, #26]
 8006e10:	9202      	str	r2, [sp, #8]
 8006e12:	2202      	movs	r2, #2
 8006e14:	9201      	str	r2, [sp, #4]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4623      	mov	r3, r4
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 feaf 	bl	8008b80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	7b5b      	ldrb	r3, [r3, #13]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f002 f9ba 	bl	80091ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	7b1b      	ldrb	r3, [r3, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f002 f9b3 	bl	80091ac <USBH_LL_SetToggle>

  return USBH_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd90      	pop	{r4, r7, pc}

08006e50 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00e      	beq.n	8006e88 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fea4 	bl	8008bbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fecf 	bl	8008c20 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	7b1b      	ldrb	r3, [r3, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00e      	beq.n	8006eae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	7b1b      	ldrb	r3, [r3, #12]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fe91 	bl	8008bbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	7b1b      	ldrb	r3, [r3, #12]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 febc 	bl	8008c20 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	7b5b      	ldrb	r3, [r3, #13]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00e      	beq.n	8006ed4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	7b5b      	ldrb	r3, [r3, #13]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fe7e 	bl	8008bbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	7b5b      	ldrb	r3, [r3, #13]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fea9 	bl	8008c20 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f002 f9ed 	bl	80092c8 <free>
    phost->pActiveClass->pData = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3340      	adds	r3, #64	@ 0x40
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f8b1 	bl	8007082 <GetLineCoding>
 8006f20:	4603      	mov	r3, r0
 8006f22:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f24:	7afb      	ldrb	r3, [r7, #11]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f30:	2102      	movs	r1, #2
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f36:	7afb      	ldrb	r3, [r7, #11]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d877      	bhi.n	8007054 <USBH_CDC_Process+0x114>
 8006f64:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <USBH_CDC_Process+0x2c>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f81 	.word	0x08006f81
 8006f70:	08006f87 	.word	0x08006f87
 8006f74:	08006fb7 	.word	0x08006fb7
 8006f78:	0800702b 	.word	0x0800702b
 8006f7c:	08007039 	.word	0x08007039
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]
      break;
 8006f84:	e06d      	b.n	8007062 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f897 	bl	80070c0 <SetLineCoding>
 8006f92:	4603      	mov	r3, r0
 8006f94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fa4:	e058      	b.n	8007058 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d055      	beq.n	8007058 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006fb4:	e050      	b.n	8007058 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	3340      	adds	r3, #64	@ 0x40
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f860 	bl	8007082 <GetLineCoding>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d126      	bne.n	800701a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fde:	791b      	ldrb	r3, [r3, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d13b      	bne.n	800705c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d133      	bne.n	800705c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ffe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007000:	429a      	cmp	r2, r3
 8007002:	d12b      	bne.n	800705c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800700c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800700e:	429a      	cmp	r2, r3
 8007010:	d124      	bne.n	800705c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f958 	bl	80072c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007018:	e020      	b.n	800705c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d01d      	beq.n	800705c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2204      	movs	r2, #4
 8007024:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007028:	e018      	b.n	800705c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f867 	bl	80070fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8da 	bl	80071ea <CDC_ProcessReception>
      break;
 8007036:	e014      	b.n	8007062 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 f81a 	bl	8008074 <USBH_ClrFeature>
 8007040:	4603      	mov	r3, r0
 8007042:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007052:	e005      	b.n	8007060 <USBH_CDC_Process+0x120>

    default:
      break;
 8007054:	bf00      	nop
 8007056:	e004      	b.n	8007062 <USBH_CDC_Process+0x122>
      break;
 8007058:	bf00      	nop
 800705a:	e002      	b.n	8007062 <USBH_CDC_Process+0x122>
      break;
 800705c:	bf00      	nop
 800705e:	e000      	b.n	8007062 <USBH_CDC_Process+0x122>
      break;
 8007060:	bf00      	nop

  }

  return status;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	22a1      	movs	r2, #161	@ 0xa1
 8007090:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2221      	movs	r2, #33	@ 0x21
 8007096:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2207      	movs	r2, #7
 80070a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2207      	movs	r2, #7
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fb14 	bl	80086de <USBH_CtlReq>
 80070b6:	4603      	mov	r3, r0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2221      	movs	r2, #33	@ 0x21
 80070ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2207      	movs	r2, #7
 80070e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2207      	movs	r2, #7
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 faf5 	bl	80086de <USBH_CtlReq>
 80070f4:	4603      	mov	r3, r0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b086      	sub	sp, #24
 8007102:	af02      	add	r7, sp, #8
 8007104:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007110:	2300      	movs	r3, #0
 8007112:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800711a:	2b01      	cmp	r3, #1
 800711c:	d002      	beq.n	8007124 <CDC_ProcessTransmission+0x26>
 800711e:	2b02      	cmp	r3, #2
 8007120:	d023      	beq.n	800716a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007122:	e05e      	b.n	80071e2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	8b12      	ldrh	r2, [r2, #24]
 800712c:	4293      	cmp	r3, r2
 800712e:	d90b      	bls.n	8007148 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	69d9      	ldr	r1, [r3, #28]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8b1a      	ldrh	r2, [r3, #24]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	7b5b      	ldrb	r3, [r3, #13]
 800713c:	2001      	movs	r0, #1
 800713e:	9000      	str	r0, [sp, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 fcda 	bl	8008afa <USBH_BulkSendData>
 8007146:	e00b      	b.n	8007160 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7b5b      	ldrb	r3, [r3, #13]
 8007156:	2001      	movs	r0, #1
 8007158:	9000      	str	r0, [sp, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fccd 	bl	8008afa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007168:	e03b      	b.n	80071e2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	7b5b      	ldrb	r3, [r3, #13]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fff1 	bl	8009158 <USBH_LL_GetURBState>
 8007176:	4603      	mov	r3, r0
 8007178:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d128      	bne.n	80071d2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	8b12      	ldrh	r2, [r2, #24]
 8007188:	4293      	cmp	r3, r2
 800718a:	d90e      	bls.n	80071aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	8b12      	ldrh	r2, [r2, #24]
 8007194:	1a9a      	subs	r2, r3, r2
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	8b12      	ldrh	r2, [r2, #24]
 80071a2:	441a      	add	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	61da      	str	r2, [r3, #28]
 80071a8:	e002      	b.n	80071b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d004      	beq.n	80071c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071c0:	e00e      	b.n	80071e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f868 	bl	80072a0 <USBH_CDC_TransmitCallback>
      break;
 80071d0:	e006      	b.n	80071e0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80071d2:	7afb      	ldrb	r3, [r7, #11]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d103      	bne.n	80071e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071e0:	bf00      	nop
  }
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b086      	sub	sp, #24
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007206:	2b03      	cmp	r3, #3
 8007208:	d002      	beq.n	8007210 <CDC_ProcessReception+0x26>
 800720a:	2b04      	cmp	r3, #4
 800720c:	d00e      	beq.n	800722c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800720e:	e043      	b.n	8007298 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	6a19      	ldr	r1, [r3, #32]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	8b5a      	ldrh	r2, [r3, #26]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	7b1b      	ldrb	r3, [r3, #12]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fc91 	bl	8008b44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2204      	movs	r2, #4
 8007226:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800722a:	e035      	b.n	8007298 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	7b1b      	ldrb	r3, [r3, #12]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 ff90 	bl	8009158 <USBH_LL_GetURBState>
 8007238:	4603      	mov	r3, r0
 800723a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800723c:	7cfb      	ldrb	r3, [r7, #19]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d129      	bne.n	8007296 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	7b1b      	ldrb	r3, [r3, #12]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fef3 	bl	8009034 <USBH_LL_GetLastXferSize>
 800724e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	429a      	cmp	r2, r3
 8007258:	d016      	beq.n	8007288 <CDC_ProcessReception+0x9e>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	8b5b      	ldrh	r3, [r3, #26]
 800725e:	461a      	mov	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4293      	cmp	r3, r2
 8007264:	d910      	bls.n	8007288 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad2      	subs	r2, r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6a1a      	ldr	r2, [r3, #32]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	441a      	add	r2, r3
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2203      	movs	r2, #3
 8007282:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007286:	e006      	b.n	8007296 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f80f 	bl	80072b4 <USBH_CDC_ReceiveCallback>
      break;
 8007296:	bf00      	nop
  }
}
 8007298:	bf00      	nop
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80072f0:	2302      	movs	r3, #2
 80072f2:	e029      	b.n	8007348 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	79fa      	ldrb	r2, [r7, #7]
 80072f8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f81f 	bl	8007350 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 fdc3 	bl	8008ecc <USBH_LL_Init>

  return USBH_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e009      	b.n	8007376 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	33e0      	adds	r3, #224	@ 0xe0
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b0f      	cmp	r3, #15
 800737a:	d9f2      	bls.n	8007362 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e009      	b.n	8007396 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800739c:	d3f1      	bcc.n	8007382 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2240      	movs	r2, #64	@ 0x40
 80073c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	331c      	adds	r3, #28
 80073ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073f2:	2100      	movs	r1, #0
 80073f4:	4618      	mov	r0, r3
 80073f6:	f002 fa15 	bl	8009824 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f002 fa0c 	bl	8009824 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007412:	2212      	movs	r2, #18
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f002 fa04 	bl	8009824 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007422:	223e      	movs	r2, #62	@ 0x3e
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f002 f9fc 	bl	8009824 <memset>

  return USBH_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d016      	beq.n	8007478 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10e      	bne.n	8007472 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800745a:	1c59      	adds	r1, r3, #1
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	33de      	adds	r3, #222	@ 0xde
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
 8007470:	e004      	b.n	800747c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	73fb      	strb	r3, [r7, #15]
 8007476:	e001      	b.n	800747c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d204      	bcs.n	80074b0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80074ae:	e001      	b.n	80074b4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074b0:	2302      	movs	r3, #2
 80074b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b087      	sub	sp, #28
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	4608      	mov	r0, r1
 80074cc:	4611      	mov	r1, r2
 80074ce:	461a      	mov	r2, r3
 80074d0:	4603      	mov	r3, r0
 80074d2:	70fb      	strb	r3, [r7, #3]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70bb      	strb	r3, [r7, #2]
 80074d8:	4613      	mov	r3, r2
 80074da:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80074ea:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074ec:	e025      	b.n	800753a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	221a      	movs	r2, #26
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	3308      	adds	r3, #8
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	3302      	adds	r3, #2
 80074fe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	795b      	ldrb	r3, [r3, #5]
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	429a      	cmp	r2, r3
 8007508:	d002      	beq.n	8007510 <USBH_FindInterface+0x4e>
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	2bff      	cmp	r3, #255	@ 0xff
 800750e:	d111      	bne.n	8007534 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007514:	78ba      	ldrb	r2, [r7, #2]
 8007516:	429a      	cmp	r2, r3
 8007518:	d002      	beq.n	8007520 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800751a:	78bb      	ldrb	r3, [r7, #2]
 800751c:	2bff      	cmp	r3, #255	@ 0xff
 800751e:	d109      	bne.n	8007534 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007524:	787a      	ldrb	r2, [r7, #1]
 8007526:	429a      	cmp	r2, r3
 8007528:	d002      	beq.n	8007530 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800752a:	787b      	ldrb	r3, [r7, #1]
 800752c:	2bff      	cmp	r3, #255	@ 0xff
 800752e:	d101      	bne.n	8007534 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	e006      	b.n	8007542 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	3301      	adds	r3, #1
 8007538:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d9d6      	bls.n	80074ee <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007540:	23ff      	movs	r3, #255	@ 0xff
}
 8007542:	4618      	mov	r0, r3
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fcf4 	bl	8008f44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800755c:	2101      	movs	r1, #1
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fe0d 	bl	800917e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af04      	add	r7, sp, #16
 8007576:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007578:	2302      	movs	r3, #2
 800757a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d102      	bne.n	8007592 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2203      	movs	r2, #3
 8007590:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b0b      	cmp	r3, #11
 800759a:	f200 81bb 	bhi.w	8007914 <USBH_Process+0x3a4>
 800759e:	a201      	add	r2, pc, #4	@ (adr r2, 80075a4 <USBH_Process+0x34>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075d5 	.word	0x080075d5
 80075a8:	08007607 	.word	0x08007607
 80075ac:	0800766f 	.word	0x0800766f
 80075b0:	080078af 	.word	0x080078af
 80075b4:	08007915 	.word	0x08007915
 80075b8:	0800770f 	.word	0x0800770f
 80075bc:	08007855 	.word	0x08007855
 80075c0:	08007745 	.word	0x08007745
 80075c4:	08007765 	.word	0x08007765
 80075c8:	08007783 	.word	0x08007783
 80075cc:	080077c7 	.word	0x080077c7
 80075d0:	08007897 	.word	0x08007897
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 819b 	beq.w	8007918 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80075e8:	20c8      	movs	r0, #200	@ 0xc8
 80075ea:	f001 fe12 	bl	8009212 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fd05 	bl	8008ffe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007604:	e188      	b.n	8007918 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800760c:	2b01      	cmp	r3, #1
 800760e:	d107      	bne.n	8007620 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800761e:	e18a      	b.n	8007936 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007626:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800762a:	d914      	bls.n	8007656 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007632:	3301      	adds	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007642:	2b03      	cmp	r3, #3
 8007644:	d903      	bls.n	800764e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	220d      	movs	r2, #13
 800764a:	701a      	strb	r2, [r3, #0]
      break;
 800764c:	e173      	b.n	8007936 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
      break;
 8007654:	e16f      	b.n	8007936 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800765c:	f103 020a 	add.w	r2, r3, #10
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007666:	200a      	movs	r0, #10
 8007668:	f001 fdd3 	bl	8009212 <USBH_Delay>
      break;
 800766c:	e163      	b.n	8007936 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800767e:	2104      	movs	r1, #4
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007684:	2064      	movs	r0, #100	@ 0x64
 8007686:	f001 fdc4 	bl	8009212 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fc90 	bl	8008fb0 <USBH_LL_GetSpeed>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2205      	movs	r2, #5
 800769e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fa9b 	bl	8008bde <USBH_AllocPipe>
 80076a8:	4603      	mov	r3, r0
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076b0:	2180      	movs	r1, #128	@ 0x80
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fa93 	bl	8008bde <USBH_AllocPipe>
 80076b8:	4603      	mov	r3, r0
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7919      	ldrb	r1, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076d4:	9202      	str	r2, [sp, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	9201      	str	r2, [sp, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4603      	mov	r3, r0
 80076de:	2280      	movs	r2, #128	@ 0x80
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fa4d 	bl	8008b80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7959      	ldrb	r1, [r3, #5]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076fa:	9202      	str	r2, [sp, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	9201      	str	r2, [sp, #4]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	4603      	mov	r3, r0
 8007704:	2200      	movs	r2, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fa3a 	bl	8008b80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800770c:	e113      	b.n	8007936 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f916 	bl	8007940 <USBH_HandleEnum>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f040 80fd 	bne.w	800791c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007730:	2b01      	cmp	r3, #1
 8007732:	d103      	bne.n	800773c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2208      	movs	r2, #8
 8007738:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800773a:	e0ef      	b.n	800791c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2207      	movs	r2, #7
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e0eb      	b.n	800791c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80e8 	beq.w	8007920 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007756:	2101      	movs	r1, #1
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2208      	movs	r2, #8
 8007760:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007762:	e0dd      	b.n	8007920 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc3a 	bl	8007fe6 <USBH_SetCfg>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 80d5 	bne.w	8007924 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2209      	movs	r2, #9
 800777e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007780:	e0d0      	b.n	8007924 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d016      	beq.n	80077be <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007790:	2101      	movs	r1, #1
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fc4a 	bl	800802c <USBH_SetFeature>
 8007798:	4603      	mov	r3, r0
 800779a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	220a      	movs	r2, #10
 80077a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077aa:	e0bd      	b.n	8007928 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	f040 80b9 	bne.w	8007928 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	220a      	movs	r2, #10
 80077ba:	701a      	strb	r2, [r3, #0]
      break;
 80077bc:	e0b4      	b.n	8007928 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220a      	movs	r2, #10
 80077c2:	701a      	strb	r2, [r3, #0]
      break;
 80077c4:	e0b0      	b.n	8007928 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80ad 	beq.w	800792c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
 80077de:	e016      	b.n	800780e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80077e0:	7bfa      	ldrb	r2, [r7, #15]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32de      	adds	r2, #222	@ 0xde
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	791a      	ldrb	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d108      	bne.n	8007808 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80077f6:	7bfa      	ldrb	r2, [r7, #15]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	32de      	adds	r2, #222	@ 0xde
 80077fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007806:	e005      	b.n	8007814 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	3301      	adds	r3, #1
 800780c:	73fb      	strb	r3, [r7, #15]
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0e5      	beq.n	80077e0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d016      	beq.n	800784c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2206      	movs	r2, #6
 8007834:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800783c:	2103      	movs	r1, #3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007842:	e073      	b.n	800792c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	220d      	movs	r2, #13
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	e06f      	b.n	800792c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	220d      	movs	r2, #13
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e06b      	b.n	800792c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d017      	beq.n	800788e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	220b      	movs	r2, #11
 800787a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800787c:	e058      	b.n	8007930 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b02      	cmp	r3, #2
 8007884:	d154      	bne.n	8007930 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	220d      	movs	r2, #13
 800788a:	701a      	strb	r2, [r3, #0]
      break;
 800788c:	e050      	b.n	8007930 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	220d      	movs	r2, #13
 8007892:	701a      	strb	r2, [r3, #0]
      break;
 8007894:	e04c      	b.n	8007930 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d049      	beq.n	8007934 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
      }
      break;
 80078ac:	e042      	b.n	8007934 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fd4a 	bl	8007350 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078ea:	2105      	movs	r1, #5
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d107      	bne.n	800790c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fe22 	bl	800754e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800790a:	e014      	b.n	8007936 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fb19 	bl	8008f44 <USBH_LL_Start>
      break;
 8007912:	e010      	b.n	8007936 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007914:	bf00      	nop
 8007916:	e00e      	b.n	8007936 <USBH_Process+0x3c6>
      break;
 8007918:	bf00      	nop
 800791a:	e00c      	b.n	8007936 <USBH_Process+0x3c6>
      break;
 800791c:	bf00      	nop
 800791e:	e00a      	b.n	8007936 <USBH_Process+0x3c6>
    break;
 8007920:	bf00      	nop
 8007922:	e008      	b.n	8007936 <USBH_Process+0x3c6>
      break;
 8007924:	bf00      	nop
 8007926:	e006      	b.n	8007936 <USBH_Process+0x3c6>
      break;
 8007928:	bf00      	nop
 800792a:	e004      	b.n	8007936 <USBH_Process+0x3c6>
      break;
 800792c:	bf00      	nop
 800792e:	e002      	b.n	8007936 <USBH_Process+0x3c6>
      break;
 8007930:	bf00      	nop
 8007932:	e000      	b.n	8007936 <USBH_Process+0x3c6>
      break;
 8007934:	bf00      	nop
  }
  return USBH_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af04      	add	r7, sp, #16
 8007946:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800794c:	2301      	movs	r3, #1
 800794e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	785b      	ldrb	r3, [r3, #1]
 8007954:	2b07      	cmp	r3, #7
 8007956:	f200 81bd 	bhi.w	8007cd4 <USBH_HandleEnum+0x394>
 800795a:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <USBH_HandleEnum+0x20>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	08007981 	.word	0x08007981
 8007964:	08007a3b 	.word	0x08007a3b
 8007968:	08007aa5 	.word	0x08007aa5
 800796c:	08007b2f 	.word	0x08007b2f
 8007970:	08007b99 	.word	0x08007b99
 8007974:	08007c09 	.word	0x08007c09
 8007978:	08007c4f 	.word	0x08007c4f
 800797c:	08007c95 	.word	0x08007c95
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007980:	2108      	movs	r1, #8
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa4c 	bl	8007e20 <USBH_Get_DevDesc>
 8007988:	4603      	mov	r3, r0
 800798a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d12e      	bne.n	80079f0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7919      	ldrb	r1, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079b6:	9202      	str	r2, [sp, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	9201      	str	r2, [sp, #4]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4603      	mov	r3, r0
 80079c0:	2280      	movs	r2, #128	@ 0x80
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 f8dc 	bl	8008b80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7959      	ldrb	r1, [r3, #5]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079dc:	9202      	str	r2, [sp, #8]
 80079de:	2200      	movs	r2, #0
 80079e0:	9201      	str	r2, [sp, #4]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	4603      	mov	r3, r0
 80079e6:	2200      	movs	r2, #0
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f8c9 	bl	8008b80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079ee:	e173      	b.n	8007cd8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	f040 8170 	bne.w	8007cd8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079fe:	3301      	adds	r3, #1
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d903      	bls.n	8007a1a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	220d      	movs	r2, #13
 8007a16:	701a      	strb	r2, [r3, #0]
      break;
 8007a18:	e15e      	b.n	8007cd8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	795b      	ldrb	r3, [r3, #5]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f8fd 	bl	8008c20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	791b      	ldrb	r3, [r3, #4]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 f8f7 	bl	8008c20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
      break;
 8007a38:	e14e      	b.n	8007cd8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a3a:	2112      	movs	r1, #18
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9ef 	bl	8007e20 <USBH_Get_DevDesc>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a52:	e143      	b.n	8007cdc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	f040 8140 	bne.w	8007cdc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a62:	3301      	adds	r3, #1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d903      	bls.n	8007a7e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	220d      	movs	r2, #13
 8007a7a:	701a      	strb	r2, [r3, #0]
      break;
 8007a7c:	e12e      	b.n	8007cdc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	795b      	ldrb	r3, [r3, #5]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f8cb 	bl	8008c20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 f8c5 	bl	8008c20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
      break;
 8007aa2:	e11b      	b.n	8007cdc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fa79 	bl	8007f9e <USBH_SetAddress>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d130      	bne.n	8007b18 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	f001 fbab 	bl	8009212 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2203      	movs	r2, #3
 8007ac8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7919      	ldrb	r1, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ade:	9202      	str	r2, [sp, #8]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	9201      	str	r2, [sp, #4]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2280      	movs	r2, #128	@ 0x80
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f848 	bl	8008b80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	7959      	ldrb	r1, [r3, #5]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b04:	9202      	str	r2, [sp, #8]
 8007b06:	2200      	movs	r2, #0
 8007b08:	9201      	str	r2, [sp, #4]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2200      	movs	r2, #0
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f835 	bl	8008b80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b16:	e0e3      	b.n	8007ce0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	f040 80e0 	bne.w	8007ce0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	220d      	movs	r2, #13
 8007b24:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	705a      	strb	r2, [r3, #1]
      break;
 8007b2c:	e0d8      	b.n	8007ce0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b2e:	2109      	movs	r1, #9
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f9a1 	bl	8007e78 <USBH_Get_CfgDesc>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d103      	bne.n	8007b48 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2204      	movs	r2, #4
 8007b44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b46:	e0cd      	b.n	8007ce4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	f040 80ca 	bne.w	8007ce4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b56:	3301      	adds	r3, #1
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d903      	bls.n	8007b72 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	220d      	movs	r2, #13
 8007b6e:	701a      	strb	r2, [r3, #0]
      break;
 8007b70:	e0b8      	b.n	8007ce4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	795b      	ldrb	r3, [r3, #5]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f851 	bl	8008c20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	791b      	ldrb	r3, [r3, #4]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 f84b 	bl	8008c20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
      break;
 8007b96:	e0a5      	b.n	8007ce4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f969 	bl	8007e78 <USBH_Get_CfgDesc>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d103      	bne.n	8007bb8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2205      	movs	r2, #5
 8007bb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bb6:	e097      	b.n	8007ce8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	f040 8094 	bne.w	8007ce8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d903      	bls.n	8007be2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	220d      	movs	r2, #13
 8007bde:	701a      	strb	r2, [r3, #0]
      break;
 8007be0:	e082      	b.n	8007ce8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f819 	bl	8008c20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	791b      	ldrb	r3, [r3, #4]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f813 	bl	8008c20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
      break;
 8007c06:	e06f      	b.n	8007ce8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d019      	beq.n	8007c46 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c1e:	23ff      	movs	r3, #255	@ 0xff
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f953 	bl	8007ecc <USBH_Get_StringDesc>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2206      	movs	r2, #6
 8007c34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c36:	e059      	b.n	8007cec <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d156      	bne.n	8007cec <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2206      	movs	r2, #6
 8007c42:	705a      	strb	r2, [r3, #1]
      break;
 8007c44:	e052      	b.n	8007cec <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2206      	movs	r2, #6
 8007c4a:	705a      	strb	r2, [r3, #1]
      break;
 8007c4c:	e04e      	b.n	8007cec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d019      	beq.n	8007c8c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c64:	23ff      	movs	r3, #255	@ 0xff
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f930 	bl	8007ecc <USBH_Get_StringDesc>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2207      	movs	r2, #7
 8007c7a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c7c:	e038      	b.n	8007cf0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d135      	bne.n	8007cf0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2207      	movs	r2, #7
 8007c88:	705a      	strb	r2, [r3, #1]
      break;
 8007c8a:	e031      	b.n	8007cf0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2207      	movs	r2, #7
 8007c90:	705a      	strb	r2, [r3, #1]
      break;
 8007c92:	e02d      	b.n	8007cf0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d017      	beq.n	8007cce <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007caa:	23ff      	movs	r3, #255	@ 0xff
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f90d 	bl	8007ecc <USBH_Get_StringDesc>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cc0:	e018      	b.n	8007cf4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d115      	bne.n	8007cf4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
      break;
 8007ccc:	e012      	b.n	8007cf4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	e00f      	b.n	8007cf4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e00e      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e00c      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007cdc:	bf00      	nop
 8007cde:	e00a      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e008      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e006      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007ce8:	bf00      	nop
 8007cea:	e004      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007cec:	bf00      	nop
 8007cee:	e002      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007cf0:	bf00      	nop
 8007cf2:	e000      	b.n	8007cf6 <USBH_HandleEnum+0x3b6>
      break;
 8007cf4:	bf00      	nop
  }
  return Status;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f804 	bl	8007d42 <USBH_HandleSof>
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b0b      	cmp	r3, #11
 8007d52:	d10a      	bne.n	8007d6a <USBH_HandleSof+0x28>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
  }
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007d82:	bf00      	nop
}
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007d9e:	bf00      	nop
}
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f8be 	bl	8008f7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	791b      	ldrb	r3, [r3, #4]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 ff0b 	bl	8008c20 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	795b      	ldrb	r3, [r3, #5]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 ff05 	bl	8008c20 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e2c:	887b      	ldrh	r3, [r7, #2]
 8007e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e32:	d901      	bls.n	8007e38 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e01b      	b.n	8007e70 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e3e:	887b      	ldrh	r3, [r7, #2]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	4613      	mov	r3, r2
 8007e44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f872 	bl	8007f34 <USBH_GetDescriptor>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d109      	bne.n	8007e6e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e60:	887a      	ldrh	r2, [r7, #2]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f929 	bl	80080bc <USBH_ParseDevDesc>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	331c      	adds	r3, #28
 8007e88:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007e8a:	887b      	ldrh	r3, [r7, #2]
 8007e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e90:	d901      	bls.n	8007e96 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e016      	b.n	8007ec4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e96:	887b      	ldrh	r3, [r7, #2]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f846 	bl	8007f34 <USBH_GetDescriptor>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d107      	bne.n	8007ec2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007eb2:	887b      	ldrh	r3, [r7, #2]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f9af 	bl	800821c <USBH_ParseCfgDesc>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	460b      	mov	r3, r1
 8007eda:	72fb      	strb	r3, [r7, #11]
 8007edc:	4613      	mov	r3, r2
 8007ede:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007ee0:	893b      	ldrh	r3, [r7, #8]
 8007ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee6:	d802      	bhi.n	8007eee <USBH_Get_StringDesc+0x22>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e01c      	b.n	8007f2c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007efa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f02:	893b      	ldrh	r3, [r7, #8]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	460b      	mov	r3, r1
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f812 	bl	8007f34 <USBH_GetDescriptor>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d107      	bne.n	8007f2a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f20:	893a      	ldrh	r2, [r7, #8]
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fb8d 	bl	8008644 <USBH_ParseStringDesc>
  }

  return status;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	72fb      	strb	r3, [r7, #11]
 8007f42:	4613      	mov	r3, r2
 8007f44:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	789b      	ldrb	r3, [r3, #2]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d11c      	bne.n	8007f88 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2206      	movs	r2, #6
 8007f5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	893a      	ldrh	r2, [r7, #8]
 8007f64:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f66:	893b      	ldrh	r3, [r7, #8]
 8007f68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f70:	d104      	bne.n	8007f7c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f240 4209 	movw	r2, #1033	@ 0x409
 8007f78:	829a      	strh	r2, [r3, #20]
 8007f7a:	e002      	b.n	8007f82 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8b3a      	ldrh	r2, [r7, #24]
 8007f86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f88:	8b3b      	ldrh	r3, [r7, #24]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fba5 	bl	80086de <USBH_CtlReq>
 8007f94:	4603      	mov	r3, r0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	789b      	ldrb	r3, [r3, #2]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d10f      	bne.n	8007fd2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2205      	movs	r2, #5
 8007fbc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb81 	bl	80086de <USBH_CtlReq>
 8007fdc:	4603      	mov	r3, r0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	789b      	ldrb	r3, [r3, #2]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d10e      	bne.n	8008018 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2209      	movs	r2, #9
 8008004:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	887a      	ldrh	r2, [r7, #2]
 800800a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008018:	2200      	movs	r2, #0
 800801a:	2100      	movs	r1, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fb5e 	bl	80086de <USBH_CtlReq>
 8008022:	4603      	mov	r3, r0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	789b      	ldrb	r3, [r3, #2]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d10f      	bne.n	8008060 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2203      	movs	r2, #3
 800804a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	b29a      	uxth	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008060:	2200      	movs	r2, #0
 8008062:	2100      	movs	r1, #0
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fb3a 	bl	80086de <USBH_CtlReq>
 800806a:	4603      	mov	r3, r0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	789b      	ldrb	r3, [r3, #2]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d10f      	bne.n	80080a8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	b29a      	uxth	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080a8:	2200      	movs	r2, #0
 80080aa:	2100      	movs	r1, #0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fb16 	bl	80086de <USBH_CtlReq>
 80080b2:	4603      	mov	r3, r0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80080d0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80080dc:	2302      	movs	r3, #2
 80080de:	e094      	b.n	800820a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	785a      	ldrb	r2, [r3, #1]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	3302      	adds	r3, #2
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	3303      	adds	r3, #3
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	b29b      	uxth	r3, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	791a      	ldrb	r2, [r3, #4]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	795a      	ldrb	r2, [r3, #5]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	799a      	ldrb	r2, [r3, #6]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	79da      	ldrb	r2, [r3, #7]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800813a:	2b01      	cmp	r3, #1
 800813c:	d11b      	bne.n	8008176 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	79db      	ldrb	r3, [r3, #7]
 8008142:	2b20      	cmp	r3, #32
 8008144:	dc0f      	bgt.n	8008166 <USBH_ParseDevDesc+0xaa>
 8008146:	2b08      	cmp	r3, #8
 8008148:	db0f      	blt.n	800816a <USBH_ParseDevDesc+0xae>
 800814a:	3b08      	subs	r3, #8
 800814c:	4a32      	ldr	r2, [pc, #200]	@ (8008218 <USBH_ParseDevDesc+0x15c>)
 800814e:	fa22 f303 	lsr.w	r3, r2, r3
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf14      	ite	ne
 800815a:	2301      	movne	r3, #1
 800815c:	2300      	moveq	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <USBH_ParseDevDesc+0xb6>
 8008164:	e001      	b.n	800816a <USBH_ParseDevDesc+0xae>
 8008166:	2b40      	cmp	r3, #64	@ 0x40
 8008168:	d003      	beq.n	8008172 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2208      	movs	r2, #8
 800816e:	71da      	strb	r2, [r3, #7]
        break;
 8008170:	e000      	b.n	8008174 <USBH_ParseDevDesc+0xb8>
        break;
 8008172:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008174:	e00e      	b.n	8008194 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800817c:	2b02      	cmp	r3, #2
 800817e:	d107      	bne.n	8008190 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	79db      	ldrb	r3, [r3, #7]
 8008184:	2b08      	cmp	r3, #8
 8008186:	d005      	beq.n	8008194 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	2208      	movs	r2, #8
 800818c:	71da      	strb	r2, [r3, #7]
 800818e:	e001      	b.n	8008194 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008190:	2303      	movs	r3, #3
 8008192:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	2b08      	cmp	r3, #8
 8008198:	d936      	bls.n	8008208 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3308      	adds	r3, #8
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	3309      	adds	r3, #9
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	330a      	adds	r3, #10
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	330b      	adds	r3, #11
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	330c      	adds	r3, #12
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	330d      	adds	r3, #13
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4313      	orrs	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	7b9a      	ldrb	r2, [r3, #14]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	7bda      	ldrb	r2, [r3, #15]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	7c1a      	ldrb	r2, [r3, #16]
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	7c5a      	ldrb	r2, [r3, #17]
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
}
 800820a:	4618      	mov	r0, r3
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	01000101 	.word	0x01000101

0800821c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08c      	sub	sp, #48	@ 0x30
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008230:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800824a:	2302      	movs	r3, #2
 800824c:	e0da      	b.n	8008404 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	781a      	ldrb	r2, [r3, #0]
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	785a      	ldrb	r2, [r3, #1]
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3302      	adds	r3, #2
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	3303      	adds	r3, #3
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	b29b      	uxth	r3, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	b29b      	uxth	r3, r3
 8008278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800827c:	bf28      	it	cs
 800827e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008282:	b29a      	uxth	r2, r3
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	791a      	ldrb	r2, [r3, #4]
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	795a      	ldrb	r2, [r3, #5]
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	799a      	ldrb	r2, [r3, #6]
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	79da      	ldrb	r2, [r3, #7]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	7a1a      	ldrb	r2, [r3, #8]
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b09      	cmp	r3, #9
 80082b6:	d002      	beq.n	80082be <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	2209      	movs	r2, #9
 80082bc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	2b09      	cmp	r3, #9
 80082c2:	f240 809d 	bls.w	8008400 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80082c6:	2309      	movs	r3, #9
 80082c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082ce:	e081      	b.n	80083d4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082d0:	f107 0316 	add.w	r3, r7, #22
 80082d4:	4619      	mov	r1, r3
 80082d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082d8:	f000 f9e7 	bl	80086aa <USBH_GetNextDesc>
 80082dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d176      	bne.n	80083d4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b09      	cmp	r3, #9
 80082ec:	d002      	beq.n	80082f4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80082ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f0:	2209      	movs	r2, #9
 80082f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80082f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082f8:	221a      	movs	r2, #26
 80082fa:	fb02 f303 	mul.w	r3, r2, r3
 80082fe:	3308      	adds	r3, #8
 8008300:	6a3a      	ldr	r2, [r7, #32]
 8008302:	4413      	add	r3, r2
 8008304:	3302      	adds	r3, #2
 8008306:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800830a:	69f8      	ldr	r0, [r7, #28]
 800830c:	f000 f87e 	bl	800840c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800831a:	e043      	b.n	80083a4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800831c:	f107 0316 	add.w	r3, r7, #22
 8008320:	4619      	mov	r1, r3
 8008322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008324:	f000 f9c1 	bl	80086aa <USBH_GetNextDesc>
 8008328:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	2b05      	cmp	r3, #5
 8008330:	d138      	bne.n	80083a4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	795b      	ldrb	r3, [r3, #5]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d113      	bne.n	8008362 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800833e:	2b02      	cmp	r3, #2
 8008340:	d003      	beq.n	800834a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	799b      	ldrb	r3, [r3, #6]
 8008346:	2b03      	cmp	r3, #3
 8008348:	d10b      	bne.n	8008362 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	79db      	ldrb	r3, [r3, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10b      	bne.n	800836a <USBH_ParseCfgDesc+0x14e>
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b09      	cmp	r3, #9
 8008358:	d007      	beq.n	800836a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	2209      	movs	r2, #9
 800835e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008360:	e003      	b.n	800836a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	2207      	movs	r2, #7
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	e000      	b.n	800836c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800836a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800836c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008370:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008374:	3201      	adds	r2, #1
 8008376:	00d2      	lsls	r2, r2, #3
 8008378:	211a      	movs	r1, #26
 800837a:	fb01 f303 	mul.w	r3, r1, r3
 800837e:	4413      	add	r3, r2
 8008380:	3308      	adds	r3, #8
 8008382:	6a3a      	ldr	r2, [r7, #32]
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800838a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800838c:	69b9      	ldr	r1, [r7, #24]
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f870 	bl	8008474 <USBH_ParseEPDesc>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800839a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800839e:	3301      	adds	r3, #1
 80083a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	791b      	ldrb	r3, [r3, #4]
 80083a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d204      	bcs.n	80083ba <USBH_ParseCfgDesc+0x19e>
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	885a      	ldrh	r2, [r3, #2]
 80083b4:	8afb      	ldrh	r3, [r7, #22]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d8b0      	bhi.n	800831c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	791b      	ldrb	r3, [r3, #4]
 80083be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d201      	bcs.n	80083ca <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e01c      	b.n	8008404 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80083ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083ce:	3301      	adds	r3, #1
 80083d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d805      	bhi.n	80083e8 <USBH_ParseCfgDesc+0x1cc>
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	885a      	ldrh	r2, [r3, #2]
 80083e0:	8afb      	ldrh	r3, [r7, #22]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	f63f af74 	bhi.w	80082d0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	791b      	ldrb	r3, [r3, #4]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	bf28      	it	cs
 80083f0:	2302      	movcs	r3, #2
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d201      	bcs.n	8008400 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e001      	b.n	8008404 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008400:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008404:	4618      	mov	r0, r3
 8008406:	3730      	adds	r7, #48	@ 0x30
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781a      	ldrb	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	785a      	ldrb	r2, [r3, #1]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	789a      	ldrb	r2, [r3, #2]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	78da      	ldrb	r2, [r3, #3]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	3304      	adds	r3, #4
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b02      	cmp	r3, #2
 800843e:	bf28      	it	cs
 8008440:	2302      	movcs	r3, #2
 8008442:	b2da      	uxtb	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	795a      	ldrb	r2, [r3, #5]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	799a      	ldrb	r2, [r3, #6]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	79da      	ldrb	r2, [r3, #7]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	7a1a      	ldrb	r2, [r3, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	721a      	strb	r2, [r3, #8]
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	785a      	ldrb	r2, [r3, #1]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	789a      	ldrb	r2, [r3, #2]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	78da      	ldrb	r2, [r3, #3]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3305      	adds	r3, #5
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	021b      	lsls	r3, r3, #8
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	4313      	orrs	r3, r2
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	799a      	ldrb	r2, [r3, #6]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	889b      	ldrh	r3, [r3, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d6:	d804      	bhi.n	80084e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e0:	d901      	bls.n	80084e6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80084e2:	2303      	movs	r3, #3
 80084e4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d136      	bne.n	800855e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	78db      	ldrb	r3, [r3, #3]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d108      	bne.n	800850e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	889b      	ldrh	r3, [r3, #4]
 8008500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008504:	f240 8097 	bls.w	8008636 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008508:	2303      	movs	r3, #3
 800850a:	75fb      	strb	r3, [r7, #23]
 800850c:	e093      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	78db      	ldrb	r3, [r3, #3]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d107      	bne.n	800852a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	889b      	ldrh	r3, [r3, #4]
 800851e:	2b40      	cmp	r3, #64	@ 0x40
 8008520:	f240 8089 	bls.w	8008636 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008524:	2303      	movs	r3, #3
 8008526:	75fb      	strb	r3, [r7, #23]
 8008528:	e085      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	78db      	ldrb	r3, [r3, #3]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b01      	cmp	r3, #1
 8008534:	d005      	beq.n	8008542 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	78db      	ldrb	r3, [r3, #3]
 800853a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800853e:	2b03      	cmp	r3, #3
 8008540:	d10a      	bne.n	8008558 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	799b      	ldrb	r3, [r3, #6]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <USBH_ParseEPDesc+0xde>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	799b      	ldrb	r3, [r3, #6]
 800854e:	2b10      	cmp	r3, #16
 8008550:	d970      	bls.n	8008634 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008552:	2303      	movs	r3, #3
 8008554:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008556:	e06d      	b.n	8008634 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008558:	2303      	movs	r3, #3
 800855a:	75fb      	strb	r3, [r7, #23]
 800855c:	e06b      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008564:	2b01      	cmp	r3, #1
 8008566:	d13c      	bne.n	80085e2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	78db      	ldrb	r3, [r3, #3]
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d005      	beq.n	8008580 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	78db      	ldrb	r3, [r3, #3]
 8008578:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	889b      	ldrh	r3, [r3, #4]
 8008584:	2b40      	cmp	r3, #64	@ 0x40
 8008586:	d956      	bls.n	8008636 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008588:	2303      	movs	r3, #3
 800858a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800858c:	e053      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	78db      	ldrb	r3, [r3, #3]
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	2b01      	cmp	r3, #1
 8008598:	d10e      	bne.n	80085b8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	799b      	ldrb	r3, [r3, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d007      	beq.n	80085b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80085a6:	2b10      	cmp	r3, #16
 80085a8:	d803      	bhi.n	80085b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80085ae:	2b40      	cmp	r3, #64	@ 0x40
 80085b0:	d941      	bls.n	8008636 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085b2:	2303      	movs	r3, #3
 80085b4:	75fb      	strb	r3, [r7, #23]
 80085b6:	e03e      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	78db      	ldrb	r3, [r3, #3]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d10b      	bne.n	80085dc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	799b      	ldrb	r3, [r3, #6]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d004      	beq.n	80085d6 <USBH_ParseEPDesc+0x162>
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	889b      	ldrh	r3, [r3, #4]
 80085d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d4:	d32f      	bcc.n	8008636 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085d6:	2303      	movs	r3, #3
 80085d8:	75fb      	strb	r3, [r7, #23]
 80085da:	e02c      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80085dc:	2303      	movs	r3, #3
 80085de:	75fb      	strb	r3, [r7, #23]
 80085e0:	e029      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d120      	bne.n	800862e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	78db      	ldrb	r3, [r3, #3]
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	889b      	ldrh	r3, [r3, #4]
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d01a      	beq.n	8008636 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008600:	2303      	movs	r3, #3
 8008602:	75fb      	strb	r3, [r7, #23]
 8008604:	e017      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	2b03      	cmp	r3, #3
 8008610:	d10a      	bne.n	8008628 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	799b      	ldrb	r3, [r3, #6]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <USBH_ParseEPDesc+0x1ae>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	889b      	ldrh	r3, [r3, #4]
 800861e:	2b08      	cmp	r3, #8
 8008620:	d909      	bls.n	8008636 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008622:	2303      	movs	r3, #3
 8008624:	75fb      	strb	r3, [r7, #23]
 8008626:	e006      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008628:	2303      	movs	r3, #3
 800862a:	75fb      	strb	r3, [r7, #23]
 800862c:	e003      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800862e:	2303      	movs	r3, #3
 8008630:	75fb      	strb	r3, [r7, #23]
 8008632:	e000      	b.n	8008636 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008634:	bf00      	nop
  }

  return status;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d120      	bne.n	800869e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	1e9a      	subs	r2, r3, #2
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	4293      	cmp	r3, r2
 8008666:	bf28      	it	cs
 8008668:	4613      	movcs	r3, r2
 800866a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3302      	adds	r3, #2
 8008670:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008672:	2300      	movs	r3, #0
 8008674:	82fb      	strh	r3, [r7, #22]
 8008676:	e00b      	b.n	8008690 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008678:	8afb      	ldrh	r3, [r7, #22]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	3301      	adds	r3, #1
 8008688:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800868a:	8afb      	ldrh	r3, [r7, #22]
 800868c:	3302      	adds	r3, #2
 800868e:	82fb      	strh	r3, [r7, #22]
 8008690:	8afa      	ldrh	r2, [r7, #22]
 8008692:	8abb      	ldrh	r3, [r7, #20]
 8008694:	429a      	cmp	r2, r3
 8008696:	d3ef      	bcc.n	8008678 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
  }
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	7812      	ldrb	r2, [r2, #0]
 80086bc:	4413      	add	r3, r2
 80086be:	b29a      	uxth	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4413      	add	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086d0:	68fb      	ldr	r3, [r7, #12]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	4613      	mov	r3, r2
 80086ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	789b      	ldrb	r3, [r3, #2]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d002      	beq.n	80086fe <USBH_CtlReq+0x20>
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d00f      	beq.n	800871c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80086fc:	e027      	b.n	800874e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	88fa      	ldrh	r2, [r7, #6]
 8008708:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2202      	movs	r2, #2
 8008714:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008716:	2301      	movs	r3, #1
 8008718:	75fb      	strb	r3, [r7, #23]
      break;
 800871a:	e018      	b.n	800874e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f81b 	bl	8008758 <USBH_HandleControl>
 8008722:	4603      	mov	r3, r0
 8008724:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <USBH_CtlReq+0x54>
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	2b03      	cmp	r3, #3
 8008730:	d106      	bne.n	8008740 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	761a      	strb	r2, [r3, #24]
      break;
 800873e:	e005      	b.n	800874c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d102      	bne.n	800874c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	709a      	strb	r2, [r3, #2]
      break;
 800874c:	bf00      	nop
  }
  return status;
 800874e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af02      	add	r7, sp, #8
 800875e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008764:	2300      	movs	r3, #0
 8008766:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7e1b      	ldrb	r3, [r3, #24]
 800876c:	3b01      	subs	r3, #1
 800876e:	2b0a      	cmp	r3, #10
 8008770:	f200 8156 	bhi.w	8008a20 <USBH_HandleControl+0x2c8>
 8008774:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <USBH_HandleControl+0x24>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	080087a9 	.word	0x080087a9
 8008780:	080087c3 	.word	0x080087c3
 8008784:	0800882d 	.word	0x0800882d
 8008788:	08008853 	.word	0x08008853
 800878c:	0800888b 	.word	0x0800888b
 8008790:	080088b5 	.word	0x080088b5
 8008794:	08008907 	.word	0x08008907
 8008798:	08008929 	.word	0x08008929
 800879c:	08008965 	.word	0x08008965
 80087a0:	0800898b 	.word	0x0800898b
 80087a4:	080089c9 	.word	0x080089c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f103 0110 	add.w	r1, r3, #16
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	795b      	ldrb	r3, [r3, #5]
 80087b2:	461a      	mov	r2, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f943 	bl	8008a40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2202      	movs	r2, #2
 80087be:	761a      	strb	r2, [r3, #24]
      break;
 80087c0:	e139      	b.n	8008a36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	795b      	ldrb	r3, [r3, #5]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fcc5 	bl	8009158 <USBH_LL_GetURBState>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d11e      	bne.n	8008816 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7c1b      	ldrb	r3, [r3, #16]
 80087dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	8adb      	ldrh	r3, [r3, #22]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087ea:	7b7b      	ldrb	r3, [r7, #13]
 80087ec:	2b80      	cmp	r3, #128	@ 0x80
 80087ee:	d103      	bne.n	80087f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2203      	movs	r2, #3
 80087f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087f6:	e115      	b.n	8008a24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2205      	movs	r2, #5
 80087fc:	761a      	strb	r2, [r3, #24]
      break;
 80087fe:	e111      	b.n	8008a24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008800:	7b7b      	ldrb	r3, [r7, #13]
 8008802:	2b80      	cmp	r3, #128	@ 0x80
 8008804:	d103      	bne.n	800880e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2209      	movs	r2, #9
 800880a:	761a      	strb	r2, [r3, #24]
      break;
 800880c:	e10a      	b.n	8008a24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2207      	movs	r2, #7
 8008812:	761a      	strb	r2, [r3, #24]
      break;
 8008814:	e106      	b.n	8008a24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b04      	cmp	r3, #4
 800881a:	d003      	beq.n	8008824 <USBH_HandleControl+0xcc>
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b02      	cmp	r3, #2
 8008820:	f040 8100 	bne.w	8008a24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	220b      	movs	r2, #11
 8008828:	761a      	strb	r2, [r3, #24]
      break;
 800882a:	e0fb      	b.n	8008a24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6899      	ldr	r1, [r3, #8]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	899a      	ldrh	r2, [r3, #12]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	791b      	ldrb	r3, [r3, #4]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f93a 	bl	8008abe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2204      	movs	r2, #4
 800884e:	761a      	strb	r2, [r3, #24]
      break;
 8008850:	e0f1      	b.n	8008a36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	791b      	ldrb	r3, [r3, #4]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fc7d 	bl	8009158 <USBH_LL_GetURBState>
 800885e:	4603      	mov	r3, r0
 8008860:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d102      	bne.n	800886e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2209      	movs	r2, #9
 800886c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	2b05      	cmp	r3, #5
 8008872:	d102      	bne.n	800887a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008874:	2303      	movs	r3, #3
 8008876:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008878:	e0d6      	b.n	8008a28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	2b04      	cmp	r3, #4
 800887e:	f040 80d3 	bne.w	8008a28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	220b      	movs	r2, #11
 8008886:	761a      	strb	r2, [r3, #24]
      break;
 8008888:	e0ce      	b.n	8008a28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6899      	ldr	r1, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	899a      	ldrh	r2, [r3, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	795b      	ldrb	r3, [r3, #5]
 8008896:	2001      	movs	r0, #1
 8008898:	9000      	str	r0, [sp, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f8ea 	bl	8008a74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2206      	movs	r2, #6
 80088b0:	761a      	strb	r2, [r3, #24]
      break;
 80088b2:	e0c0      	b.n	8008a36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	795b      	ldrb	r3, [r3, #5]
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fc4c 	bl	8009158 <USBH_LL_GetURBState>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d103      	bne.n	80088d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2207      	movs	r2, #7
 80088ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088d0:	e0ac      	b.n	8008a2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	d105      	bne.n	80088e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	220c      	movs	r2, #12
 80088dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088de:	2303      	movs	r3, #3
 80088e0:	73fb      	strb	r3, [r7, #15]
      break;
 80088e2:	e0a3      	b.n	8008a2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d103      	bne.n	80088f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2205      	movs	r2, #5
 80088ee:	761a      	strb	r2, [r3, #24]
      break;
 80088f0:	e09c      	b.n	8008a2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	f040 8099 	bne.w	8008a2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	220b      	movs	r2, #11
 80088fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008900:	2302      	movs	r3, #2
 8008902:	73fb      	strb	r3, [r7, #15]
      break;
 8008904:	e092      	b.n	8008a2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	791b      	ldrb	r3, [r3, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f8d5 	bl	8008abe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2208      	movs	r2, #8
 8008924:	761a      	strb	r2, [r3, #24]

      break;
 8008926:	e086      	b.n	8008a36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	791b      	ldrb	r3, [r3, #4]
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fc12 	bl	8009158 <USBH_LL_GetURBState>
 8008934:	4603      	mov	r3, r0
 8008936:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d105      	bne.n	800894a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	220d      	movs	r2, #13
 8008942:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008948:	e072      	b.n	8008a30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b04      	cmp	r3, #4
 800894e:	d103      	bne.n	8008958 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	220b      	movs	r2, #11
 8008954:	761a      	strb	r2, [r3, #24]
      break;
 8008956:	e06b      	b.n	8008a30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	2b05      	cmp	r3, #5
 800895c:	d168      	bne.n	8008a30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800895e:	2303      	movs	r3, #3
 8008960:	73fb      	strb	r3, [r7, #15]
      break;
 8008962:	e065      	b.n	8008a30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	795b      	ldrb	r3, [r3, #5]
 8008968:	2201      	movs	r2, #1
 800896a:	9200      	str	r2, [sp, #0]
 800896c:	2200      	movs	r2, #0
 800896e:	2100      	movs	r1, #0
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f87f 	bl	8008a74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	220a      	movs	r2, #10
 8008986:	761a      	strb	r2, [r3, #24]
      break;
 8008988:	e055      	b.n	8008a36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	795b      	ldrb	r3, [r3, #5]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fbe1 	bl	8009158 <USBH_LL_GetURBState>
 8008996:	4603      	mov	r3, r0
 8008998:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d105      	bne.n	80089ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220d      	movs	r2, #13
 80089a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089aa:	e043      	b.n	8008a34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d103      	bne.n	80089ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2209      	movs	r2, #9
 80089b6:	761a      	strb	r2, [r3, #24]
      break;
 80089b8:	e03c      	b.n	8008a34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d139      	bne.n	8008a34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	220b      	movs	r2, #11
 80089c4:	761a      	strb	r2, [r3, #24]
      break;
 80089c6:	e035      	b.n	8008a34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	7e5b      	ldrb	r3, [r3, #25]
 80089cc:	3301      	adds	r3, #1
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	765a      	strb	r2, [r3, #25]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7e5b      	ldrb	r3, [r3, #25]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d806      	bhi.n	80089ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089e8:	e025      	b.n	8008a36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089f0:	2106      	movs	r1, #6
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	795b      	ldrb	r3, [r3, #5]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f90c 	bl	8008c20 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	791b      	ldrb	r3, [r3, #4]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f906 	bl	8008c20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1e:	e00a      	b.n	8008a36 <USBH_HandleControl+0x2de>

    default:
      break;
 8008a20:	bf00      	nop
 8008a22:	e008      	b.n	8008a36 <USBH_HandleControl+0x2de>
      break;
 8008a24:	bf00      	nop
 8008a26:	e006      	b.n	8008a36 <USBH_HandleControl+0x2de>
      break;
 8008a28:	bf00      	nop
 8008a2a:	e004      	b.n	8008a36 <USBH_HandleControl+0x2de>
      break;
 8008a2c:	bf00      	nop
 8008a2e:	e002      	b.n	8008a36 <USBH_HandleControl+0x2de>
      break;
 8008a30:	bf00      	nop
 8008a32:	e000      	b.n	8008a36 <USBH_HandleControl+0x2de>
      break;
 8008a34:	bf00      	nop
  }

  return status;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af04      	add	r7, sp, #16
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a4e:	79f9      	ldrb	r1, [r7, #7]
 8008a50:	2300      	movs	r3, #0
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	2308      	movs	r3, #8
 8008a56:	9302      	str	r3, [sp, #8]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fb46 	bl	80090f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af04      	add	r7, sp, #16
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4611      	mov	r1, r2
 8008a80:	461a      	mov	r2, r3
 8008a82:	460b      	mov	r3, r1
 8008a84:	80fb      	strh	r3, [r7, #6]
 8008a86:	4613      	mov	r3, r2
 8008a88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a98:	7979      	ldrb	r1, [r7, #5]
 8008a9a:	7e3b      	ldrb	r3, [r7, #24]
 8008a9c:	9303      	str	r3, [sp, #12]
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	9302      	str	r3, [sp, #8]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2200      	movs	r2, #0
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 fb21 	bl	80090f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b088      	sub	sp, #32
 8008ac2:	af04      	add	r7, sp, #16
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	461a      	mov	r2, r3
 8008acc:	460b      	mov	r3, r1
 8008ace:	80fb      	strh	r3, [r7, #6]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ad4:	7979      	ldrb	r1, [r7, #5]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9303      	str	r3, [sp, #12]
 8008ada:	88fb      	ldrh	r3, [r7, #6]
 8008adc:	9302      	str	r3, [sp, #8]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2201      	movs	r2, #1
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fb03 	bl	80090f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008af0:	2300      	movs	r3, #0

}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b088      	sub	sp, #32
 8008afe:	af04      	add	r7, sp, #16
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	4611      	mov	r1, r2
 8008b06:	461a      	mov	r2, r3
 8008b08:	460b      	mov	r3, r1
 8008b0a:	80fb      	strh	r3, [r7, #6]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b1e:	7979      	ldrb	r1, [r7, #5]
 8008b20:	7e3b      	ldrb	r3, [r7, #24]
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2302      	movs	r3, #2
 8008b32:	2200      	movs	r2, #0
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fade 	bl	80090f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af04      	add	r7, sp, #16
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	460b      	mov	r3, r1
 8008b54:	80fb      	strh	r3, [r7, #6]
 8008b56:	4613      	mov	r3, r2
 8008b58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b5a:	7979      	ldrb	r1, [r7, #5]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9303      	str	r3, [sp, #12]
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	9302      	str	r3, [sp, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	2201      	movs	r2, #1
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 fac0 	bl	80090f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af04      	add	r7, sp, #16
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	70fb      	strb	r3, [r7, #3]
 8008b92:	460b      	mov	r3, r1
 8008b94:	70bb      	strb	r3, [r7, #2]
 8008b96:	4613      	mov	r3, r2
 8008b98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b9a:	7878      	ldrb	r0, [r7, #1]
 8008b9c:	78ba      	ldrb	r2, [r7, #2]
 8008b9e:	78f9      	ldrb	r1, [r7, #3]
 8008ba0:	8b3b      	ldrh	r3, [r7, #24]
 8008ba2:	9302      	str	r3, [sp, #8]
 8008ba4:	7d3b      	ldrb	r3, [r7, #20]
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	7c3b      	ldrb	r3, [r7, #16]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	4603      	mov	r3, r0
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa53 	bl	800905a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa72 	bl	80090b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f836 	bl	8008c5c <USBH_GetFreePipe>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00a      	beq.n	8008c14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	89fb      	ldrh	r3, [r7, #14]
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	33e0      	adds	r3, #224	@ 0xe0
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	440b      	add	r3, r1
 8008c12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	b2db      	uxtb	r3, r3
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	2b0f      	cmp	r3, #15
 8008c30:	d80d      	bhi.n	8008c4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	33e0      	adds	r3, #224	@ 0xe0
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	33e0      	adds	r3, #224	@ 0xe0
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]
 8008c6c:	e00f      	b.n	8008c8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	33e0      	adds	r3, #224	@ 0xe0
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	e007      	b.n	8008c98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	2b0f      	cmp	r3, #15
 8008c92:	d9ec      	bls.n	8008c6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ca8:	2201      	movs	r2, #1
 8008caa:	490e      	ldr	r1, [pc, #56]	@ (8008ce4 <MX_USB_HOST_Init+0x40>)
 8008cac:	480e      	ldr	r0, [pc, #56]	@ (8008ce8 <MX_USB_HOST_Init+0x44>)
 8008cae:	f7fe fb15 	bl	80072dc <USBH_Init>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008cb8:	f7f7 fe88 	bl	80009cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008cbc:	490b      	ldr	r1, [pc, #44]	@ (8008cec <MX_USB_HOST_Init+0x48>)
 8008cbe:	480a      	ldr	r0, [pc, #40]	@ (8008ce8 <MX_USB_HOST_Init+0x44>)
 8008cc0:	f7fe fbb9 	bl	8007436 <USBH_RegisterClass>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cca:	f7f7 fe7f 	bl	80009cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008cce:	4806      	ldr	r0, [pc, #24]	@ (8008ce8 <MX_USB_HOST_Init+0x44>)
 8008cd0:	f7fe fc3d 	bl	800754e <USBH_Start>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008cda:	f7f7 fe77 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008cde:	bf00      	nop
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	08008d05 	.word	0x08008d05
 8008ce8:	200001a0 	.word	0x200001a0
 8008cec:	2000000c 	.word	0x2000000c

08008cf0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008cf4:	4802      	ldr	r0, [pc, #8]	@ (8008d00 <MX_USB_HOST_Process+0x10>)
 8008cf6:	f7fe fc3b 	bl	8007570 <USBH_Process>
}
 8008cfa:	bf00      	nop
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	200001a0 	.word	0x200001a0

08008d04 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d819      	bhi.n	8008d4c <USBH_UserProcess+0x48>
 8008d18:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <USBH_UserProcess+0x1c>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d4d 	.word	0x08008d4d
 8008d24:	08008d3d 	.word	0x08008d3d
 8008d28:	08008d4d 	.word	0x08008d4d
 8008d2c:	08008d45 	.word	0x08008d45
 8008d30:	08008d35 	.word	0x08008d35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d34:	4b09      	ldr	r3, [pc, #36]	@ (8008d5c <USBH_UserProcess+0x58>)
 8008d36:	2203      	movs	r2, #3
 8008d38:	701a      	strb	r2, [r3, #0]
  break;
 8008d3a:	e008      	b.n	8008d4e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d3c:	4b07      	ldr	r3, [pc, #28]	@ (8008d5c <USBH_UserProcess+0x58>)
 8008d3e:	2202      	movs	r2, #2
 8008d40:	701a      	strb	r2, [r3, #0]
  break;
 8008d42:	e004      	b.n	8008d4e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d44:	4b05      	ldr	r3, [pc, #20]	@ (8008d5c <USBH_UserProcess+0x58>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	701a      	strb	r2, [r3, #0]
  break;
 8008d4a:	e000      	b.n	8008d4e <USBH_UserProcess+0x4a>

  default:
  break;
 8008d4c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000578 	.word	0x20000578

08008d60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08a      	sub	sp, #40	@ 0x28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	609a      	str	r2, [r3, #8]
 8008d74:	60da      	str	r2, [r3, #12]
 8008d76:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d80:	d147      	bne.n	8008e12 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d82:	2300      	movs	r3, #0
 8008d84:	613b      	str	r3, [r7, #16]
 8008d86:	4b25      	ldr	r3, [pc, #148]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8a:	4a24      	ldr	r2, [pc, #144]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008d8c:	f043 0301 	orr.w	r3, r3, #1
 8008d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d92:	4b22      	ldr	r3, [pc, #136]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008da4:	2300      	movs	r3, #0
 8008da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da8:	2300      	movs	r3, #0
 8008daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008dac:	f107 0314 	add.w	r3, r7, #20
 8008db0:	4619      	mov	r1, r3
 8008db2:	481b      	ldr	r0, [pc, #108]	@ (8008e20 <HAL_HCD_MspInit+0xc0>)
 8008db4:	f7f8 f9ee 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008db8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008dca:	230a      	movs	r3, #10
 8008dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dce:	f107 0314 	add.w	r3, r7, #20
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4812      	ldr	r0, [pc, #72]	@ (8008e20 <HAL_HCD_MspInit+0xc0>)
 8008dd6:	f7f8 f9dd 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dda:	4b10      	ldr	r3, [pc, #64]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dde:	4a0f      	ldr	r2, [pc, #60]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de4:	6353      	str	r3, [r2, #52]	@ 0x34
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	4b0c      	ldr	r3, [pc, #48]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dee:	4a0b      	ldr	r2, [pc, #44]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8008df6:	4b09      	ldr	r3, [pc, #36]	@ (8008e1c <HAL_HCD_MspInit+0xbc>)
 8008df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	2043      	movs	r0, #67	@ 0x43
 8008e08:	f7f8 f98d 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e0c:	2043      	movs	r0, #67	@ 0x43
 8008e0e:	f7f8 f9a6 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e12:	bf00      	nop
 8008e14:	3728      	adds	r7, #40	@ 0x28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	40023800 	.word	0x40023800
 8008e20:	40020000 	.word	0x40020000

08008e24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe ff73 	bl	8007d1e <USBH_LL_IncTimer>
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe ffab 	bl	8007daa <USBH_LL_Connect>
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe ffb4 	bl	8007dd8 <USBH_LL_Disconnect>
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
 8008e84:	4613      	mov	r3, r2
 8008e86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe ff65 	bl	8007d72 <USBH_LL_PortEnabled>
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe ff65 	bl	8007d8e <USBH_LL_PortDisabled>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d12a      	bne.n	8008f34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ede:	4a18      	ldr	r2, [pc, #96]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a15      	ldr	r2, [pc, #84]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008eea:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008eee:	4b14      	ldr	r3, [pc, #80]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008ef0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ef4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008ef6:	4b12      	ldr	r3, [pc, #72]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008ef8:	2208      	movs	r2, #8
 8008efa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008efc:	4b10      	ldr	r3, [pc, #64]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f02:	4b0f      	ldr	r3, [pc, #60]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f08:	4b0d      	ldr	r3, [pc, #52]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f14:	480a      	ldr	r0, [pc, #40]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008f16:	f7f8 faf2 	bl	80014fe <HAL_HCD_Init>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f20:	f7f7 fd54 	bl	80009cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f24:	4806      	ldr	r0, [pc, #24]	@ (8008f40 <USBH_LL_Init+0x74>)
 8008f26:	f7f8 ff53 	bl	8001dd0 <HAL_HCD_GetCurrentFrame>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7fe fee6 	bl	8007d00 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	2000057c 	.word	0x2000057c

08008f44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7f8 fec0 	bl	8001ce0 <HAL_HCD_Start>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f95e 	bl	8009228 <USBH_Get_USB_Status>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7f8 fec8 	bl	8001d26 <HAL_HCD_Stop>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 f943 	bl	8009228 <USBH_Get_USB_Status>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7f8 ff12 	bl	8001dec <HAL_HCD_GetCurrentSpeed>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d00c      	beq.n	8008fe8 <USBH_LL_GetSpeed+0x38>
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d80d      	bhi.n	8008fee <USBH_LL_GetSpeed+0x3e>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <USBH_LL_GetSpeed+0x2c>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d003      	beq.n	8008fe2 <USBH_LL_GetSpeed+0x32>
 8008fda:	e008      	b.n	8008fee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe0:	e008      	b.n	8008ff4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe6:	e005      	b.n	8008ff4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	73fb      	strb	r3, [r7, #15]
    break;
 8008fec:	e002      	b.n	8008ff4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff2:	bf00      	nop
  }
  return  speed;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009014:	4618      	mov	r0, r3
 8009016:	f7f8 fea3 	bl	8001d60 <HAL_HCD_ResetPort>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	4618      	mov	r0, r3
 8009022:	f000 f901 	bl	8009228 <USBH_Get_USB_Status>
 8009026:	4603      	mov	r3, r0
 8009028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800902a:	7bbb      	ldrb	r3, [r7, #14]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f7f8 feab 	bl	8001da6 <HAL_HCD_HC_GetXferCount>
 8009050:	4603      	mov	r3, r0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800905a:	b590      	push	{r4, r7, lr}
 800905c:	b089      	sub	sp, #36	@ 0x24
 800905e:	af04      	add	r7, sp, #16
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	4608      	mov	r0, r1
 8009064:	4611      	mov	r1, r2
 8009066:	461a      	mov	r2, r3
 8009068:	4603      	mov	r3, r0
 800906a:	70fb      	strb	r3, [r7, #3]
 800906c:	460b      	mov	r3, r1
 800906e:	70bb      	strb	r3, [r7, #2]
 8009070:	4613      	mov	r3, r2
 8009072:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009082:	787c      	ldrb	r4, [r7, #1]
 8009084:	78ba      	ldrb	r2, [r7, #2]
 8009086:	78f9      	ldrb	r1, [r7, #3]
 8009088:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800908a:	9302      	str	r3, [sp, #8]
 800908c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	4623      	mov	r3, r4
 800909a:	f7f8 fa97 	bl	80015cc <HAL_HCD_HC_Init>
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f8bf 	bl	8009228 <USBH_Get_USB_Status>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd90      	pop	{r4, r7, pc}

080090b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7f8 fb30 	bl	800173c <HAL_HCD_HC_Halt>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f8a0 	bl	8009228 <USBH_Get_USB_Status>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80090f6:	b590      	push	{r4, r7, lr}
 80090f8:	b089      	sub	sp, #36	@ 0x24
 80090fa:	af04      	add	r7, sp, #16
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	4608      	mov	r0, r1
 8009100:	4611      	mov	r1, r2
 8009102:	461a      	mov	r2, r3
 8009104:	4603      	mov	r3, r0
 8009106:	70fb      	strb	r3, [r7, #3]
 8009108:	460b      	mov	r3, r1
 800910a:	70bb      	strb	r3, [r7, #2]
 800910c:	4613      	mov	r3, r2
 800910e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800911e:	787c      	ldrb	r4, [r7, #1]
 8009120:	78ba      	ldrb	r2, [r7, #2]
 8009122:	78f9      	ldrb	r1, [r7, #3]
 8009124:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800912c:	9302      	str	r3, [sp, #8]
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	4623      	mov	r3, r4
 800913a:	f7f8 fb23 	bl	8001784 <HAL_HCD_HC_SubmitRequest>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 f86f 	bl	8009228 <USBH_Get_USB_Status>
 800914a:	4603      	mov	r3, r0
 800914c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800914e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	bd90      	pop	{r4, r7, pc}

08009158 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800916a:	78fa      	ldrb	r2, [r7, #3]
 800916c:	4611      	mov	r1, r2
 800916e:	4618      	mov	r0, r3
 8009170:	f7f8 fe04 	bl	8001d7c <HAL_HCD_HC_GetURBState>
 8009174:	4603      	mov	r3, r0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009190:	2b01      	cmp	r3, #1
 8009192:	d103      	bne.n	800919c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 f872 	bl	8009280 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800919c:	20c8      	movs	r0, #200	@ 0xc8
 800919e:	f7f7 fec3 	bl	8000f28 <HAL_Delay>
  return USBH_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
 80091b8:	4613      	mov	r3, r2
 80091ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	68f9      	ldr	r1, [r7, #12]
 80091c8:	4613      	mov	r3, r2
 80091ca:	011b      	lsls	r3, r3, #4
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	440b      	add	r3, r1
 80091d2:	3317      	adds	r3, #23
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	4613      	mov	r3, r2
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	333c      	adds	r3, #60	@ 0x3c
 80091ea:	78ba      	ldrb	r2, [r7, #2]
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	e009      	b.n	8009204 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80091f0:	78fa      	ldrb	r2, [r7, #3]
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	4613      	mov	r3, r2
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	1a9b      	subs	r3, r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	440b      	add	r3, r1
 80091fe:	333d      	adds	r3, #61	@ 0x3d
 8009200:	78ba      	ldrb	r2, [r7, #2]
 8009202:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7f7 fe84 	bl	8000f28 <HAL_Delay>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b03      	cmp	r3, #3
 800923a:	d817      	bhi.n	800926c <USBH_Get_USB_Status+0x44>
 800923c:	a201      	add	r2, pc, #4	@ (adr r2, 8009244 <USBH_Get_USB_Status+0x1c>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	08009255 	.word	0x08009255
 8009248:	0800925b 	.word	0x0800925b
 800924c:	08009261 	.word	0x08009261
 8009250:	08009267 	.word	0x08009267
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
    break;
 8009258:	e00b      	b.n	8009272 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	73fb      	strb	r3, [r7, #15]
    break;
 800925e:	e008      	b.n	8009272 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009260:	2301      	movs	r3, #1
 8009262:	73fb      	strb	r3, [r7, #15]
    break;
 8009264:	e005      	b.n	8009272 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009266:	2302      	movs	r3, #2
 8009268:	73fb      	strb	r3, [r7, #15]
    break;
 800926a:	e002      	b.n	8009272 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800926c:	2302      	movs	r3, #2
 800926e:	73fb      	strb	r3, [r7, #15]
    break;
 8009270:	bf00      	nop
  }
  return usb_status;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800928a:	79fb      	ldrb	r3, [r7, #7]
 800928c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d102      	bne.n	800929a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	e001      	b.n	800929e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800929a:	2301      	movs	r3, #1
 800929c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	461a      	mov	r2, r3
 80092a2:	2101      	movs	r1, #1
 80092a4:	4803      	ldr	r0, [pc, #12]	@ (80092b4 <MX_DriverVbusFS+0x34>)
 80092a6:	f7f8 f911 	bl	80014cc <HAL_GPIO_WritePin>
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	40020800 	.word	0x40020800

080092b8 <malloc>:
 80092b8:	4b02      	ldr	r3, [pc, #8]	@ (80092c4 <malloc+0xc>)
 80092ba:	4601      	mov	r1, r0
 80092bc:	6818      	ldr	r0, [r3, #0]
 80092be:	f000 b82d 	b.w	800931c <_malloc_r>
 80092c2:	bf00      	nop
 80092c4:	20000038 	.word	0x20000038

080092c8 <free>:
 80092c8:	4b02      	ldr	r3, [pc, #8]	@ (80092d4 <free+0xc>)
 80092ca:	4601      	mov	r1, r0
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	f000 bb35 	b.w	800993c <_free_r>
 80092d2:	bf00      	nop
 80092d4:	20000038 	.word	0x20000038

080092d8 <sbrk_aligned>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	4e0f      	ldr	r6, [pc, #60]	@ (8009318 <sbrk_aligned+0x40>)
 80092dc:	460c      	mov	r4, r1
 80092de:	6831      	ldr	r1, [r6, #0]
 80092e0:	4605      	mov	r5, r0
 80092e2:	b911      	cbnz	r1, 80092ea <sbrk_aligned+0x12>
 80092e4:	f000 fada 	bl	800989c <_sbrk_r>
 80092e8:	6030      	str	r0, [r6, #0]
 80092ea:	4621      	mov	r1, r4
 80092ec:	4628      	mov	r0, r5
 80092ee:	f000 fad5 	bl	800989c <_sbrk_r>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d103      	bne.n	80092fe <sbrk_aligned+0x26>
 80092f6:	f04f 34ff 	mov.w	r4, #4294967295
 80092fa:	4620      	mov	r0, r4
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	1cc4      	adds	r4, r0, #3
 8009300:	f024 0403 	bic.w	r4, r4, #3
 8009304:	42a0      	cmp	r0, r4
 8009306:	d0f8      	beq.n	80092fa <sbrk_aligned+0x22>
 8009308:	1a21      	subs	r1, r4, r0
 800930a:	4628      	mov	r0, r5
 800930c:	f000 fac6 	bl	800989c <_sbrk_r>
 8009310:	3001      	adds	r0, #1
 8009312:	d1f2      	bne.n	80092fa <sbrk_aligned+0x22>
 8009314:	e7ef      	b.n	80092f6 <sbrk_aligned+0x1e>
 8009316:	bf00      	nop
 8009318:	2000095c 	.word	0x2000095c

0800931c <_malloc_r>:
 800931c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009320:	1ccd      	adds	r5, r1, #3
 8009322:	f025 0503 	bic.w	r5, r5, #3
 8009326:	3508      	adds	r5, #8
 8009328:	2d0c      	cmp	r5, #12
 800932a:	bf38      	it	cc
 800932c:	250c      	movcc	r5, #12
 800932e:	2d00      	cmp	r5, #0
 8009330:	4606      	mov	r6, r0
 8009332:	db01      	blt.n	8009338 <_malloc_r+0x1c>
 8009334:	42a9      	cmp	r1, r5
 8009336:	d904      	bls.n	8009342 <_malloc_r+0x26>
 8009338:	230c      	movs	r3, #12
 800933a:	6033      	str	r3, [r6, #0]
 800933c:	2000      	movs	r0, #0
 800933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009418 <_malloc_r+0xfc>
 8009346:	f000 f869 	bl	800941c <__malloc_lock>
 800934a:	f8d8 3000 	ldr.w	r3, [r8]
 800934e:	461c      	mov	r4, r3
 8009350:	bb44      	cbnz	r4, 80093a4 <_malloc_r+0x88>
 8009352:	4629      	mov	r1, r5
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff ffbf 	bl	80092d8 <sbrk_aligned>
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	4604      	mov	r4, r0
 800935e:	d158      	bne.n	8009412 <_malloc_r+0xf6>
 8009360:	f8d8 4000 	ldr.w	r4, [r8]
 8009364:	4627      	mov	r7, r4
 8009366:	2f00      	cmp	r7, #0
 8009368:	d143      	bne.n	80093f2 <_malloc_r+0xd6>
 800936a:	2c00      	cmp	r4, #0
 800936c:	d04b      	beq.n	8009406 <_malloc_r+0xea>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	4639      	mov	r1, r7
 8009372:	4630      	mov	r0, r6
 8009374:	eb04 0903 	add.w	r9, r4, r3
 8009378:	f000 fa90 	bl	800989c <_sbrk_r>
 800937c:	4581      	cmp	r9, r0
 800937e:	d142      	bne.n	8009406 <_malloc_r+0xea>
 8009380:	6821      	ldr	r1, [r4, #0]
 8009382:	1a6d      	subs	r5, r5, r1
 8009384:	4629      	mov	r1, r5
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ffa6 	bl	80092d8 <sbrk_aligned>
 800938c:	3001      	adds	r0, #1
 800938e:	d03a      	beq.n	8009406 <_malloc_r+0xea>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	442b      	add	r3, r5
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	f8d8 3000 	ldr.w	r3, [r8]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	bb62      	cbnz	r2, 80093f8 <_malloc_r+0xdc>
 800939e:	f8c8 7000 	str.w	r7, [r8]
 80093a2:	e00f      	b.n	80093c4 <_malloc_r+0xa8>
 80093a4:	6822      	ldr	r2, [r4, #0]
 80093a6:	1b52      	subs	r2, r2, r5
 80093a8:	d420      	bmi.n	80093ec <_malloc_r+0xd0>
 80093aa:	2a0b      	cmp	r2, #11
 80093ac:	d917      	bls.n	80093de <_malloc_r+0xc2>
 80093ae:	1961      	adds	r1, r4, r5
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	6025      	str	r5, [r4, #0]
 80093b4:	bf18      	it	ne
 80093b6:	6059      	strne	r1, [r3, #4]
 80093b8:	6863      	ldr	r3, [r4, #4]
 80093ba:	bf08      	it	eq
 80093bc:	f8c8 1000 	streq.w	r1, [r8]
 80093c0:	5162      	str	r2, [r4, r5]
 80093c2:	604b      	str	r3, [r1, #4]
 80093c4:	4630      	mov	r0, r6
 80093c6:	f000 f82f 	bl	8009428 <__malloc_unlock>
 80093ca:	f104 000b 	add.w	r0, r4, #11
 80093ce:	1d23      	adds	r3, r4, #4
 80093d0:	f020 0007 	bic.w	r0, r0, #7
 80093d4:	1ac2      	subs	r2, r0, r3
 80093d6:	bf1c      	itt	ne
 80093d8:	1a1b      	subne	r3, r3, r0
 80093da:	50a3      	strne	r3, [r4, r2]
 80093dc:	e7af      	b.n	800933e <_malloc_r+0x22>
 80093de:	6862      	ldr	r2, [r4, #4]
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	bf0c      	ite	eq
 80093e4:	f8c8 2000 	streq.w	r2, [r8]
 80093e8:	605a      	strne	r2, [r3, #4]
 80093ea:	e7eb      	b.n	80093c4 <_malloc_r+0xa8>
 80093ec:	4623      	mov	r3, r4
 80093ee:	6864      	ldr	r4, [r4, #4]
 80093f0:	e7ae      	b.n	8009350 <_malloc_r+0x34>
 80093f2:	463c      	mov	r4, r7
 80093f4:	687f      	ldr	r7, [r7, #4]
 80093f6:	e7b6      	b.n	8009366 <_malloc_r+0x4a>
 80093f8:	461a      	mov	r2, r3
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d1fb      	bne.n	80093f8 <_malloc_r+0xdc>
 8009400:	2300      	movs	r3, #0
 8009402:	6053      	str	r3, [r2, #4]
 8009404:	e7de      	b.n	80093c4 <_malloc_r+0xa8>
 8009406:	230c      	movs	r3, #12
 8009408:	6033      	str	r3, [r6, #0]
 800940a:	4630      	mov	r0, r6
 800940c:	f000 f80c 	bl	8009428 <__malloc_unlock>
 8009410:	e794      	b.n	800933c <_malloc_r+0x20>
 8009412:	6005      	str	r5, [r0, #0]
 8009414:	e7d6      	b.n	80093c4 <_malloc_r+0xa8>
 8009416:	bf00      	nop
 8009418:	20000960 	.word	0x20000960

0800941c <__malloc_lock>:
 800941c:	4801      	ldr	r0, [pc, #4]	@ (8009424 <__malloc_lock+0x8>)
 800941e:	f000 ba8a 	b.w	8009936 <__retarget_lock_acquire_recursive>
 8009422:	bf00      	nop
 8009424:	20000aa4 	.word	0x20000aa4

08009428 <__malloc_unlock>:
 8009428:	4801      	ldr	r0, [pc, #4]	@ (8009430 <__malloc_unlock+0x8>)
 800942a:	f000 ba85 	b.w	8009938 <__retarget_lock_release_recursive>
 800942e:	bf00      	nop
 8009430:	20000aa4 	.word	0x20000aa4

08009434 <std>:
 8009434:	2300      	movs	r3, #0
 8009436:	b510      	push	{r4, lr}
 8009438:	4604      	mov	r4, r0
 800943a:	e9c0 3300 	strd	r3, r3, [r0]
 800943e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009442:	6083      	str	r3, [r0, #8]
 8009444:	8181      	strh	r1, [r0, #12]
 8009446:	6643      	str	r3, [r0, #100]	@ 0x64
 8009448:	81c2      	strh	r2, [r0, #14]
 800944a:	6183      	str	r3, [r0, #24]
 800944c:	4619      	mov	r1, r3
 800944e:	2208      	movs	r2, #8
 8009450:	305c      	adds	r0, #92	@ 0x5c
 8009452:	f000 f9e7 	bl	8009824 <memset>
 8009456:	4b0d      	ldr	r3, [pc, #52]	@ (800948c <std+0x58>)
 8009458:	6263      	str	r3, [r4, #36]	@ 0x24
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <std+0x5c>)
 800945c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800945e:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <std+0x60>)
 8009460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009462:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <std+0x64>)
 8009464:	6323      	str	r3, [r4, #48]	@ 0x30
 8009466:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <std+0x68>)
 8009468:	6224      	str	r4, [r4, #32]
 800946a:	429c      	cmp	r4, r3
 800946c:	d006      	beq.n	800947c <std+0x48>
 800946e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009472:	4294      	cmp	r4, r2
 8009474:	d002      	beq.n	800947c <std+0x48>
 8009476:	33d0      	adds	r3, #208	@ 0xd0
 8009478:	429c      	cmp	r4, r3
 800947a:	d105      	bne.n	8009488 <std+0x54>
 800947c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009484:	f000 ba56 	b.w	8009934 <__retarget_lock_init_recursive>
 8009488:	bd10      	pop	{r4, pc}
 800948a:	bf00      	nop
 800948c:	08009675 	.word	0x08009675
 8009490:	08009697 	.word	0x08009697
 8009494:	080096cf 	.word	0x080096cf
 8009498:	080096f3 	.word	0x080096f3
 800949c:	20000964 	.word	0x20000964

080094a0 <stdio_exit_handler>:
 80094a0:	4a02      	ldr	r2, [pc, #8]	@ (80094ac <stdio_exit_handler+0xc>)
 80094a2:	4903      	ldr	r1, [pc, #12]	@ (80094b0 <stdio_exit_handler+0x10>)
 80094a4:	4803      	ldr	r0, [pc, #12]	@ (80094b4 <stdio_exit_handler+0x14>)
 80094a6:	f000 b869 	b.w	800957c <_fwalk_sglue>
 80094aa:	bf00      	nop
 80094ac:	2000002c 	.word	0x2000002c
 80094b0:	08009ad9 	.word	0x08009ad9
 80094b4:	2000003c 	.word	0x2000003c

080094b8 <cleanup_stdio>:
 80094b8:	6841      	ldr	r1, [r0, #4]
 80094ba:	4b0c      	ldr	r3, [pc, #48]	@ (80094ec <cleanup_stdio+0x34>)
 80094bc:	4299      	cmp	r1, r3
 80094be:	b510      	push	{r4, lr}
 80094c0:	4604      	mov	r4, r0
 80094c2:	d001      	beq.n	80094c8 <cleanup_stdio+0x10>
 80094c4:	f000 fb08 	bl	8009ad8 <_fflush_r>
 80094c8:	68a1      	ldr	r1, [r4, #8]
 80094ca:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <cleanup_stdio+0x38>)
 80094cc:	4299      	cmp	r1, r3
 80094ce:	d002      	beq.n	80094d6 <cleanup_stdio+0x1e>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fb01 	bl	8009ad8 <_fflush_r>
 80094d6:	68e1      	ldr	r1, [r4, #12]
 80094d8:	4b06      	ldr	r3, [pc, #24]	@ (80094f4 <cleanup_stdio+0x3c>)
 80094da:	4299      	cmp	r1, r3
 80094dc:	d004      	beq.n	80094e8 <cleanup_stdio+0x30>
 80094de:	4620      	mov	r0, r4
 80094e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e4:	f000 baf8 	b.w	8009ad8 <_fflush_r>
 80094e8:	bd10      	pop	{r4, pc}
 80094ea:	bf00      	nop
 80094ec:	20000964 	.word	0x20000964
 80094f0:	200009cc 	.word	0x200009cc
 80094f4:	20000a34 	.word	0x20000a34

080094f8 <global_stdio_init.part.0>:
 80094f8:	b510      	push	{r4, lr}
 80094fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009528 <global_stdio_init.part.0+0x30>)
 80094fc:	4c0b      	ldr	r4, [pc, #44]	@ (800952c <global_stdio_init.part.0+0x34>)
 80094fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009530 <global_stdio_init.part.0+0x38>)
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	4620      	mov	r0, r4
 8009504:	2200      	movs	r2, #0
 8009506:	2104      	movs	r1, #4
 8009508:	f7ff ff94 	bl	8009434 <std>
 800950c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009510:	2201      	movs	r2, #1
 8009512:	2109      	movs	r1, #9
 8009514:	f7ff ff8e 	bl	8009434 <std>
 8009518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800951c:	2202      	movs	r2, #2
 800951e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009522:	2112      	movs	r1, #18
 8009524:	f7ff bf86 	b.w	8009434 <std>
 8009528:	20000a9c 	.word	0x20000a9c
 800952c:	20000964 	.word	0x20000964
 8009530:	080094a1 	.word	0x080094a1

08009534 <__sfp_lock_acquire>:
 8009534:	4801      	ldr	r0, [pc, #4]	@ (800953c <__sfp_lock_acquire+0x8>)
 8009536:	f000 b9fe 	b.w	8009936 <__retarget_lock_acquire_recursive>
 800953a:	bf00      	nop
 800953c:	20000aa5 	.word	0x20000aa5

08009540 <__sfp_lock_release>:
 8009540:	4801      	ldr	r0, [pc, #4]	@ (8009548 <__sfp_lock_release+0x8>)
 8009542:	f000 b9f9 	b.w	8009938 <__retarget_lock_release_recursive>
 8009546:	bf00      	nop
 8009548:	20000aa5 	.word	0x20000aa5

0800954c <__sinit>:
 800954c:	b510      	push	{r4, lr}
 800954e:	4604      	mov	r4, r0
 8009550:	f7ff fff0 	bl	8009534 <__sfp_lock_acquire>
 8009554:	6a23      	ldr	r3, [r4, #32]
 8009556:	b11b      	cbz	r3, 8009560 <__sinit+0x14>
 8009558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955c:	f7ff bff0 	b.w	8009540 <__sfp_lock_release>
 8009560:	4b04      	ldr	r3, [pc, #16]	@ (8009574 <__sinit+0x28>)
 8009562:	6223      	str	r3, [r4, #32]
 8009564:	4b04      	ldr	r3, [pc, #16]	@ (8009578 <__sinit+0x2c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f5      	bne.n	8009558 <__sinit+0xc>
 800956c:	f7ff ffc4 	bl	80094f8 <global_stdio_init.part.0>
 8009570:	e7f2      	b.n	8009558 <__sinit+0xc>
 8009572:	bf00      	nop
 8009574:	080094b9 	.word	0x080094b9
 8009578:	20000a9c 	.word	0x20000a9c

0800957c <_fwalk_sglue>:
 800957c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009580:	4607      	mov	r7, r0
 8009582:	4688      	mov	r8, r1
 8009584:	4614      	mov	r4, r2
 8009586:	2600      	movs	r6, #0
 8009588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800958c:	f1b9 0901 	subs.w	r9, r9, #1
 8009590:	d505      	bpl.n	800959e <_fwalk_sglue+0x22>
 8009592:	6824      	ldr	r4, [r4, #0]
 8009594:	2c00      	cmp	r4, #0
 8009596:	d1f7      	bne.n	8009588 <_fwalk_sglue+0xc>
 8009598:	4630      	mov	r0, r6
 800959a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d907      	bls.n	80095b4 <_fwalk_sglue+0x38>
 80095a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095a8:	3301      	adds	r3, #1
 80095aa:	d003      	beq.n	80095b4 <_fwalk_sglue+0x38>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4638      	mov	r0, r7
 80095b0:	47c0      	blx	r8
 80095b2:	4306      	orrs	r6, r0
 80095b4:	3568      	adds	r5, #104	@ 0x68
 80095b6:	e7e9      	b.n	800958c <_fwalk_sglue+0x10>

080095b8 <_puts_r>:
 80095b8:	6a03      	ldr	r3, [r0, #32]
 80095ba:	b570      	push	{r4, r5, r6, lr}
 80095bc:	6884      	ldr	r4, [r0, #8]
 80095be:	4605      	mov	r5, r0
 80095c0:	460e      	mov	r6, r1
 80095c2:	b90b      	cbnz	r3, 80095c8 <_puts_r+0x10>
 80095c4:	f7ff ffc2 	bl	800954c <__sinit>
 80095c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095ca:	07db      	lsls	r3, r3, #31
 80095cc:	d405      	bmi.n	80095da <_puts_r+0x22>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	0598      	lsls	r0, r3, #22
 80095d2:	d402      	bmi.n	80095da <_puts_r+0x22>
 80095d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095d6:	f000 f9ae 	bl	8009936 <__retarget_lock_acquire_recursive>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	0719      	lsls	r1, r3, #28
 80095de:	d502      	bpl.n	80095e6 <_puts_r+0x2e>
 80095e0:	6923      	ldr	r3, [r4, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d135      	bne.n	8009652 <_puts_r+0x9a>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4628      	mov	r0, r5
 80095ea:	f000 f8c5 	bl	8009778 <__swsetup_r>
 80095ee:	b380      	cbz	r0, 8009652 <_puts_r+0x9a>
 80095f0:	f04f 35ff 	mov.w	r5, #4294967295
 80095f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095f6:	07da      	lsls	r2, r3, #31
 80095f8:	d405      	bmi.n	8009606 <_puts_r+0x4e>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	059b      	lsls	r3, r3, #22
 80095fe:	d402      	bmi.n	8009606 <_puts_r+0x4e>
 8009600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009602:	f000 f999 	bl	8009938 <__retarget_lock_release_recursive>
 8009606:	4628      	mov	r0, r5
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	2b00      	cmp	r3, #0
 800960c:	da04      	bge.n	8009618 <_puts_r+0x60>
 800960e:	69a2      	ldr	r2, [r4, #24]
 8009610:	429a      	cmp	r2, r3
 8009612:	dc17      	bgt.n	8009644 <_puts_r+0x8c>
 8009614:	290a      	cmp	r1, #10
 8009616:	d015      	beq.n	8009644 <_puts_r+0x8c>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	6022      	str	r2, [r4, #0]
 800961e:	7019      	strb	r1, [r3, #0]
 8009620:	68a3      	ldr	r3, [r4, #8]
 8009622:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009626:	3b01      	subs	r3, #1
 8009628:	60a3      	str	r3, [r4, #8]
 800962a:	2900      	cmp	r1, #0
 800962c:	d1ed      	bne.n	800960a <_puts_r+0x52>
 800962e:	2b00      	cmp	r3, #0
 8009630:	da11      	bge.n	8009656 <_puts_r+0x9e>
 8009632:	4622      	mov	r2, r4
 8009634:	210a      	movs	r1, #10
 8009636:	4628      	mov	r0, r5
 8009638:	f000 f85f 	bl	80096fa <__swbuf_r>
 800963c:	3001      	adds	r0, #1
 800963e:	d0d7      	beq.n	80095f0 <_puts_r+0x38>
 8009640:	250a      	movs	r5, #10
 8009642:	e7d7      	b.n	80095f4 <_puts_r+0x3c>
 8009644:	4622      	mov	r2, r4
 8009646:	4628      	mov	r0, r5
 8009648:	f000 f857 	bl	80096fa <__swbuf_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d1e7      	bne.n	8009620 <_puts_r+0x68>
 8009650:	e7ce      	b.n	80095f0 <_puts_r+0x38>
 8009652:	3e01      	subs	r6, #1
 8009654:	e7e4      	b.n	8009620 <_puts_r+0x68>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	6022      	str	r2, [r4, #0]
 800965c:	220a      	movs	r2, #10
 800965e:	701a      	strb	r2, [r3, #0]
 8009660:	e7ee      	b.n	8009640 <_puts_r+0x88>
	...

08009664 <puts>:
 8009664:	4b02      	ldr	r3, [pc, #8]	@ (8009670 <puts+0xc>)
 8009666:	4601      	mov	r1, r0
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f7ff bfa5 	b.w	80095b8 <_puts_r>
 800966e:	bf00      	nop
 8009670:	20000038 	.word	0x20000038

08009674 <__sread>:
 8009674:	b510      	push	{r4, lr}
 8009676:	460c      	mov	r4, r1
 8009678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967c:	f000 f8fc 	bl	8009878 <_read_r>
 8009680:	2800      	cmp	r0, #0
 8009682:	bfab      	itete	ge
 8009684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009686:	89a3      	ldrhlt	r3, [r4, #12]
 8009688:	181b      	addge	r3, r3, r0
 800968a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800968e:	bfac      	ite	ge
 8009690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009692:	81a3      	strhlt	r3, [r4, #12]
 8009694:	bd10      	pop	{r4, pc}

08009696 <__swrite>:
 8009696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969a:	461f      	mov	r7, r3
 800969c:	898b      	ldrh	r3, [r1, #12]
 800969e:	05db      	lsls	r3, r3, #23
 80096a0:	4605      	mov	r5, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	4616      	mov	r6, r2
 80096a6:	d505      	bpl.n	80096b4 <__swrite+0x1e>
 80096a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ac:	2302      	movs	r3, #2
 80096ae:	2200      	movs	r2, #0
 80096b0:	f000 f8d0 	bl	8009854 <_lseek_r>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	4632      	mov	r2, r6
 80096c2:	463b      	mov	r3, r7
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ca:	f000 b8f7 	b.w	80098bc <_write_r>

080096ce <__sseek>:
 80096ce:	b510      	push	{r4, lr}
 80096d0:	460c      	mov	r4, r1
 80096d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d6:	f000 f8bd 	bl	8009854 <_lseek_r>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	bf15      	itete	ne
 80096e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096ea:	81a3      	strheq	r3, [r4, #12]
 80096ec:	bf18      	it	ne
 80096ee:	81a3      	strhne	r3, [r4, #12]
 80096f0:	bd10      	pop	{r4, pc}

080096f2 <__sclose>:
 80096f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f6:	f000 b89d 	b.w	8009834 <_close_r>

080096fa <__swbuf_r>:
 80096fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fc:	460e      	mov	r6, r1
 80096fe:	4614      	mov	r4, r2
 8009700:	4605      	mov	r5, r0
 8009702:	b118      	cbz	r0, 800970c <__swbuf_r+0x12>
 8009704:	6a03      	ldr	r3, [r0, #32]
 8009706:	b90b      	cbnz	r3, 800970c <__swbuf_r+0x12>
 8009708:	f7ff ff20 	bl	800954c <__sinit>
 800970c:	69a3      	ldr	r3, [r4, #24]
 800970e:	60a3      	str	r3, [r4, #8]
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	071a      	lsls	r2, r3, #28
 8009714:	d501      	bpl.n	800971a <__swbuf_r+0x20>
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	b943      	cbnz	r3, 800972c <__swbuf_r+0x32>
 800971a:	4621      	mov	r1, r4
 800971c:	4628      	mov	r0, r5
 800971e:	f000 f82b 	bl	8009778 <__swsetup_r>
 8009722:	b118      	cbz	r0, 800972c <__swbuf_r+0x32>
 8009724:	f04f 37ff 	mov.w	r7, #4294967295
 8009728:	4638      	mov	r0, r7
 800972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	6922      	ldr	r2, [r4, #16]
 8009730:	1a98      	subs	r0, r3, r2
 8009732:	6963      	ldr	r3, [r4, #20]
 8009734:	b2f6      	uxtb	r6, r6
 8009736:	4283      	cmp	r3, r0
 8009738:	4637      	mov	r7, r6
 800973a:	dc05      	bgt.n	8009748 <__swbuf_r+0x4e>
 800973c:	4621      	mov	r1, r4
 800973e:	4628      	mov	r0, r5
 8009740:	f000 f9ca 	bl	8009ad8 <_fflush_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	d1ed      	bne.n	8009724 <__swbuf_r+0x2a>
 8009748:	68a3      	ldr	r3, [r4, #8]
 800974a:	3b01      	subs	r3, #1
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	6022      	str	r2, [r4, #0]
 8009754:	701e      	strb	r6, [r3, #0]
 8009756:	6962      	ldr	r2, [r4, #20]
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	429a      	cmp	r2, r3
 800975c:	d004      	beq.n	8009768 <__swbuf_r+0x6e>
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	07db      	lsls	r3, r3, #31
 8009762:	d5e1      	bpl.n	8009728 <__swbuf_r+0x2e>
 8009764:	2e0a      	cmp	r6, #10
 8009766:	d1df      	bne.n	8009728 <__swbuf_r+0x2e>
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f9b4 	bl	8009ad8 <_fflush_r>
 8009770:	2800      	cmp	r0, #0
 8009772:	d0d9      	beq.n	8009728 <__swbuf_r+0x2e>
 8009774:	e7d6      	b.n	8009724 <__swbuf_r+0x2a>
	...

08009778 <__swsetup_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4b29      	ldr	r3, [pc, #164]	@ (8009820 <__swsetup_r+0xa8>)
 800977c:	4605      	mov	r5, r0
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	460c      	mov	r4, r1
 8009782:	b118      	cbz	r0, 800978c <__swsetup_r+0x14>
 8009784:	6a03      	ldr	r3, [r0, #32]
 8009786:	b90b      	cbnz	r3, 800978c <__swsetup_r+0x14>
 8009788:	f7ff fee0 	bl	800954c <__sinit>
 800978c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009790:	0719      	lsls	r1, r3, #28
 8009792:	d422      	bmi.n	80097da <__swsetup_r+0x62>
 8009794:	06da      	lsls	r2, r3, #27
 8009796:	d407      	bmi.n	80097a8 <__swsetup_r+0x30>
 8009798:	2209      	movs	r2, #9
 800979a:	602a      	str	r2, [r5, #0]
 800979c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	e033      	b.n	8009810 <__swsetup_r+0x98>
 80097a8:	0758      	lsls	r0, r3, #29
 80097aa:	d512      	bpl.n	80097d2 <__swsetup_r+0x5a>
 80097ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ae:	b141      	cbz	r1, 80097c2 <__swsetup_r+0x4a>
 80097b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097b4:	4299      	cmp	r1, r3
 80097b6:	d002      	beq.n	80097be <__swsetup_r+0x46>
 80097b8:	4628      	mov	r0, r5
 80097ba:	f000 f8bf 	bl	800993c <_free_r>
 80097be:	2300      	movs	r3, #0
 80097c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	2300      	movs	r3, #0
 80097cc:	6063      	str	r3, [r4, #4]
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f043 0308 	orr.w	r3, r3, #8
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	b94b      	cbnz	r3, 80097f2 <__swsetup_r+0x7a>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097e8:	d003      	beq.n	80097f2 <__swsetup_r+0x7a>
 80097ea:	4621      	mov	r1, r4
 80097ec:	4628      	mov	r0, r5
 80097ee:	f000 f9c1 	bl	8009b74 <__smakebuf_r>
 80097f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f6:	f013 0201 	ands.w	r2, r3, #1
 80097fa:	d00a      	beq.n	8009812 <__swsetup_r+0x9a>
 80097fc:	2200      	movs	r2, #0
 80097fe:	60a2      	str	r2, [r4, #8]
 8009800:	6962      	ldr	r2, [r4, #20]
 8009802:	4252      	negs	r2, r2
 8009804:	61a2      	str	r2, [r4, #24]
 8009806:	6922      	ldr	r2, [r4, #16]
 8009808:	b942      	cbnz	r2, 800981c <__swsetup_r+0xa4>
 800980a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800980e:	d1c5      	bne.n	800979c <__swsetup_r+0x24>
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	0799      	lsls	r1, r3, #30
 8009814:	bf58      	it	pl
 8009816:	6962      	ldrpl	r2, [r4, #20]
 8009818:	60a2      	str	r2, [r4, #8]
 800981a:	e7f4      	b.n	8009806 <__swsetup_r+0x8e>
 800981c:	2000      	movs	r0, #0
 800981e:	e7f7      	b.n	8009810 <__swsetup_r+0x98>
 8009820:	20000038 	.word	0x20000038

08009824 <memset>:
 8009824:	4402      	add	r2, r0
 8009826:	4603      	mov	r3, r0
 8009828:	4293      	cmp	r3, r2
 800982a:	d100      	bne.n	800982e <memset+0xa>
 800982c:	4770      	bx	lr
 800982e:	f803 1b01 	strb.w	r1, [r3], #1
 8009832:	e7f9      	b.n	8009828 <memset+0x4>

08009834 <_close_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4d06      	ldr	r5, [pc, #24]	@ (8009850 <_close_r+0x1c>)
 8009838:	2300      	movs	r3, #0
 800983a:	4604      	mov	r4, r0
 800983c:	4608      	mov	r0, r1
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	f7f7 fa59 	bl	8000cf6 <_close>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_close_r+0x1a>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_close_r+0x1a>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20000aa0 	.word	0x20000aa0

08009854 <_lseek_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	@ (8009874 <_lseek_r+0x20>)
 8009858:	4604      	mov	r4, r0
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f7 fa6e 	bl	8000d44 <_lseek>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_lseek_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_lseek_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20000aa0 	.word	0x20000aa0

08009878 <_read_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d07      	ldr	r5, [pc, #28]	@ (8009898 <_read_r+0x20>)
 800987c:	4604      	mov	r4, r0
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	2200      	movs	r2, #0
 8009884:	602a      	str	r2, [r5, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	f7f7 fa18 	bl	8000cbc <_read>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_read_r+0x1e>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_read_r+0x1e>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20000aa0 	.word	0x20000aa0

0800989c <_sbrk_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d06      	ldr	r5, [pc, #24]	@ (80098b8 <_sbrk_r+0x1c>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7f7 fa5a 	bl	8000d60 <_sbrk>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_sbrk_r+0x1a>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_sbrk_r+0x1a>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	20000aa0 	.word	0x20000aa0

080098bc <_write_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4d07      	ldr	r5, [pc, #28]	@ (80098dc <_write_r+0x20>)
 80098c0:	4604      	mov	r4, r0
 80098c2:	4608      	mov	r0, r1
 80098c4:	4611      	mov	r1, r2
 80098c6:	2200      	movs	r2, #0
 80098c8:	602a      	str	r2, [r5, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	f7f7 f862 	bl	8000994 <_write>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_write_r+0x1e>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_write_r+0x1e>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	20000aa0 	.word	0x20000aa0

080098e0 <__errno>:
 80098e0:	4b01      	ldr	r3, [pc, #4]	@ (80098e8 <__errno+0x8>)
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	20000038 	.word	0x20000038

080098ec <__libc_init_array>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009924 <__libc_init_array+0x38>)
 80098f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009928 <__libc_init_array+0x3c>)
 80098f2:	1b64      	subs	r4, r4, r5
 80098f4:	10a4      	asrs	r4, r4, #2
 80098f6:	2600      	movs	r6, #0
 80098f8:	42a6      	cmp	r6, r4
 80098fa:	d109      	bne.n	8009910 <__libc_init_array+0x24>
 80098fc:	4d0b      	ldr	r5, [pc, #44]	@ (800992c <__libc_init_array+0x40>)
 80098fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009930 <__libc_init_array+0x44>)
 8009900:	f000 f996 	bl	8009c30 <_init>
 8009904:	1b64      	subs	r4, r4, r5
 8009906:	10a4      	asrs	r4, r4, #2
 8009908:	2600      	movs	r6, #0
 800990a:	42a6      	cmp	r6, r4
 800990c:	d105      	bne.n	800991a <__libc_init_array+0x2e>
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	f855 3b04 	ldr.w	r3, [r5], #4
 8009914:	4798      	blx	r3
 8009916:	3601      	adds	r6, #1
 8009918:	e7ee      	b.n	80098f8 <__libc_init_array+0xc>
 800991a:	f855 3b04 	ldr.w	r3, [r5], #4
 800991e:	4798      	blx	r3
 8009920:	3601      	adds	r6, #1
 8009922:	e7f2      	b.n	800990a <__libc_init_array+0x1e>
 8009924:	08009d04 	.word	0x08009d04
 8009928:	08009d04 	.word	0x08009d04
 800992c:	08009d04 	.word	0x08009d04
 8009930:	08009d08 	.word	0x08009d08

08009934 <__retarget_lock_init_recursive>:
 8009934:	4770      	bx	lr

08009936 <__retarget_lock_acquire_recursive>:
 8009936:	4770      	bx	lr

08009938 <__retarget_lock_release_recursive>:
 8009938:	4770      	bx	lr
	...

0800993c <_free_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4605      	mov	r5, r0
 8009940:	2900      	cmp	r1, #0
 8009942:	d041      	beq.n	80099c8 <_free_r+0x8c>
 8009944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009948:	1f0c      	subs	r4, r1, #4
 800994a:	2b00      	cmp	r3, #0
 800994c:	bfb8      	it	lt
 800994e:	18e4      	addlt	r4, r4, r3
 8009950:	f7ff fd64 	bl	800941c <__malloc_lock>
 8009954:	4a1d      	ldr	r2, [pc, #116]	@ (80099cc <_free_r+0x90>)
 8009956:	6813      	ldr	r3, [r2, #0]
 8009958:	b933      	cbnz	r3, 8009968 <_free_r+0x2c>
 800995a:	6063      	str	r3, [r4, #4]
 800995c:	6014      	str	r4, [r2, #0]
 800995e:	4628      	mov	r0, r5
 8009960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009964:	f7ff bd60 	b.w	8009428 <__malloc_unlock>
 8009968:	42a3      	cmp	r3, r4
 800996a:	d908      	bls.n	800997e <_free_r+0x42>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	1821      	adds	r1, r4, r0
 8009970:	428b      	cmp	r3, r1
 8009972:	bf01      	itttt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	1809      	addeq	r1, r1, r0
 800997a:	6021      	streq	r1, [r4, #0]
 800997c:	e7ed      	b.n	800995a <_free_r+0x1e>
 800997e:	461a      	mov	r2, r3
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	b10b      	cbz	r3, 8009988 <_free_r+0x4c>
 8009984:	42a3      	cmp	r3, r4
 8009986:	d9fa      	bls.n	800997e <_free_r+0x42>
 8009988:	6811      	ldr	r1, [r2, #0]
 800998a:	1850      	adds	r0, r2, r1
 800998c:	42a0      	cmp	r0, r4
 800998e:	d10b      	bne.n	80099a8 <_free_r+0x6c>
 8009990:	6820      	ldr	r0, [r4, #0]
 8009992:	4401      	add	r1, r0
 8009994:	1850      	adds	r0, r2, r1
 8009996:	4283      	cmp	r3, r0
 8009998:	6011      	str	r1, [r2, #0]
 800999a:	d1e0      	bne.n	800995e <_free_r+0x22>
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	6053      	str	r3, [r2, #4]
 80099a2:	4408      	add	r0, r1
 80099a4:	6010      	str	r0, [r2, #0]
 80099a6:	e7da      	b.n	800995e <_free_r+0x22>
 80099a8:	d902      	bls.n	80099b0 <_free_r+0x74>
 80099aa:	230c      	movs	r3, #12
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	e7d6      	b.n	800995e <_free_r+0x22>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	1821      	adds	r1, r4, r0
 80099b4:	428b      	cmp	r3, r1
 80099b6:	bf04      	itt	eq
 80099b8:	6819      	ldreq	r1, [r3, #0]
 80099ba:	685b      	ldreq	r3, [r3, #4]
 80099bc:	6063      	str	r3, [r4, #4]
 80099be:	bf04      	itt	eq
 80099c0:	1809      	addeq	r1, r1, r0
 80099c2:	6021      	streq	r1, [r4, #0]
 80099c4:	6054      	str	r4, [r2, #4]
 80099c6:	e7ca      	b.n	800995e <_free_r+0x22>
 80099c8:	bd38      	pop	{r3, r4, r5, pc}
 80099ca:	bf00      	nop
 80099cc:	20000960 	.word	0x20000960

080099d0 <__sflush_r>:
 80099d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d8:	0716      	lsls	r6, r2, #28
 80099da:	4605      	mov	r5, r0
 80099dc:	460c      	mov	r4, r1
 80099de:	d454      	bmi.n	8009a8a <__sflush_r+0xba>
 80099e0:	684b      	ldr	r3, [r1, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dc02      	bgt.n	80099ec <__sflush_r+0x1c>
 80099e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dd48      	ble.n	8009a7e <__sflush_r+0xae>
 80099ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099ee:	2e00      	cmp	r6, #0
 80099f0:	d045      	beq.n	8009a7e <__sflush_r+0xae>
 80099f2:	2300      	movs	r3, #0
 80099f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099f8:	682f      	ldr	r7, [r5, #0]
 80099fa:	6a21      	ldr	r1, [r4, #32]
 80099fc:	602b      	str	r3, [r5, #0]
 80099fe:	d030      	beq.n	8009a62 <__sflush_r+0x92>
 8009a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	0759      	lsls	r1, r3, #29
 8009a06:	d505      	bpl.n	8009a14 <__sflush_r+0x44>
 8009a08:	6863      	ldr	r3, [r4, #4]
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a0e:	b10b      	cbz	r3, 8009a14 <__sflush_r+0x44>
 8009a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a12:	1ad2      	subs	r2, r2, r3
 8009a14:	2300      	movs	r3, #0
 8009a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a18:	6a21      	ldr	r1, [r4, #32]
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b0      	blx	r6
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	d106      	bne.n	8009a32 <__sflush_r+0x62>
 8009a24:	6829      	ldr	r1, [r5, #0]
 8009a26:	291d      	cmp	r1, #29
 8009a28:	d82b      	bhi.n	8009a82 <__sflush_r+0xb2>
 8009a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8009ad4 <__sflush_r+0x104>)
 8009a2c:	410a      	asrs	r2, r1
 8009a2e:	07d6      	lsls	r6, r2, #31
 8009a30:	d427      	bmi.n	8009a82 <__sflush_r+0xb2>
 8009a32:	2200      	movs	r2, #0
 8009a34:	6062      	str	r2, [r4, #4]
 8009a36:	04d9      	lsls	r1, r3, #19
 8009a38:	6922      	ldr	r2, [r4, #16]
 8009a3a:	6022      	str	r2, [r4, #0]
 8009a3c:	d504      	bpl.n	8009a48 <__sflush_r+0x78>
 8009a3e:	1c42      	adds	r2, r0, #1
 8009a40:	d101      	bne.n	8009a46 <__sflush_r+0x76>
 8009a42:	682b      	ldr	r3, [r5, #0]
 8009a44:	b903      	cbnz	r3, 8009a48 <__sflush_r+0x78>
 8009a46:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a4a:	602f      	str	r7, [r5, #0]
 8009a4c:	b1b9      	cbz	r1, 8009a7e <__sflush_r+0xae>
 8009a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a52:	4299      	cmp	r1, r3
 8009a54:	d002      	beq.n	8009a5c <__sflush_r+0x8c>
 8009a56:	4628      	mov	r0, r5
 8009a58:	f7ff ff70 	bl	800993c <_free_r>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a60:	e00d      	b.n	8009a7e <__sflush_r+0xae>
 8009a62:	2301      	movs	r3, #1
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b0      	blx	r6
 8009a68:	4602      	mov	r2, r0
 8009a6a:	1c50      	adds	r0, r2, #1
 8009a6c:	d1c9      	bne.n	8009a02 <__sflush_r+0x32>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0c6      	beq.n	8009a02 <__sflush_r+0x32>
 8009a74:	2b1d      	cmp	r3, #29
 8009a76:	d001      	beq.n	8009a7c <__sflush_r+0xac>
 8009a78:	2b16      	cmp	r3, #22
 8009a7a:	d11e      	bne.n	8009aba <__sflush_r+0xea>
 8009a7c:	602f      	str	r7, [r5, #0]
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e022      	b.n	8009ac8 <__sflush_r+0xf8>
 8009a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a86:	b21b      	sxth	r3, r3
 8009a88:	e01b      	b.n	8009ac2 <__sflush_r+0xf2>
 8009a8a:	690f      	ldr	r7, [r1, #16]
 8009a8c:	2f00      	cmp	r7, #0
 8009a8e:	d0f6      	beq.n	8009a7e <__sflush_r+0xae>
 8009a90:	0793      	lsls	r3, r2, #30
 8009a92:	680e      	ldr	r6, [r1, #0]
 8009a94:	bf08      	it	eq
 8009a96:	694b      	ldreq	r3, [r1, #20]
 8009a98:	600f      	str	r7, [r1, #0]
 8009a9a:	bf18      	it	ne
 8009a9c:	2300      	movne	r3, #0
 8009a9e:	eba6 0807 	sub.w	r8, r6, r7
 8009aa2:	608b      	str	r3, [r1, #8]
 8009aa4:	f1b8 0f00 	cmp.w	r8, #0
 8009aa8:	dde9      	ble.n	8009a7e <__sflush_r+0xae>
 8009aaa:	6a21      	ldr	r1, [r4, #32]
 8009aac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009aae:	4643      	mov	r3, r8
 8009ab0:	463a      	mov	r2, r7
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b0      	blx	r6
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	dc08      	bgt.n	8009acc <__sflush_r+0xfc>
 8009aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	4407      	add	r7, r0
 8009ace:	eba8 0800 	sub.w	r8, r8, r0
 8009ad2:	e7e7      	b.n	8009aa4 <__sflush_r+0xd4>
 8009ad4:	dfbffffe 	.word	0xdfbffffe

08009ad8 <_fflush_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	690b      	ldr	r3, [r1, #16]
 8009adc:	4605      	mov	r5, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	b913      	cbnz	r3, 8009ae8 <_fflush_r+0x10>
 8009ae2:	2500      	movs	r5, #0
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	b118      	cbz	r0, 8009af2 <_fflush_r+0x1a>
 8009aea:	6a03      	ldr	r3, [r0, #32]
 8009aec:	b90b      	cbnz	r3, 8009af2 <_fflush_r+0x1a>
 8009aee:	f7ff fd2d 	bl	800954c <__sinit>
 8009af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0f3      	beq.n	8009ae2 <_fflush_r+0xa>
 8009afa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009afc:	07d0      	lsls	r0, r2, #31
 8009afe:	d404      	bmi.n	8009b0a <_fflush_r+0x32>
 8009b00:	0599      	lsls	r1, r3, #22
 8009b02:	d402      	bmi.n	8009b0a <_fflush_r+0x32>
 8009b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b06:	f7ff ff16 	bl	8009936 <__retarget_lock_acquire_recursive>
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	f7ff ff5f 	bl	80099d0 <__sflush_r>
 8009b12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b14:	07da      	lsls	r2, r3, #31
 8009b16:	4605      	mov	r5, r0
 8009b18:	d4e4      	bmi.n	8009ae4 <_fflush_r+0xc>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	059b      	lsls	r3, r3, #22
 8009b1e:	d4e1      	bmi.n	8009ae4 <_fflush_r+0xc>
 8009b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b22:	f7ff ff09 	bl	8009938 <__retarget_lock_release_recursive>
 8009b26:	e7dd      	b.n	8009ae4 <_fflush_r+0xc>

08009b28 <__swhatbuf_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	2900      	cmp	r1, #0
 8009b32:	b096      	sub	sp, #88	@ 0x58
 8009b34:	4615      	mov	r5, r2
 8009b36:	461e      	mov	r6, r3
 8009b38:	da0d      	bge.n	8009b56 <__swhatbuf_r+0x2e>
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b40:	f04f 0100 	mov.w	r1, #0
 8009b44:	bf14      	ite	ne
 8009b46:	2340      	movne	r3, #64	@ 0x40
 8009b48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	6031      	str	r1, [r6, #0]
 8009b50:	602b      	str	r3, [r5, #0]
 8009b52:	b016      	add	sp, #88	@ 0x58
 8009b54:	bd70      	pop	{r4, r5, r6, pc}
 8009b56:	466a      	mov	r2, sp
 8009b58:	f000 f848 	bl	8009bec <_fstat_r>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	dbec      	blt.n	8009b3a <__swhatbuf_r+0x12>
 8009b60:	9901      	ldr	r1, [sp, #4]
 8009b62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b6a:	4259      	negs	r1, r3
 8009b6c:	4159      	adcs	r1, r3
 8009b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b72:	e7eb      	b.n	8009b4c <__swhatbuf_r+0x24>

08009b74 <__smakebuf_r>:
 8009b74:	898b      	ldrh	r3, [r1, #12]
 8009b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b78:	079d      	lsls	r5, r3, #30
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	d507      	bpl.n	8009b90 <__smakebuf_r+0x1c>
 8009b80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	6123      	str	r3, [r4, #16]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	6163      	str	r3, [r4, #20]
 8009b8c:	b003      	add	sp, #12
 8009b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b90:	ab01      	add	r3, sp, #4
 8009b92:	466a      	mov	r2, sp
 8009b94:	f7ff ffc8 	bl	8009b28 <__swhatbuf_r>
 8009b98:	9f00      	ldr	r7, [sp, #0]
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7ff fbbc 	bl	800931c <_malloc_r>
 8009ba4:	b948      	cbnz	r0, 8009bba <__smakebuf_r+0x46>
 8009ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009baa:	059a      	lsls	r2, r3, #22
 8009bac:	d4ee      	bmi.n	8009b8c <__smakebuf_r+0x18>
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	f043 0302 	orr.w	r3, r3, #2
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	e7e2      	b.n	8009b80 <__smakebuf_r+0xc>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	6020      	str	r0, [r4, #0]
 8009bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bca:	b15b      	cbz	r3, 8009be4 <__smakebuf_r+0x70>
 8009bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 f81d 	bl	8009c10 <_isatty_r>
 8009bd6:	b128      	cbz	r0, 8009be4 <__smakebuf_r+0x70>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	431d      	orrs	r5, r3
 8009be8:	81a5      	strh	r5, [r4, #12]
 8009bea:	e7cf      	b.n	8009b8c <__smakebuf_r+0x18>

08009bec <_fstat_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d07      	ldr	r5, [pc, #28]	@ (8009c0c <_fstat_r+0x20>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	f7f7 f888 	bl	8000d0e <_fstat>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	d102      	bne.n	8009c08 <_fstat_r+0x1c>
 8009c02:	682b      	ldr	r3, [r5, #0]
 8009c04:	b103      	cbz	r3, 8009c08 <_fstat_r+0x1c>
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000aa0 	.word	0x20000aa0

08009c10 <_isatty_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d06      	ldr	r5, [pc, #24]	@ (8009c2c <_isatty_r+0x1c>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7f7 f887 	bl	8000d2e <_isatty>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_isatty_r+0x1a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_isatty_r+0x1a>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	20000aa0 	.word	0x20000aa0

08009c30 <_init>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr

08009c3c <_fini>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr
